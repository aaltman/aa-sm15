<b> : </b>Solutions</H2><SPAN class=mw-editsection style="FONT-SIZE: small; FONT-FAMILY: sans-serif; VERTICAL-ALIGN: baseline; FONT-WEIGHT: normal; MARGIN-LEFT: 1em; LINE-HEIGHT: 0; MARGIN-RIGHT: 0px; user-select: none"><SPAN class=mw-editsection-bracket style="COLOR: ; MARGIN-RIGHT: 0.25em">[</SPAN><A title="Edit section: Solutions" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; WHITE-SPACE: nowrap; COLOR: ; border-radius: 2px; overflow-wrap: break-word" href="https://en.wikipedia.org/w/index.php?title=Priority_inversion&amp;action=edit&amp;section=3"><SPAN>edit</SPAN></A><SPAN class=mw-editsection-bracket style="COLOR: ; MARGIN-LEFT: 0.25em">]</SPAN></SPAN></DIV>
<P style="FONT-SIZE: 16px; FONT-FAMILY: sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(32,33,34); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; MARGIN: 0.5em 0px 1em; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial">The existence of this problem has been known since the 1970s. Lampson and Redell<SUP id=cite_ref-Lampson79_3-0 class=reference style="FONT-SIZE: 12px; WHITE-SPACE: nowrap; FONT-WEIGHT: normal; FONT-STYLE: normal; LINE-HEIGHT: 1"><A style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: ; border-radius: 2px; overflow-wrap: break-word" href="https://en.wikipedia.org/wiki/Priority_inversion#cite_note-Lampson79-3"><FONT style="BACKGROUND-COLOR: #ffffff" face=Arial>[3]</FONT></A></SUP><SPAN>&nbsp;</SPAN>published one of the first papers to point out the priority inversion problem. Systems such as the UNIX kernel were already addressing the problem with the splx() primitive. There is no foolproof method to predict the situation. There are however many existing solutions, of which the most common ones are:</P>
<DL style="FONT-SIZE: 16px; MARGIN-BOTTOM: 0.5em; FONT-FAMILY: sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; MARGIN-TOP: -0.5em; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(32,33,34); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial">
<DT style="MARGIN-BOTTOM: 0.1em; FONT-WEIGHT: bold">Disabling all interrupts to protect critical sections</DT>
<DD style="MARGIN-BOTTOM: 0.1em; MARGIN-LEFT: 1.6em; MARGIN-RIGHT: 0px; margin-inline: 1.6em 0px">When disabling interrupts is used to prevent priority inversion, there are only two priorities:<SPAN>&nbsp;</SPAN><I>preemptible</I>, and<SPAN>&nbsp;</SPAN><I>interrupts disabled.</I><SPAN>&nbsp;</SPAN>With no third priority, inversion is impossible. Since there's only one piece of lock data (the interrupt-enable bit), misordering locking is impossible, and so deadlocks cannot occur. Since the critical regions always run to completion, hangs do not occur. Note that this only works if all interrupts are disabled. If only a particular hardware device's interrupt is disabled, priority inversion is reintroduced by the hardware's prioritization of interrupts. In early versions of UNIX, a series of primitives named splx(0) ... splx(7) disabled all interrupts up through the given priority. By properly choosing the highest priority of any interrupt that ever entered the critical section, the priority inversion problem could be solved without locking out all of the interrupts. Ceilings were assigned in<SPAN>&nbsp;</SPAN><A title="Rate-monotonic scheduling" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: ; border-radius: 2px; overflow-wrap: break-word" href="https://en.wikipedia.org/wiki/Rate-monotonic_scheduling">rate-monotonic</A><SPAN>&nbsp;</SPAN>order, i.e. the slower devices had lower priorities.</DD>
<DD style="MARGIN-BOTTOM: 0.1em; MARGIN-LEFT: 1.6em; MARGIN-RIGHT: 0px; margin-inline: 1.6em 0px">In multiple CPU systems, a simple variation, "single shared-flag locking" is used. This scheme provides a single flag in shared memory that is used by all CPUs to lock all inter-processor critical sections with a<SPAN>&nbsp;</SPAN><A title=Busy-wait class=mw-redirect style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: ; border-radius: 2px; overflow-wrap: break-word" href="https://en.wikipedia.org/wiki/Busy-wait">busy-wait</A>. Interprocessor communications are expensive and slow on most multiple CPU systems. Therefore, most such systems are designed to minimize shared resources. As a result, this scheme actually works well on many practical systems. These methods are widely used in simple<SPAN>&nbsp;</SPAN><A title="Embedded system" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: ; border-radius: 2px; overflow-wrap: break-word" href="https://en.wikipedia.org/wiki/Embedded_system">embedded systems</A>, where they are prized for their reliability, simplicity and low resource use. These schemes also require clever programming to keep the critical sections very brief. Many software engineers consider them impractical in general-purpose computers.<SUP class="noprint Inline-Template Template-Fact" style="FONT-SIZE: 12px; WHITE-SPACE: nowrap; LINE-HEIGHT: 1">[<I><A title="Wikipedia:Citation needed" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: ; border-radius: 2px; overflow-wrap: break-word" href="https://en.wikipedia.org/wiki/Wikipedia:Citation_needed"><SPAN title="This claim needs references to reliable sources. (October 2017)">citation needed</SPAN></A></I>]</SUP></DD></DL>
<DL style="FONT-SIZE: 16px; MARGIN-BOTTOM: 0.5em; FONT-FAMILY: sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; MARGIN-TOP: 0.2em; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(32,33,34); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial">
<DT style="MARGIN-BOTTOM: 0.1em; FONT-WEIGHT: bold">Priority ceiling protocol</DT>
<DD style="MARGIN-BOTTOM: 0.1em; MARGIN-LEFT: 1.6em; MARGIN-RIGHT: 0px; margin-inline: 1.6em 0px">With<SPAN>&nbsp;</SPAN><A title="Priority ceiling protocol" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: ; border-radius: 2px; overflow-wrap: break-word" href="https://en.wikipedia.org/wiki/Priority_ceiling_protocol">priority ceiling protocol</A>, the shared<SPAN>&nbsp;</SPAN><A title="Mutual exclusion" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: ; border-radius: 2px; overflow-wrap: break-word" href="https://en.wikipedia.org/wiki/Mutual_exclusion">mutex</A><SPAN>&nbsp;</SPAN>process (that runs the operating system code) has a characteristic (high) priority of its own, which is assigned to the task of locking the mutex. This works well, provided the other high-priority task(s) that tries to access the mutex does not have a priority higher than the ceiling priority.</DD></DL>
<DL style="FONT-SIZE: 16px; MARGIN-BOTTOM: 0.5em; FONT-FAMILY: sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; MARGIN-TOP: 0.2em; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(32,33,34); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial">
<DT style="MARGIN-BOTTOM: 0.1em; FONT-WEIGHT: bold">Priority inheritance</DT>
<DD style="MARGIN-BOTTOM: 0.1em; MARGIN-LEFT: 1.6em; MARGIN-RIGHT: 0px; margin-inline: 1.6em 0px">Under the policy of<SPAN>&nbsp;</SPAN><A title="Priority inheritance" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: ; border-radius: 2px; overflow-wrap: break-word" href="https://en.wikipedia.org/wiki/Priority_inheritance">priority inheritance</A>, whenever a high-priority task has to wait for some resource shared with an executing low-priority task, the low-priority task is temporarily assigned the priority of the highest waiting priority task for the duration of its own use of the shared resource, thus keeping medium priority tasks from pre-empting the (originally) low priority task, and thereby affecting the waiting high priority task as well. Once the resource is released, the low-priority task continues at its original priority level.</DD></DL>
<DL style="FONT-SIZE: 16px; MARGIN-BOTTOM: 0.5em; FONT-FAMILY: sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; MARGIN-TOP: 0.2em; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(32,33,34); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial">
<DT style="MARGIN-BOTTOM: 0.1em; FONT-WEIGHT: bold">Random boosting</DT>
<DD style="MARGIN-BOTTOM: 0.1em; MARGIN-LEFT: 1.6em; MARGIN-RIGHT: 0px; margin-inline: 1.6em 0px">Ready tasks holding locks are<SPAN>&nbsp;</SPAN><A title="Random boosting" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: ; border-radius: 2px; overflow-wrap: break-word" href="https://en.wikipedia.org/wiki/Random_boosting">randomly boosted</A><SPAN>&nbsp;</SPAN>in priority until they exit the critical section. This solution is used in<SPAN>&nbsp;</SPAN><A title="Microsoft Windows" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: ; border-radius: 2px; overflow-wrap: break-word" href="https://en.wikipedia.org/wiki/Microsoft_Windows">Microsoft Windows</A>.<SUP id=cite_ref-4 class=reference style="FONT-SIZE: 12px; WHITE-SPACE: nowrap; FONT-WEIGHT: normal; FONT-STYLE: normal; LINE-HEIGHT: 1"><A style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: ; border-radius: 2px; overflow-wrap: break-word" href="https://en.wikipedia.org/wiki/Priority_inversion#cite_note-4"><FONT style="BACKGROUND-COLOR: #ffffff" face=Arial>[4]</FONT></A></SUP></DD></DL>
<DL style="FONT-SIZE: 16px; MARGIN-BOTTOM: 0.5em; FONT-FAMILY: sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; MARGIN-TOP: 0.2em; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(32,33,34); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial">
<DT style="MARGIN-BOTTOM: 0.1em; FONT-WEIGHT: bold">Avoid blocking</DT>
<DD style="MARGIN-BOTTOM: 0.1em; MARGIN-LEFT: 1.6em; MARGIN-RIGHT: 0px; margin-inline: 1.6em 0px">Because priority inversion involves a low-priority task blocking a high-priority task, one way to avoid priority inversion is to avoid blocking, for example by using<SPAN>&nbsp;</SPAN><A title="Non-blocking algorithm" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: ; border-radius: 2px; overflow-wrap: break-word" href="https://en.wikipedia.org/wiki/Non-blocking_algorithm">non-blocking algorithms</A><SPAN>&nbsp;</SPAN>such as<SPAN>&nbsp;</SPAN><A title=Read-copy-update style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: ; border-radius: 2px; overflow-wrap: break-word" href="https://en.wikipedia.org/wiki/Read-copy-update">read-copy-update</A>.</DD></DL>