<HEAD></HEAD>
<BODY>
<P style="FONT-SIZE: 16px; FONT-FAMILY: sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(32,33,34); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; MARGIN: 0.5em 0px 1em; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial"><FONT class=extract>In<SPAN>&nbsp;</SPAN></FONT><A title="Concurrent programming" class=mw-redirect style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: ; border-radius: 2px; overflow-wrap: break-word" href="https://en.wikipedia.org/wiki/Concurrent_programming"><FONT class=extract>concurrent programming</FONT></A><FONT class=extract>, an operation (or set of operations) is<SPAN>&nbsp;</SPAN><B>linearizable</B><SPAN>&nbsp;</SPAN>if it consists of an ordered list of<SPAN>&nbsp;</SPAN></FONT><A title="Execution (computing)" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: ; border-radius: 2px; overflow-wrap: break-word" href="https://en.wikipedia.org/wiki/Execution_(computing)"><FONT class=extract>invocation</FONT></A><FONT class=extract><SPAN>&nbsp;</SPAN>and response<SPAN>&nbsp;</SPAN></FONT><A title="Event (computing)" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: ; border-radius: 2px; overflow-wrap: break-word" href="https://en.wikipedia.org/wiki/Event_(computing)"><FONT class=extract>events</FONT></A><FONT class=extract>, that may be extended by adding response events such that:</FONT></P>
<OL style="FONT-SIZE: 16px; FONT-FAMILY: sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(32,33,34); PADDING-BOTTOM: 0px; FONT-STYLE: normal; PADDING-TOP: 0px; PADDING-LEFT: 0px; LIST-STYLE-IMAGE: none; ORPHANS: 2; WIDOWS: 2; MARGIN: -0.5em 0px 0px 3.2em; LETTER-SPACING: normal; PADDING-RIGHT: 0px; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial; margin-inline: 3.2em 0px">
<LI style="MARGIN-BOTTOM: 0.1em"><FONT class=extract>The extended list can be re-expressed as a sequential history (is<SPAN>&nbsp;</SPAN></FONT><A title=Serializability class=mw-redirect style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: ; border-radius: 2px; overflow-wrap: break-word" href="https://en.wikipedia.org/wiki/Serializability"><FONT class=extract>serializable</FONT></A><FONT class=extract>). </FONT>
<LI style="MARGIN-BOTTOM: 0.1em"><FONT class=extract>That sequential history is a subset of the original unextended list.</FONT></LI></OL>
<P style="FONT-SIZE: 16px; FONT-FAMILY: sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(32,33,34); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; MARGIN: 0.5em 0px 1em; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial"><FONT class=extract>Informally, this means that the unmodified list of events is linearizable<SPAN>&nbsp;</SPAN></FONT><A title="If and only if" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: ; border-radius: 2px; overflow-wrap: break-word" href="https://en.wikipedia.org/wiki/If_and_only_if"><FONT class=extract>if and only if</FONT></A><FONT class=extract><SPAN>&nbsp;</SPAN>its invocations were serializable, but some of the responses of the serial schedule have yet to return.<SUP id=cite_ref-:0_1-0 class=reference style="FONT-SIZE: 12px; WHITE-SPACE: nowrap; FONT-WEIGHT: normal; FONT-STYLE: normal; LINE-HEIGHT: 1"><A style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: ; border-radius: 2px; overflow-wrap: break-word" href="https://en.wikipedia.org/wiki/Linearizability#cite_note-:0-1"><FONT face=Arial>[1]</FONT></A></SUP></FONT></P>
<P style="FONT-SIZE: 16px; FONT-FAMILY: sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(32,33,34); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; MARGIN: 0.5em 0px 1em; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial"><FONT class=extract>In a concurrent system, processes can access a shared<SPAN>&nbsp;</SPAN></FONT><A title="Object (computer science)" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: ; border-radius: 2px; overflow-wrap: break-word" href="https://en.wikipedia.org/wiki/Object_(computer_science)"><FONT class=extract>object</FONT></A><FONT class=extract><SPAN>&nbsp;</SPAN>at the same time. Because multiple processes are accessing a single object, a situation may arise in which while one process is accessing the object, another process changes its contents. Making a system linearizable is one solution to this problem. In a linearizable system, although operations overlap on a shared object, each operation appears to take place instantaneously. Linearizability is a strong correctness condition, which constrains what outputs are possible when an object is accessed by multiple processes concurrently. It is a safety property which ensures that operations do not complete unexpectedly or unpredictably. If a system is linearizable it allows a programmer to reason about the system.<SUP id=cite_ref-2 class=reference style="FONT-SIZE: 12px; WHITE-SPACE: nowrap; FONT-WEIGHT: normal; FONT-STYLE: normal; LINE-HEIGHT: 1"><A style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: ; border-radius: 2px; overflow-wrap: break-word" href="https://en.wikipedia.org/wiki/Linearizability#cite_note-2"><FONT face=Arial>[2]</FONT></A></SUP></FONT></P>
<DIV class="mw-heading mw-heading2" style='FONT-SIZE: 1.5em; OVERFLOW: hidden; FONT-FAMILY: "Linux Libertine", Georgia, Times, "Source Serif Pro", serif; WHITE-SPACE: normal; WORD-SPACING: 0px; BORDER-BOTTOM: 1px solid; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: ; PADDING-BOTTOM: 0.17em; FONT-STYLE: normal; PADDING-TOP: 0.5em; ORPHANS: 2; WIDOWS: 2; MARGIN: 0.25em 0px; LETTER-SPACING: normal; LINE-HEIGHT: 1.375; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial'><FONT class=extract>
<H2 id=History_of_linearizability style='OVERFLOW: hidden; BORDER-TOP: 0px; FONT-FAMILY: "Linux Libertine", Georgia, Times, "Source Serif Pro", serif; BORDER-RIGHT: 0px; BORDER-BOTTOM: 0px; COLOR: ; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; BORDER-LEFT: 0px; MARGIN: 0px 0px 0.25em; DISPLAY: inline; LINE-HEIGHT: 1.375; PADDING-RIGHT: 0px; font-stretch: inherit; font-optical-sizing: inherit; font-size-adjust: inherit; font-kerning: inherit; font-feature-settings: inherit; font-variation-settings: inherit'>History of linearizability</H2><SPAN class=mw-editsection style="FONT-SIZE: small; FONT-FAMILY: sans-serif; VERTICAL-ALIGN: baseline; FONT-WEIGHT: normal; MARGIN-LEFT: 1em; LINE-HEIGHT: 0; MARGIN-RIGHT: 0px; user-select: none"><SPAN class=mw-editsection-bracket style="COLOR: ; MARGIN-RIGHT: 0.25em">[</SPAN><A title="Edit section: History of linearizability" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; WHITE-SPACE: nowrap; COLOR: ; border-radius: 2px; overflow-wrap: break-word" href="https://en.wikipedia.org/w/index.php?title=Linearizability&amp;action=edit&amp;section=1"><SPAN>edit</SPAN></A><SPAN class=mw-editsection-bracket style="COLOR: ; MARGIN-LEFT: 0.25em">]</SPAN></SPAN></FONT></DIV>
<P style="FONT-SIZE: 16px; FONT-FAMILY: sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(32,33,34); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; MARGIN: 0.5em 0px 1em; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial"><FONT class=extract>Linearizability was first introduced as a<SPAN>&nbsp;</SPAN></FONT><A title="Consistency model" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: ; border-radius: 2px; overflow-wrap: break-word" href="https://en.wikipedia.org/wiki/Consistency_model"><FONT class=extract>consistency model</FONT></A><FONT class=extract><SPAN>&nbsp;</SPAN>by<SPAN>&nbsp;</SPAN></FONT><A title="Maurice Herlihy" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: ; border-radius: 2px; overflow-wrap: break-word" href="https://en.wikipedia.org/wiki/Maurice_Herlihy"><FONT class=extract>Herlihy</FONT></A><FONT class=extract><SPAN>&nbsp;</SPAN>and<SPAN>&nbsp;</SPAN></FONT><A title="Jeannette Wing" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: ; border-radius: 2px; overflow-wrap: break-word" href="https://en.wikipedia.org/wiki/Jeannette_Wing"><FONT class=extract>Wing</FONT></A><FONT class=extract><SPAN>&nbsp;</SPAN>in 1987. It encompassed more restrictive definitions of atomic, such as "an atomic operation is one which cannot be (or is not) interrupted by concurrent operations", which are usually vague about when an operation is considered to begin and end.</FONT></P>
<P style="FONT-SIZE: 16px; FONT-FAMILY: sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(32,33,34); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; MARGIN: 0.5em 0px 1em; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial"><FONT class=extract>An atomic object can be understood immediately and completely from its sequential definition, as a set of operations run in parallel which always appear to occur one after the other; no inconsistencies may emerge. Specifically, linearizability guarantees that the<SPAN>&nbsp;</SPAN></FONT><A title="Invariant (computer science)" class=mw-redirect style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: ; border-radius: 2px; overflow-wrap: break-word" href="https://en.wikipedia.org/wiki/Invariant_(computer_science)"><FONT class=extract>invariants</FONT></A><FONT class=extract><SPAN>&nbsp;</SPAN>of a system are<SPAN>&nbsp;</SPAN><I>observed</I><SPAN>&nbsp;</SPAN>and<SPAN>&nbsp;</SPAN><I>preserved</I><SPAN>&nbsp;</SPAN>by all operations: if all operations individually preserve an invariant, the system as a whole will.</FONT></P>
<DIV class="mw-heading mw-heading2" style='FONT-SIZE: 1.5em; OVERFLOW: hidden; FONT-FAMILY: "Linux Libertine", Georgia, Times, "Source Serif Pro", serif; WHITE-SPACE: normal; WORD-SPACING: 0px; BORDER-BOTTOM: 1px solid; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: ; PADDING-BOTTOM: 0.17em; FONT-STYLE: normal; PADDING-TOP: 0.5em; ORPHANS: 2; WIDOWS: 2; MARGIN: 0.25em 0px; LETTER-SPACING: normal; LINE-HEIGHT: 1.375; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial'><FONT class=extract>
<H2 id=Definition_of_linearizability style='OVERFLOW: hidden; BORDER-TOP: 0px; FONT-FAMILY: "Linux Libertine", Georgia, Times, "Source Serif Pro", serif; BORDER-RIGHT: 0px; BORDER-BOTTOM: 0px; COLOR: ; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; BORDER-LEFT: 0px; MARGIN: 0px 0px 0.25em; DISPLAY: inline; LINE-HEIGHT: 1.375; PADDING-RIGHT: 0px; font-stretch: inherit; font-optical-sizing: inherit; font-size-adjust: inherit; font-kerning: inherit; font-feature-settings: inherit; font-variation-settings: inherit'>Definition of linearizability</H2><SPAN class=mw-editsection style="FONT-SIZE: small; FONT-FAMILY: sans-serif; VERTICAL-ALIGN: baseline; FONT-WEIGHT: normal; MARGIN-LEFT: 1em; LINE-HEIGHT: 0; MARGIN-RIGHT: 0px; user-select: none"><SPAN class=mw-editsection-bracket style="COLOR: ; MARGIN-RIGHT: 0.25em">[</SPAN><A title="Edit section: Definition of linearizability" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; WHITE-SPACE: nowrap; COLOR: ; border-radius: 2px; overflow-wrap: break-word" href="https://en.wikipedia.org/w/index.php?title=Linearizability&amp;action=edit&amp;section=2"><SPAN>edit</SPAN></A><SPAN class=mw-editsection-bracket style="COLOR: ; MARGIN-LEFT: 0.25em">]</SPAN></SPAN></FONT></DIV>
<P style="FONT-SIZE: 16px; FONT-FAMILY: sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(32,33,34); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; MARGIN: 0.5em 0px 1em; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial"><FONT class=extract>A concurrent system consists of a collection of processes communicating through shared data structures or objects. Linearizability is important in these concurrent systems where objects may be accessed by multiple processes at the same time and a programmer needs to be able to reason about the expected results. An execution of a concurrent system results in a<SPAN>&nbsp;</SPAN><I>history</I>, an ordered sequence of completed operations.</FONT></P>
<P style="FONT-SIZE: 16px; FONT-FAMILY: sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(32,33,34); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; MARGIN: 0.5em 0px 1em; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial"><FONT class=extract>A<SPAN>&nbsp;</SPAN><I>history</I><SPAN>&nbsp;</SPAN>is a sequence of<SPAN>&nbsp;</SPAN><I>invocations</I><SPAN>&nbsp;</SPAN>and<SPAN>&nbsp;</SPAN><I>responses</I><SPAN>&nbsp;</SPAN>made of an object by a set of<SPAN>&nbsp;</SPAN></FONT><A title="Thread (computer science)" class=mw-redirect style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: ; border-radius: 2px; overflow-wrap: break-word" href="https://en.wikipedia.org/wiki/Thread_(computer_science)"><FONT class=extract>threads</FONT></A><FONT class=extract><SPAN>&nbsp;</SPAN>or processes. An invocation can be thought of as the start of an operation, and the response being the signaled end of that operation. Each invocation of a function will have a subsequent response. This can be used to model any use of an object. Suppose, for example, that two threads, A and B, both attempt to grab a lock, backing off if it's already taken. This would be modeled as both threads invoking the lock operation, then both threads receiving a response, one successful, one not.</FONT></P>
<TABLE style="FONT-SIZE: 16px; FONT-FAMILY: sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; MARGIN-TOP: -0.5em; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(32,33,34); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial" cellSpacing=0 border=1>
<TBODY>
<TR>
<TD><FONT class=extract>A invokes<SPAN>&nbsp;</SPAN><I>lock</I></FONT></TD>
<TD><FONT class=extract>B invokes<SPAN>&nbsp;</SPAN><I>lock</I></FONT></TD>
<TD><FONT class=extract>A gets "failed" response</FONT></TD>
<TD><FONT class=extract>B gets "successful" response</FONT></TD></TR></TBODY></TABLE>
<P style="FONT-SIZE: 16px; FONT-FAMILY: sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(32,33,34); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; MARGIN: 0.5em 0px 1em; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial"><FONT class=extract>A<SPAN>&nbsp;</SPAN><I>sequential</I><SPAN>&nbsp;</SPAN>history is one in which all invocations have immediate responses; that is the invocation and response are considered to take place instantaneously. A sequential history should be trivial to reason about, as it has no real concurrency; the previous example was not sequential, and thus is hard to reason about. This is where linearizability comes in.</FONT></P>
<P style="FONT-SIZE: 16px; FONT-FAMILY: sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(32,33,34); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; MARGIN: 0.5em 0px 1em; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial"><FONT class=extract>A history is<SPAN>&nbsp;</SPAN><I>linearizable</I><SPAN>&nbsp;</SPAN>if there is a linear order<SPAN>&nbsp;</SPAN></FONT><SPAN class=mwe-math-element><SPAN class="mwe-math-mathml-inline mwe-math-mathml-a11y" style="FONT-SIZE: 18px; OVERFLOW: hidden; CLIP: rect(1px 1px 1px 1px); HEIGHT: 1px; WIDTH: 1px; POSITION: absolute; DISPLAY: none; opacity: 0"><?XML:NAMESPACE PREFIX = "[default] http://www.w3.org/1998/Math/MathML" NS = "http://www.w3.org/1998/Math/MathML" /><math xmlns="http://www.w3.org/1998/Math/MathML" alttext="{\displaystyle \sigma }"><semantics><mrow class=MJX-TeXAtom-ORD><mstyle displaystyle="true" scriptlevel="0"><mi><FONT class=extract>&#963;</FONT></mi></mstyle></mrow></semantics></math></SPAN><FONT class=extract><IMG aria-hidden=true class="mwe-math-fallback-image-inline mw-invert skin-invert" style="BORDER-TOP: 0px; HEIGHT: 1.67ex; BORDER-RIGHT: 0px; WIDTH: 1.33ex; VERTICAL-ALIGN: -0.33ex; BORDER-BOTTOM: 0px; BORDER-LEFT: 0px; MARGIN: 0px; DISPLAY: inline-block; --color-base: #202122; --color-base--hover: #404244; --color-emphasized: #000; --color-subtle: #54595d; --color-placeholder: #72777d; --color-disabled: #72777d; --color-inverted: #fff; --color-inverted-fixed: #fff; --color-progressive: #36c; --color-progressive--hover: #447ff5; --color-progressive--active: #2a4b8d; --color-progressive--focus: #36c; --color-destructive: #d73333; --color-destructive--hover: #ff4242; --color-destructive--active: #b32424; --color-destructive--focus: #36c; --color-visited: #6b4ba1; --color-destructive--visited: #a55858; --color-error: #d73333; --color-warning: #edab00; --color-success: #14866d; --color-notice: #202122; --color-content-added: #006400; --color-content-removed: #8b0000; --filter-invert-icon: 0; --filter-invert-primary-button-icon: 1; --box-shadow-color-base: #000; --box-shadow-color-progressive--active: #2a4b8d; --box-shadow-color-progressive--focus: #36c; --box-shadow-color-progressive-selected: #36c; --box-shadow-color-progressive-selected--hover: #447ff5; --box-shadow-color-progressive-selected--active: #2a4b8d; --box-shadow-color-destructive--focus: #36c; --box-shadow-color-inverted: #fff; --box-shadow-color-transparent: transparent; --background-color-interactive: #eaecf0; --background-color-interactive-subtle: #f8f9fa; --background-color-disabled: #c8ccd1; --background-color-disabled-subtle: #eaecf0; --background-color-progressive: #36c; --background-color-progressive--hover: #447ff5; --background-color-progressive--active: #2a4b8d; --background-color-progressive--focus: #36c; --background-color-progressive-subtle: #eaf3ff; --background-color-destructive: #d73333; --background-color-destructive--hover: #ff4242; --background-color-destructive--active: #b32424; --background-color-destructive--focus: #36c; --background-color-destructive-subtle: #fee7e6; --background-color-error: #d73333; --background-color-error--hover: #ff4242; --background-color-error--active: #b32424; --background-color-error-subtle: #fee7e6; --background-color-warning-subtle: #fef6e7; --background-color-success-subtle: #d5fdf4; --background-color-notice-subtle: #eaecf0; --background-color-content-added: #a3d3ff; --background-color-content-removed: #ffe49c; --background-color-backdrop-light: rgba(255,255,255,0.65); --background-color-backdrop-dark: rgba(0,0,0,0.65); --background-color-base: #fff; --background-color-base-fixed: #fff; --background-color-neutral: #eaecf0; --background-color-neutral-subtle: #f8f9fa; --background-color-transparent: transparent; --background-color-inverted: #101418; --background-color-button-quiet--hover: rgba(0,24,73,0.027); --background-color-button-quiet--active: rgba(0,24,73,0.082); --background-color-input-binary--checked: #36c; --background-color-tab-list-item-framed--hover: rgba(255,255,255,0.3); --background-color-tab-list-item-framed--active: rgba(255,255,255,0.65); --opacity-icon-base: 0.87; --opacity-icon-base--hover: 0.74; --opacity-icon-base--selected: 1; --opacity-icon-base--disabled: 0.51; --opacity-icon-placeholder: 0.51; --opacity-icon-subtle: 0.67; --border-color-base: #a2a9b1; --border-color-interactive: #72777d; --border-color-disabled: #c8ccd1; --border-color-subtle: #c8ccd1; --border-color-muted: #eaecf0; --border-color-inverted: #fff; --border-color-progressive: #36c; --border-color-progressive--hover: #447ff5; --border-color-progressive--active: #2a4b8d; --border-color-progressive--focus: #36c; --border-color-destructive: #d73333; --border-color-destructive--hover: #ff4242; --border-color-destructive--active: #b32424; --border-color-destructive--focus: #36c; --border-color-error: #b32424; --border-color-error--hover: #ff4242; --border-color-warning: #a66200; --border-color-success: #096450; --border-color-notice: #54595d; --border-color-content-added: #a3d3ff; --border-color-content-removed: #ffe49c; --border-color-transparent: transparent; --border-color-divider: #a2a9b1; --outline-color-progressive--focus: #36c; --color-link-red: var(--color-destructive); --color-link-red--hover: var(--color-destructive--hover); --color-link-red--active: var(--color-destructive--active); --color-link-red--focus: var(--color-destructive--focus); --color-link-red--visited: var(--color-destructive--visited); --border-color-input--hover: var(--border-color-interactive); --border-color-input-binary: var(--border-color-interactive); --border-color-input-binary--hover: var(--border-color-progressive--hover); --border-color-input-binary--active: var(--border-color-progressive--active); --border-color-input-binary--focus: var(--border-color-progressive--focus); --border-color-input-binary--checked: var(--border-color-progressive); --color-base--subtle: #72777d" alt="{\displaystyle \sigma }" src="https://wikimedia.org/api/rest_v1/media/math/render/svg/59f59b7c3e6fdb1d0365a494b81fb9a696138c36"></FONT></SPAN><FONT class=extract><SPAN>&nbsp;</SPAN>of the completed operations such that:</FONT></P>
<OL style="FONT-SIZE: 16px; FONT-FAMILY: sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(32,33,34); PADDING-BOTTOM: 0px; FONT-STYLE: normal; PADDING-TOP: 0px; PADDING-LEFT: 0px; LIST-STYLE-IMAGE: none; ORPHANS: 2; WIDOWS: 2; MARGIN: -0.5em 0px 0px 3.2em; LETTER-SPACING: normal; PADDING-RIGHT: 0px; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial; margin-inline: 3.2em 0px">
<LI style="MARGIN-BOTTOM: 0.1em"><FONT class=extract>For every completed operation in<SPAN>&nbsp;</SPAN></FONT><SPAN class=mwe-math-element><SPAN class="mwe-math-mathml-inline mwe-math-mathml-a11y" style="FONT-SIZE: 18px; OVERFLOW: hidden; CLIP: rect(1px 1px 1px 1px); HEIGHT: 1px; WIDTH: 1px; POSITION: absolute; DISPLAY: none; opacity: 0"><math xmlns="http://www.w3.org/1998/Math/MathML" alttext="{\displaystyle \sigma }"><semantics><mrow class=MJX-TeXAtom-ORD><mstyle displaystyle="true" scriptlevel="0"><mi><FONT class=extract>&#963;</FONT></mi></mstyle></mrow></semantics></math></SPAN><FONT class=extract><IMG aria-hidden=true class="mwe-math-fallback-image-inline mw-invert skin-invert" style="BORDER-TOP: 0px; HEIGHT: 1.67ex; BORDER-RIGHT: 0px; WIDTH: 1.33ex; VERTICAL-ALIGN: -0.33ex; BORDER-BOTTOM: 0px; BORDER-LEFT: 0px; DISPLAY: inline-block; --color-base: #202122; --color-base--hover: #404244; --color-emphasized: #000; --color-subtle: #54595d; --color-placeholder: #72777d; --color-disabled: #72777d; --color-inverted: #fff; --color-inverted-fixed: #fff; --color-progressive: #36c; --color-progressive--hover: #447ff5; --color-progressive--active: #2a4b8d; --color-progressive--focus: #36c; --color-destructive: #d73333; --color-destructive--hover: #ff4242; --color-destructive--active: #b32424; --color-destructive--focus: #36c; --color-visited: #6b4ba1; --color-destructive--visited: #a55858; --color-error: #d73333; --color-warning: #edab00; --color-success: #14866d; --color-notice: #202122; --color-content-added: #006400; --color-content-removed: #8b0000; --filter-invert-icon: 0; --filter-invert-primary-button-icon: 1; --box-shadow-color-base: #000; --box-shadow-color-progressive--active: #2a4b8d; --box-shadow-color-progressive--focus: #36c; --box-shadow-color-progressive-selected: #36c; --box-shadow-color-progressive-selected--hover: #447ff5; --box-shadow-color-progressive-selected--active: #2a4b8d; --box-shadow-color-destructive--focus: #36c; --box-shadow-color-inverted: #fff; --box-shadow-color-transparent: transparent; --background-color-interactive: #eaecf0; --background-color-interactive-subtle: #f8f9fa; --background-color-disabled: #c8ccd1; --background-color-disabled-subtle: #eaecf0; --background-color-progressive: #36c; --background-color-progressive--hover: #447ff5; --background-color-progressive--active: #2a4b8d; --background-color-progressive--focus: #36c; --background-color-progressive-subtle: #eaf3ff; --background-color-destructive: #d73333; --background-color-destructive--hover: #ff4242; --background-color-destructive--active: #b32424; --background-color-destructive--focus: #36c; --background-color-destructive-subtle: #fee7e6; --background-color-error: #d73333; --background-color-error--hover: #ff4242; --background-color-error--active: #b32424; --background-color-error-subtle: #fee7e6; --background-color-warning-subtle: #fef6e7; --background-color-success-subtle: #d5fdf4; --background-color-notice-subtle: #eaecf0; --background-color-content-added: #a3d3ff; --background-color-content-removed: #ffe49c; --background-color-backdrop-light: rgba(255,255,255,0.65); --background-color-backdrop-dark: rgba(0,0,0,0.65); --background-color-base: #fff; --background-color-base-fixed: #fff; --background-color-neutral: #eaecf0; --background-color-neutral-subtle: #f8f9fa; --background-color-transparent: transparent; --background-color-inverted: #101418; --background-color-button-quiet--hover: rgba(0,24,73,0.027); --background-color-button-quiet--active: rgba(0,24,73,0.082); --background-color-input-binary--checked: #36c; --background-color-tab-list-item-framed--hover: rgba(255,255,255,0.3); --background-color-tab-list-item-framed--active: rgba(255,255,255,0.65); --opacity-icon-base: 0.87; --opacity-icon-base--hover: 0.74; --opacity-icon-base--selected: 1; --opacity-icon-base--disabled: 0.51; --opacity-icon-placeholder: 0.51; --opacity-icon-subtle: 0.67; --border-color-base: #a2a9b1; --border-color-interactive: #72777d; --border-color-disabled: #c8ccd1; --border-color-subtle: #c8ccd1; --border-color-muted: #eaecf0; --border-color-inverted: #fff; --border-color-progressive: #36c; --border-color-progressive--hover: #447ff5; --border-color-progressive--active: #2a4b8d; --border-color-progressive--focus: #36c; --border-color-destructive: #d73333; --border-color-destructive--hover: #ff4242; --border-color-destructive--active: #b32424; --border-color-destructive--focus: #36c; --border-color-error: #b32424; --border-color-error--hover: #ff4242; --border-color-warning: #a66200; --border-color-success: #096450; --border-color-notice: #54595d; --border-color-content-added: #a3d3ff; --border-color-content-removed: #ffe49c; --border-color-transparent: transparent; --border-color-divider: #a2a9b1; --outline-color-progressive--focus: #36c; --color-link-red: var(--color-destructive); --color-link-red--hover: var(--color-destructive--hover); --color-link-red--active: var(--color-destructive--active); --color-link-red--focus: var(--color-destructive--focus); --color-link-red--visited: var(--color-destructive--visited); --border-color-input--hover: var(--border-color-interactive); --border-color-input-binary: var(--border-color-interactive); --border-color-input-binary--hover: var(--border-color-progressive--hover); --border-color-input-binary--active: var(--border-color-progressive--active); --border-color-input-binary--focus: var(--border-color-progressive--focus); --border-color-input-binary--checked: var(--border-color-progressive); --color-base--subtle: #72777d" alt="{\displaystyle \sigma }" src="https://wikimedia.org/api/rest_v1/media/math/render/svg/59f59b7c3e6fdb1d0365a494b81fb9a696138c36"></FONT></SPAN><FONT class=extract>, the operation returns the same result in the execution as the operation would return if every operation was completed one by one in order<SPAN>&nbsp;</SPAN></FONT><SPAN class=mwe-math-element><SPAN class="mwe-math-mathml-inline mwe-math-mathml-a11y" style="FONT-SIZE: 18px; OVERFLOW: hidden; CLIP: rect(1px 1px 1px 1px); HEIGHT: 1px; WIDTH: 1px; POSITION: absolute; DISPLAY: none; opacity: 0"><math xmlns="http://www.w3.org/1998/Math/MathML" alttext="{\displaystyle \sigma }"><semantics><mrow class=MJX-TeXAtom-ORD><mstyle displaystyle="true" scriptlevel="0"><mi><FONT class=extract>&#963;</FONT></mi></mstyle></mrow></semantics></math></SPAN><FONT class=extract><IMG aria-hidden=true class="mwe-math-fallback-image-inline mw-invert skin-invert" style="BORDER-TOP: 0px; HEIGHT: 1.67ex; BORDER-RIGHT: 0px; WIDTH: 1.33ex; VERTICAL-ALIGN: -0.33ex; BORDER-BOTTOM: 0px; BORDER-LEFT: 0px; DISPLAY: inline-block; --color-base: #202122; --color-base--hover: #404244; --color-emphasized: #000; --color-subtle: #54595d; --color-placeholder: #72777d; --color-disabled: #72777d; --color-inverted: #fff; --color-inverted-fixed: #fff; --color-progressive: #36c; --color-progressive--hover: #447ff5; --color-progressive--active: #2a4b8d; --color-progressive--focus: #36c; --color-destructive: #d73333; --color-destructive--hover: #ff4242; --color-destructive--active: #b32424; --color-destructive--focus: #36c; --color-visited: #6b4ba1; --color-destructive--visited: #a55858; --color-error: #d73333; --color-warning: #edab00; --color-success: #14866d; --color-notice: #202122; --color-content-added: #006400; --color-content-removed: #8b0000; --filter-invert-icon: 0; --filter-invert-primary-button-icon: 1; --box-shadow-color-base: #000; --box-shadow-color-progressive--active: #2a4b8d; --box-shadow-color-progressive--focus: #36c; --box-shadow-color-progressive-selected: #36c; --box-shadow-color-progressive-selected--hover: #447ff5; --box-shadow-color-progressive-selected--active: #2a4b8d; --box-shadow-color-destructive--focus: #36c; --box-shadow-color-inverted: #fff; --box-shadow-color-transparent: transparent; --background-color-interactive: #eaecf0; --background-color-interactive-subtle: #f8f9fa; --background-color-disabled: #c8ccd1; --background-color-disabled-subtle: #eaecf0; --background-color-progressive: #36c; --background-color-progressive--hover: #447ff5; --background-color-progressive--active: #2a4b8d; --background-color-progressive--focus: #36c; --background-color-progressive-subtle: #eaf3ff; --background-color-destructive: #d73333; --background-color-destructive--hover: #ff4242; --background-color-destructive--active: #b32424; --background-color-destructive--focus: #36c; --background-color-destructive-subtle: #fee7e6; --background-color-error: #d73333; --background-color-error--hover: #ff4242; --background-color-error--active: #b32424; --background-color-error-subtle: #fee7e6; --background-color-warning-subtle: #fef6e7; --background-color-success-subtle: #d5fdf4; --background-color-notice-subtle: #eaecf0; --background-color-content-added: #a3d3ff; --background-color-content-removed: #ffe49c; --background-color-backdrop-light: rgba(255,255,255,0.65); --background-color-backdrop-dark: rgba(0,0,0,0.65); --background-color-base: #fff; --background-color-base-fixed: #fff; --background-color-neutral: #eaecf0; --background-color-neutral-subtle: #f8f9fa; --background-color-transparent: transparent; --background-color-inverted: #101418; --background-color-button-quiet--hover: rgba(0,24,73,0.027); --background-color-button-quiet--active: rgba(0,24,73,0.082); --background-color-input-binary--checked: #36c; --background-color-tab-list-item-framed--hover: rgba(255,255,255,0.3); --background-color-tab-list-item-framed--active: rgba(255,255,255,0.65); --opacity-icon-base: 0.87; --opacity-icon-base--hover: 0.74; --opacity-icon-base--selected: 1; --opacity-icon-base--disabled: 0.51; --opacity-icon-placeholder: 0.51; --opacity-icon-subtle: 0.67; --border-color-base: #a2a9b1; --border-color-interactive: #72777d; --border-color-disabled: #c8ccd1; --border-color-subtle: #c8ccd1; --border-color-muted: #eaecf0; --border-color-inverted: #fff; --border-color-progressive: #36c; --border-color-progressive--hover: #447ff5; --border-color-progressive--active: #2a4b8d; --border-color-progressive--focus: #36c; --border-color-destructive: #d73333; --border-color-destructive--hover: #ff4242; --border-color-destructive--active: #b32424; --border-color-destructive--focus: #36c; --border-color-error: #b32424; --border-color-error--hover: #ff4242; --border-color-warning: #a66200; --border-color-success: #096450; --border-color-notice: #54595d; --border-color-content-added: #a3d3ff; --border-color-content-removed: #ffe49c; --border-color-transparent: transparent; --border-color-divider: #a2a9b1; --outline-color-progressive--focus: #36c; --color-link-red: var(--color-destructive); --color-link-red--hover: var(--color-destructive--hover); --color-link-red--active: var(--color-destructive--active); --color-link-red--focus: var(--color-destructive--focus); --color-link-red--visited: var(--color-destructive--visited); --border-color-input--hover: var(--border-color-interactive); --border-color-input-binary: var(--border-color-interactive); --border-color-input-binary--hover: var(--border-color-progressive--hover); --border-color-input-binary--active: var(--border-color-progressive--active); --border-color-input-binary--focus: var(--border-color-progressive--focus); --border-color-input-binary--checked: var(--border-color-progressive); --color-base--subtle: #72777d" alt="{\displaystyle \sigma }" src="https://wikimedia.org/api/rest_v1/media/math/render/svg/59f59b7c3e6fdb1d0365a494b81fb9a696138c36"></FONT></SPAN><FONT class=extract>. </FONT>
<LI style="MARGIN-BOTTOM: 0.1em"><FONT class=extract>If an operation op<SUB style="FONT-SIZE: 12px; LINE-HEIGHT: 1">1</SUB><SPAN>&nbsp;</SPAN>completes (gets a response) before op<SUB style="FONT-SIZE: 12px; LINE-HEIGHT: 1">2</SUB><SPAN>&nbsp;</SPAN>begins (invokes), then op<SUB style="FONT-SIZE: 12px; LINE-HEIGHT: 1">1</SUB><SPAN>&nbsp;</SPAN>precedes op<SUB style="FONT-SIZE: 12px; LINE-HEIGHT: 1">2</SUB><SPAN>&nbsp;</SPAN>in<SPAN>&nbsp;</SPAN></FONT><SPAN class=mwe-math-element><SPAN class="mwe-math-mathml-inline mwe-math-mathml-a11y" style="FONT-SIZE: 18px; OVERFLOW: hidden; CLIP: rect(1px 1px 1px 1px); HEIGHT: 1px; WIDTH: 1px; POSITION: absolute; DISPLAY: none; opacity: 0"><math xmlns="http://www.w3.org/1998/Math/MathML" alttext="{\displaystyle \sigma }"><semantics><mrow class=MJX-TeXAtom-ORD><mstyle displaystyle="true" scriptlevel="0"><mi><FONT class=extract>&#963;</FONT></mi></mstyle></mrow></semantics></math></SPAN><FONT class=extract><IMG aria-hidden=true class="mwe-math-fallback-image-inline mw-invert skin-invert" style="BORDER-TOP: 0px; HEIGHT: 1.67ex; BORDER-RIGHT: 0px; WIDTH: 1.33ex; VERTICAL-ALIGN: -0.33ex; BORDER-BOTTOM: 0px; BORDER-LEFT: 0px; DISPLAY: inline-block; --color-base: #202122; --color-base--hover: #404244; --color-emphasized: #000; --color-subtle: #54595d; --color-placeholder: #72777d; --color-disabled: #72777d; --color-inverted: #fff; --color-inverted-fixed: #fff; --color-progressive: #36c; --color-progressive--hover: #447ff5; --color-progressive--active: #2a4b8d; --color-progressive--focus: #36c; --color-destructive: #d73333; --color-destructive--hover: #ff4242; --color-destructive--active: #b32424; --color-destructive--focus: #36c; --color-visited: #6b4ba1; --color-destructive--visited: #a55858; --color-error: #d73333; --color-warning: #edab00; --color-success: #14866d; --color-notice: #202122; --color-content-added: #006400; --color-content-removed: #8b0000; --filter-invert-icon: 0; --filter-invert-primary-button-icon: 1; --box-shadow-color-base: #000; --box-shadow-color-progressive--active: #2a4b8d; --box-shadow-color-progressive--focus: #36c; --box-shadow-color-progressive-selected: #36c; --box-shadow-color-progressive-selected--hover: #447ff5; --box-shadow-color-progressive-selected--active: #2a4b8d; --box-shadow-color-destructive--focus: #36c; --box-shadow-color-inverted: #fff; --box-shadow-color-transparent: transparent; --background-color-interactive: #eaecf0; --background-color-interactive-subtle: #f8f9fa; --background-color-disabled: #c8ccd1; --background-color-disabled-subtle: #eaecf0; --background-color-progressive: #36c; --background-color-progressive--hover: #447ff5; --background-color-progressive--active: #2a4b8d; --background-color-progressive--focus: #36c; --background-color-progressive-subtle: #eaf3ff; --background-color-destructive: #d73333; --background-color-destructive--hover: #ff4242; --background-color-destructive--active: #b32424; --background-color-destructive--focus: #36c; --background-color-destructive-subtle: #fee7e6; --background-color-error: #d73333; --background-color-error--hover: #ff4242; --background-color-error--active: #b32424; --background-color-error-subtle: #fee7e6; --background-color-warning-subtle: #fef6e7; --background-color-success-subtle: #d5fdf4; --background-color-notice-subtle: #eaecf0; --background-color-content-added: #a3d3ff; --background-color-content-removed: #ffe49c; --background-color-backdrop-light: rgba(255,255,255,0.65); --background-color-backdrop-dark: rgba(0,0,0,0.65); --background-color-base: #fff; --background-color-base-fixed: #fff; --background-color-neutral: #eaecf0; --background-color-neutral-subtle: #f8f9fa; --background-color-transparent: transparent; --background-color-inverted: #101418; --background-color-button-quiet--hover: rgba(0,24,73,0.027); --background-color-button-quiet--active: rgba(0,24,73,0.082); --background-color-input-binary--checked: #36c; --background-color-tab-list-item-framed--hover: rgba(255,255,255,0.3); --background-color-tab-list-item-framed--active: rgba(255,255,255,0.65); --opacity-icon-base: 0.87; --opacity-icon-base--hover: 0.74; --opacity-icon-base--selected: 1; --opacity-icon-base--disabled: 0.51; --opacity-icon-placeholder: 0.51; --opacity-icon-subtle: 0.67; --border-color-base: #a2a9b1; --border-color-interactive: #72777d; --border-color-disabled: #c8ccd1; --border-color-subtle: #c8ccd1; --border-color-muted: #eaecf0; --border-color-inverted: #fff; --border-color-progressive: #36c; --border-color-progressive--hover: #447ff5; --border-color-progressive--active: #2a4b8d; --border-color-progressive--focus: #36c; --border-color-destructive: #d73333; --border-color-destructive--hover: #ff4242; --border-color-destructive--active: #b32424; --border-color-destructive--focus: #36c; --border-color-error: #b32424; --border-color-error--hover: #ff4242; --border-color-warning: #a66200; --border-color-success: #096450; --border-color-notice: #54595d; --border-color-content-added: #a3d3ff; --border-color-content-removed: #ffe49c; --border-color-transparent: transparent; --border-color-divider: #a2a9b1; --outline-color-progressive--focus: #36c; --color-link-red: var(--color-destructive); --color-link-red--hover: var(--color-destructive--hover); --color-link-red--active: var(--color-destructive--active); --color-link-red--focus: var(--color-destructive--focus); --color-link-red--visited: var(--color-destructive--visited); --border-color-input--hover: var(--border-color-interactive); --border-color-input-binary: var(--border-color-interactive); --border-color-input-binary--hover: var(--border-color-progressive--hover); --border-color-input-binary--active: var(--border-color-progressive--active); --border-color-input-binary--focus: var(--border-color-progressive--focus); --border-color-input-binary--checked: var(--border-color-progressive); --color-base--subtle: #72777d" alt="{\displaystyle \sigma }" src="https://wikimedia.org/api/rest_v1/media/math/render/svg/59f59b7c3e6fdb1d0365a494b81fb9a696138c36"></FONT></SPAN><FONT class=extract>.<SUP id=cite_ref-:0_1-1 class=reference style="FONT-SIZE: 12px; WHITE-SPACE: nowrap; FONT-WEIGHT: normal; FONT-STYLE: normal; LINE-HEIGHT: 1"><A style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: ; border-radius: 2px; overflow-wrap: break-word" href="https://en.wikipedia.org/wiki/Linearizability#cite_note-:0-1"><FONT face=Arial>[1]</FONT></A></SUP></FONT></LI></OL>
<P style="FONT-SIZE: 16px; FONT-FAMILY: sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(32,33,34); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; MARGIN: 0.5em 0px 1em; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial"><FONT class=extract>In other words:</FONT></P>
<UL style="LIST-STYLE-TYPE: disc; FONT-SIZE: 16px; FONT-FAMILY: sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(32,33,34); PADDING-BOTTOM: 0px; FONT-STYLE: normal; PADDING-TOP: 0px; PADDING-LEFT: 0px; ORPHANS: 2; WIDOWS: 2; MARGIN: -0.5em 0px 0px 1.6em; LETTER-SPACING: normal; PADDING-RIGHT: 0px; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial; margin-inline: 1.6em 0px">
<LI style="MARGIN-BOTTOM: 0.1em"><FONT class=extract>its invocations and responses can be reordered to yield a sequential history; </FONT>
<LI style="MARGIN-BOTTOM: 0.1em"><FONT class=extract>that sequential history is correct according to the sequential definition of the object; </FONT>
<LI style="MARGIN-BOTTOM: 0.1em"><FONT class=extract>if a response preceded an invocation in the original history, it must still precede it in the sequential reordering.</FONT></LI></UL>
<P style="FONT-SIZE: 16px; FONT-FAMILY: sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(32,33,34); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; MARGIN: 0.5em 0px 1em; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial"><FONT class=extract>(Note that the first two bullet points here match<SPAN>&nbsp;</SPAN></FONT><A title=Serializability class=mw-redirect style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: ; border-radius: 2px; overflow-wrap: break-word" href="https://en.wikipedia.org/wiki/Serializability"><FONT class=extract>serializability</FONT></A><FONT class=extract>: the operations appear to happen in some order. It is the last point which is unique to linearizability, and is thus the major contribution of Herlihy and Wing.)<SUP id=cite_ref-:0_1-2 class=reference style="FONT-SIZE: 12px; WHITE-SPACE: nowrap; FONT-WEIGHT: normal; FONT-STYLE: normal; LINE-HEIGHT: 1"><A style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: ; border-radius: 2px; overflow-wrap: break-word" href="https://en.wikipedia.org/wiki/Linearizability#cite_note-:0-1"><FONT face=Arial>[1]</FONT></A></SUP></FONT></P>
<P style="FONT-SIZE: 16px; FONT-FAMILY: sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(32,33,34); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; MARGIN: 0.5em 0px 1em; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial"><FONT class=extract>Let us look at two ways of reordering the locking example above.</FONT></P>
<TABLE style="FONT-SIZE: 16px; FONT-FAMILY: sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; MARGIN-TOP: -0.5em; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(32,33,34); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial" cellSpacing=0 border=1>
<TBODY>
<TR>
<TD><FONT class=extract>A invokes<SPAN>&nbsp;</SPAN><I>lock</I></FONT></TD>
<TD><FONT class=extract>A gets "failed" response</FONT></TD>
<TD><FONT class=extract>B invokes<SPAN>&nbsp;</SPAN><I>lock</I></FONT></TD>
<TD><FONT class=extract>B gets "successful" response</FONT></TD></TR></TBODY></TABLE>
<P style="FONT-SIZE: 16px; FONT-FAMILY: sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(32,33,34); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; MARGIN: 0.5em 0px 1em; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial"><FONT class=extract>Reordering B's invocation below A's response yields a sequential history. This is easy to reason about, as all operations now happen in an obvious order. Unfortunately, it doesn't match the sequential definition of the object (it doesn't match the semantics of the program): A should have successfully obtained the lock, and B should have subsequently aborted.</FONT></P>
<TABLE style="FONT-SIZE: 16px; FONT-FAMILY: sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; MARGIN-TOP: -0.5em; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(32,33,34); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial" cellSpacing=0 border=1>
<TBODY>
<TR>
<TD><FONT class=extract>B invokes<SPAN>&nbsp;</SPAN><I>lock</I></FONT></TD>
<TD><FONT class=extract>B gets "successful" response</FONT></TD>
<TD><FONT class=extract>A invokes<SPAN>&nbsp;</SPAN><I>lock</I></FONT></TD>
<TD><FONT class=extract>A gets "failed" response</FONT></TD></TR></TBODY></TABLE>
<P style="FONT-SIZE: 16px; FONT-FAMILY: sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(32,33,34); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; MARGIN: 0.5em 0px 1em; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial"><FONT class=extract>This is another correct sequential history. It is also a linearization! Note that the definition of linearizability only precludes responses that precede invocations from being reordered; since the original history had no responses before invocations, we can reorder it as we wish. Hence the original history is indeed linearizable.</FONT></P>
<P style="FONT-SIZE: 16px; FONT-FAMILY: sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(32,33,34); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; MARGIN: 0.5em 0px 1em; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial"><FONT class=extract>An object (as opposed to a history) is linearizable if all valid histories of its use can be linearized. Note that this is a much harder assertion to prove.</FONT></P>
<DIV class="mw-heading mw-heading3" style="FONT-SIZE: 1.2em; OVERFLOW: hidden; FONT-FAMILY: sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: bold; COLOR: ; PADDING-BOTTOM: 0px; FONT-STYLE: normal; PADDING-TOP: 0.5em; ORPHANS: 2; WIDOWS: 2; MARGIN: 0.25em 0px; LETTER-SPACING: normal; LINE-HEIGHT: 1.6; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial"><FONT class=extract>
<H3 id=Linearizability_versus_serializability style="OVERFLOW: hidden; BORDER-TOP: 0px; FONT-FAMILY: inherit; BORDER-RIGHT: 0px; BORDER-BOTTOM: 0px; FONT-WEIGHT: bold; COLOR: ; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; BORDER-LEFT: 0px; MARGIN: 0px 0px 0.25em; DISPLAY: inline; LINE-HEIGHT: 1.6; PADDING-RIGHT: 0px; font-stretch: inherit; font-optical-sizing: inherit; font-size-adjust: inherit; font-kerning: inherit; font-feature-settings: inherit; font-variation-settings: inherit">Linearizability versus serializability</H3><SPAN class=mw-editsection style="FONT-SIZE: small; FONT-FAMILY: sans-serif; VERTICAL-ALIGN: baseline; FONT-WEIGHT: normal; MARGIN-LEFT: 1em; LINE-HEIGHT: 0; MARGIN-RIGHT: 0px; user-select: none"><SPAN class=mw-editsection-bracket style="COLOR: ; MARGIN-RIGHT: 0.25em">[</SPAN><A title="Edit section: Linearizability versus serializability" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; WHITE-SPACE: nowrap; COLOR: ; border-radius: 2px; overflow-wrap: break-word" href="https://en.wikipedia.org/w/index.php?title=Linearizability&amp;action=edit&amp;section=3"><SPAN>edit</SPAN></A><SPAN class=mw-editsection-bracket style="COLOR: ; MARGIN-LEFT: 0.25em">]</SPAN></SPAN></FONT></DIV>
<P style="FONT-SIZE: 16px; FONT-FAMILY: sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(32,33,34); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; MARGIN: 0.5em 0px 1em; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial"><FONT class=extract>Consider the following history, again of two objects interacting with a lock:</FONT></P>
<TABLE style="FONT-SIZE: 16px; FONT-FAMILY: sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; MARGIN-TOP: -0.5em; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(32,33,34); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial" cellSpacing=0 border=1>
<TBODY>
<TR>
<TD><FONT class=extract>A invokes lock</FONT></TD>
<TD><FONT class=extract>A successfully locks</FONT></TD>
<TD><FONT class=extract>B invokes unlock</FONT></TD>
<TD><FONT class=extract>B successfully unlocks</FONT></TD>
<TD><FONT class=extract>A invokes unlock</FONT></TD>
<TD><FONT class=extract>A successfully unlocks</FONT></TD></TR></TBODY></TABLE>
<P style="FONT-SIZE: 16px; FONT-FAMILY: sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(32,33,34); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; MARGIN: 0.5em 0px 1em; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial"><FONT class=extract>This history is not valid because there is a point at which both A and B hold the lock; moreover, it cannot be reordered to a valid sequential history without violating the ordering rule. Therefore, it is not linearizable. However, under serializability, B's unlock operation may be moved to<SPAN>&nbsp;</SPAN><I>before</I><SPAN>&nbsp;</SPAN>A's original lock, which is a valid history (assuming the object begins the history in a locked state):</FONT></P>
<TABLE style="FONT-SIZE: 16px; FONT-FAMILY: sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; MARGIN-TOP: -0.5em; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(32,33,34); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial" cellSpacing=0 border=1>
<TBODY>
<TR>
<TD><FONT class=extract>B invokes unlock</FONT></TD>
<TD><FONT class=extract>B successfully unlocks</FONT></TD>
<TD><FONT class=extract>A invokes lock</FONT></TD>
<TD><FONT class=extract>A successfully locks</FONT></TD>
<TD><FONT class=extract>A invokes unlock</FONT></TD>
<TD><FONT class=extract>A successfully unlocks</FONT></TD></TR></TBODY></TABLE>
<P style="FONT-SIZE: 16px; FONT-FAMILY: sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(32,33,34); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; MARGIN: 0.5em 0px 1em; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial"><FONT class=extract>This reordering is sensible provided there is no alternative means of communicating between A and B. Linearizability is better when considering individual objects separately, as the reordering restrictions ensure that multiple linearizable objects are, considered as a whole, still linearizable.</FONT></P>
<DIV class="mw-heading mw-heading3" style="FONT-SIZE: 1.2em; OVERFLOW: hidden; FONT-FAMILY: sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: bold; COLOR: ; PADDING-BOTTOM: 0px; FONT-STYLE: normal; PADDING-TOP: 0.5em; ORPHANS: 2; WIDOWS: 2; MARGIN: 0.25em 0px; LETTER-SPACING: normal; LINE-HEIGHT: 1.6; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial"><FONT class=extract>
<H3 id=Linearization_points style="OVERFLOW: hidden; BORDER-TOP: 0px; FONT-FAMILY: inherit; BORDER-RIGHT: 0px; BORDER-BOTTOM: 0px; FONT-WEIGHT: bold; COLOR: ; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; BORDER-LEFT: 0px; MARGIN: 0px 0px 0.25em; DISPLAY: inline; LINE-HEIGHT: 1.6; PADDING-RIGHT: 0px; font-stretch: inherit; font-optical-sizing: inherit; font-size-adjust: inherit; font-kerning: inherit; font-feature-settings: inherit; font-variation-settings: inherit">Linearization points</H3><SPAN class=mw-editsection style="FONT-SIZE: small; FONT-FAMILY: sans-serif; VERTICAL-ALIGN: baseline; FONT-WEIGHT: normal; MARGIN-LEFT: 1em; LINE-HEIGHT: 0; MARGIN-RIGHT: 0px; user-select: none"><SPAN class=mw-editsection-bracket style="COLOR: ; MARGIN-RIGHT: 0.25em">[</SPAN><A title="Edit section: Linearization points" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; WHITE-SPACE: nowrap; COLOR: ; border-radius: 2px; overflow-wrap: break-word" href="https://en.wikipedia.org/w/index.php?title=Linearizability&amp;action=edit&amp;section=4"><SPAN>edit</SPAN></A><SPAN class=mw-editsection-bracket style="COLOR: ; MARGIN-LEFT: 0.25em">]</SPAN></SPAN></FONT></DIV>
<P style="FONT-SIZE: 16px; FONT-FAMILY: sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(32,33,34); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; MARGIN: 0.5em 0px 1em; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial"><FONT class=extract>This definition of linearizability is equivalent to the following:</FONT></P>
<UL style="LIST-STYLE-TYPE: disc; FONT-SIZE: 16px; FONT-FAMILY: sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(32,33,34); PADDING-BOTTOM: 0px; FONT-STYLE: normal; PADDING-TOP: 0px; PADDING-LEFT: 0px; ORPHANS: 2; WIDOWS: 2; MARGIN: -0.5em 0px 0px 1.6em; LETTER-SPACING: normal; PADDING-RIGHT: 0px; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial; margin-inline: 1.6em 0px">
<LI style="MARGIN-BOTTOM: 0.1em"><FONT class=extract>All function calls have a<SPAN>&nbsp;</SPAN><I>linearization point</I><SPAN>&nbsp;</SPAN>at some instant between their invocation and their response. </FONT>
<LI style="MARGIN-BOTTOM: 0.1em"><FONT class=extract>All functions appear to occur instantly at their linearization point, behaving as specified by the sequential definition.</FONT></LI></UL>
<P style="FONT-SIZE: 16px; FONT-FAMILY: sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(32,33,34); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; MARGIN: 0.5em 0px 1em; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial"><FONT class=extract>This alternative is usually much easier to prove. It is also much easier to reason about as a user, largely due to its intuitiveness. This property of occurring instantaneously, or indivisibly, leads to the use of the term<SPAN>&nbsp;</SPAN><I>atomic</I><SPAN>&nbsp;</SPAN>as an alternative to the longer "linearizable".<SUP id=cite_ref-:0_1-3 class=reference style="FONT-SIZE: 12px; WHITE-SPACE: nowrap; FONT-WEIGHT: normal; FONT-STYLE: normal; LINE-HEIGHT: 1"><A style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: ; border-radius: 2px; overflow-wrap: break-word" href="https://en.wikipedia.org/wiki/Linearizability#cite_note-:0-1"><FONT face=Arial>[1]</FONT></A></SUP></FONT></P>
<P style="FONT-SIZE: 16px; FONT-FAMILY: sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(32,33,34); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; MARGIN: 0.5em 0px 1em; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial"><FONT class=extract>In the examples below, the linearization point of the counter built on compare-and-swap is the linearization point of the first (and only) successful compare-and-swap update. The counter built using locking can be considered to linearize at any moment while the locks are held, since any potentially conflicting operations are excluded from running during that period.</FONT></P>
<DIV class="mw-heading mw-heading2" style='FONT-SIZE: 1.5em; OVERFLOW: hidden; FONT-FAMILY: "Linux Libertine", Georgia, Times, "Source Serif Pro", serif; WHITE-SPACE: normal; WORD-SPACING: 0px; BORDER-BOTTOM: 1px solid; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: ; PADDING-BOTTOM: 0.17em; FONT-STYLE: normal; PADDING-TOP: 0.5em; ORPHANS: 2; WIDOWS: 2; MARGIN: 0.25em 0px; LETTER-SPACING: normal; LINE-HEIGHT: 1.375; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial'><FONT class=extract>
<H2 id=Primitive_atomic_instructions style='OVERFLOW: hidden; BORDER-TOP: 0px; FONT-FAMILY: "Linux Libertine", Georgia, Times, "Source Serif Pro", serif; BORDER-RIGHT: 0px; BORDER-BOTTOM: 0px; COLOR: ; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; BORDER-LEFT: 0px; MARGIN: 0px 0px 0.25em; DISPLAY: inline; LINE-HEIGHT: 1.375; PADDING-RIGHT: 0px; font-stretch: inherit; font-optical-sizing: inherit; font-size-adjust: inherit; font-kerning: inherit; font-feature-settings: inherit; font-variation-settings: inherit'>Primitive atomic instructions</H2><SPAN class=mw-editsection style="FONT-SIZE: small; FONT-FAMILY: sans-serif; VERTICAL-ALIGN: baseline; FONT-WEIGHT: normal; MARGIN-LEFT: 1em; LINE-HEIGHT: 0; MARGIN-RIGHT: 0px; user-select: none"><SPAN class=mw-editsection-bracket style="COLOR: ; MARGIN-RIGHT: 0.25em">[</SPAN><A title="Edit section: Primitive atomic instructions" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; WHITE-SPACE: nowrap; COLOR: ; border-radius: 2px; overflow-wrap: break-word" href="https://en.wikipedia.org/w/index.php?title=Linearizability&amp;action=edit&amp;section=5"><SPAN>edit</SPAN></A><SPAN class=mw-editsection-bracket style="COLOR: ; MARGIN-LEFT: 0.25em">]</SPAN></SPAN></FONT></DIV>
<P style="FONT-SIZE: 16px; FONT-FAMILY: sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(32,33,34); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; MARGIN: 0.5em 0px 1em; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial"><FONT class=extract>Processors have<SPAN>&nbsp;</SPAN></FONT><A title="Instruction (computer science)" class=mw-redirect style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: ; border-radius: 2px; overflow-wrap: break-word" href="https://en.wikipedia.org/wiki/Instruction_(computer_science)"><FONT class=extract>instructions</FONT></A><FONT class=extract><SPAN>&nbsp;</SPAN>that can be used to implement<SPAN>&nbsp;</SPAN></FONT><A title="Lock (computer science)" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: ; border-radius: 2px; overflow-wrap: break-word" href="https://en.wikipedia.org/wiki/Lock_(computer_science)"><FONT class=extract>locking</FONT></A><FONT class=extract><SPAN>&nbsp;</SPAN>and<SPAN>&nbsp;</SPAN></FONT><A title="Lock-free and wait-free algorithms" class=mw-redirect style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: ; border-radius: 2px; overflow-wrap: break-word" href="https://en.wikipedia.org/wiki/Lock-free_and_wait-free_algorithms"><FONT class=extract>lock-free and wait-free algorithms</FONT></A><FONT class=extract>. The ability to temporarily inhibit<SPAN>&nbsp;</SPAN></FONT><A title=Interrupt style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: ; border-radius: 2px; overflow-wrap: break-word" href="https://en.wikipedia.org/wiki/Interrupt"><FONT class=extract>interrupts</FONT></A><FONT class=extract>, ensuring that the currently running<SPAN>&nbsp;</SPAN></FONT><A title="Process (computing)" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: ; border-radius: 2px; overflow-wrap: break-word" href="https://en.wikipedia.org/wiki/Process_(computing)"><FONT class=extract>process</FONT></A><FONT class=extract><SPAN>&nbsp;</SPAN>cannot be<SPAN>&nbsp;</SPAN></FONT><A title="Context switch" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: ; border-radius: 2px; overflow-wrap: break-word" href="https://en.wikipedia.org/wiki/Context_switch"><FONT class=extract>context switched</FONT></A><FONT class=extract>, also suffices on a<SPAN>&nbsp;</SPAN></FONT><A title=Uniprocessor class=mw-redirect style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: ; border-radius: 2px; overflow-wrap: break-word" href="https://en.wikipedia.org/wiki/Uniprocessor"><FONT class=extract>uniprocessor</FONT></A><FONT class=extract>. These instructions are used directly by compiler and operating system writers but are also abstracted and exposed as bytecodes and library functions in higher-level languages:</FONT></P>
<UL style="LIST-STYLE-TYPE: disc; FONT-SIZE: 16px; FONT-FAMILY: sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(32,33,34); PADDING-BOTTOM: 0px; FONT-STYLE: normal; PADDING-TOP: 0px; PADDING-LEFT: 0px; ORPHANS: 2; WIDOWS: 2; MARGIN: -0.5em 0px 0px 1.6em; LETTER-SPACING: normal; PADDING-RIGHT: 0px; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial; margin-inline: 1.6em 0px">
<LI style="MARGIN-BOTTOM: 0.1em"><FONT class=extract>atomic read-write; </FONT>
<LI style="MARGIN-BOTTOM: 0.1em"><FONT class=extract>atomic swap (the RDLK instruction in some<SPAN>&nbsp;</SPAN></FONT><A title="Burroughs large systems" class=mw-redirect style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: ; border-radius: 2px; overflow-wrap: break-word" href="https://en.wikipedia.org/wiki/Burroughs_large_systems#Multiple_processors"><FONT class=extract>Burroughs mainframes</FONT></A><FONT class=extract>, and the XCHG<SPAN>&nbsp;</SPAN></FONT><A title="X86 instruction listings" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: ; border-radius: 2px; overflow-wrap: break-word" href="https://en.wikipedia.org/wiki/X86_instruction_listings"><FONT class=extract>x86 instruction</FONT></A><FONT class=extract>); </FONT>
<LI style="MARGIN-BOTTOM: 0.1em"><A title=Test-and-set style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: ; border-radius: 2px; overflow-wrap: break-word" href="https://en.wikipedia.org/wiki/Test-and-set"><FONT class=extract>test-and-set</FONT></A><FONT class=extract>; </FONT>
<LI style="MARGIN-BOTTOM: 0.1em"><A title=Fetch-and-add style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: ; border-radius: 2px; overflow-wrap: break-word" href="https://en.wikipedia.org/wiki/Fetch-and-add"><FONT class=extract>fetch-and-add</FONT></A><FONT class=extract>; </FONT>
<LI style="MARGIN-BOTTOM: 0.1em"><A title=Compare-and-swap style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: ; border-radius: 2px; overflow-wrap: break-word" href="https://en.wikipedia.org/wiki/Compare-and-swap"><FONT class=extract>compare-and-swap</FONT></A><FONT class=extract>; </FONT>
<LI style="MARGIN-BOTTOM: 0.1em"><A title=Load-link/store-conditional style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: ; border-radius: 2px; overflow-wrap: break-word" href="https://en.wikipedia.org/wiki/Load-link/store-conditional"><FONT class=extract>load-link/store-conditional</FONT></A><FONT class=extract>.</FONT></LI></UL>
<P style="FONT-SIZE: 16px; FONT-FAMILY: sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(32,33,34); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; MARGIN: 0.5em 0px 1em; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial"><FONT class=extract>Most<SPAN>&nbsp;</SPAN></FONT><A title="Central processing unit" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: ; border-radius: 2px; overflow-wrap: break-word" href="https://en.wikipedia.org/wiki/Central_processing_unit"><FONT class=extract>processors</FONT></A><FONT class=extract><SPAN>&nbsp;</SPAN>include store operations that are not atomic with respect to memory. These include multiple-word stores and string operations. Should a high priority interrupt occur when a portion of the store is complete, the operation must be completed when the interrupt level is returned. The routine that processes the interrupt must not modify the memory being changed. It is important to take this into account when writing interrupt routines.</FONT></P>
<P style="FONT-SIZE: 16px; FONT-FAMILY: sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(32,33,34); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; MARGIN: 0.5em 0px 1em; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial"><FONT class=extract>When there are multiple instructions which must be completed without interruption, a CPU instruction which temporarily disables interrupts is used. This must be kept to only a few instructions and the interrupts must be re-enabled to avoid unacceptable response time to interrupts or even losing interrupts. This mechanism is not sufficient in a multi-processor environment since each CPU can interfere with the process regardless of whether interrupts occur or not. Further, in the presence of an<SPAN>&nbsp;</SPAN></FONT><A title="Instruction pipeline" class=mw-redirect style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: ; border-radius: 2px; overflow-wrap: break-word" href="https://en.wikipedia.org/wiki/Instruction_pipeline"><FONT class=extract>instruction pipeline</FONT></A><FONT class=extract>, uninterruptible operations present a security risk, as they can potentially be chained in an<SPAN>&nbsp;</SPAN></FONT><A title="Infinite loop" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: ; border-radius: 2px; overflow-wrap: break-word" href="https://en.wikipedia.org/wiki/Infinite_loop"><FONT class=extract>infinite loop</FONT></A><FONT class=extract><SPAN>&nbsp;</SPAN>to create a<SPAN>&nbsp;</SPAN></FONT><A title="Denial of service attack" class=mw-redirect style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: ; border-radius: 2px; overflow-wrap: break-word" href="https://en.wikipedia.org/wiki/Denial_of_service_attack"><FONT class=extract>denial of service attack</FONT></A><FONT class=extract>, as in the<SPAN>&nbsp;</SPAN></FONT><A title="Cyrix coma bug" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: ; border-radius: 2px; overflow-wrap: break-word" href="https://en.wikipedia.org/wiki/Cyrix_coma_bug"><FONT class=extract>Cyrix coma bug</FONT></A><FONT class=extract>.</FONT></P>
<P style="FONT-SIZE: 16px; FONT-FAMILY: sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(32,33,34); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; MARGIN: 0.5em 0px 1em; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial"><FONT class=extract>The<SPAN>&nbsp;</SPAN></FONT><A title="C programming language" class=mw-redirect style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: ; border-radius: 2px; overflow-wrap: break-word" href="https://en.wikipedia.org/wiki/C_programming_language"><FONT class=extract>C standard</FONT></A><FONT class=extract><SPAN>&nbsp;</SPAN>and<SPAN>&nbsp;</SPAN></FONT><A title=SUSv3 class=mw-redirect style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: ; border-radius: 2px; overflow-wrap: break-word" href="https://en.wikipedia.org/wiki/SUSv3"><FONT class=extract>SUSv3</FONT></A><FONT class=extract><SPAN>&nbsp;</SPAN>provide<SPAN>&nbsp;</SPAN><CODE style="BORDER-TOP: 1px solid; FONT-FAMILY: monospace, monospace; BORDER-RIGHT: 1px solid; BORDER-BOTTOM: 1px solid; COLOR: ; PADDING-BOTTOM: 1px; PADDING-TOP: 1px; PADDING-LEFT: 4px; BORDER-LEFT: 1px solid; PADDING-RIGHT: 4px; border-radius: 2px">sig_atomic_t</CODE><SPAN>&nbsp;</SPAN>for simple atomic reads and writes; incrementing or decrementing is not guaranteed to be atomic.<SUP id=cite_ref-3 class=reference style="FONT-SIZE: 12px; WHITE-SPACE: nowrap; FONT-WEIGHT: normal; FONT-STYLE: normal; LINE-HEIGHT: 1"><A style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: ; border-radius: 2px; overflow-wrap: break-word" href="https://en.wikipedia.org/wiki/Linearizability#cite_note-3"><FONT face=Arial>[3]</FONT></A></SUP><SPAN>&nbsp;</SPAN>More complex atomic operations are available in<SPAN>&nbsp;</SPAN></FONT><A title="C11 (C standard revision)" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: ; border-radius: 2px; overflow-wrap: break-word" href="https://en.wikipedia.org/wiki/C11_(C_standard_revision)"><FONT class=extract>C11</FONT></A><FONT class=extract>, which provides<SPAN>&nbsp;</SPAN><CODE style="BORDER-TOP: 1px solid; FONT-FAMILY: monospace, monospace; BORDER-RIGHT: 1px solid; BORDER-BOTTOM: 1px solid; COLOR: ; PADDING-BOTTOM: 1px; PADDING-TOP: 1px; PADDING-LEFT: 4px; BORDER-LEFT: 1px solid; PADDING-RIGHT: 4px; border-radius: 2px">stdatomic.h</CODE>. Compilers use the hardware features or more complex methods to implement the operations; an example is libatomic of GCC.</FONT></P>
<P style="FONT-SIZE: 16px; FONT-FAMILY: sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(32,33,34); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; MARGIN: 0.5em 0px 1em; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial"><FONT class=extract>The<SPAN>&nbsp;</SPAN></FONT><A title="ARM architecture" class=mw-redirect style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: ; border-radius: 2px; overflow-wrap: break-word" href="https://en.wikipedia.org/wiki/ARM_architecture"><FONT class=extract>ARM instruction set</FONT></A><FONT class=extract><SPAN>&nbsp;</SPAN>provides<SPAN>&nbsp;</SPAN><CODE style="BORDER-TOP: 1px solid; FONT-FAMILY: monospace, monospace; BORDER-RIGHT: 1px solid; BORDER-BOTTOM: 1px solid; COLOR: ; PADDING-BOTTOM: 1px; PADDING-TOP: 1px; PADDING-LEFT: 4px; BORDER-LEFT: 1px solid; PADDING-RIGHT: 4px; border-radius: 2px">LDREX</CODE><SPAN>&nbsp;</SPAN>and<SPAN>&nbsp;</SPAN><CODE style="BORDER-TOP: 1px solid; FONT-FAMILY: monospace, monospace; BORDER-RIGHT: 1px solid; BORDER-BOTTOM: 1px solid; COLOR: ; PADDING-BOTTOM: 1px; PADDING-TOP: 1px; PADDING-LEFT: 4px; BORDER-LEFT: 1px solid; PADDING-RIGHT: 4px; border-radius: 2px">STREX</CODE><SPAN>&nbsp;</SPAN>instructions which can be used to implement atomic memory access by using<SPAN>&nbsp;</SPAN></FONT><A title="Monitor (synchronization)" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: ; border-radius: 2px; overflow-wrap: break-word" href="https://en.wikipedia.org/wiki/Monitor_(synchronization)"><FONT class=extract>exclusive monitors</FONT></A><FONT class=extract><SPAN>&nbsp;</SPAN>implemented in the processor to track memory accesses for a specific address.<SUP id=cite_ref-4 class=reference style="FONT-SIZE: 12px; WHITE-SPACE: nowrap; FONT-WEIGHT: normal; FONT-STYLE: normal; LINE-HEIGHT: 1"><A style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: ; border-radius: 2px; overflow-wrap: break-word" href="https://en.wikipedia.org/wiki/Linearizability#cite_note-4"><FONT face=Arial>[4]</FONT></A></SUP><SPAN>&nbsp;</SPAN>However, if a<SPAN>&nbsp;</SPAN></FONT><A title="Context switch" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: ; border-radius: 2px; overflow-wrap: break-word" href="https://en.wikipedia.org/wiki/Context_switch"><FONT class=extract>context switch</FONT></A><FONT class=extract><SPAN>&nbsp;</SPAN>occurs between calls to<SPAN>&nbsp;</SPAN><CODE style="BORDER-TOP: 1px solid; FONT-FAMILY: monospace, monospace; BORDER-RIGHT: 1px solid; BORDER-BOTTOM: 1px solid; COLOR: ; PADDING-BOTTOM: 1px; PADDING-TOP: 1px; PADDING-LEFT: 4px; BORDER-LEFT: 1px solid; PADDING-RIGHT: 4px; border-radius: 2px">LDREX</CODE><SPAN>&nbsp;</SPAN>and<SPAN>&nbsp;</SPAN><CODE style="BORDER-TOP: 1px solid; FONT-FAMILY: monospace, monospace; BORDER-RIGHT: 1px solid; BORDER-BOTTOM: 1px solid; COLOR: ; PADDING-BOTTOM: 1px; PADDING-TOP: 1px; PADDING-LEFT: 4px; BORDER-LEFT: 1px solid; PADDING-RIGHT: 4px; border-radius: 2px">STREX</CODE>, the documentation notes that<SPAN>&nbsp;</SPAN><CODE style="BORDER-TOP: 1px solid; FONT-FAMILY: monospace, monospace; BORDER-RIGHT: 1px solid; BORDER-BOTTOM: 1px solid; COLOR: ; PADDING-BOTTOM: 1px; PADDING-TOP: 1px; PADDING-LEFT: 4px; BORDER-LEFT: 1px solid; PADDING-RIGHT: 4px; border-radius: 2px">STREX</CODE><SPAN>&nbsp;</SPAN>will fail, indicating the operation should be retried. In the case of 64-bit ARMv8-A architecture, it provides<SPAN>&nbsp;</SPAN><CODE style="BORDER-TOP: 1px solid; FONT-FAMILY: monospace, monospace; BORDER-RIGHT: 1px solid; BORDER-BOTTOM: 1px solid; COLOR: ; PADDING-BOTTOM: 1px; PADDING-TOP: 1px; PADDING-LEFT: 4px; BORDER-LEFT: 1px solid; PADDING-RIGHT: 4px; border-radius: 2px">LDXR</CODE><SPAN>&nbsp;</SPAN>and<SPAN>&nbsp;</SPAN><CODE style="BORDER-TOP: 1px solid; FONT-FAMILY: monospace, monospace; BORDER-RIGHT: 1px solid; BORDER-BOTTOM: 1px solid; COLOR: ; PADDING-BOTTOM: 1px; PADDING-TOP: 1px; PADDING-LEFT: 4px; BORDER-LEFT: 1px solid; PADDING-RIGHT: 4px; border-radius: 2px">STXR</CODE><SPAN>&nbsp;</SPAN>instructions for byte, half-word, word, and double-word size.<SUP id=cite_ref-5 class=reference style="FONT-SIZE: 12px; WHITE-SPACE: nowrap; FONT-WEIGHT: normal; FONT-STYLE: normal; LINE-HEIGHT: 1"><A style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: ; border-radius: 2px; overflow-wrap: break-word" href="https://en.wikipedia.org/wiki/Linearizability#cite_note-5"><FONT face=Arial>[5]</FONT></A></SUP></FONT></P>
<DIV class="mw-heading mw-heading2" style='FONT-SIZE: 1.5em; OVERFLOW: hidden; FONT-FAMILY: "Linux Libertine", Georgia, Times, "Source Serif Pro", serif; WHITE-SPACE: normal; WORD-SPACING: 0px; BORDER-BOTTOM: 1px solid; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: ; PADDING-BOTTOM: 0.17em; FONT-STYLE: normal; PADDING-TOP: 0.5em; ORPHANS: 2; WIDOWS: 2; MARGIN: 0.25em 0px; LETTER-SPACING: normal; LINE-HEIGHT: 1.375; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial'><FONT class=extract>
<H2 id=High-level_atomic_operations style='OVERFLOW: hidden; BORDER-TOP: 0px; FONT-FAMILY: "Linux Libertine", Georgia, Times, "Source Serif Pro", serif; BORDER-RIGHT: 0px; BORDER-BOTTOM: 0px; COLOR: ; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; BORDER-LEFT: 0px; MARGIN: 0px 0px 0.25em; DISPLAY: inline; LINE-HEIGHT: 1.375; PADDING-RIGHT: 0px; font-stretch: inherit; font-optical-sizing: inherit; font-size-adjust: inherit; font-kerning: inherit; font-feature-settings: inherit; font-variation-settings: inherit'>High-level atomic operations</H2><SPAN class=mw-editsection style="FONT-SIZE: small; FONT-FAMILY: sans-serif; VERTICAL-ALIGN: baseline; FONT-WEIGHT: normal; MARGIN-LEFT: 1em; LINE-HEIGHT: 0; MARGIN-RIGHT: 0px; user-select: none"><SPAN class=mw-editsection-bracket style="COLOR: ; MARGIN-RIGHT: 0.25em">[</SPAN><A title="Edit section: High-level atomic operations" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; WHITE-SPACE: nowrap; COLOR: ; border-radius: 2px; overflow-wrap: break-word" href="https://en.wikipedia.org/w/index.php?title=Linearizability&amp;action=edit&amp;section=6"><SPAN>edit</SPAN></A><SPAN class=mw-editsection-bracket style="COLOR: ; MARGIN-LEFT: 0.25em">]</SPAN></SPAN></FONT></DIV>
<P style="FONT-SIZE: 16px; FONT-FAMILY: sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(32,33,34); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; MARGIN: 0.5em 0px 1em; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial"><FONT class=extract>The easiest way to achieve linearizability is running groups of primitive operations in a<SPAN>&nbsp;</SPAN></FONT><A title="Critical section" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: ; border-radius: 2px; overflow-wrap: break-word" href="https://en.wikipedia.org/wiki/Critical_section"><FONT class=extract>critical section</FONT></A><FONT class=extract>. Strictly, independent operations can then be carefully permitted to overlap their critical sections, provided this does not violate linearizability. Such an approach must balance the cost of large numbers of<SPAN>&nbsp;</SPAN></FONT><A title="Lock (computer science)" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: ; border-radius: 2px; overflow-wrap: break-word" href="https://en.wikipedia.org/wiki/Lock_(computer_science)"><FONT class=extract>locks</FONT></A><FONT class=extract><SPAN>&nbsp;</SPAN>against the benefits of increased parallelism.</FONT></P>
<P style="FONT-SIZE: 16px; FONT-FAMILY: sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(32,33,34); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; MARGIN: 0.5em 0px 1em; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial"><FONT class=extract>Another approach, favoured by researchers (but not yet widely used in the software industry), is to design a linearizable object using the native atomic primitives provided by the hardware. This has the potential to maximise available parallelism and minimise synchronisation costs, but requires mathematical proofs which show that the objects behave correctly.</FONT></P>
<P style="FONT-SIZE: 16px; FONT-FAMILY: sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(32,33,34); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; MARGIN: 0.5em 0px 1em; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial"><FONT class=extract>A promising hybrid of these two is to provide a<SPAN>&nbsp;</SPAN></FONT><A title="Transactional memory" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: ; border-radius: 2px; overflow-wrap: break-word" href="https://en.wikipedia.org/wiki/Transactional_memory"><FONT class=extract>transactional memory</FONT></A><FONT class=extract><SPAN>&nbsp;</SPAN>abstraction. As with critical sections, the user marks sequential code that must be run in isolation from other threads. The implementation then ensures the code executes atomically. This style of abstraction is common when interacting with databases; for instance, when using the<SPAN>&nbsp;</SPAN></FONT><A title="Spring Framework" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: ; border-radius: 2px; overflow-wrap: break-word" href="https://en.wikipedia.org/wiki/Spring_Framework"><FONT class=extract>Spring Framework</FONT></A><FONT class=extract>, annotating a method with @Transactional will ensure all enclosed database interactions occur in a single<SPAN>&nbsp;</SPAN></FONT><A title="Database transaction" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: ; border-radius: 2px; overflow-wrap: break-word" href="https://en.wikipedia.org/wiki/Database_transaction"><FONT class=extract>database transaction</FONT></A><FONT class=extract>. Transactional memory goes a step further, ensuring that all memory interactions occur atomically. As with database transactions, issues arise regarding composition of transactions, especially database and in-memory transactions.</FONT></P>
<P style="FONT-SIZE: 16px; FONT-FAMILY: sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(32,33,34); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; MARGIN: 0.5em 0px 1em; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial"><FONT class=extract>A common theme when designing linearizable objects is to provide an all-or-nothing interface: either an operation succeeds completely, or it fails and does nothing. (</FONT><A title=ACID style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: ; border-radius: 2px; overflow-wrap: break-word" href="https://en.wikipedia.org/wiki/ACID"><FONT class=extract>ACID</FONT></A><FONT class=extract><SPAN>&nbsp;</SPAN>databases refer to this principle as<SPAN>&nbsp;</SPAN></FONT><A title="Atomicity (database systems)" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: ; border-radius: 2px; overflow-wrap: break-word" href="https://en.wikipedia.org/wiki/Atomicity_(database_systems)"><FONT class=extract>atomicity</FONT></A><FONT class=extract>.) If the operation fails (usually due to concurrent operations), the user must retry, usually performing a different operation. For example:</FONT></P>
<UL style="LIST-STYLE-TYPE: disc; FONT-SIZE: 16px; FONT-FAMILY: sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(32,33,34); PADDING-BOTTOM: 0px; FONT-STYLE: normal; PADDING-TOP: 0px; PADDING-LEFT: 0px; ORPHANS: 2; WIDOWS: 2; MARGIN: -0.5em 0px 0px 1.6em; LETTER-SPACING: normal; PADDING-RIGHT: 0px; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial; margin-inline: 1.6em 0px">
<LI style="MARGIN-BOTTOM: 0.1em"><A title=Compare-and-swap style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: ; border-radius: 2px; overflow-wrap: break-word" href="https://en.wikipedia.org/wiki/Compare-and-swap"><FONT class=extract>Compare-and-swap</FONT></A><FONT class=extract><SPAN>&nbsp;</SPAN>writes a new value into a location only if the latter's contents matches a supplied old value. This is commonly used in a read-modify-CAS sequence: the user reads the location, computes a new value to write, and writes it with a CAS (compare-and-swap); if the value changes concurrently, the CAS will fail and the user tries again. </FONT>
<LI style="MARGIN-BOTTOM: 0.1em"><A title=Load-link/store-conditional style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: ; border-radius: 2px; overflow-wrap: break-word" href="https://en.wikipedia.org/wiki/Load-link/store-conditional"><FONT class=extract>Load-link/store-conditional</FONT></A><FONT class=extract><SPAN>&nbsp;</SPAN>encodes this pattern more directly: the user reads the location with load-link, computes a new value to write, and writes it with store-conditional; if the value has changed concurrently, the SC (store-conditional) will fail and the user tries again. </FONT>
<LI style="MARGIN-BOTTOM: 0.1em"><FONT class=extract>In a<SPAN>&nbsp;</SPAN></FONT><A title="Database transaction" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: ; border-radius: 2px; overflow-wrap: break-word" href="https://en.wikipedia.org/wiki/Database_transaction"><FONT class=extract>database transaction</FONT></A><FONT class=extract>, if the transaction cannot be completed due to a concurrent operation (e.g. in a<SPAN>&nbsp;</SPAN></FONT><A title=Deadlock style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: ; border-radius: 2px; overflow-wrap: break-word" href="https://en.wikipedia.org/wiki/Deadlock"><FONT class=extract>deadlock</FONT></A><FONT class=extract>), the transaction will be aborted and the user must try again.</FONT></LI></UL>
<DIV class="mw-heading mw-heading2" style='FONT-SIZE: 1.5em; OVERFLOW: hidden; FONT-FAMILY: "Linux Libertine", Georgia, Times, "Source Serif Pro", serif; WHITE-SPACE: normal; WORD-SPACING: 0px; BORDER-BOTTOM: 1px solid; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: ; PADDING-BOTTOM: 0.17em; FONT-STYLE: normal; PADDING-TOP: 0.5em; ORPHANS: 2; WIDOWS: 2; MARGIN: 0.25em 0px; LETTER-SPACING: normal; LINE-HEIGHT: 1.375; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial'><FONT class=extract>
<H2 id=Examples_of_linearizability style='OVERFLOW: hidden; BORDER-TOP: 0px; FONT-FAMILY: "Linux Libertine", Georgia, Times, "Source Serif Pro", serif; BORDER-RIGHT: 0px; BORDER-BOTTOM: 0px; COLOR: ; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; BORDER-LEFT: 0px; MARGIN: 0px 0px 0.25em; DISPLAY: inline; LINE-HEIGHT: 1.375; PADDING-RIGHT: 0px; font-stretch: inherit; font-optical-sizing: inherit; font-size-adjust: inherit; font-kerning: inherit; font-feature-settings: inherit; font-variation-settings: inherit'>Examples of linearizability</H2><SPAN class=mw-editsection style="FONT-SIZE: small; FONT-FAMILY: sans-serif; VERTICAL-ALIGN: baseline; FONT-WEIGHT: normal; MARGIN-LEFT: 1em; LINE-HEIGHT: 0; MARGIN-RIGHT: 0px; user-select: none"><SPAN class=mw-editsection-bracket style="COLOR: ; MARGIN-RIGHT: 0.25em">[</SPAN><A title="Edit section: Examples of linearizability" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; WHITE-SPACE: nowrap; COLOR: ; border-radius: 2px; overflow-wrap: break-word" href="https://en.wikipedia.org/w/index.php?title=Linearizability&amp;action=edit&amp;section=7"><SPAN>edit</SPAN></A><SPAN class=mw-editsection-bracket style="COLOR: ; MARGIN-LEFT: 0.25em">]</SPAN></SPAN></FONT></DIV>
<DIV class="mw-heading mw-heading3" style="FONT-SIZE: 1.2em; OVERFLOW: hidden; FONT-FAMILY: sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: bold; COLOR: ; PADDING-BOTTOM: 0px; FONT-STYLE: normal; PADDING-TOP: 0.5em; ORPHANS: 2; WIDOWS: 2; MARGIN: 0.25em 0px; LETTER-SPACING: normal; LINE-HEIGHT: 1.6; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial"><FONT class=extract>
<H3 id=Counters style="OVERFLOW: hidden; BORDER-TOP: 0px; FONT-FAMILY: inherit; BORDER-RIGHT: 0px; BORDER-BOTTOM: 0px; FONT-WEIGHT: bold; COLOR: ; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; BORDER-LEFT: 0px; MARGIN: 0px 0px 0.25em; DISPLAY: inline; LINE-HEIGHT: 1.6; PADDING-RIGHT: 0px; font-stretch: inherit; font-optical-sizing: inherit; font-size-adjust: inherit; font-kerning: inherit; font-feature-settings: inherit; font-variation-settings: inherit">Counters</H3><SPAN class=mw-editsection style="FONT-SIZE: small; FONT-FAMILY: sans-serif; VERTICAL-ALIGN: baseline; FONT-WEIGHT: normal; MARGIN-LEFT: 1em; LINE-HEIGHT: 0; MARGIN-RIGHT: 0px; user-select: none"><SPAN class=mw-editsection-bracket style="COLOR: ; MARGIN-RIGHT: 0.25em">[</SPAN><A title="Edit section: Counters" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; WHITE-SPACE: nowrap; COLOR: ; border-radius: 2px; overflow-wrap: break-word" href="https://en.wikipedia.org/w/index.php?title=Linearizability&amp;action=edit&amp;section=8"><SPAN>edit</SPAN></A><SPAN class=mw-editsection-bracket style="COLOR: ; MARGIN-LEFT: 0.25em">]</SPAN></SPAN></FONT></DIV>
<P style="FONT-SIZE: 16px; FONT-FAMILY: sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(32,33,34); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; MARGIN: 0.5em 0px 1em; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial"><FONT class=extract>To demonstrate the power and necessity of linearizability we will consider a simple counter which different processes can increment.</FONT></P>
<P style="FONT-SIZE: 16px; FONT-FAMILY: sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(32,33,34); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; MARGIN: 0.5em 0px 1em; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial"><FONT class=extract>We would like to implement a counter object which multiple processes can access. Many common systems make use of counters to keep track of the number of times an event has occurred.</FONT></P>
<P style="FONT-SIZE: 16px; FONT-FAMILY: sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(32,33,34); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; MARGIN: 0.5em 0px 1em; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial"><FONT class=extract>The counter object can be accessed by multiple processes and has two available operations.</FONT></P>
<OL style="FONT-SIZE: 16px; FONT-FAMILY: sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(32,33,34); PADDING-BOTTOM: 0px; FONT-STYLE: normal; PADDING-TOP: 0px; PADDING-LEFT: 0px; LIST-STYLE-IMAGE: none; ORPHANS: 2; WIDOWS: 2; MARGIN: -0.5em 0px 0px 3.2em; LETTER-SPACING: normal; PADDING-RIGHT: 0px; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial; margin-inline: 3.2em 0px">
<LI style="MARGIN-BOTTOM: 0.1em"><FONT class=extract>Increment - adds 1 to the value stored in the counter, return acknowledgement </FONT>
<LI style="MARGIN-BOTTOM: 0.1em"><FONT class=extract>Read - returns the current value stored in the counter without changing it.</FONT></LI></OL>
<P style="FONT-SIZE: 16px; FONT-FAMILY: sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(32,33,34); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; MARGIN: 0.5em 0px 1em; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial"><FONT class=extract>We will attempt to implement this counter object using<SPAN>&nbsp;</SPAN></FONT><A title="Shared register" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: ; border-radius: 2px; overflow-wrap: break-word" href="https://en.wikipedia.org/wiki/Shared_register"><FONT class=extract>shared registers</FONT></A><FONT class=extract>.</FONT></P>
<P style="FONT-SIZE: 16px; FONT-FAMILY: sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(32,33,34); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; MARGIN: 0.5em 0px 1em; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial"><FONT class=extract>Our first attempt which we will see is non-linearizable has the following implementation using one shared register among the processes.</FONT></P>
<DIV class="mw-heading mw-heading4" style="FONT-SIZE: 16px; OVERFLOW: hidden; FONT-FAMILY: sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: bold; COLOR: ; PADDING-BOTTOM: 0px; FONT-STYLE: normal; PADDING-TOP: 0.5em; ORPHANS: 2; WIDOWS: 2; MARGIN: 0.25em 0px; LETTER-SPACING: normal; LINE-HEIGHT: 1.6; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial"><FONT class=extract>
<H4 id=Non-atomic style="OVERFLOW: hidden; BORDER-TOP: 0px; FONT-FAMILY: inherit; BORDER-RIGHT: 0px; BORDER-BOTTOM: 0px; FONT-WEIGHT: bold; COLOR: ; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; BORDER-LEFT: 0px; MARGIN: 0px 0px 0.25em; DISPLAY: inline; LINE-HEIGHT: 1.6; PADDING-RIGHT: 0px; font-stretch: inherit; font-optical-sizing: inherit; font-size-adjust: inherit; font-kerning: inherit; font-feature-settings: inherit; font-variation-settings: inherit">Non-atomic</H4><SPAN class=mw-editsection style="FONT-SIZE: small; FONT-FAMILY: sans-serif; VERTICAL-ALIGN: baseline; FONT-WEIGHT: normal; MARGIN-LEFT: 1em; LINE-HEIGHT: 0; MARGIN-RIGHT: 0px; user-select: none"><SPAN class=mw-editsection-bracket style="COLOR: ; MARGIN-RIGHT: 0.25em">[</SPAN><A title="Edit section: Non-atomic" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; WHITE-SPACE: nowrap; COLOR: ; border-radius: 2px; overflow-wrap: break-word" href="https://en.wikipedia.org/w/index.php?title=Linearizability&amp;action=edit&amp;section=9"><SPAN>edit</SPAN></A><SPAN class=mw-editsection-bracket style="COLOR: ; MARGIN-LEFT: 0.25em">]</SPAN></SPAN></FONT></DIV>
<P style="FONT-SIZE: 16px; FONT-FAMILY: sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(32,33,34); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; MARGIN: 0.5em 0px 1em; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial"><FONT class=extract>The naive, non-atomic implementation:</FONT></P>
<P style="FONT-SIZE: 16px; FONT-FAMILY: sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(32,33,34); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; MARGIN: 0.5em 0px 1em; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial"><B><FONT class=extract>Increment:</FONT></B></P>
<OL style="FONT-SIZE: 16px; FONT-FAMILY: sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(32,33,34); PADDING-BOTTOM: 0px; FONT-STYLE: normal; PADDING-TOP: 0px; PADDING-LEFT: 0px; LIST-STYLE-IMAGE: none; ORPHANS: 2; WIDOWS: 2; MARGIN: -0.5em 0px 0px 3.2em; LETTER-SPACING: normal; PADDING-RIGHT: 0px; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial; margin-inline: 3.2em 0px">
<LI style="MARGIN-BOTTOM: 0.1em"><FONT class=extract>Read the value in the register R </FONT>
<LI style="MARGIN-BOTTOM: 0.1em"><FONT class=extract>Add one to the value </FONT>
<LI style="MARGIN-BOTTOM: 0.1em"><FONT class=extract>Writes the new value back into register R</FONT></LI></OL>
<P style="FONT-SIZE: 16px; FONT-FAMILY: sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(32,33,34); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; MARGIN: 0.5em 0px 1em; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial"><B><FONT class=extract>Read:</FONT></B></P>
<P style="FONT-SIZE: 16px; FONT-FAMILY: sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(32,33,34); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; MARGIN: 0.5em 0px 1em; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial"><FONT class=extract>Read register R</FONT></P>
<P style="FONT-SIZE: 16px; FONT-FAMILY: sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(32,33,34); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; MARGIN: 0.5em 0px 1em; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial"><FONT class=extract>This simple implementation is not linearizable, as is demonstrated by the following example.</FONT></P>
<P style="FONT-SIZE: 16px; FONT-FAMILY: sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(32,33,34); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; MARGIN: 0.5em 0px 1em; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial"><FONT class=extract>Imagine two processes are running accessing the single counter object initialized to have value 0:</FONT></P>
<OL style="FONT-SIZE: 16px; FONT-FAMILY: sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(32,33,34); PADDING-BOTTOM: 0px; FONT-STYLE: normal; PADDING-TOP: 0px; PADDING-LEFT: 0px; LIST-STYLE-IMAGE: none; ORPHANS: 2; WIDOWS: 2; MARGIN: -0.5em 0px 0px 3.2em; LETTER-SPACING: normal; PADDING-RIGHT: 0px; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial; margin-inline: 3.2em 0px">
<LI style="MARGIN-BOTTOM: 0.1em"><FONT class=extract>The first process reads the value in the register as 0. </FONT>
<LI style="MARGIN-BOTTOM: 0.1em"><FONT class=extract>The first process adds one to the value, the counter's value should be 1, but before it has finished writing the new value back to the register it may become suspended, meanwhile the second process is running: </FONT>
<LI style="MARGIN-BOTTOM: 0.1em"><FONT class=extract>The second process reads the value in the register, which is still equal to 0; </FONT>
<LI style="MARGIN-BOTTOM: 0.1em"><FONT class=extract>The second process adds one to the value; </FONT>
<LI style="MARGIN-BOTTOM: 0.1em"><FONT class=extract>The second process writes the new value into the register, the register now has value 1.</FONT></LI></OL>
<P style="FONT-SIZE: 16px; FONT-FAMILY: sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(32,33,34); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; MARGIN: 0.5em 0px 1em; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial"><FONT class=extract>The second process is finished running and the first process continues running from where it left off:</FONT></P>
<OL style="FONT-SIZE: 16px; FONT-FAMILY: sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(32,33,34); PADDING-BOTTOM: 0px; FONT-STYLE: normal; PADDING-TOP: 0px; PADDING-LEFT: 0px; LIST-STYLE-IMAGE: none; ORPHANS: 2; WIDOWS: 2; MARGIN: -0.5em 0px 0px 3.2em; LETTER-SPACING: normal; PADDING-RIGHT: 0px; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial; margin-inline: 3.2em 0px">
<LI style="MARGIN-BOTTOM: 0.1em"><FONT class=extract>The first process writes 1 into the register, unaware that the other process has already updated the value in the register to 1.</FONT></LI></OL>
<P style="FONT-SIZE: 16px; FONT-FAMILY: sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(32,33,34); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; MARGIN: 0.5em 0px 1em; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial"><FONT class=extract>In the above example, two processes invoked an increment command, however the value of the object only increased from 0 to 1, instead of 2 as it should have. One of the increment operations was lost as a result of the system not being linearizable.</FONT></P>
<P style="FONT-SIZE: 16px; FONT-FAMILY: sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(32,33,34); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; MARGIN: 0.5em 0px 1em; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial"><FONT class=extract>The above example shows the need for carefully thinking through implementations of data structures and how linearizability can have an effect on the correctness of the system.</FONT></P>
<DIV class="mw-heading mw-heading4" style="FONT-SIZE: 16px; OVERFLOW: hidden; FONT-FAMILY: sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: bold; COLOR: ; PADDING-BOTTOM: 0px; FONT-STYLE: normal; PADDING-TOP: 0.5em; ORPHANS: 2; WIDOWS: 2; MARGIN: 0.25em 0px; LETTER-SPACING: normal; LINE-HEIGHT: 1.6; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial"><FONT class=extract>
<H4 id=Atomic style="OVERFLOW: hidden; BORDER-TOP: 0px; FONT-FAMILY: inherit; BORDER-RIGHT: 0px; BORDER-BOTTOM: 0px; FONT-WEIGHT: bold; COLOR: ; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; BORDER-LEFT: 0px; MARGIN: 0px 0px 0.25em; DISPLAY: inline; LINE-HEIGHT: 1.6; PADDING-RIGHT: 0px; font-stretch: inherit; font-optical-sizing: inherit; font-size-adjust: inherit; font-kerning: inherit; font-feature-settings: inherit; font-variation-settings: inherit">Atomic</H4><SPAN class=mw-editsection style="FONT-SIZE: small; FONT-FAMILY: sans-serif; VERTICAL-ALIGN: baseline; FONT-WEIGHT: normal; MARGIN-LEFT: 1em; LINE-HEIGHT: 0; MARGIN-RIGHT: 0px; user-select: none"><SPAN class=mw-editsection-bracket style="COLOR: ; MARGIN-RIGHT: 0.25em">[</SPAN><A title="Edit section: Atomic" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; WHITE-SPACE: nowrap; COLOR: ; border-radius: 2px; overflow-wrap: break-word" href="https://en.wikipedia.org/w/index.php?title=Linearizability&amp;action=edit&amp;section=10"><SPAN>edit</SPAN></A><SPAN class=mw-editsection-bracket style="COLOR: ; MARGIN-LEFT: 0.25em">]</SPAN></SPAN></FONT></DIV>
<P style="FONT-SIZE: 16px; FONT-FAMILY: sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(32,33,34); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; MARGIN: 0.5em 0px 1em; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial"><FONT class=extract>To implement a linearizable or atomic counter object we will modify our previous implementation so<SPAN>&nbsp;</SPAN><B>each process P<SMALL style="FONT-SIZE: 13px">i</SMALL><SPAN>&nbsp;</SPAN>will use its own register R<SMALL style="FONT-SIZE: 13px">i</SMALL></B></FONT></P>
<P style="FONT-SIZE: 16px; FONT-FAMILY: sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(32,33,34); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; MARGIN: 0.5em 0px 1em; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial"><FONT class=extract>Each process increments and reads according to the following algorithm:</FONT></P>
<P style="FONT-SIZE: 16px; FONT-FAMILY: sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(32,33,34); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; MARGIN: 0.5em 0px 1em; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial"><B><FONT class=extract>Increment:</FONT></B></P>
<OL style="FONT-SIZE: 16px; FONT-FAMILY: sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(32,33,34); PADDING-BOTTOM: 0px; FONT-STYLE: normal; PADDING-TOP: 0px; PADDING-LEFT: 0px; LIST-STYLE-IMAGE: none; ORPHANS: 2; WIDOWS: 2; MARGIN: -0.5em 0px 0px 3.2em; LETTER-SPACING: normal; PADDING-RIGHT: 0px; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial; margin-inline: 3.2em 0px">
<LI style="MARGIN-BOTTOM: 0.1em"><FONT class=extract>Read value in register R<SMALL style="FONT-SIZE: 13px">i</SMALL>. </FONT>
<LI style="MARGIN-BOTTOM: 0.1em"><FONT class=extract>Add one to the value. </FONT>
<LI style="MARGIN-BOTTOM: 0.1em"><FONT class=extract>Write new value back into R<SMALL style="FONT-SIZE: 13px">i</SMALL></FONT></LI></OL>
<P style="FONT-SIZE: 16px; FONT-FAMILY: sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(32,33,34); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; MARGIN: 0.5em 0px 1em; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial"><B><FONT class=extract>Read:</FONT></B></P>
<OL style="FONT-SIZE: 16px; FONT-FAMILY: sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(32,33,34); PADDING-BOTTOM: 0px; FONT-STYLE: normal; PADDING-TOP: 0px; PADDING-LEFT: 0px; LIST-STYLE-IMAGE: none; ORPHANS: 2; WIDOWS: 2; MARGIN: -0.5em 0px 0px 3.2em; LETTER-SPACING: normal; PADDING-RIGHT: 0px; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial; margin-inline: 3.2em 0px">
<LI style="MARGIN-BOTTOM: 0.1em"><FONT class=extract>Read registers R<SMALL style="FONT-SIZE: 13px">1,</SMALL><SPAN>&nbsp;</SPAN>R<SMALL style="FONT-SIZE: 13px">2, ...</SMALL><SPAN>&nbsp;</SPAN>R<SMALL style="FONT-SIZE: 13px">n</SMALL>. </FONT>
<LI style="MARGIN-BOTTOM: 0.1em"><FONT class=extract>Return the sum of all registers.</FONT></LI></OL>
<P style="FONT-SIZE: 16px; FONT-FAMILY: sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(32,33,34); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; MARGIN: 0.5em 0px 1em; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial"><FONT class=extract>This implementation solves the problem with our original implementation. In this system the increment operations are linearized at the write step. The linearization point of an increment operation is when that operation writes the new value in its register R<SMALL style="FONT-SIZE: 13px">i.</SMALL><SPAN>&nbsp;</SPAN>The read operations are linearized to a point in the system when the value returned by the read is equal to the sum of all the values stored in each register R<SMALL style="FONT-SIZE: 13px">i.</SMALL></FONT></P>
<P style="FONT-SIZE: 16px; FONT-FAMILY: sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(32,33,34); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; MARGIN: 0.5em 0px 1em; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial"><FONT class=extract>This is a trivial example. In a real system, the operations can be more complex and the errors introduced extremely subtle. For example, reading a<SPAN>&nbsp;</SPAN></FONT><A title=64-bit class=mw-redirect style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: ; border-radius: 2px; overflow-wrap: break-word" href="https://en.wikipedia.org/wiki/64-bit"><FONT class=extract>64-bit</FONT></A><FONT class=extract><SPAN>&nbsp;</SPAN>value from memory may actually be implemented as two<SPAN>&nbsp;</SPAN></FONT><A title=Sequence style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: ; border-radius: 2px; overflow-wrap: break-word" href="https://en.wikipedia.org/wiki/Sequence"><FONT class=extract>sequential</FONT></A><FONT class=extract><SPAN>&nbsp;</SPAN>reads of two<SPAN>&nbsp;</SPAN></FONT><A title=32-bit class=mw-redirect style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: ; border-radius: 2px; overflow-wrap: break-word" href="https://en.wikipedia.org/wiki/32-bit"><FONT class=extract>32-bit</FONT></A><FONT class=extract><SPAN>&nbsp;</SPAN>memory locations. If a process has only read the first 32&nbsp;bits, and before it reads the second 32&nbsp;bits the value in memory gets changed, it will have neither the original value nor the new value but a mixed-up value.</FONT></P>
<P style="FONT-SIZE: 16px; FONT-FAMILY: sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(32,33,34); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; MARGIN: 0.5em 0px 1em; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial"><FONT class=extract>Furthermore, the specific order in which the processes run can change the results, making such an error difficult to detect, reproduce and<SPAN>&nbsp;</SPAN></FONT><A title=Debug class=mw-redirect style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: ; border-radius: 2px; overflow-wrap: break-word" href="https://en.wikipedia.org/wiki/Debug"><FONT class=extract>debug</FONT></A><FONT class=extract>.</FONT></P>
<DIV class="mw-heading mw-heading3" style="FONT-SIZE: 1.2em; OVERFLOW: hidden; FONT-FAMILY: sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: bold; COLOR: ; PADDING-BOTTOM: 0px; FONT-STYLE: normal; PADDING-TOP: 0.5em; ORPHANS: 2; WIDOWS: 2; MARGIN: 0.25em 0px; LETTER-SPACING: normal; LINE-HEIGHT: 1.6; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial"><FONT class=extract>
<H3 id=Compare-and-swap style="OVERFLOW: hidden; BORDER-TOP: 0px; FONT-FAMILY: inherit; BORDER-RIGHT: 0px; BORDER-BOTTOM: 0px; FONT-WEIGHT: bold; COLOR: ; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; BORDER-LEFT: 0px; MARGIN: 0px 0px 0.25em; DISPLAY: inline; LINE-HEIGHT: 1.6; PADDING-RIGHT: 0px; font-stretch: inherit; font-optical-sizing: inherit; font-size-adjust: inherit; font-kerning: inherit; font-feature-settings: inherit; font-variation-settings: inherit">Compare-and-swap</H3><SPAN class=mw-editsection style="FONT-SIZE: small; FONT-FAMILY: sans-serif; VERTICAL-ALIGN: baseline; FONT-WEIGHT: normal; MARGIN-LEFT: 1em; LINE-HEIGHT: 0; MARGIN-RIGHT: 0px; user-select: none"><SPAN class=mw-editsection-bracket style="COLOR: ; MARGIN-RIGHT: 0.25em">[</SPAN><A title="Edit section: Compare-and-swap" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; WHITE-SPACE: nowrap; COLOR: ; border-radius: 2px; overflow-wrap: break-word" href="https://en.wikipedia.org/w/index.php?title=Linearizability&amp;action=edit&amp;section=11"><SPAN>edit</SPAN></A><SPAN class=mw-editsection-bracket style="COLOR: ; MARGIN-LEFT: 0.25em">]</SPAN></SPAN></FONT></DIV>
<DIV role=note class="hatnote navigation-not-searchable" style="FONT-SIZE: 16px; MARGIN-BOTTOM: 0.5em; FONT-FAMILY: sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(32,33,34); FONT-STYLE: italic; PADDING-LEFT: 1.6em; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial"><FONT class=extract>Main article:<SPAN>&nbsp;</SPAN></FONT><A title=Compare-and-swap style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: ; border-radius: 2px; overflow-wrap: break-word" href="https://en.wikipedia.org/wiki/Compare-and-swap"><FONT class=extract>Compare-and-swap</FONT></A></DIV>
<P style="FONT-SIZE: 16px; FONT-FAMILY: sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(32,33,34); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; MARGIN: 0.5em 0px 1em; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial"><FONT class=extract>Most systems provide an atomic compare-and-swap instruction that reads from a memory location, compares the value with an "expected" one provided by the user, and writes out a "new" value if the two match, returning whether the update succeeded. We can use this to fix the non-atomic counter algorithm as follows:</FONT></P>
<DL style="FONT-SIZE: 16px; MARGIN-BOTTOM: 0.5em; FONT-FAMILY: sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; MARGIN-TOP: -0.5em; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(32,33,34); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial">
<DD style="MARGIN-BOTTOM: 0.1em; MARGIN-LEFT: 1.6em; MARGIN-RIGHT: 0px; margin-inline: 1.6em 0px">
<OL style="PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; LIST-STYLE-IMAGE: none; MARGIN: 0.3em 0px 0px 3.2em; PADDING-RIGHT: 0px; margin-inline: 3.2em 0px">
<LI style="MARGIN-BOTTOM: 0.1em"><FONT class=extract>Read the value in the memory location; </FONT>
<LI style="MARGIN-BOTTOM: 0.1em"><FONT class=extract>add one to the value; </FONT>
<LI style="MARGIN-BOTTOM: 0.1em"><FONT class=extract>use compare-and-swap to write the incremented value back; </FONT>
<LI style="MARGIN-BOTTOM: 0.1em"><FONT class=extract>retry if the value read in by the compare-and-swap did not match the value we originally read.</FONT></LI></OL></DD></DL>
<P style="FONT-SIZE: 16px; FONT-FAMILY: sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(32,33,34); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; MARGIN: 0.5em 0px 1em; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial"><FONT class=extract>Since the compare-and-swap occurs (or appears to occur) instantaneously, if another process updates the location while we are in-progress, the compare-and-swap is guaranteed to fail.</FONT></P>
<DIV class="mw-heading mw-heading3" style="FONT-SIZE: 1.2em; OVERFLOW: hidden; FONT-FAMILY: sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: bold; COLOR: ; PADDING-BOTTOM: 0px; FONT-STYLE: normal; PADDING-TOP: 0.5em; ORPHANS: 2; WIDOWS: 2; MARGIN: 0.25em 0px; LETTER-SPACING: normal; LINE-HEIGHT: 1.6; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial"><FONT class=extract>
<H3 id=Fetch-and-increment style="OVERFLOW: hidden; BORDER-TOP: 0px; FONT-FAMILY: inherit; BORDER-RIGHT: 0px; BORDER-BOTTOM: 0px; FONT-WEIGHT: bold; COLOR: ; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; BORDER-LEFT: 0px; MARGIN: 0px 0px 0.25em; DISPLAY: inline; LINE-HEIGHT: 1.6; PADDING-RIGHT: 0px; font-stretch: inherit; font-optical-sizing: inherit; font-size-adjust: inherit; font-kerning: inherit; font-feature-settings: inherit; font-variation-settings: inherit">Fetch-and-increment</H3><SPAN class=mw-editsection style="FONT-SIZE: small; FONT-FAMILY: sans-serif; VERTICAL-ALIGN: baseline; FONT-WEIGHT: normal; MARGIN-LEFT: 1em; LINE-HEIGHT: 0; MARGIN-RIGHT: 0px; user-select: none"><SPAN class=mw-editsection-bracket style="COLOR: ; MARGIN-RIGHT: 0.25em">[</SPAN><A title="Edit section: Fetch-and-increment" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; WHITE-SPACE: nowrap; COLOR: ; border-radius: 2px; overflow-wrap: break-word" href="https://en.wikipedia.org/w/index.php?title=Linearizability&amp;action=edit&amp;section=12"><SPAN>edit</SPAN></A><SPAN class=mw-editsection-bracket style="COLOR: ; MARGIN-LEFT: 0.25em">]</SPAN></SPAN></FONT></DIV>
<DIV role=note class="hatnote navigation-not-searchable" style="FONT-SIZE: 16px; MARGIN-BOTTOM: 0.5em; FONT-FAMILY: sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(32,33,34); FONT-STYLE: italic; PADDING-LEFT: 1.6em; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial"><FONT class=extract>Main article:<SPAN>&nbsp;</SPAN></FONT><A title=Fetch-and-increment class=mw-redirect style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: ; border-radius: 2px; overflow-wrap: break-word" href="https://en.wikipedia.org/wiki/Fetch-and-increment"><FONT class=extract>Fetch-and-increment</FONT></A></DIV>
<P style="FONT-SIZE: 16px; FONT-FAMILY: sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(32,33,34); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; MARGIN: 0.5em 0px 1em; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial"><FONT class=extract>Many systems provide an atomic fetch-and-increment instruction that reads from a memory location, unconditionally writes a new value (the old value plus one), and returns the old value. We can use this to fix the non-atomic counter algorithm as follows:</FONT></P>
<DL style="FONT-SIZE: 16px; MARGIN-BOTTOM: 0.5em; FONT-FAMILY: sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; MARGIN-TOP: -0.5em; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(32,33,34); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial">
<DD style="MARGIN-BOTTOM: 0.1em; MARGIN-LEFT: 1.6em; MARGIN-RIGHT: 0px; margin-inline: 1.6em 0px">
<OL style="PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; LIST-STYLE-IMAGE: none; MARGIN: 0.3em 0px 0px 3.2em; PADDING-RIGHT: 0px; margin-inline: 3.2em 0px">
<LI style="MARGIN-BOTTOM: 0.1em"><FONT class=extract>Use fetch-and-increment to read the old value and write the incremented value back.</FONT></LI></OL></DD></DL>
<P style="FONT-SIZE: 16px; FONT-FAMILY: sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(32,33,34); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; MARGIN: 0.5em 0px 1em; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial"><FONT class=extract>Using fetch-and increment is always better (requires fewer memory references) for some algorithms&#8212;such as the one shown here&#8212;than compare-and-swap,<SUP id=cite_ref-cond-sync_6-0 class=reference style="FONT-SIZE: 12px; WHITE-SPACE: nowrap; FONT-WEIGHT: normal; FONT-STYLE: normal; LINE-HEIGHT: 1"><A style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: ; border-radius: 2px; overflow-wrap: break-word" href="https://en.wikipedia.org/wiki/Linearizability#cite_note-cond-sync-6"><FONT face=Arial>[6]</FONT></A></SUP><SPAN>&nbsp;</SPAN>even though Herlihy earlier proved that compare-and-swap is better for certain other algorithms that can't be implemented at all using only fetch-and-increment. So<SPAN>&nbsp;</SPAN></FONT><A title="CPU design" class=mw-redirect style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: ; border-radius: 2px; overflow-wrap: break-word" href="https://en.wikipedia.org/wiki/CPU_design"><FONT class=extract>CPU designs</FONT></A><FONT class=extract><SPAN>&nbsp;</SPAN>with both fetch-and-increment and compare-and-swap (or equivalent instructions) may be a better choice than ones with only one or the other.<SUP id=cite_ref-cond-sync_6-1 class=reference style="FONT-SIZE: 12px; WHITE-SPACE: nowrap; FONT-WEIGHT: normal; FONT-STYLE: normal; LINE-HEIGHT: 1"><A style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: ; border-radius: 2px; overflow-wrap: break-word" href="https://en.wikipedia.org/wiki/Linearizability#cite_note-cond-sync-6"><FONT face=Arial>[6]</FONT></A></SUP></FONT></P>
<DIV class="mw-heading mw-heading3" style="FONT-SIZE: 1.2em; OVERFLOW: hidden; FONT-FAMILY: sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: bold; COLOR: ; PADDING-BOTTOM: 0px; FONT-STYLE: normal; PADDING-TOP: 0.5em; ORPHANS: 2; WIDOWS: 2; MARGIN: 0.25em 0px; LETTER-SPACING: normal; LINE-HEIGHT: 1.6; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial"><FONT class=extract>
<H3 id=Locking style="OVERFLOW: hidden; BORDER-TOP: 0px; FONT-FAMILY: inherit; BORDER-RIGHT: 0px; BORDER-BOTTOM: 0px; FONT-WEIGHT: bold; COLOR: ; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; BORDER-LEFT: 0px; MARGIN: 0px 0px 0.25em; DISPLAY: inline; LINE-HEIGHT: 1.6; PADDING-RIGHT: 0px; font-stretch: inherit; font-optical-sizing: inherit; font-size-adjust: inherit; font-kerning: inherit; font-feature-settings: inherit; font-variation-settings: inherit">Locking</H3><SPAN class=mw-editsection style="FONT-SIZE: small; FONT-FAMILY: sans-serif; VERTICAL-ALIGN: baseline; FONT-WEIGHT: normal; MARGIN-LEFT: 1em; LINE-HEIGHT: 0; MARGIN-RIGHT: 0px; user-select: none"><SPAN class=mw-editsection-bracket style="COLOR: ; MARGIN-RIGHT: 0.25em">[</SPAN><A title="Edit section: Locking" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; WHITE-SPACE: nowrap; COLOR: ; border-radius: 2px; overflow-wrap: break-word" href="https://en.wikipedia.org/w/index.php?title=Linearizability&amp;action=edit&amp;section=13"><SPAN>edit</SPAN></A><SPAN class=mw-editsection-bracket style="COLOR: ; MARGIN-LEFT: 0.25em">]</SPAN></SPAN></FONT></DIV>
<DIV role=note class="hatnote navigation-not-searchable" style="FONT-SIZE: 16px; MARGIN-BOTTOM: 0.5em; FONT-FAMILY: sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(32,33,34); FONT-STYLE: italic; PADDING-LEFT: 1.6em; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial"><FONT class=extract>Main article:<SPAN>&nbsp;</SPAN></FONT><A title="Lock (computer science)" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: ; border-radius: 2px; overflow-wrap: break-word" href="https://en.wikipedia.org/wiki/Lock_(computer_science)"><FONT class=extract>Lock (computer science)</FONT></A></DIV>
<P style="FONT-SIZE: 16px; FONT-FAMILY: sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(32,33,34); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; MARGIN: 0.5em 0px 1em; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial"><FONT class=extract>Another approach is to turn the naive algorithm into a<SPAN>&nbsp;</SPAN></FONT><A title="Critical section" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: ; border-radius: 2px; overflow-wrap: break-word" href="https://en.wikipedia.org/wiki/Critical_section"><FONT class=extract>critical section</FONT></A><FONT class=extract>, preventing other threads from disrupting it, using a<SPAN>&nbsp;</SPAN></FONT><A title="Lock (computer science)" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: ; border-radius: 2px; overflow-wrap: break-word" href="https://en.wikipedia.org/wiki/Lock_(computer_science)"><FONT class=extract>lock</FONT></A><FONT class=extract>. Once again fixing the non-atomic counter algorithm:</FONT></P>
<DL style="FONT-SIZE: 16px; MARGIN-BOTTOM: 0.5em; FONT-FAMILY: sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; MARGIN-TOP: -0.5em; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(32,33,34); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial">
<DD style="MARGIN-BOTTOM: 0.1em; MARGIN-LEFT: 1.6em; MARGIN-RIGHT: 0px; margin-inline: 1.6em 0px">
<OL style="PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; LIST-STYLE-IMAGE: none; MARGIN: 0.3em 0px 0px 3.2em; PADDING-RIGHT: 0px; margin-inline: 3.2em 0px">
<LI style="MARGIN-BOTTOM: 0.1em"><FONT class=extract>Acquire a lock, excluding other threads from running the critical section (steps 2&#8211;4) at the same time; </FONT>
<LI style="MARGIN-BOTTOM: 0.1em"><FONT class=extract>read the value in the memory location; </FONT>
<LI style="MARGIN-BOTTOM: 0.1em"><FONT class=extract>add one to the value; </FONT>
<LI style="MARGIN-BOTTOM: 0.1em"><FONT class=extract>write the incremented value back to the memory location; </FONT>
<LI style="MARGIN-BOTTOM: 0.1em"><FONT class=extract>release the lock.</FONT></LI></OL></DD></DL>
<P style="FONT-SIZE: 16px; FONT-FAMILY: sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(32,33,34); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; MARGIN: 0.5em 0px 1em; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial"><FONT class=extract>This strategy works as expected; the lock prevents other threads from updating the value until it is released. However, when compared with direct use of atomic operations, it can suffer from significant overhead due to lock contention. To improve program performance, it may therefore be a good idea to replace simple critical sections with atomic operations for<SPAN>&nbsp;</SPAN></FONT><A title="Non-blocking synchronization" class=mw-redirect style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: ; border-radius: 2px; overflow-wrap: break-word" href="https://en.wikipedia.org/wiki/Non-blocking_synchronization"><FONT class=extract>non-blocking synchronization</FONT></A><FONT class=extract><SPAN>&nbsp;</SPAN>(as we have just done for the counter with compare-and-swap and fetch-and-increment), instead of the other way around, but unfortunately a significant improvement is not guaranteed and lock-free algorithms can easily become too complicated to be worth the effort.</FONT></P></BODY>