<b> : </b>5. Fancier registers</H1><SPAN id=line-44 class=anchor style="FONT-SIZE: 16px; FONT-FAMILY: sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(0,0,0); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial"></SPAN><SPAN id=line-45 class=anchor style="FONT-SIZE: 16px; FONT-FAMILY: sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(0,0,0); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial"></SPAN>
<P class=line862 style="FONT-SIZE: 16px; FONT-FAMILY: sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(0,0,0); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial">In addition to stock read-write registers, one can also imagine more tricked-out registers that provide additional operations. These usually go by the name of<SPAN>&nbsp;</SPAN><STRONG>read-modify-write</STRONG><SPAN>&nbsp;</SPAN>(RMW) registers, since the additional operations consist of reading the state, applying some function to it, and writing the state back, all as a single atomic action. Examples of RMW registers that have appeared in real machines at various times in the past include:<SPAN id=line-46 class=anchor></SPAN><SPAN id=line-47 class=anchor></SPAN></P>
<DL style="FONT-SIZE: 16px; FONT-FAMILY: sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(0,0,0); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial">
<DT style="MARGIN-TOP: 0.5em; FONT-WEIGHT: bold">test-and-set bits</DT>
<DD style="MARGIN-BOTTOM: 0px; MARGIN-TOP: 0px">A test-and-set operation sets the bit to 1 and returns the old value.<SPAN id=line-48 class=anchor></SPAN></DD>
<DT style="MARGIN-TOP: 0.5em; FONT-WEIGHT: bold">fetch-and-add registers</DT>
<DD style="MARGIN-BOTTOM: 0px; MARGIN-TOP: 0px">A fetch-and-add operations adds some increment (typically -1 or 1) to the register and returns the old value.<SPAN id=line-49 class=anchor></SPAN></DD>
<DT style="MARGIN-TOP: 0.5em; FONT-WEIGHT: bold">compare-and-swap registers</DT>
<DD style="MARGIN-BOTTOM: 0px; MARGIN-TOP: 0px">Compare-and-swap writes a new value only if the previous value is equal to a supplied test value.<SPAN id=line-50 class=anchor></SPAN><SPAN id=line-51 class=anchor></SPAN></DD></DL>
<P class=line862 style="FONT-SIZE: 16px; FONT-FAMILY: sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(0,0,0); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial">These are all designed to solve various forms of<SPAN>&nbsp;</SPAN><A style="TEXT-DECORATION: none; BORDER-TOP: 0px; BORDER-RIGHT: 0px; BORDER-BOTTOM: 0px; COLOR: rgb(68,119,255); BORDER-LEFT: 0px" href="https://www.cs.yale.edu/homes/aspnes/pinewiki/MutualExclusion.html">MutualExclusion</A><SPAN>&nbsp;</SPAN>or locking.<SPAN id=line-52 class=anchor></SPAN><SPAN id=line-53 class=anchor></SPAN></P>
<P class=line874 style="FONT-SIZE: 16px; FONT-FAMILY: sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(0,0,0); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial">Some more exotic read-modify-write registers that have appeared in the literature are<SPAN id=line-54 class=anchor></SPAN><SPAN id=line-55 class=anchor></SPAN></P>
<DL style="FONT-SIZE: 16px; FONT-FAMILY: sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(0,0,0); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial">
<DT style="MARGIN-TOP: 0.5em; FONT-WEIGHT: bold">fetch-and-cons</DT>
<DD style="MARGIN-BOTTOM: 0px; MARGIN-TOP: 0px">Contents of the register is a linked list; fetch-and-cons adds a new head and returns the old list.<SPAN id=line-56 class=anchor></SPAN></DD>
<DT style="MARGIN-TOP: 0.5em; FONT-WEIGHT: bold">sticky bits (or sticky registers)</DT>
<DD style="MARGIN-BOTTOM: 0px; MARGIN-TOP: 0px">Once the initial empty value is overwritten, all further writes fail.<SPAN id=line-57 class=anchor></SPAN></DD>
<DT style="MARGIN-TOP: 0.5em; FONT-WEIGHT: bold">bank accounts</DT>
<DD style="MARGIN-BOTTOM: 0px; MARGIN-TOP: 0px">
<P class=line862 style="MARGIN: 0.25em 0px">Replace the write operation with<SPAN>&nbsp;</SPAN><EM>deposit</EM>, which adds a non-negative amount to the state, and<SPAN>&nbsp;</SPAN><EM>withdraw</EM>, which subtracts a non-negative amount from the state provided the result would not go below 0; otherwise, it has no effect.<SPAN id=line-58 class=anchor></SPAN><SPAN id=line-59 class=anchor></SPAN></P></DD></DL>
<P class=line874 style="FONT-SIZE: 16px; FONT-FAMILY: sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(0,0,0); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial">These solve harder problems under bad conditions. Note that they all have to return something in response to an invocation: while one might imagine using blocking objects like locks or semaphores, these don't fit into the RMW framework.<SPAN id=line-60 class=anchor></SPAN><SPAN id=line-61 class=anchor></SPAN></P>
<P class=line862 style="FONT-SIZE: 16px; FONT-FAMILY: sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(0,0,0); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial">We can also consider generic read-modify-write registers that can compute arbitrary functions (passed as an argument to the read-modify-write operation) in the modify step. Here we typically assume that the read-modify-write operation returns the old value of the register. Generic read-modify-write registers are not commonly found in hardware but can be easily simulated (in the absence of failures) using<SPAN>&nbsp;</SPAN><A style="TEXT-DECORATION: none; BORDER-TOP: 0px; BORDER-RIGHT: 0px; BORDER-BOTTOM: 0px; COLOR: rgb(68,119,255); BORDER-LEFT: 0px" href="https://www.cs.yale.edu/homes/aspnes/pinewiki/MutualExclusion.html">MutualExclusion</A>.<SPAN id=line-62 class=anchor></SPAN><SPAN id=line-63 class=anchor></SPAN></P>
<P class=line867 style="FONT-SIZE: 16px; FONT-FAMILY: sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(0,0,0); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial">