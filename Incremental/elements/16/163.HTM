<H1 id=Atomic_registers style="FONT-FAMILY: sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial"><FONT class=extract>1. Atomic registers</FONT></H1><SPAN id=line-6 class=anchor style="FONT-SIZE: 16px; FONT-FAMILY: sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(0,0,0); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial"></SPAN><SPAN id=line-7 class=anchor style="FONT-SIZE: 16px; FONT-FAMILY: sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(0,0,0); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial"></SPAN>
<P class=line862 style="FONT-SIZE: 16px; FONT-FAMILY: sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(0,0,0); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial"><FONT class=extract>An<SPAN>&nbsp;</SPAN><STRONG>atomic register</STRONG><SPAN>&nbsp;</SPAN>supports read and write operations; we think of these as happening instantaneously, and think of operations of different processes as interleaved in some sequence. Each read operation on a particular register returns the value written by the last previous write operation. Write operations return nothing.<SPAN id=line-8 class=anchor></SPAN><SPAN id=line-9 class=anchor></SPAN></FONT></P>
<P class=line862 style="FONT-SIZE: 16px; FONT-FAMILY: sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(0,0,0); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial"><FONT class=extract>A process is defined by giving, for each state, the operation that it would like to do next, together with a transition function that specifies how the state will be updated in response to the return value of that operation. A configuration of the system consists of a vector of states for the processes and a vector of value for the registers. An execution consists of a sequence of alternating configurations and operations C<SUB>0</SUB>, &#960;<SUB>1</SUB>, C<SUB>1</SUB>, &#960;<SUB>2</SUB>, C<SUB>2</SUB><SPAN>&nbsp;</SPAN>..., where in each triple C<SUB>i</SUB>, &#960;<SUB>i+1</SUB>, C<SUB>i+1</SUB><SPAN>&nbsp;</SPAN>the configuration C<SUB>i+1</SUB><SPAN>&nbsp;</SPAN>is the result of applying &#960;<SUB>i+1</SUB><SPAN>&nbsp;</SPAN>to configuration C<SUB>i</SUB>. For read operations, this means that the state of the reading process is updated according to its transition function. For write operations, the state of the writing process is updated, and the state of the written register is also updated.<SPAN id=line-10 class=anchor></SPAN><SPAN id=line-11 class=anchor></SPAN></FONT></P>
<P class=line874 style="FONT-SIZE: 16px; FONT-FAMILY: sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(0,0,0); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial"><FONT class=extract>Pseudocode for shared-memory protocols is usually written using standard pseudocode conventions, with the register operations appearing either as explicit subroutine calls or implicitly as references to shared variables. Sometimes this can lead to ambiguity; for example, in the code fragment<SPAN id=line-12 class=anchor></SPAN><SPAN id=line-13 class=anchor></SPAN><SPAN id=line-14 class=anchor></SPAN></FONT></P><PRE style="FONT-SIZE: 16px; BORDER-TOP: rgb(174,189,204) 1pt solid; FONT-FAMILY: courier, monospace; BORDER-RIGHT: rgb(174,189,204) 1pt solid; WHITE-SPACE: pre-wrap; WORD-SPACING: 0px; BORDER-BOTTOM: rgb(174,189,204) 1pt solid; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(0,0,0); PADDING-BOTTOM: 5pt; FONT-STYLE: normal; PADDING-TOP: 5pt; PADDING-LEFT: 5pt; BORDER-LEFT: rgb(174,189,204) 1pt solid; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; PADDING-RIGHT: 5pt; BACKGROUND-COLOR: rgb(243,245,247); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial; overflow-wrap: break-word"><SPAN id=line-1 class=anchor></SPAN><FONT class=extract>    done &#8592; leftDone and rightDone    </FONT></PRE><SPAN id=line-15 class=anchor style="FONT-SIZE: 16px; FONT-FAMILY: sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(0,0,0); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial"></SPAN><SPAN id=line-16 class=anchor style="FONT-SIZE: 16px; FONT-FAMILY: sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(0,0,0); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial"></SPAN>
<P class=line862 style="FONT-SIZE: 16px; FONT-FAMILY: sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(0,0,0); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial"><FONT class=extract>When all three variables are shared, it is clear that the operation<SPAN>&nbsp;</SPAN><TT class=backtick>write(done,&nbsp;some-value)</TT><SPAN>&nbsp;</SPAN>happens after<SPAN>&nbsp;</SPAN><TT class=backtick>read(leftDone)</TT><SPAN>&nbsp;</SPAN>and<SPAN>&nbsp;</SPAN><TT class=backtick>read(rightDone)</TT>, but it is not clear which of<SPAN>&nbsp;</SPAN><TT class=backtick>read(leftDone)</TT><SPAN>&nbsp;</SPAN>and<SPAN>&nbsp;</SPAN><TT class=backtick>read(rightDone)</TT><SPAN>&nbsp;</SPAN>happens first. When the order is important, we'll write the sequence out explicitly:<SPAN id=line-17 class=anchor></SPAN><SPAN id=line-18 class=anchor></SPAN><SPAN id=line-19 class=anchor></SPAN><SPAN id=line-20 class=anchor></SPAN><SPAN id=line-21 class=anchor></SPAN></FONT></P><PRE style="FONT-SIZE: 16px; BORDER-TOP: rgb(174,189,204) 1pt solid; FONT-FAMILY: courier, monospace; BORDER-RIGHT: rgb(174,189,204) 1pt solid; WHITE-SPACE: pre-wrap; WORD-SPACING: 0px; BORDER-BOTTOM: rgb(174,189,204) 1pt solid; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(0,0,0); PADDING-BOTTOM: 5pt; FONT-STYLE: normal; PADDING-TOP: 5pt; PADDING-LEFT: 5pt; BORDER-LEFT: rgb(174,189,204) 1pt solid; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; PADDING-RIGHT: 5pt; BACKGROUND-COLOR: rgb(243,245,247); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial; overflow-wrap: break-word"><SPAN id=line-1-1 class=anchor></SPAN><FONT class=extract>    leftIsDone &#8592; read(leftDone)
<SPAN id=line-2 class=anchor></SPAN>    rightIsDone &#8592; read(rightDone)
<SPAN id=line-3 class=anchor></SPAN>    write(done, leftIsDone and rightIsDone)</FONT></PRE><SPAN id=line-22 class=anchor style="FONT-SIZE: 16px; FONT-FAMILY: sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(0,0,0); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial"></SPAN>
<P class=line862 style="FONT-SIZE: 16px; FONT-FAMILY: sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(0,0,0); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial"><FONT class=extract>Here<SPAN>&nbsp;</SPAN><TT class=backtick>leftIsDone</TT><SPAN>&nbsp;</SPAN>and<SPAN>&nbsp;</SPAN><TT class=backtick>rightIsDone</TT><SPAN>&nbsp;</SPAN>are internal variables of the process, so using them does not require read or write operations to the shared memory.<SPAN id=line-23 class=anchor></SPAN><SPAN id=line-24 class=anchor></SPAN><SPAN id=line-25 class=anchor></SPAN></FONT></P>
<P class=line867 style="FONT-SIZE: 16px; FONT-FAMILY: sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(0,0,0); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial"><FONT class=extract></FONT></P>
<H1 id=Single-writer_versus_multi-writer_registers style="FONT-FAMILY: sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial"><FONT class=extract>2. Single-writer versus multi-writer registers</FONT></H1><SPAN id=line-26 class=anchor style="FONT-SIZE: 16px; FONT-FAMILY: sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(0,0,0); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial"></SPAN><SPAN id=line-27 class=anchor style="FONT-SIZE: 16px; FONT-FAMILY: sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(0,0,0); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial"></SPAN>
<P class=line862 style="FONT-SIZE: 16px; FONT-FAMILY: sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(0,0,0); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial"><FONT class=extract>One variation that does come up even with atomic registers is what processes are allowed to read or write a particular register. A typical assumption is that registers are<SPAN>&nbsp;</SPAN><STRONG>single-writer multi-reader</STRONG>&#8212;there is only one process that can write to the register (which simplifies implementation since we don't have to arbitrate which of two near-simultaneous writes gets in last and thus leaves the long-term value), although it's also common to assume<SPAN>&nbsp;</SPAN><STRONG>multi-writer multi-reader</STRONG><SPAN>&nbsp;</SPAN>registers, which if not otherwise available can be built from single-writer multi-reader registers using<SPAN>&nbsp;</SPAN></FONT><A style="TEXT-DECORATION: none; BORDER-TOP: 0px; BORDER-RIGHT: 0px; BORDER-BOTTOM: 0px; COLOR: rgb(68,119,255); BORDER-LEFT: 0px" href="https://www.cs.yale.edu/homes/aspnes/pinewiki/AtomicSnapshot.html"><FONT class=extract>AtomicSnapshot</FONT></A><FONT class=extract>. Less common are<SPAN>&nbsp;</SPAN><STRONG>single-reader single-writer</STRONG><SPAN>&nbsp;</SPAN>registers, which act much like message-passing channels except that the receiver has to make an explicit effort to pick up its mail.<SPAN id=line-28 class=anchor></SPAN><SPAN id=line-29 class=anchor></SPAN></FONT></P>
<P class=line867 style="FONT-SIZE: 16px; FONT-FAMILY: sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(0,0,0); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial"><FONT class=extract></FONT></P>
<H1 id=Fairness_and_crashes style="FONT-FAMILY: sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial"><FONT class=extract>3. Fairness and crashes</FONT></H1><SPAN id=line-30 class=anchor style="FONT-SIZE: 16px; FONT-FAMILY: sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(0,0,0); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial"></SPAN><SPAN id=line-31 class=anchor style="FONT-SIZE: 16px; FONT-FAMILY: sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(0,0,0); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial"></SPAN>
<P class=line862 style="FONT-SIZE: 16px; FONT-FAMILY: sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(0,0,0); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial"><FONT class=extract>From the perspective of a schedule, the fairness condition says that every processes gets to perform an operation infinitely often, unless it enters either a crashed or halting state where it invokes no further operations. (Note that unlike in<SPAN>&nbsp;</SPAN></FONT><A style="TEXT-DECORATION: none; BORDER-TOP: 0px; BORDER-RIGHT: 0px; BORDER-BOTTOM: 0px; COLOR: rgb(68,119,255); BORDER-LEFT: 0px" href="https://www.cs.yale.edu/homes/aspnes/pinewiki/AsynchronousMessagePassing.html"><FONT class=extract>AsynchronousMessagePassing</FONT></A><FONT class=extract>, there is no way to wake up a process once it stops doing operations, since the only way to detect that any activity is happening is to read a register and notice it changed.) Because the registers (at least in in multi-reader models) provide a permanent fault-free record of past history, shared-memory systems are much less vulnerable to crash failures than message-passing systems (though<SPAN>&nbsp;</SPAN></FONT><A style="TEXT-DECORATION: none; BORDER-TOP: 0px; BORDER-RIGHT: 0px; BORDER-BOTTOM: 0px; COLOR: rgb(68,119,255); BORDER-LEFT: 0px" href="https://www.cs.yale.edu/homes/aspnes/pinewiki/FischerLynchPaterson.html"><FONT class=extract>FischerLynchPaterson</FONT></A><FONT class=extract><SPAN>&nbsp;</SPAN>still applies); so in extreme cases, we may assume as many as n-1 crash failures, which makes the fairness condition very weak. The n-1 crash failures case is called the<SPAN>&nbsp;</SPAN><STRONG>wait-free</STRONG><SPAN>&nbsp;</SPAN>case&#8212;since no process can wait for any other process to do anything&#8212;and has been extensively studied in the literature.<SPAN id=line-32 class=anchor></SPAN><SPAN id=line-33 class=anchor></SPAN></FONT></P>
<P class=line874 style="FONT-SIZE: 16px; FONT-FAMILY: sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(0,0,0); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial"><FONT class=extract>For historical reasons, work on shared-memory systems has tended to assume crash failures rather than Byzantine failures&#8212;possibly because Byzantine failures are easier to prevent when you have several processes sitting in the same machine than when they are spread across the network, or possibly because in multi-writer situations a Byzantine process can do much more damage. But the model by itself doesn't put any constraints on the kinds of process failures that might occur.<SPAN id=line-34 class=anchor></SPAN><SPAN id=line-35 class=anchor></SPAN></FONT></P>
<P class=line867 style="FONT-SIZE: 16px; FONT-FAMILY: sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(0,0,0); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial"><FONT class=extract></FONT></P>
<H1 id=Complexity_measures style="FONT-FAMILY: sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial"><FONT class=extract>4. Complexity measures</FONT></H1><SPAN id=line-36 class=anchor style="FONT-SIZE: 16px; FONT-FAMILY: sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(0,0,0); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial"></SPAN><SPAN id=line-37 class=anchor style="FONT-SIZE: 16px; FONT-FAMILY: sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(0,0,0); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial"></SPAN>
<DL style="FONT-SIZE: 16px; FONT-FAMILY: sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(0,0,0); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial">
<DT style="MARGIN-TOP: 0.5em; FONT-WEIGHT: bold"><FONT class=extract>Time </FONT>
<DD style="MARGIN-BOTTOM: 0px; MARGIN-TOP: 0px">
<P class=line862 style="MARGIN: 0.25em 0px"><FONT class=extract>Assume that no process takes more than 1 time unit between operations (but some fast processes may take less). Assign the first operation in the schedule time 1 and each subsequent operation the largest time consistent with the bound. The time of the last operation is the time complexity. This is also known as the<SPAN>&nbsp;</SPAN><STRONG>big-step</STRONG><SPAN>&nbsp;</SPAN>or<SPAN>&nbsp;</SPAN><STRONG>round</STRONG><SPAN>&nbsp;</SPAN>measure because the time increases by 1 precisely when every non-faulty process has taken at least one step, and a minimum interval during which this occurs counts as a big step or a round.<SPAN id=line-38 class=anchor></SPAN></FONT></P>
<DT style="MARGIN-TOP: 0.5em; FONT-WEIGHT: bold"><FONT class=extract>Total work </FONT>
<DD style="MARGIN-BOTTOM: 0px; MARGIN-TOP: 0px">
<P class=line862 style="MARGIN: 0.25em 0px"><FONT class=extract>The<SPAN>&nbsp;</SPAN><STRONG>total work</STRONG><SPAN>&nbsp;</SPAN>is just the length of the schedule, i.e. the number of operations. This doesn't consider how the work is divided among the processes, e.g. an O(n<SUP>2</SUP>) total work protocol might dump all O(n<SUP>2</SUP>) operations on a single process and leave the rest with almost nothing to do. There is usually not much of a direct correspondence between total work and time. For example, any algorithm that involves<SPAN>&nbsp;</SPAN><STRONG>busy-waiting</STRONG>&#8212;where a process repeatedly reads a register until it changes&#8212;may have unbounded total work (because the busy-waiter might spin very fast) even though it runs in bounded time (because the register gets written to as soon as some slower process gets around to it). However, it is trivially the case that the time complexity never greater than the total work.<SPAN id=line-39 class=anchor></SPAN></FONT></P>
<DT style="MARGIN-TOP: 0.5em; FONT-WEIGHT: bold"><FONT class=extract>Per-process work </FONT>
<DD style="MARGIN-BOTTOM: 0px; MARGIN-TOP: 0px"><FONT class=extract>Measures the maximum number of operations performed by any single process. Produces more equitably distributed workloads (or reveals inequitably distributed workloads). Like total work, per-process work gives an upper bound on time, since each time unit includes at least one operation from the longest-running process, but time complexity might be much less than per-process work (e.g. in the busy-waiting case above).<SPAN id=line-40 class=anchor></SPAN> </FONT>
<DT style="MARGIN-TOP: 0.5em; FONT-WEIGHT: bold"><FONT class=extract>Contention </FONT>
<DD style="MARGIN-BOTTOM: 0px; MARGIN-TOP: 0px">
<P class=line862 style="MARGIN: 0.25em 0px"><FONT class=extract>In multi-writer or multi-reader situations, it may be bad to have too many processes pounding on the same register at once. The<SPAN>&nbsp;</SPAN><STRONG>contention</STRONG><SPAN>&nbsp;</SPAN>measures the maximum number of pending operations on any single register during the schedule (this is the simplest of several definitions out there). A single-reader single-writer algorithm always has contention at most 2, but achieving such low contention may be harder for multi-reader multi-writer algorithms. Of course, the contention is never worse that n, since we assume each process has at most one pending operation at a time.<SPAN id=line-41 class=anchor></SPAN></FONT></P>
<DT style="MARGIN-TOP: 0.5em; FONT-WEIGHT: bold"><FONT class=extract>Space </FONT>
<DD style="MARGIN-BOTTOM: 0px; MARGIN-TOP: 0px">
<P class=line862 style="MARGIN: 0.25em 0px"><FONT class=extract>Just how big are those registers anyway? Much of the work in this area assumes they are<SPAN>&nbsp;</SPAN><EM>very</EM><SPAN>&nbsp;</SPAN>big. But we can ask for the maximum number of bits in any one register or the total size or number of all registers, and will try to minimize these quantities when possible. We can also look at the size of the internal states of the processes for another measure of space complexity.<SPAN id=line-42 class=anchor></SPAN><SPAN id=line-43 class=anchor></SPAN></FONT></P></DD></DL>
<P class=line867 style="FONT-SIZE: 16px; FONT-FAMILY: sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(0,0,0); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial"><FONT class=extract></FONT></P>
<H1 id=Fancier_registers style="FONT-FAMILY: sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial"><FONT class=extract>5. Fancier registers</FONT></H1><SPAN id=line-44 class=anchor style="FONT-SIZE: 16px; FONT-FAMILY: sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(0,0,0); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial"></SPAN><SPAN id=line-45 class=anchor style="FONT-SIZE: 16px; FONT-FAMILY: sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(0,0,0); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial"></SPAN>
<P class=line862 style="FONT-SIZE: 16px; FONT-FAMILY: sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(0,0,0); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial"><FONT class=extract>In addition to stock read-write registers, one can also imagine more tricked-out registers that provide additional operations. These usually go by the name of<SPAN>&nbsp;</SPAN><STRONG>read-modify-write</STRONG><SPAN>&nbsp;</SPAN>(RMW) registers, since the additional operations consist of reading the state, applying some function to it, and writing the state back, all as a single atomic action. Examples of RMW registers that have appeared in real machines at various times in the past include:<SPAN id=line-46 class=anchor></SPAN><SPAN id=line-47 class=anchor></SPAN></FONT></P>
<DL style="FONT-SIZE: 16px; FONT-FAMILY: sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(0,0,0); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial">
<DT style="MARGIN-TOP: 0.5em; FONT-WEIGHT: bold"><FONT class=extract>test-and-set bits </FONT>
<DD style="MARGIN-BOTTOM: 0px; MARGIN-TOP: 0px"><FONT class=extract>A test-and-set operation sets the bit to 1 and returns the old value.<SPAN id=line-48 class=anchor></SPAN> </FONT>
<DT style="MARGIN-TOP: 0.5em; FONT-WEIGHT: bold"><FONT class=extract>fetch-and-add registers </FONT>
<DD style="MARGIN-BOTTOM: 0px; MARGIN-TOP: 0px"><FONT class=extract>A fetch-and-add operations adds some increment (typically -1 or 1) to the register and returns the old value.<SPAN id=line-49 class=anchor></SPAN> </FONT>
<DT style="MARGIN-TOP: 0.5em; FONT-WEIGHT: bold"><FONT class=extract>compare-and-swap registers </FONT>
<DD style="MARGIN-BOTTOM: 0px; MARGIN-TOP: 0px"><FONT class=extract>Compare-and-swap writes a new value only if the previous value is equal to a supplied test value.<SPAN id=line-50 class=anchor></SPAN><SPAN id=line-51 class=anchor></SPAN></FONT></DD></DL>
<P class=line862 style="FONT-SIZE: 16px; FONT-FAMILY: sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(0,0,0); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial"><FONT class=extract>These are all designed to solve various forms of<SPAN>&nbsp;</SPAN></FONT><A style="TEXT-DECORATION: none; BORDER-TOP: 0px; BORDER-RIGHT: 0px; BORDER-BOTTOM: 0px; COLOR: rgb(68,119,255); BORDER-LEFT: 0px" href="https://www.cs.yale.edu/homes/aspnes/pinewiki/MutualExclusion.html"><FONT class=extract>MutualExclusion</FONT></A><FONT class=extract><SPAN>&nbsp;</SPAN>or locking.<SPAN id=line-52 class=anchor></SPAN><SPAN id=line-53 class=anchor></SPAN></FONT></P>
<P class=line874 style="FONT-SIZE: 16px; FONT-FAMILY: sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(0,0,0); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial"><FONT class=extract>Some more exotic read-modify-write registers that have appeared in the literature are<SPAN id=line-54 class=anchor></SPAN><SPAN id=line-55 class=anchor></SPAN></FONT></P>
<DL style="FONT-SIZE: 16px; FONT-FAMILY: sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(0,0,0); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial">
<DT style="MARGIN-TOP: 0.5em; FONT-WEIGHT: bold"><FONT class=extract>fetch-and-cons </FONT>
<DD style="MARGIN-BOTTOM: 0px; MARGIN-TOP: 0px"><FONT class=extract>Contents of the register is a linked list; fetch-and-cons adds a new head and returns the old list.<SPAN id=line-56 class=anchor></SPAN> </FONT>
<DT style="MARGIN-TOP: 0.5em; FONT-WEIGHT: bold"><FONT class=extract>sticky bits (or sticky registers) </FONT>
<DD style="MARGIN-BOTTOM: 0px; MARGIN-TOP: 0px"><FONT class=extract>Once the initial empty value is overwritten, all further writes fail.<SPAN id=line-57 class=anchor></SPAN> </FONT>
<DT style="MARGIN-TOP: 0.5em; FONT-WEIGHT: bold"><FONT class=extract>bank accounts </FONT>
<DD style="MARGIN-BOTTOM: 0px; MARGIN-TOP: 0px">
<P class=line862 style="MARGIN: 0.25em 0px"><FONT class=extract>Replace the write operation with<SPAN>&nbsp;</SPAN><EM>deposit</EM>, which adds a non-negative amount to the state, and<SPAN>&nbsp;</SPAN><EM>withdraw</EM>, which subtracts a non-negative amount from the state provided the result would not go below 0; otherwise, it has no effect.<SPAN id=line-58 class=anchor></SPAN><SPAN id=line-59 class=anchor></SPAN></FONT></P></DD></DL>
<P class=line874 style="FONT-SIZE: 16px; FONT-FAMILY: sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(0,0,0); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial"><FONT class=extract>These solve harder problems under bad conditions. Note that they all have to return something in response to an invocation: while one might imagine using blocking objects like locks or semaphores, these don't fit into the RMW framework.<SPAN id=line-60 class=anchor></SPAN><SPAN id=line-61 class=anchor></SPAN></FONT></P>
<P class=line862 style="FONT-SIZE: 16px; FONT-FAMILY: sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(0,0,0); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial"><FONT class=extract>We can also consider generic read-modify-write registers that can compute arbitrary functions (passed as an argument to the read-modify-write operation) in the modify step. Here we typically assume that the read-modify-write operation returns the old value of the register. Generic read-modify-write registers are not commonly found in hardware but can be easily simulated (in the absence of failures) using<SPAN>&nbsp;</SPAN></FONT><A style="TEXT-DECORATION: none; BORDER-TOP: 0px; BORDER-RIGHT: 0px; BORDER-BOTTOM: 0px; COLOR: rgb(68,119,255); BORDER-LEFT: 0px" href="https://www.cs.yale.edu/homes/aspnes/pinewiki/MutualExclusion.html"><FONT class=extract>MutualExclusion</FONT></A><FONT class=extract>.<SPAN id=line-62 class=anchor></SPAN><SPAN id=line-63 class=anchor></SPAN></FONT></P>
<P class=line867 style="FONT-SIZE: 16px; FONT-FAMILY: sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(0,0,0); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial"><FONT class=extract></FONT></P>
<H1 id=Examples style="FONT-FAMILY: sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial"><FONT class=extract>6. Examples</FONT></H1><SPAN id=line-64 class=anchor style="FONT-SIZE: 16px; FONT-FAMILY: sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(0,0,0); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial"></SPAN><SPAN id=line-65 class=anchor style="FONT-SIZE: 16px; FONT-FAMILY: sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(0,0,0); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial"></SPAN>
<UL style="FONT-SIZE: 16px; FONT-FAMILY: sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(0,0,0); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial">
<LI>
<P class=line862 style="MARGIN: 0.25em 0px"><FONT class=extract>A single-writer single-reader system can simulate<SPAN>&nbsp;</SPAN></FONT><A style="TEXT-DECORATION: none; BORDER-TOP: 0px; BORDER-RIGHT: 0px; BORDER-BOTTOM: 0px; COLOR: rgb(68,119,255); BORDER-LEFT: 0px" href="https://www.cs.yale.edu/homes/aspnes/pinewiki/AsynchronousMessagePassing.html"><FONT class=extract>AsynchronousMessagePassing</FONT></A><FONT class=extract>. We use one register for each channel, which contains every message ever sent on the channel. To send a message, a process writes a new list that appends the new message to the end. Each process must also periodically read all of its incoming channels to detect if there is any mail for it. Time complexity is not too bad (comparable to the original message-passing algorithm), contention is excellent, but work and space are both unbounded. With some handshaking it is possible to cut down the space by having processes buffer outgoing messages internally and put only one message in the register at a time, but reducing the work is impossible, since the only way I can detect if somebody sent me a message is by doing a read.<SPAN id=line-66 class=anchor></SPAN></FONT></P>
<LI><FONT class=extract>A test-and-set bit can implement a lock, where whoever grabs the lock first keeps it until they release it. The grab-lock operation is just a test-and-set: if the process gets back 0, it has the lock, and if it gets back 1, it doesn't. (This requires busy-waiting if I want to keep trying until I get it.) To release the lock, write 0 into the register with a normal write operation. Similar tricks can be done with fetch-and-add or compare-and-swap.<SPAN id=line-67 class=anchor></SPAN> </FONT>
<LI><FONT class=extract>A fetch-and-cons, sticky-bit, or bank-account object can solve agreement, even in a wait-free system with up to n-1 crash failures. For fetch-and-cons or sticky-bit we have each process try to write its input into the register using the special operation, and then read the decision value in a second read operation (for fetch-and-cons, we take the element of the list that was consed first). For the bank-account we need to assume that it is initialized to some reasonably large nonzero value k (k = 3 works), and then everybody attempts to withdraw k-input from the account. The resulting account balance is the common decision value.<SPAN id=line-68 class=anchor></SPAN> </FONT>
<P class=line862 style="MARGIN: 0.25em 0px"><FONT class=extract>Test-and-set bits, fetch-and-add registers, and compare-and-swap registers can't solve wait-free agreement<SUP><A id=fndef-410a12d58eae7f6e9a985d38a0bad6de0c7311ca-0 style="TEXT-DECORATION: none; BORDER-TOP: 0px; BORDER-RIGHT: 0px; BORDER-BOTTOM: 0px; COLOR: rgb(68,119,255); BORDER-LEFT: 0px" href="https://www.cs.yale.edu/homes/aspnes/pinewiki/AsynchronousSharedMemory.html#fnref-410a12d58eae7f6e9a985d38a0bad6de0c7311ca">1</A></SUP><SPAN>&nbsp;</SPAN>for more than two processes (we'll prove this eventually). This has dire consequences for anybody trying to build a bank account out of, say, test-and-set bits.<SPAN id=line-69 class=anchor></SPAN><SPAN id=line-70 class=anchor></SPAN></FONT></P></LI></UL>
<P class=line867 style="FONT-SIZE: 16px; FONT-FAMILY: sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(0,0,0); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial"><FONT class=extract></FONT></P>
<H1 id=I.2FO_automata_version style="FONT-FAMILY: sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial"><FONT class=extract>7. I/O automata version</FONT></H1><SPAN id=line-71 class=anchor style="FONT-SIZE: 16px; FONT-FAMILY: sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(0,0,0); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial"></SPAN><SPAN id=line-72 class=anchor style="FONT-SIZE: 16px; FONT-FAMILY: sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(0,0,0); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial"></SPAN>
<P class=line862 style="FONT-SIZE: 16px; FONT-FAMILY: sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(0,0,0); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial"><FONT class=extract>In<SPAN>&nbsp;</SPAN></FONT><A style="TEXT-DECORATION: none; BORDER-TOP: 0px; BORDER-RIGHT: 0px; BORDER-BOTTOM: 0px; COLOR: rgb(68,119,255); BORDER-LEFT: 0px" href="https://www.cs.yale.edu/homes/aspnes/pinewiki/IOAutomata.html"><FONT class=extract>IOAutomata</FONT></A><FONT class=extract><SPAN>&nbsp;</SPAN>terms, register operations get modeled as pairs of actions e.g.<SPAN>&nbsp;</SPAN><EM>invoke-read(p, r)</EM>,<SPAN>&nbsp;</SPAN><EM>respond-read(p, r, value)</EM><SPAN>&nbsp;</SPAN>or<SPAN>&nbsp;</SPAN><EM>invoke-write(p, r, value)</EM>,<SPAN>&nbsp;</SPAN><EM>respond-write(p, r)</EM>, where the first is an input action to the register and the second is the corresponding output action. (This is a bit like<SPAN>&nbsp;</SPAN><EM>send</EM><SPAN>&nbsp;</SPAN>and<SPAN>&nbsp;</SPAN><EM>recv</EM>, except the response always goes back to the invoking process instead of to somebody else.) The register is<SPAN>&nbsp;</SPAN><STRONG>atomic</STRONG><SPAN>&nbsp;</SPAN>because even though a read or write is split into two actions, it appears to occur instantaneously at some point in between the two actions, as if there was a real internal read or write action happening that just happened to be triggered when the register finally got around to dealing with the invocation, and whose return value (if any) is delivered at some later date in the response. Subject to this assumption, the actual return value of a read operation will be the value appearing in the most recent previous write, or some default initial value if there is no previous write.<SPAN id=line-73 class=anchor></SPAN><SPAN id=line-74 class=anchor></SPAN></FONT></P>
<P class=line874 style="FONT-SIZE: 16px; FONT-FAMILY: sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(0,0,0); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial"><FONT class=extract>We could define an atomic register using a reference implementation, e.g.<SPAN id=line-75 class=anchor></SPAN><SPAN id=line-76 class=anchor></SPAN></FONT></P>
<DL style="FONT-SIZE: 16px; FONT-FAMILY: sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(0,0,0); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial">
<DT style="MARGIN-TOP: 0.5em; FONT-WEIGHT: bold"><FONT class=extract>states </FONT>
<DD style="MARGIN-BOTTOM: 0px; MARGIN-TOP: 0px"><FONT class=extract>value &#215; (list of pending reads) &#215; (list of undelivered (p, value) read responses) &#215; (list of pending (p, value) writes) &#215; (list of undelivered write responses)<SPAN id=line-77 class=anchor></SPAN> </FONT>
<DT style="MARGIN-TOP: 0.5em; FONT-WEIGHT: bold"><FONT class=extract>actions </FONT>
<DD style="MARGIN-BOTTOM: 0px; MARGIN-TOP: 0px"><SPAN id=line-78 class=anchor></SPAN>
<DL>
<DT style="MARGIN-TOP: 0.5em; FONT-WEIGHT: bold"><FONT class=extract>invoke-read(p, r) </FONT>
<DD style="MARGIN-BOTTOM: 0px; MARGIN-TOP: 0px"><FONT class=extract>(input) effect: add p to list of pending reads<SPAN id=line-79 class=anchor></SPAN> </FONT>
<DT style="MARGIN-TOP: 0.5em; FONT-WEIGHT: bold"><FONT class=extract>respond-read(p, r, v) </FONT>
<DD style="MARGIN-BOTTOM: 0px; MARGIN-TOP: 0px"><FONT class=extract>(output) precondition: (p, v) is in list of undelivered responses; effect: remove (p, v) from list<SPAN id=line-80 class=anchor></SPAN> </FONT>
<DT style="MARGIN-TOP: 0.5em; FONT-WEIGHT: bold"><FONT class=extract>do-read(p, r, v) </FONT>
<DD style="MARGIN-BOTTOM: 0px; MARGIN-TOP: 0px"><FONT class=extract>(internal) precondition: p is in list of pending reads, v = value; effect: remove p from that list, add (p, v) to response list<SPAN id=line-81 class=anchor></SPAN> </FONT>
<LI style="LIST-STYLE-TYPE: none"><FONT class=extract>..similar actions for invoke-read and respond-read...<SPAN id=line-82 class=anchor></SPAN> </FONT></LI>
<DT style="MARGIN-TOP: 0.5em; FONT-WEIGHT: bold"><FONT class=extract>do-write(p, r, v) </FONT>
<DD style="MARGIN-BOTTOM: 0px; MARGIN-TOP: 0px"><FONT class=extract>(internal) precondition: (p, v) is in list of pending writes; effect value := v, remove (p, v) from pending write list, add p to write response list<SPAN id=line-83 class=anchor></SPAN><SPAN id=line-84 class=anchor></SPAN></FONT></DD></DL></DD></DL>
<P class=line862 style="FONT-SIZE: 16px; FONT-FAMILY: sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(0,0,0); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial"><FONT class=extract>But this gets ugly since almost all of the code involves buffering invocations and responses, and the real action is in the internal do-read and do-write actions. So when modeling at asynchronous shared memory we deviate from I/O Automata orthodoxy and just keep track of the internal do-read and do-write actions, and pretend that the invocations and responses happen at the same time as the internal actions (i.e., "atomically"). This is the reason for assuming that registers are atomic: if the registers were weaker (e.g. if you had a register that might return arbitrary values to a read that happens in between an invoke-write and the corresponding respond-write) then we would have to keep track of the full details of what starts and finishes when. Instead, when describing an execution of a shared-memory system we write down a<SPAN>&nbsp;</SPAN><STRONG>schedule</STRONG><SPAN>&nbsp;</SPAN>of register operations, e.g. write(p1, r1, 7), read(p1, r1, 7), write(p2, r, 8), write(p3, r, 9), read(p1, r1, 9) where each entry in the schedule corresponds to an internal do-read or do-write action in the reference implementation.<SPAN id=line-85 class=anchor></SPAN><SPAN id=line-86 class=anchor></SPAN></FONT></P>
<P class=line862 style="FONT-SIZE: 16px; FONT-FAMILY: sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(0,0,0); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial"><FONT class=extract>For simplicity, we generally require that a process have at most one outstanding invocation at a time: having executed e.g. invoke-read on some register, it can't do another invoke-read or invoke-write until it gets back a response-read or response-write. This allows us to define the process behavior in terms of a<SPAN>&nbsp;</SPAN><EM>deterministic</EM><SPAN>&nbsp;</SPAN>choice of what operation to invoke after each response comes back.<SPAN id=line-87 class=anchor></SPAN><SPAN id=line-88 class=anchor></SPAN></FONT></P>
<P class=line867 style="FONT-SIZE: 16px; FONT-FAMILY: sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(0,0,0); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial"><FONT class=extract></FONT></P><FONT class=extract>
<HR style="FONT-SIZE: 16px; BORDER-TOP: 0px; HEIGHT: 1pt; FONT-FAMILY: sans-serif; BORDER-RIGHT: 0px; WHITE-SPACE: normal; WORD-SPACING: 0px; BORDER-BOTTOM: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(0,0,0); FONT-STYLE: normal; BORDER-LEFT: 0px; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(156,156,156); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial">
</FONT>
<P class=line874 style="FONT-SIZE: 16px; FONT-FAMILY: sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(0,0,0); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial"><SPAN id=line-89 class=anchor></SPAN><A style="TEXT-DECORATION: none; BORDER-TOP: 0px; BORDER-RIGHT: 0px; BORDER-BOTTOM: 0px; COLOR: rgb(68,119,255); BORDER-LEFT: 0px" href="https://www.cs.yale.edu/homes/aspnes/pinewiki/CategoryDistributedComputingNotes.html"><FONT class=extract>CategoryDistributedComputingNotes</FONT></A><SPAN id=line-90 class=anchor></SPAN></P>
<DIV class=footnotes style="FONT-SIZE: 16px; FONT-FAMILY: sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(0,0,0); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial">
<OL style="PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 2em; MARGIN: 0px 0px 1em; PADDING-RIGHT: 2em">
<LI>
<P style="MARGIN: 0.25em 0px"><A id=fnref-410a12d58eae7f6e9a985d38a0bad6de0c7311ca style="BORDER-TOP: 0px; BORDER-RIGHT: 0px; BORDER-BOTTOM: 0px; COLOR: rgb(0,68,179); BORDER-LEFT: 0px"></A><SPAN id=line-1-1 class=anchor></SPAN><FONT class=extract>Without using randomization or making some other strong assumption about the model. (</FONT><A style="TEXT-DECORATION: none; BORDER-TOP: 0px; BORDER-RIGHT: 0px; BORDER-BOTTOM: 0px; COLOR: rgb(68,119,255); BORDER-LEFT: 0px" href="https://www.cs.yale.edu/homes/aspnes/pinewiki/AsynchronousSharedMemory.html#fndef-410a12d58eae7f6e9a985d38a0bad6de0c7311ca-0"><FONT class=extract>1</FONT></A><FONT class=extract>)</FONT></P></LI></OL></DIV>