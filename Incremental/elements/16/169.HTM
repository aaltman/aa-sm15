<b> : </b>6. Examples</H1><SPAN id=line-64 class=anchor style="FONT-SIZE: 16px; FONT-FAMILY: sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(0,0,0); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial"></SPAN><SPAN id=line-65 class=anchor style="FONT-SIZE: 16px; FONT-FAMILY: sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(0,0,0); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial"></SPAN>
<UL style="FONT-SIZE: 16px; FONT-FAMILY: sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(0,0,0); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial">
<LI>
<P class=line862 style="MARGIN: 0.25em 0px">A single-writer single-reader system can simulate<SPAN>&nbsp;</SPAN><A style="TEXT-DECORATION: none; BORDER-TOP: 0px; BORDER-RIGHT: 0px; BORDER-BOTTOM: 0px; COLOR: rgb(68,119,255); BORDER-LEFT: 0px" href="https://www.cs.yale.edu/homes/aspnes/pinewiki/AsynchronousMessagePassing.html">AsynchronousMessagePassing</A>. We use one register for each channel, which contains every message ever sent on the channel. To send a message, a process writes a new list that appends the new message to the end. Each process must also periodically read all of its incoming channels to detect if there is any mail for it. Time complexity is not too bad (comparable to the original message-passing algorithm), contention is excellent, but work and space are both unbounded. With some handshaking it is possible to cut down the space by having processes buffer outgoing messages internally and put only one message in the register at a time, but reducing the work is impossible, since the only way I can detect if somebody sent me a message is by doing a read.<SPAN id=line-66 class=anchor></SPAN></P></LI>
<LI>A test-and-set bit can implement a lock, where whoever grabs the lock first keeps it until they release it. The grab-lock operation is just a test-and-set: if the process gets back 0, it has the lock, and if it gets back 1, it doesn't. (This requires busy-waiting if I want to keep trying until I get it.) To release the lock, write 0 into the register with a normal write operation. Similar tricks can be done with fetch-and-add or compare-and-swap.<SPAN id=line-67 class=anchor></SPAN></LI>
<LI>A fetch-and-cons, sticky-bit, or bank-account object can solve agreement, even in a wait-free system with up to n-1 crash failures. For fetch-and-cons or sticky-bit we have each process try to write its input into the register using the special operation, and then read the decision value in a second read operation (for fetch-and-cons, we take the element of the list that was consed first). For the bank-account we need to assume that it is initialized to some reasonably large nonzero value k (k = 3 works), and then everybody attempts to withdraw k-input from the account. The resulting account balance is the common decision value.<SPAN id=line-68 class=anchor></SPAN>
<P class=line862 style="MARGIN: 0.25em 0px">Test-and-set bits, fetch-and-add registers, and compare-and-swap registers can't solve wait-free agreement<SUP><A id=fndef-410a12d58eae7f6e9a985d38a0bad6de0c7311ca-0 style="TEXT-DECORATION: none; BORDER-TOP: 0px; BORDER-RIGHT: 0px; BORDER-BOTTOM: 0px; COLOR: rgb(68,119,255); BORDER-LEFT: 0px" href="https://www.cs.yale.edu/homes/aspnes/pinewiki/AsynchronousSharedMemory.html#fnref-410a12d58eae7f6e9a985d38a0bad6de0c7311ca">1</A></SUP><SPAN>&nbsp;</SPAN>for more than two processes (we'll prove this eventually). This has dire consequences for anybody trying to build a bank account out of, say, test-and-set bits.<SPAN id=line-69 class=anchor></SPAN><SPAN id=line-70 class=anchor></SPAN></P></LI></UL>
<P class=line867 style="FONT-SIZE: 16px; FONT-FAMILY: sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(0,0,0); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial">