<B>: Yale distributed computing notes </B>7. I/O automata version
<H1></H1><SPAN id=line-71 class=anchor style="FONT-SIZE: 16px; FONT-FAMILY: sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(0,0,0); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial"></SPAN><SPAN id=line-72 class=anchor style="FONT-SIZE: 16px; FONT-FAMILY: sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(0,0,0); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial"></SPAN>
<P class=line862 style="FONT-SIZE: 16px; FONT-FAMILY: sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(0,0,0); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial">In<SPAN>&nbsp;</SPAN><A style="TEXT-DECORATION: none; BORDER-TOP: 0px; BORDER-RIGHT: 0px; BORDER-BOTTOM: 0px; COLOR: rgb(68,119,255); BORDER-LEFT: 0px" href="https://www.cs.yale.edu/homes/aspnes/pinewiki/IOAutomata.html">IOAutomata</A><SPAN>&nbsp;</SPAN>terms, register operations get modeled as pairs of actions e.g.<SPAN>&nbsp;</SPAN><EM>invoke-read(p, r)</EM>,<SPAN>&nbsp;</SPAN><EM>respond-read(p, r, value)</EM><SPAN>&nbsp;</SPAN>or<SPAN>&nbsp;</SPAN><EM>invoke-write(p, r, value)</EM>,<SPAN>&nbsp;</SPAN><EM>respond-write(p, r)</EM>, where the first is an input action to the register and the second is the corresponding output action. (This is a bit like<SPAN>&nbsp;</SPAN><EM>send</EM><SPAN>&nbsp;</SPAN>and<SPAN>&nbsp;</SPAN><EM>recv</EM>, except the response always goes back to the invoking process instead of to somebody else.) The register is<SPAN>&nbsp;</SPAN><STRONG>atomic</STRONG><SPAN>&nbsp;</SPAN>because even though a read or write is split into two actions, it appears to occur instantaneously at some point in between the two actions, as if there was a real internal read or write action happening that just happened to be triggered when the register finally got around to dealing with the invocation, and whose return value (if any) is delivered at some later date in the response. Subject to this assumption, the actual return value of a read operation will be the value appearing in the most recent previous write, or some default initial value if there is no previous write.<SPAN id=line-73 class=anchor></SPAN><SPAN id=line-74 class=anchor></SPAN></P>
<P class=line874 style="FONT-SIZE: 16px; FONT-FAMILY: sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(0,0,0); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial">We could define an atomic register using a reference implementation, e.g.<SPAN id=line-75 class=anchor></SPAN><SPAN id=line-76 class=anchor></SPAN></P>
<DL style="FONT-SIZE: 16px; FONT-FAMILY: sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(0,0,0); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial">
<DT style="MARGIN-TOP: 0.5em; FONT-WEIGHT: bold">states 
<DD style="MARGIN-BOTTOM: 0px; MARGIN-TOP: 0px">value &#215; (list of pending reads) &#215; (list of undelivered (p, value) read responses) &#215; (list of pending (p, value) writes) &#215; (list of undelivered write responses)<SPAN id=line-77 class=anchor></SPAN> 
<DT style="MARGIN-TOP: 0.5em; FONT-WEIGHT: bold">actions 
<DD style="MARGIN-BOTTOM: 0px; MARGIN-TOP: 0px"><SPAN id=line-78 class=anchor></SPAN>
<DL>
<DT style="MARGIN-TOP: 0.5em; FONT-WEIGHT: bold">invoke-read(p, r) 
<DD style="MARGIN-BOTTOM: 0px; MARGIN-TOP: 0px">(input) effect: add p to list of pending reads<SPAN id=line-79 class=anchor></SPAN> 
<DT style="MARGIN-TOP: 0.5em; FONT-WEIGHT: bold">respond-read(p, r, v) 
<DD style="MARGIN-BOTTOM: 0px; MARGIN-TOP: 0px">(output) precondition: (p, v) is in list of undelivered responses; effect: remove (p, v) from list<SPAN id=line-80 class=anchor></SPAN> 
<DT style="MARGIN-TOP: 0.5em; FONT-WEIGHT: bold">do-read(p, r, v) 
<DD style="MARGIN-BOTTOM: 0px; MARGIN-TOP: 0px">(internal) precondition: p is in list of pending reads, v = value; effect: remove p from that list, add (p, v) to response list<SPAN id=line-81 class=anchor></SPAN> 
<LI style="LIST-STYLE-TYPE: none">..similar actions for invoke-read and respond-read...<SPAN id=line-82 class=anchor></SPAN> </LI>
<DT style="MARGIN-TOP: 0.5em; FONT-WEIGHT: bold">do-write(p, r, v) 
<DD style="MARGIN-BOTTOM: 0px; MARGIN-TOP: 0px">(internal) precondition: (p, v) is in list of pending writes; effect value := v, remove (p, v) from pending write list, add p to write response list<SPAN id=line-83 class=anchor></SPAN><SPAN id=line-84 class=anchor></SPAN></DD></DL></DD></DL>
<P class=line862 style="FONT-SIZE: 16px; FONT-FAMILY: sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(0,0,0); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial">But this gets ugly since almost all of the code involves buffering invocations and responses, and the real action is in the internal do-read and do-write actions. So when modeling at asynchronous shared memory we deviate from I/O Automata orthodoxy and just keep track of the internal do-read and do-write actions, and pretend that the invocations and responses happen at the same time as the internal actions (i.e., "atomically"). This is the reason for assuming that registers are atomic: if the registers were weaker (e.g. if you had a register that might return arbitrary values to a read that happens in between an invoke-write and the corresponding respond-write) then we would have to keep track of the full details of what starts and finishes when. Instead, when describing an execution of a shared-memory system we write down a<SPAN>&nbsp;</SPAN><STRONG>schedule</STRONG><SPAN>&nbsp;</SPAN>of register operations, e.g. write(p1, r1, 7), read(p1, r1, 7), write(p2, r, 8), write(p3, r, 9), read(p1, r1, 9) where each entry in the schedule corresponds to an internal do-read or do-write action in the reference implementation.<SPAN id=line-85 class=anchor></SPAN><SPAN id=line-86 class=anchor></SPAN></P>
<P class=line862 style="FONT-SIZE: 16px; FONT-FAMILY: sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(0,0,0); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial">For simplicity, we generally require that a process have at most one outstanding invocation at a time: having executed e.g. invoke-read on some register, it can't do another invoke-read or invoke-write until it gets back a response-read or response-write. This allows us to define the process behavior in terms of a<SPAN>&nbsp;</SPAN><EM>deterministic</EM><SPAN>&nbsp;</SPAN>choice of what operation to invoke after each response comes back.<SPAN id=line-87 class=anchor></SPAN><SPAN id=line-88 class=anchor></SPAN></P>
<P class=line867 style="FONT-SIZE: 16px; FONT-FAMILY: sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(0,0,0); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial"></P>
<HR style="FONT-SIZE: 16px; BORDER-TOP: 0px; HEIGHT: 1pt; FONT-FAMILY: sans-serif; BORDER-RIGHT: 0px; WHITE-SPACE: normal; WORD-SPACING: 0px; BORDER-BOTTOM: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(0,0,0); FONT-STYLE: normal; BORDER-LEFT: 0px; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(156,156,156); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial">

<P class=line874 style="FONT-SIZE: 16px; FONT-FAMILY: sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(0,0,0); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial"><SPAN id=line-89 class=anchor></SPAN><A style="TEXT-DECORATION: none; BORDER-TOP: 0px; BORDER-RIGHT: 0px; BORDER-BOTTOM: 0px; COLOR: rgb(68,119,255); BORDER-LEFT: 0px" href="https://www.cs.yale.edu/homes/aspnes/pinewiki/CategoryDistributedComputingNotes.html">CategoryDistributedComputingNotes</A><SPAN id=line-90 class=anchor></SPAN></P>
<DIV class=footnotes style="FONT-SIZE: 16px; FONT-FAMILY: sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(0,0,0); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial">
<OL style="PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 2em; MARGIN: 0px 0px 1em; PADDING-RIGHT: 2em">
<LI>
<P style="MARGIN: 0.25em 0px"><A id=fnref-410a12d58eae7f6e9a985d38a0bad6de0c7311ca style="BORDER-TOP: 0px; BORDER-RIGHT: 0px; BORDER-BOTTOM: 0px; COLOR: rgb(0,68,179); BORDER-LEFT: 0px"></A><SPAN id=line-1-1 class=anchor></SPAN>Without using randomization or making some other strong assumption about the model. (<A style="TEXT-DECORATION: none; BORDER-TOP: 0px; BORDER-RIGHT: 0px; BORDER-BOTTOM: 0px; COLOR: rgb(68,119,255); BORDER-LEFT: 0px" href="https://www.cs.yale.edu/homes/aspnes/pinewiki/AsynchronousSharedMemory.html#fndef-410a12d58eae7f6e9a985d38a0bad6de0c7311ca-0">1</A>)</P></LI></OL></DIV>