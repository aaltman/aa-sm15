<B>: </B>Note
<H3></H3>
<P style="BOX-SIZING: border-box; MARGIN-TOP: 0px">Not all deletion operations that are performed within B-Tree indexes are bottom-up deletion operations. There is a distinct category of index tuple deletion:<SPAN>&nbsp;</SPAN><EM class=firstterm style="BOX-SIZING: border-box; FONT-STYLE: italic">simple index tuple deletion</EM>. This is a deferred maintenance operation that deletes index tuples that are known to be safe to delete (those whose item identifier's<SPAN>&nbsp;</SPAN><CODE class=literal style="BOX-SIZING: border-box; FONT-SIZE: 1em; BORDER-TOP: medium none; FONT-FAMILY: monospace, monospace; BORDER-RIGHT: medium none; MARGIN-TOP: 0px; BORDER-BOTTOM: medium none; FONT-WEIGHT: 400; COLOR:  !important; PADDING-BOTTOM: 0px !important; PADDING-TOP: 0px !important; PADDING-LEFT: 0px !important; MARGIN-LEFT: 0px; BORDER-LEFT: medium none; PADDING-RIGHT: 0px !important; MARGIN-RIGHT: 0px; overflow-wrap: break-word; border-radius: 0.25rem">LP_DEAD</CODE><SPAN>&nbsp;</SPAN>bit is already set). Like bottom-up index deletion, simple index deletion takes place at the point that a page split is anticipated as a way of avoiding the split.</P>
<P style="BOX-SIZING: border-box; MARGIN-BOTTOM: 0px !important; MARGIN-TOP: 0px">Simple deletion is opportunistic in the sense that it can only take place when recent index scans set the<SPAN>&nbsp;</SPAN><CODE class=literal style="BOX-SIZING: border-box; FONT-SIZE: 1em; BORDER-TOP: medium none; FONT-FAMILY: monospace, monospace; BORDER-RIGHT: medium none; MARGIN-TOP: 0px; BORDER-BOTTOM: medium none; FONT-WEIGHT: 400; COLOR:  !important; PADDING-BOTTOM: 0px !important; PADDING-TOP: 0px !important; PADDING-LEFT: 0px !important; MARGIN-LEFT: 0px; BORDER-LEFT: medium none; PADDING-RIGHT: 0px !important; MARGIN-RIGHT: 0px; overflow-wrap: break-word; border-radius: 0.25rem">LP_DEAD</CODE><SPAN>&nbsp;</SPAN>bits of affected items in passing. Prior to<SPAN>&nbsp;</SPAN><SPAN class=productname style="BOX-SIZING: border-box">PostgreSQL</SPAN><SPAN>&nbsp;</SPAN>14, the only category of B-Tree deletion was simple deletion. The main differences between it and bottom-up deletion are that only the former is opportunistically driven by the activity of passing index scans, while only the latter specifically targets version churn from<SPAN>&nbsp;</SPAN><CODE class=command style="BOX-SIZING: border-box; FONT-SIZE: 1em; BORDER-TOP: medium none; FONT-FAMILY: monospace, monospace; BORDER-RIGHT: medium none; MARGIN-TOP: 0px; BORDER-BOTTOM: medium none; FONT-WEIGHT: 400; COLOR:  !important; PADDING-BOTTOM: 0px !important; PADDING-TOP: 0px !important; PADDING-LEFT: 0px !important; MARGIN-LEFT: 0px; BORDER-LEFT: medium none; PADDING-RIGHT: 0px !important; MARGIN-RIGHT: 0px; overflow-wrap: break-word; border-radius: 0.25rem">UPDATE</CODE>s that do not logically modify indexed columns.</P>
<DIV></DIV>
<P style="BOX-SIZING: border-box; MARGIN-TOP: 0px">Bottom-up index deletion performs the vast majority of all garbage index tuple cleanup for particular indexes with certain workloads. This is expected with any B-Tree index that is subject to significant version churn from<SPAN>&nbsp;</SPAN><CODE class=command style="BOX-SIZING: border-box; FONT-SIZE: 1em; FONT-FAMILY: monospace, monospace; MARGIN-TOP: 0px; FONT-WEIGHT: 400; COLOR:  !important; MARGIN-LEFT: 0px; MARGIN-RIGHT: 0px; overflow-wrap: break-word; border-radius: 0.25rem">UPDATE</CODE>s that rarely or never logically modify the columns that the index covers. The average and worst-case number of versions per logical row can be kept low purely through targeted incremental deletion passes. It's quite possible that the on-disk size of certain indexes will never increase by even one single page/block despite<SPAN>&nbsp;</SPAN><SPAN class=emphasis style="BOX-SIZING: border-box"><EM style="BOX-SIZING: border-box; FONT-STYLE: italic">constant</EM></SPAN><SPAN>&nbsp;</SPAN>version churn from<SPAN>&nbsp;</SPAN><CODE class=command style="BOX-SIZING: border-box; FONT-SIZE: 1em; FONT-FAMILY: monospace, monospace; MARGIN-TOP: 0px; FONT-WEIGHT: 400; COLOR:  !important; MARGIN-LEFT: 0px; MARGIN-RIGHT: 0px; overflow-wrap: break-word; border-radius: 0.25rem">UPDATE</CODE>s. Even then, an exhaustive<SPAN>&nbsp;</SPAN><SPAN class=quote style="BOX-SIZING: border-box">&#8220;<SPAN class=quote style="BOX-SIZING: border-box">clean sweep</SPAN>&#8221;</SPAN><SPAN>&nbsp;</SPAN>by a<SPAN>&nbsp;</SPAN><CODE class=command style="BOX-SIZING: border-box; FONT-SIZE: 1em; FONT-FAMILY: monospace, monospace; MARGIN-TOP: 0px; FONT-WEIGHT: 400; COLOR:  !important; MARGIN-LEFT: 0px; MARGIN-RIGHT: 0px; overflow-wrap: break-word; border-radius: 0.25rem">VACUUM</CODE><SPAN>&nbsp;</SPAN>operation (typically run in an autovacuum worker process) will eventually be required as a part of<SPAN>&nbsp;</SPAN><SPAN class=emphasis style="BOX-SIZING: border-box"><EM style="BOX-SIZING: border-box; FONT-STYLE: italic">collective</EM></SPAN><SPAN>&nbsp;</SPAN>cleanup of the table and each of its indexes.</P>
<P style="BOX-SIZING: border-box; MARGIN-TOP: 0px">Unlike<SPAN>&nbsp;</SPAN><CODE class=command style="BOX-SIZING: border-box; FONT-SIZE: 1em; FONT-FAMILY: monospace, monospace; MARGIN-TOP: 0px; FONT-WEIGHT: 400; COLOR:  !important; MARGIN-LEFT: 0px; MARGIN-RIGHT: 0px; overflow-wrap: break-word; border-radius: 0.25rem">VACUUM</CODE>, bottom-up index deletion does not provide any strong guarantees about how old the oldest garbage index tuple may be. No index can be permitted to retain<SPAN>&nbsp;</SPAN><SPAN class=quote style="BOX-SIZING: border-box">&#8220;<SPAN class=quote style="BOX-SIZING: border-box">floating garbage</SPAN>&#8221;</SPAN><SPAN>&nbsp;</SPAN>index tuples that became dead prior to a conservative cutoff point shared by the table and all of its indexes collectively. This fundamental table-level invariant makes it safe to recycle table<SPAN>&nbsp;</SPAN><ACRONYM class=acronym style="BOX-SIZING: border-box">TID</ACRONYM>s. This is how it is possible for distinct logical rows to reuse the same table<SPAN>&nbsp;</SPAN><ACRONYM class=acronym style="BOX-SIZING: border-box">TID</ACRONYM><SPAN>&nbsp;</SPAN>over time (though this can never happen with two logical rows whose lifetimes span the same<SPAN>&nbsp;</SPAN><CODE class=command style="BOX-SIZING: border-box; FONT-SIZE: 1em; FONT-FAMILY: monospace, monospace; MARGIN-TOP: 0px; FONT-WEIGHT: 400; COLOR:  !important; MARGIN-LEFT: 0px; MARGIN-RIGHT: 0px; overflow-wrap: break-word; border-radius: 0.25rem">VACUUM</CODE><SPAN>&nbsp;</SPAN>cycle).</P>
<DIV></DIV>
<DIV id=BTREE-DEDUPLICATION class=sect2 style='BOX-SIZING: border-box; FONT-SIZE: 14px; FONT-FAMILY: "Open Sans", sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(0,0,0); FONT-STYLE: normal; TEXT-ALIGN: left; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial'>
<DIV class=titlepage style="BOX-SIZING: border-box">
<DIV style="BOX-SIZING: border-box">
<DIV style="BOX-SIZING: border-box"></DIV></DIV></DIV></DIV>