<b> : </b>Cost</H3>
<P style="MARGIN: 0px 0px 20px">One way to satisfy these competing constraints in a cost-effective manner is to partition the infrastructure and offer it at multiple independent levels of service. In the Bigtable example, we can build two types of clusters: low-latency clusters and throughput clusters. The low-latency clusters are designed to be operated and used by services that need low latency and high reliability. To ensure short queue lengths and satisfy more stringent client isolation requirements, the Bigtable system can be provisioned with a substantial amount of slack capacity for reduced contention and increased redundancy. The throughput clusters, on the other hand, can be provisioned to run very hot and with less redundancy, optimizing throughput over latency. In practice, we are able to satisfy these relaxed needs at a much lower cost, perhaps as little as 10&#8211;50% of the cost of a low-latency cluster. Given Bigtable&#8217;s massive scale, this cost savings becomes significant very quickly.</P>
<P style="MARGIN: 0px 0px 20px">The key strategy with regards to infrastructure is to deliver services with explicitly delineated levels of service, thus enabling the clients to make the right risk and cost trade-offs when building their systems. With explicitly delineated levels of service, the infrastructure providers can effectively externalize the difference in the cost it takes to provide service at a given level to clients. Exposing cost in this way motivates the clients to choose the level of service with the lowest cost that still meets their needs. For example, Google+ can decide to put data critical to enforcing user privacy in a high-availability, globally consistent datastore (e.g., a globally replicated SQL-like system like Spanner<SPAN>&nbsp;</SPAN><A style="TEXT-DECORATION: none; COLOR: rgb(67,136,255)" href="https://sre.google/sre-book/bibliography#Cor12" data-type="xref">[Cor12]</A>), while putting optional data (data that isn&#8217;t critical, but that enhances the user experience) in a cheaper, less reliable, less fresh, and eventually consistent datastore (e.g., a NoSQL store with best-effort replication like Bigtable).</P>
<P style="MARGIN: 0px 0px 20px">Note that we can run multiple classes of services using identical hardware and software. We can provide vastly different service guarantees by adjusting a variety of service characteristics, such as the quantities of resources, the degree of redundancy, the geographical provisioning constraints, and, critically, the infrastructure software<SPAN>&nbsp;</SPAN><SPAN class=keep-together>configuration</SPAN>.</P></SECTION><SECTION id=example-frontend-infrastructure-lqswTZh0c9 data-type="sect3">