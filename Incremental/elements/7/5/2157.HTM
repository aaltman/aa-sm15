<b> : </b>Snapshot Isolation (SI) is a BIG DEAL</H1>
<P>The database and the application have a BIG DEAL: their isolation semantics! In particular, snapshot isolation (SI) is the sweet spot. At this point, I got a nice database history lesson on how the isolation semantics evolved. I would have guessed the semantics had become more strict over time. No, on the contrary, they evolved to be more relaxed to meet performance and scalability expectations. And SI does hit a sweet point in that it still provides the user good isolation guarantees without jeopardizing the scaling behavior of the database by requiring it to serialize everything.&nbsp;</P>
<DIV class=separator style="TEXT-ALIGN: center; CLEAR: both"><A style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(33,150,243); MARGIN-LEFT: 1em; MARGIN-RIGHT: 1em" href="https://blogger.googleusercontent.com/img/a/AVvXsEixuW5RhqakvtCihi8JM91NYzNa7Ud6z3G2SM7D2fS4z1B60hF8w8pZOtnL7TW6n5HJHu9Uap4RNJO9lBCCy5LlXR2FaLterr1EOyZo7cNy7G2hvI0Z82BNQFdPywPLidWFFa76aPyaiVGg5G7ZdpneCtiDASM2uDZZZcLYmMhOW-tlJJVi4FdTMs7tMBI"><IMG style="MAX-WIDTH: 100%; BORDER-TOP: 0px; BORDER-RIGHT: 0px; BORDER-BOTTOM: 0px; BORDER-LEFT: 0px" alt="" src="https://blogger.googleusercontent.com/img/a/AVvXsEixuW5RhqakvtCihi8JM91NYzNa7Ud6z3G2SM7D2fS4z1B60hF8w8pZOtnL7TW6n5HJHu9Uap4RNJO9lBCCy5LlXR2FaLterr1EOyZo7cNy7G2hvI0Z82BNQFdPywPLidWFFa76aPyaiVGg5G7ZdpneCtiDASM2uDZZZcLYmMhOW-tlJJVi4FdTMs7tMBI=w375-h400" width=375 height=400 data-original-width="676" data-original-height="722"></A></DIV>
<P>In the rest of the paper, keep in mind that, an OLTP system is defined as a domain-specific application using a<SPAN>&nbsp;</SPAN><B style="FONT-WEIGHT: bold">RCSI (READ COMMITTED SNAPSHOT ISOLATION) SQL database</B><SPAN>&nbsp;</SPAN>to provide transactions across many concurrent users.</P>
<P>The BIG DEAL splits the scaling responsibilities between the database and the application.</P>
<P></P>
<UL style="TEXT-ALIGN: left">
<LI><B style="FONT-WEIGHT: bold"><U>Scalable DBs don&#8217;t coordinate across disjoint TXs updating different keys.</U></B></LI>
<LI><B style="FONT-WEIGHT: bold"><U>Scalable apps don&#8217;t concurrently update the same key.</U></B></LI></UL>
<P></P>
<P>The big deal provides guarantees from the DB to the App. A scalable application can read all it wants. Updates to disjoint records don&#8217;t coordinate across TXs. Row-locks on disjoint records don&#8217;t coordinate across TXs.</P>
<P>Applications must tolerate these big deal disclaimers. Reads return snapshots: Records have no "current" value. There is no NOW in a BIG DEAL database! Transactions may abort any time but not too often. SELECT with SKIP LOCKED may subset the set of qualifying records as it returns results.</P>
<P>This means applications should change business behavior in order to scale. They can only provide a fuzzy/blurry view of the "current" state/changes. So, apps introduce ambiguity in biz domain specific ways: online retail makes ambiguous promises such as "Usually ships in 24 hours". And apps provide delayed truth: finances of a large company may take days to summarize. Many OLTP apps aggregate values synchronously as they interact with humans. Public TPC benchmarks (e.g., TPC-A, TPC-B, and TPC-C) mandated synchronous aggregations. But, as applications scale they should rethink concentrating the aggregated values of business state in dedicated records. By slowly &nbsp;and asynchronously aggregating these business state, the application can scale in a domain-specific manner.