<b> : </b>Today's OLTP databases don't scale</H1>
<P>Before suggesting a hypothetical scalable database that satisfies the database side of the big deal, Pat shows us why today&#8217;s databases don&#8217;t scale!</P>
<DIV class=separator style="TEXT-ALIGN: center; CLEAR: both"><A style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(33,150,243); MARGIN-LEFT: 1em; MARGIN-RIGHT: 1em" href="https://blogger.googleusercontent.com/img/a/AVvXsEha3LKPdGbzAgf0z8Gr8UwOfZIE5gviSpIYJl7gan52cd7k-tmgXKuzJbXt_je7-vnRpsi_TNc_61xbOZuP5hlRFPPyYdawO4ldh4tXQdCAZH_qH7ehfd-C9Y_t2WJbnrRgLIaNO11wTXITw-yvVn03mjkqR92P3qgcfQ56BRi-5yEAG9EvEs-8oSjyRKs"><IMG style="MAX-WIDTH: 100%; BORDER-TOP: 0px; BORDER-RIGHT: 0px; BORDER-BOTTOM: 0px; BORDER-LEFT: 0px" alt="" src="https://blogger.googleusercontent.com/img/a/AVvXsEha3LKPdGbzAgf0z8Gr8UwOfZIE5gviSpIYJl7gan52cd7k-tmgXKuzJbXt_je7-vnRpsi_TNc_61xbOZuP5hlRFPPyYdawO4ldh4tXQdCAZH_qH7ehfd-C9Y_t2WJbnrRgLIaNO11wTXITw-yvVn03mjkqR92P3qgcfQ56BRi-5yEAG9EvEs-8oSjyRKs=s16000" data-original-width="1528" data-original-height="306"></A></DIV>
<P>In today's MVCC databases, reads &amp; writes fight to access the "current" value of a record. The current version has a<SPAN>&nbsp;</SPAN><B style="FONT-WEIGHT: bold">home</B>&nbsp;location (a partition, server, or a B+ tree) holding the most recently committed version of the record or perhaps an uncommitted version. To update a record, exclusive access to the record's home is required. This causes infighting, contention, and coordination between the updating TX and any concurrent reading TXs.</P>
<P>Even reads contend with each other, since these implementations force MVCC readers to start out looking at the latest version of a key first. Coordination may also be needed to access neighboring records. Accessing key-ranges in B+Trees or similar data structures that may be changing needs cross-transaction coordination.</P>
<P>Readers coordinate with writers. Writers coordinate with readers. Readers coordinate with other readers!</P>
<P>Having a home for a record also makes online repartitioning/sharding (which is required for scalability) very difficult. Moving record keys from one partition to another is complex and impacts application availability.</P>
<P>To address these challenges, Pat proposes a prototype design. The database is structured so that there is no pre-assigned home for a record per key. Unlike partitioned DBs, this allows the database to seamlessly adapt to workload changes.</P>
<P>I liken this to the<SPAN>&nbsp;</SPAN><A style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(33,150,243)" href="https://en.wikipedia.org/wiki/Everything_Is_Miscellaneous">miscellaneous manifesto</A><SPAN>&nbsp;</SPAN>or how instead of neatly organizing/allocating everything a place (which inevitably fails, requiring incessant re-orgs), embracing the messiness and using a search engine to get to information quickly.