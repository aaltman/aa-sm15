<b> : </b>Limitations of today's serverless platforms</H2>In this section, we present an overview of five research projects and discuss the obstacles that prevent existing serverless computing platforms from achieving state-of-the-art performance, i.e., matching the performance of serverful clouds for the same workloads.<BR><A style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(33,150,243); DISPLAY: inline-block" href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgJdHAAaRu84VkFh4un5pHpdWyXMc7_2OUIyUSk5EuW7sOzBIR3HxtyypaCaAP3ipFNTu9uA6RqQfT5L0ClwmV97ElMXWOqZ1VZzZQfDmBjvWCoFuIqnBLZlxc5VxjBCYM8kJd6agc-TzU/s1600/Screen+Shot+2019-05-28+at+8.24.05+PM.png" imageanchor="1"><IMG style="MAX-WIDTH: 100%; BORDER-TOP: 0px; BORDER-RIGHT: 0px; BORDER-BOTTOM: 0px; BORDER-LEFT: 0px" border=0 src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgJdHAAaRu84VkFh4un5pHpdWyXMc7_2OUIyUSk5EuW7sOzBIR3HxtyypaCaAP3ipFNTu9uA6RqQfT5L0ClwmV97ElMXWOqZ1VZzZQfDmBjvWCoFuIqnBLZlxc5VxjBCYM8kJd6agc-TzU/s640/Screen+Shot+2019-05-28+at+8.24.05+PM.png" width=584 height=640></A><BR><BR><B style="FONT-WEIGHT: bold">Serverless SQLite: Databases.&nbsp;</B>A strawman solution would be to run common transactional databases, such as PostgreSQL, Oracle, or MySQL inside cloud functions. However, that immediately runs into a number of challenges. First, serverless computing has no built-in persistent storage, so we need to leverage some remote persistent store, which introduces large latency.&nbsp; Second, these databases assume connection-oriented protocols, e.g., databases are running as servers accepting connections from clients. This assumption conflicts with existing cloud functions that are running behind network address translators, and thus don't support incoming connections. Finally, while many high performance databases rely on shared memory, cloud functions run in isolation so cannot share memory. While shared-nothing distributed databases do not require shared memory, they expect nodes to remain online and be directly addressable.<BR><BR><B style="FONT-WEIGHT: bold">Lack of fine-grained coordination.&nbsp;</B>Applications are left with no choice but to either (1) manage a VM-based system that provides notifications, as in ElastiCache and SAND, or (2) implement their own notification mechanism, such as in ExCamera, that enables cloud functions to communicate with each other via a long-running VM-based rendezvous server. This limitation also suggests that new variants of serverless computing may be worth exploring, for example naming function instances and allowing direct addressability for access to their internal state (e.g., Actors as a Service).<BR><BR><B style="FONT-WEIGHT: bold">Networking challenges.&nbsp;</B>There may be several ways to address this challenge:<BR><BR>
<OL>
<LI>Provide cloud functions with a larger number of cores, similar to VM instances, so multiple tasks can combine and share data among them before sending over the network or after receiving it.</LI>
<LI>Allow the developer to explicitly place the cloud functions on the same VM instance. Offer distributed communication primitives that applications can use out-of-the-box so that cloud providers can allocate cloud functions to the same VM instance.</LI>
<LI>Let applications provide a computation graph, enabling the cloud provider to co-locate the cloud functions to minimize communication overhead.&nbsp;</LI></OL>