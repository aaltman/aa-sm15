<H3 class="post-title entry-title" style="WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FLOAT: left; COLOR: rgb(33,33,33); FONT: bold 30px Roboto, sans-serif; ORPHANS: 2; WIDOWS: 2; MARGIN: 0px 0px 8px; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial"><FONT class=extract>Paper summary. Cloud programming simplified: A Berkeley view on Serverless Computing</FONT></H3>
<DIV class="post-share-buttons post-share-buttons-top" style="FONT-SIZE: 15px; FONT-FAMILY: Roboto, sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; POSITION: relative; TEXT-TRANSFORM: none; FLOAT: right; FONT-WEIGHT: 400; COLOR: rgb(117,117,117); FONT-STYLE: normal; MARGIN-LEFT: 0px; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial; font-variant-ligatures: normal; font-variant-caps: normal">
<DIV class="byline post-share-buttons goog-inline-block" style="WIDTH: 24px; VERTICAL-ALIGN: top; MARGIN-TOP: 0px; POSITION: relative; COLOR: ; MARGIN-LEFT: 0px; DISPLAY: inline-block; LINE-HEIGHT: 24px; MARGIN-RIGHT: 0px">
<DIV class=sharing style="FLOAT: right" aria-owns=sharing-popup-Blog1-byline-1728057543788324019 data-title="Paper summary. Cloud programming simplified: A Berkeley view on Serverless Computing">
<DIV class=share-buttons-container><FONT class=extract></FONT></DIV></DIV></DIV></DIV>
<DIV class=post-header style="FONT-SIZE: 15px; FONT-FAMILY: Roboto, sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: ; FONT-STYLE: normal; CLEAR: left; ORPHANS: 2; WIDOWS: 2; MARGIN: 0px; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial; font-variant-ligatures: normal; font-variant-caps: normal">
<DIV class=post-header-line-1><SPAN class="byline post-timestamp" style="VERTICAL-ALIGN: top; MARGIN-TOP: 8px; COLOR: ; DISPLAY: inline-block; LINE-HEIGHT: 24px; MARGIN-RIGHT: 0px"><FONT class=extract>-<SPAN>&nbsp;</SPAN></FONT><A title="permanent link" class=timestamp-link style="TEXT-DECORATION: ; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: " href="https://muratbuffalo.blogspot.com/2019/05/paper-summary-cloud-programming.html" rel=bookmark><TIME title=2019-05-28T23:28:00-04:00 class=published datetime="2019-05-28T23:28:00-04:00"><FONT class=extract>May 28, 2019</TIME></FONT></A></SPAN></DIV></DIV>
<DIV id=post-body-1728057543788324019 class="post-body entry-content float-container" style="WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(117,117,117); FONT: 400 17px/1.6em Roboto, sans-serif; ORPHANS: 2; WIDOWS: 2; MARGIN: 1.5em 0px 2em; DISPLAY: block; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial"><A style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(33,150,243)" href="https://www2.eecs.berkeley.edu/Pubs/TechRpts/2019/EECS-2019-3.html"><FONT class=extract>This position paper</FONT></A><FONT class=extract><SPAN>&nbsp;</SPAN>by<SPAN>&nbsp;</SPAN></FONT><A style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(33,150,243)" href="https://rise.cs.berkeley.edu/"><FONT class=extract>UC Berkeley RISE lab</FONT></A><FONT class=extract><SPAN>&nbsp;</SPAN>is about serverless computing, its shortcomings, and its potential. It is easy reading, and is still useful even if you have a pretty good understanding about serverless computing due to some insights and forecasts in the paper. As you will read below, the paper provides a very strong endorsement for serverless computing.<BR><BR>Instead of explaining the paper in my terms, I quote some of my highlights from the paper below, and at the end, in the MAD questions section, I discuss some of my thoughts on serverless computing.<BR><BR></FONT>
<H2><FONT class=extract>Introduction</FONT></H2><FONT class=extract>We believe the main reason for the success of low-level virtual machines was that in the early days of cloud computing users wanted to recreate the same computing environment in the cloud that they had on their local computers to simplify porting their workloads to the cloud.<BR><BR>To set up your own environment in cloud (using virtual machines), you need to address these 8 issues.<BR><BR></FONT>
<OL>
<LI><FONT class=extract>Redundancy for availability, so that a single machine failure doesn't take down the service.&nbsp; </FONT>
<LI><FONT class=extract>Geographic distribution of redundant copies to preserve the service in case of disaster. </FONT>
<LI><FONT class=extract>Load balancing and request routing to efficiently utilize resources. </FONT>
<LI><FONT class=extract>Autoscaling in response to changes in load to scale up or down the system. </FONT>
<LI><FONT class=extract>Monitoring to make sure the service is still running well. </FONT>
<LI><FONT class=extract>Logging to record messages needed for debugging or performance tuning.&nbsp; </FONT>
<LI><FONT class=extract>System upgrades, including security patching. </FONT>
<LI><FONT class=extract>Migration to new instances as they become available.</FONT></LI></OL><BR><FONT class=extract>Compared to what it takes to set up the servers with the proper environment to run the code, the code to accomplish application logic might be dozens of lines of JavaScript.<BR><BR><B style="FONT-WEIGHT: bold">In our definition, for a service to be considered serverless, it must scale automatically with no need for explicit provisioning, and be billed based on usage.</B>&nbsp;Cloud functions are the general purpose element in serverless computing today, and lead the way to a simplified and general purpose programming model for the cloud.<BR><BR><B style="FONT-WEIGHT: bold">While we are unsure which solutions will win, we believe all issues will all be addressed eventually, thereby enabling serverless computing to become the face of cloud computing.</B><BR><BR></FONT>
<H2><FONT class=extract>Emergence of Serverless Computing</FONT></H2><A style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(33,150,243); DISPLAY: inline-block" href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEis9B5nPGwaJ8y4O_sdy8951C_31D2-vPmB_w1fqLZbJZJBGGCcO25xeE9fb3PZ6H-OHzMAszJtcsXwFocph7bf7ZZ-3wfQ0XRXdKSdKDFndhD2n_0WZLOb1DvU8o80Qf2NFoPAHPfCWPY/s1600/Screen+Shot+2019-05-28+at+8.21.34+PM.png" imageanchor="1"><FONT class=extract><IMG style="MAX-WIDTH: 100%; BORDER-TOP: 0px; BORDER-RIGHT: 0px; BORDER-BOTTOM: 0px; BORDER-LEFT: 0px" border=0 src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEis9B5nPGwaJ8y4O_sdy8951C_31D2-vPmB_w1fqLZbJZJBGGCcO25xeE9fb3PZ6H-OHzMAszJtcsXwFocph7bf7ZZ-3wfQ0XRXdKSdKDFndhD2n_0WZLOb1DvU8o80Qf2NFoPAHPfCWPY/s640/Screen+Shot+2019-05-28+at+8.21.34+PM.png" width=640 height=360></FONT></A><BR><FONT class=extract>Serverless programming provides an interface that greatly simplifies cloud programming, and represents an evolution that parallels the transition from assembly language to high-level programming languages. Automated memory management relieves programmers from managing memory resources, whereas serverless computing relieves programmers from managing server resources.<BR><BR>There are three critical distinctions between serverless and serverfull computing:<BR><BR></FONT>
<OL>
<LI><FONT class=extract>Decoupled computation and storage. The storage and computation scale separately and are provisioned and priced independently. In general, the storage is provided by a separate cloud service and the computation is stateless. </FONT>
<LI><FONT class=extract>Executing code without managing resource allocation. Instead of requesting resources, the user provides a piece of code and the cloud automatically provisions resources to execute that code. </FONT>
<LI><FONT class=extract>Paying in proportion to resources used instead of for resources allocated. Billing is by some dimension associated with the execution, such as execution time, rather than by a dimension of the base cloud platform, such as size and number of VMs allocated.</FONT></LI></OL><BR><FONT class=extract>We believe serverless computing represents significant innovation over platform as a service (PaaS) and other previous models. Among these factors, the autoscaling offered by AWS Lambda marked a striking departure from what came before. It tracked load with much greater fidelity than serverful autoscaling techniques, responding quickly to scale up when needed and scaling all the way down to zero resources, and zero cost, in the absence of demand. It charged in a much more fine-grained way, providing a minimum billing increment of 100 ms at a time when other autoscaling services charged by the hour.<BR><BR></FONT><A style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(33,150,243); DISPLAY: inline-block" href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgU89oVGzxxHVNi0RDtSkTKKMCsv6ShSKuWO6KJdeVhg0e2U5-c_RC_WTHRtWMf4g9znw5kgQIB_wQgZCTzbyEwxKkdG0L2trdknU2dAd5xW9GToFKQIqDj28tBNVaRnZUGhkZBnjy8R6g/s1600/Screen+Shot+2019-05-28+at+8.22.24+PM.png" imageanchor="1"><FONT class=extract><IMG style="MAX-WIDTH: 100%; BORDER-TOP: 0px; BORDER-RIGHT: 0px; BORDER-BOTTOM: 0px; BORDER-LEFT: 0px" border=0 src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgU89oVGzxxHVNi0RDtSkTKKMCsv6ShSKuWO6KJdeVhg0e2U5-c_RC_WTHRtWMf4g9znw5kgQIB_wQgZCTzbyEwxKkdG0L2trdknU2dAd5xW9GToFKQIqDj28tBNVaRnZUGhkZBnjy8R6g/s400/Screen+Shot+2019-05-28+at+8.22.24+PM.png" width=400 height=220></FONT></A><BR><FONT class=extract>Cloud functions, or functions as a service (FaaS), provide general compute and are complemented by an ecosystem of specialized Backend as a Service (BaaS) offerings such as object storage, databases, or messaging.<BR><BR></FONT><A style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(33,150,243); DISPLAY: inline-block" href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEg2czRoQdk57R4dFYAkj-i3FeuHHxAeFdR0Sl5GLDq7JXyBxYSCwwMAi_GQWj_O_jKZJt5s_dieZIzAlNmhNmSojt625QqOaS8ClcuWzgGFYMcMJz96DUlXpFjCyVgUJzCYmSoJkANeM8U/s1600/Screen+Shot+2019-05-28+at+8.22.52+PM.png" imageanchor="1"><FONT class=extract><IMG style="MAX-WIDTH: 100%; BORDER-TOP: 0px; BORDER-RIGHT: 0px; BORDER-BOTTOM: 0px; BORDER-LEFT: 0px" border=0 src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEg2czRoQdk57R4dFYAkj-i3FeuHHxAeFdR0Sl5GLDq7JXyBxYSCwwMAi_GQWj_O_jKZJt5s_dieZIzAlNmhNmSojt625QqOaS8ClcuWzgGFYMcMJz96DUlXpFjCyVgUJzCYmSoJkANeM8U/s640/Screen+Shot+2019-05-28+at+8.22.52+PM.png" width=640 height=212></FONT></A><BR><FONT class=extract>Unlike serverless computing, Kubernetes is a technology that simplifies management of serverful computing. Kubernetes can provide short-lived computing environments, like serverless computing, and has far fewer limitations, e.g., on hardware resources, execution time, and network communication. It can also deploy software originally developed for on-premise use completely on the public cloud with little modification. Serverless computing, on the other hand, introduces a paradigm shift that allows fully offloading operational responsibilities to the provider, and makes possible fine-grained multi-tenant multiplexing.<BR><BR>Recent surveys found that about 24% of serverless users were new to cloud computing and 30% of existing serverful cloud customers also used serverless computing.<BR></FONT><I><BR></I><FONT class=extract><I>\\ Murat's note: While 24% is an impressive number, what is the control here? Maybe traditional cloud computing is also getting new users at that rate?</I><BR><BR></FONT><A style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(33,150,243); DISPLAY: inline-block" href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEiPZHjiuLPtGrrBUA2EoZsnwY_9t9gBv_AcEdiFYFnZFbpUtWH_dgweHz_EE9UMwvxWIDHu3KyanCzGGu4f8ZUHI4-odMcsIBbRRRRVUJ-m3RqAnAK2_un4JvVXrP5_4s5PJRP1s8Upr_M/s1600/Screen+Shot+2019-05-28+at+8.23.08+PM.png" imageanchor="1"><FONT class=extract><IMG style="MAX-WIDTH: 100%; BORDER-TOP: 0px; BORDER-RIGHT: 0px; BORDER-BOTTOM: 0px; BORDER-LEFT: 0px" border=0 src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEiPZHjiuLPtGrrBUA2EoZsnwY_9t9gBv_AcEdiFYFnZFbpUtWH_dgweHz_EE9UMwvxWIDHu3KyanCzGGu4f8ZUHI4-odMcsIBbRRRRVUJ-m3RqAnAK2_un4JvVXrP5_4s5PJRP1s8Upr_M/s640/Screen+Shot+2019-05-28+at+8.23.08+PM.png" width=640 height=214></FONT></A><BR><FONT class=extract><I>\\ Murat's note: Chat bots are very popular use case of serverless, even more than IoT in total. They are sneaking under the radar, but are worth watching for their future ubiquitous applications.&nbsp;</I><BR><BR></FONT>
<H2><FONT class=extract>Limitations of today's serverless platforms</FONT></H2><FONT class=extract>In this section, we present an overview of five research projects and discuss the obstacles that prevent existing serverless computing platforms from achieving state-of-the-art performance, i.e., matching the performance of serverful clouds for the same workloads.<BR></FONT><A style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(33,150,243); DISPLAY: inline-block" href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgJdHAAaRu84VkFh4un5pHpdWyXMc7_2OUIyUSk5EuW7sOzBIR3HxtyypaCaAP3ipFNTu9uA6RqQfT5L0ClwmV97ElMXWOqZ1VZzZQfDmBjvWCoFuIqnBLZlxc5VxjBCYM8kJd6agc-TzU/s1600/Screen+Shot+2019-05-28+at+8.24.05+PM.png" imageanchor="1"><FONT class=extract><IMG style="MAX-WIDTH: 100%; BORDER-TOP: 0px; BORDER-RIGHT: 0px; BORDER-BOTTOM: 0px; BORDER-LEFT: 0px" border=0 src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgJdHAAaRu84VkFh4un5pHpdWyXMc7_2OUIyUSk5EuW7sOzBIR3HxtyypaCaAP3ipFNTu9uA6RqQfT5L0ClwmV97ElMXWOqZ1VZzZQfDmBjvWCoFuIqnBLZlxc5VxjBCYM8kJd6agc-TzU/s640/Screen+Shot+2019-05-28+at+8.24.05+PM.png" width=584 height=640></FONT></A><BR><BR><FONT class=extract><B style="FONT-WEIGHT: bold">Serverless SQLite: Databases.&nbsp;</B>A strawman solution would be to run common transactional databases, such as PostgreSQL, Oracle, or MySQL inside cloud functions. However, that immediately runs into a number of challenges. First, serverless computing has no built-in persistent storage, so we need to leverage some remote persistent store, which introduces large latency.&nbsp; Second, these databases assume connection-oriented protocols, e.g., databases are running as servers accepting connections from clients. This assumption conflicts with existing cloud functions that are running behind network address translators, and thus don't support incoming connections. Finally, while many high performance databases rely on shared memory, cloud functions run in isolation so cannot share memory. While shared-nothing distributed databases do not require shared memory, they expect nodes to remain online and be directly addressable.<BR><BR><B style="FONT-WEIGHT: bold">Lack of fine-grained coordination.&nbsp;</B>Applications are left with no choice but to either (1) manage a VM-based system that provides notifications, as in ElastiCache and SAND, or (2) implement their own notification mechanism, such as in ExCamera, that enables cloud functions to communicate with each other via a long-running VM-based rendezvous server. This limitation also suggests that new variants of serverless computing may be worth exploring, for example naming function instances and allowing direct addressability for access to their internal state (e.g., Actors as a Service).<BR><BR><B style="FONT-WEIGHT: bold">Networking challenges.&nbsp;</B>There may be several ways to address this challenge:<BR><BR></FONT>
<OL>
<LI><FONT class=extract>Provide cloud functions with a larger number of cores, similar to VM instances, so multiple tasks can combine and share data among them before sending over the network or after receiving it. </FONT>
<LI><FONT class=extract>Allow the developer to explicitly place the cloud functions on the same VM instance. Offer distributed communication primitives that applications can use out-of-the-box so that cloud providers can allocate cloud functions to the same VM instance. </FONT>
<LI><FONT class=extract>Let applications provide a computation graph, enabling the cloud provider to co-locate the cloud functions to minimize communication overhead.&nbsp;</FONT></LI></OL><BR>
<H2><FONT class=extract>Summary and predictions</FONT></H2><FONT class=extract>By providing a simplified programming environment, serverless computing makes the cloud much easier to use, thereby attracting more people who can and will use it. [This is] a maturation akin to the move from assembly language to high-level languages more than four decades ago.<BR><BR><B style="FONT-WEIGHT: bold">We predict that serverless use will skyrocket.</B><BR><BR>The first step is Serverless Ephemeral Storage, which must provide low latency and high IOPS at reasonable cost, but need not provide economical long term storage. A second class of applications would benefit from Serverless Durable Storage, which does demand long term storage. New non-volatile memory technologies may help with such storage systems. Other applications would benefit from a low latency signaling service and support for popular communication primitives.<BR><BR>Two challenges for the future of serverless computing are improved security and accommodating cost-performance advances that are likely to come from special purpose processors.<BR><BR>The future of serverful computing will be to facilitate BaaS. Applications that prove to be difficult to write on top of serverless computing, such as OLTP databases or communication primitives such as queues, will likely be offered as part of a richer set of services from all cloud providers.<BR><BR></FONT>
<H2><A style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(33,150,243)" href="http://muratbuffalo.blogspot.com/2018/12/master-your-questioning-skills.html"><FONT class=extract>MAD questions</FONT></A></H2><FONT class=extract><B style="FONT-WEIGHT: bold"><I>1.&nbsp; Is a very strong endorsement for serverless warranted?</I></B><BR>The paper gives very strong endorsements for serverless:<BR></FONT>
<BLOCKQUOTE class=tr_bq style='COLOR: rgb(68,68,68); TEXT-ALIGN: center; FONT: italic x-large "Times New Roman", Times, FreeSerif, serif'><FONT class=extract>We predict that serverless use will skyrocket.<BR>While we are unsure which solutions will win, we believe all issues will all be addressed eventually, thereby enabling serverless computing to become the face of cloud computing.</FONT></BLOCKQUOTE><FONT class=extract>Remember, when we read papers,<SPAN>&nbsp;</SPAN></FONT><A style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(33,150,243)" href="http://muratbuffalo.blogspot.com/2013/07/how-i-read-research-paper.html"><FONT class=extract>we should fight vigorously with the claims, and play the devil's advocate.</FONT></A><FONT class=extract><SPAN>&nbsp;</SPAN>So let's challenge this claim. What could be the reasons this claim may not hold?<BR><BR>First of all, we need to quantify and limit the claim. What does skyrocket mean? What does it mean for serverless to become the face of cloud computing? And finally what does serverless mean? Is this claim true of today's cloud functions? If we don't have a stable definition of serverless, this claim is prone to the<SPAN>&nbsp;</SPAN></FONT><A style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(33,150,243)" href="https://en.wikipedia.org/wiki/No_true_Scotsman"><FONT class=extract>No True Scotsman fallacy</FONT></A><FONT class=extract>. If serverless use does not skyrocket, it will be because we don't have "true" serverless yet.<BR><BR>Ok, assuming that the claim is quantified, what may be some reasons it could fail?<BR><BR>Serverless improves greatly on ease of use, and that alone may warrant a lot of use for serverless. But ease-of-use is not necessarily exclusive to serverless. BaaS managed services, like distributed databases, can get even easier to use. And<SPAN>&nbsp;</SPAN></FONT><A style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(33,150,243)" href="https://docs.microsoft.com/en-us/azure/cosmos-db/stored-procedures-triggers-udfs"><FONT class=extract>some even support stored procedures</FONT></A><FONT class=extract>, which helps meet some of the serverless needs.<BR><BR>When comparing with PaaS, the paper said that serverless differentiates itself due to its very quick autoscaling. But, this may not be such a strong differentiator for the customers. Most customers may not have very bursty&nbsp; workloads that require quick and extreme scaling.<BR><BR>Another contender for the serverless lunch may be software as a service (SaaS), like instagram, icloud, etc. SaaS can be even simpler to use than serverless, and may be programmed with visual workflows using mouse clicks. SaaS may steal users from serverless would work if SaaS services play well with each other so customers can pipe output from one as input to others.<BR><BR><B style="FONT-WEIGHT: bold"><I>2. Could serverless ever work for stateful services?</I></B><BR>It is easy to make FaaS serverless because it is stateless. But FaaS scalability is limited by the BaaS scalability it depends on. It is easy to scale storage, because it is also stateless. But, the story becomes murkier when it comes to scalability of stateful services. At the limits, this is likely to be impossible: You can't have extreme scalability and extreme state (requiring incessant coordination). But outside the extremes, with good engineering we can get quick scalability for stateful services.<BR><BR><B style="FONT-WEIGHT: bold"><I>3. "Berkeley view" papers</I></B><BR>If you are into this stuff, here are two other Berkeley view papers.<BR><BR></FONT><A style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(33,150,243)" href="http://muratbuffalo.blogspot.com/2018/01/paper-summary-berkeley-view-of-systems.html"><FONT class=extract>A Berkeley view of systems challenges for AI</FONT></A><BR><BR><A style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(33,150,243)" href="https://www2.eecs.berkeley.edu/Pubs/TechRpts/2009/EECS-2009-28.pdf"><FONT class=extract>Above the Clouds: A Berkeley View of Cloud Computing</FONT></A><BR><BR><FONT class=extract>Also there was a recent CIDR paper by another group of UC Berkeley researchers on serverless computing titled:<SPAN>&nbsp;</SPAN></FONT><A style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(33,150,243)" href="http://muratbuffalo.blogspot.com/2019/01/paper-review-serverless-computing-one.html"><FONT class=extract>"Serverless Computing: One Step Forward, Two Steps Back", which I had covered before.</FONT></A><FONT class=extract><SPAN>&nbsp;</SPAN>This paper is worth reading for another perspective on serverless.</FONT></DIV>