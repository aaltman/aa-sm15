<b> : </b>Formal modeling of ARIES</H1>
<P style="TEXT-ALIGN: left">After we understand the principles/invariants, ARIES is not a complicated protocol. But, database recovery is a tricky business, and unavoidably the ARIES protocol has a lot of details. It is easy to get things wrong in the implementation, and it is hard to test that our implementation does recovery correctly. There are several reasons for why this is the case. The recovery code doesn't get exercised frequently (hopefully your database doesn't crash all the time). The state space for recovery is huge, so it is hard to model check things. Verification approaches need to consider timing of the crash, and ensure recovery from any ill-timed crash. This is a hard problem and only recently we started seeing verification work address this.<BR><BR>There are also bugs at the seams between different layers.<SPAN>&nbsp;</SPAN><A style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(33,150,243)" href="https://www.usenix.org/conference/fast18/presentation/alagappan">A FAST'18 paper</A><SPAN>&nbsp;</SPAN>shows that many bugs still existed in recovery for consensus-based storage. What about lower layer implementation? Are you sure<SPAN>&nbsp;</SPAN><A style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(33,150,243)" href="https://twitter.com/AlexMillerDB/status/1635315294158594048">fsync is flushing correctly</A>?<BR><BR><BR>Anyways. I am getting ahead of myself. I would just be happy to have with a TLA+ model of ARIES recovery protocol. A TLA+ model would not only be useful to ensure we get the protocol right, but it would also help us to grok the protocol. In the model, we can add more labels to reduce the atomicity and see when the correctness breaks, so we can reduce the protocol to its smallest atomic primitives. This model would also be a good place to start when we want to customize recovery protocol for our system implementation.<BR><BR>I searched but couldn't find a TLA model of ARIES. There are WAL models for some systems, but as far as I could see they were not doing transactional recovery&nbsp; like ARIES. Alan Fekete sent me<SPAN>&nbsp;</SPAN><A style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(33,150,243)" href="https://dl.acm.org/doi/pdf/10.1145/236711.236712">this I/O automata modeling of ARIES</A><SPAN>&nbsp;</SPAN>by one of his students. It would be nice if someone can create a TLA+ modeling of the ARIES protocol starting from that model.<BR><BR>On a related note,<SPAN>&nbsp;</SPAN><A style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(33,150,243)" href="https://ahelwer.ca/post/2023-04-05-checkpoint-coordination/">recent post from Andrew Helwer</A><SPAN>&nbsp;</SPAN>about how he used TLA+ to validate the design of a snapshot coordination system for Microsoft Azure Ring Master is a good read.