<P class="CDt4Ke zfr3Q" style='BOX-SIZING: border-box; FONT-SIZE: 11pt; FONT-FAMILY: "Open Sans"; WHITE-SPACE: pre-wrap; WORD-SPACING: 0px; POSITION: relative; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(33,33,33); OUTLINE-WIDTH: medium; FONT-STYLE: normal; PADDING-TOP: 0px; OUTLINE-STYLE: none; ORPHANS: 2; WIDOWS: 2; MARGIN: 0px; LETTER-SPACING: normal; OUTLINE-COLOR: invert; LINE-HEIGHT: 1.6; TEXT-INDENT: 0px; font-variant-ligatures: none; text-decoration-line: inherit; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial; font-variant-caps: normal; -webkit-text-stroke-width: 0px' dir=ltr>Another technique is the Optimistic Concurrency Control (as opposed to traditional Pessimistic Concurrency Control). It makes logically read-only accesses physically read-only and eliminates writer starvation caused by readers. The idea is that a reader starts reading an object w/o any synchronization (optimistically hoping for success), and when it finishes it verifies that the object was not changed under its feet (verification can be conducted periodically during reading if required). If the object was not changed then it has obtained some consistent view of the object; otherwise he needs to retry reading.</P>
<P class="CDt4Ke zfr3Q" style='BOX-SIZING: border-box; FONT-SIZE: 11pt; FONT-FAMILY: "Open Sans"; WHITE-SPACE: pre-wrap; WORD-SPACING: 0px; POSITION: relative; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(33,33,33); OUTLINE-WIDTH: medium; FONT-STYLE: normal; OUTLINE-STYLE: none; ORPHANS: 2; WIDOWS: 2; MARGIN: 15px 0px 0px; LETTER-SPACING: normal; OUTLINE-COLOR: invert; LINE-HEIGHT: 1.6; TEXT-INDENT: 0px; font-variant-ligatures: none; text-decoration-line: inherit; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial; font-variant-caps: normal; -webkit-text-stroke-width: 0px' dir=ltr>The technique gives very good results wrt scalability in many cases. However there is a caveat: a reader must be prepared for reading inconsistent data, which potentially can cause crashes, infinite looping and other very bad things. This fact significantly limits applicability of the technique.