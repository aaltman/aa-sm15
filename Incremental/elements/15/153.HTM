<P class=line862 style="FONT-SIZE: 16px; FONT-FAMILY: sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(0,0,0); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial"><FONT class=extract>In a shared memory model, it may be possible to solve some problems using<SPAN>&nbsp;</SPAN><STRONG>wait-free</STRONG><SPAN>&nbsp;</SPAN>protocols, in which any process can finish the protocol in a bounded number of steps, no matter what the other processes are doing (see<SPAN>&nbsp;</SPAN></FONT><A style="TEXT-DECORATION: none; BORDER-TOP: 0px; BORDER-RIGHT: 0px; BORDER-BOTTOM: 0px; COLOR: rgb(68,119,255); BORDER-LEFT: 0px" href="https://www.cs.yale.edu/homes/aspnes/pinewiki/ObstructionFreedom.html"><FONT class=extract>ObstructionFreedom</FONT></A><FONT class=extract><SPAN>&nbsp;</SPAN>for more on this and some variants).<SPAN id=line-4 class=anchor></SPAN><SPAN id=line-5 class=anchor></SPAN></FONT></P>
<P class=line862 style="FONT-SIZE: 16px; FONT-FAMILY: sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(0,0,0); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial"><FONT class=extract>The<SPAN>&nbsp;</SPAN><STRONG>wait-free hierarchy</STRONG><SPAN>&nbsp;</SPAN>h<SUP>r</SUP><SUB>m</SUB><SPAN>&nbsp;</SPAN>classifies<SPAN>&nbsp;</SPAN></FONT><A style="TEXT-DECORATION: none; BORDER-TOP: 0px; BORDER-RIGHT: 0px; BORDER-BOTTOM: 0px; COLOR: rgb(68,119,255); BORDER-LEFT: 0px" href="https://www.cs.yale.edu/homes/aspnes/pinewiki/AsynchronousSharedMemory.html"><FONT class=extract>AsynchronousSharedMemory</FONT></A><FONT class=extract><SPAN>&nbsp;</SPAN>object types T by<SPAN>&nbsp;</SPAN><STRONG>consensus number</STRONG>, where a type T has consensus number n if with objects of type T and atomic registers (all initialized to appropriate values) it is possible to solve wait-free consensus (i.e., agreement, validity, wait-free termination) for n processes but not for n+1 processes. The consensus number of any type is at least 1, since 1-process consensus requires no interaction, and may range up to &#8734; for particularly powerful objects.<SPAN id=line-6 class=anchor></SPAN><SPAN id=line-7 class=anchor></SPAN></FONT></P>
<P class=line862 style="FONT-SIZE: 16px; FONT-FAMILY: sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(0,0,0); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial"><FONT class=extract>The wait-free hierarchy was suggested by work by Maurice Herlihy<SPAN>&nbsp;</SPAN></FONT><A class=http style="TEXT-DECORATION: none; BORDER-TOP: 0px; BORDER-RIGHT: 0px; BORDER-BOTTOM: 0px; COLOR: rgb(68,119,255); BORDER-LEFT: 0px" href="http://portal.acm.org/citation.cfm?id=114005.102808&amp;dl=portal&amp;dl=ACM&amp;idx=114005&amp;part=periodical&amp;WantType=periodical&amp;title=ACM%20Transactions%20on%20Programming%20Languages%20and%20Systems%20%28TOPLAS%29&amp;CFID=56500239&amp;CFTOKEN=49560823"><FONT class=extract>Wait-free synchronization, TOPLAS 13(1):124-149</FONT></A><FONT class=extract><SPAN>&nbsp;</SPAN>that classified many common (and some uncommon) shared-memory objects by consensus number, and showed that an unbounded collection of objects with consensus number n together with atomic registers gives a wait-free implementation of any object in an n-process system. Various subsequent authors noticed that this did not give a "robust" hierarchy in the sense that combining two types of objects with consensus number n could solve wait-free consensus for larger n, and the hierarchy h<SUP>r</SUP><SUB>m</SUB><SPAN>&nbsp;</SPAN>was proposed by Prasad Jayanti<SPAN>&nbsp;</SPAN></FONT><A class=http style="TEXT-DECORATION: none; BORDER-TOP: 0px; BORDER-RIGHT: 0px; BORDER-BOTTOM: 0px; COLOR: rgb(68,119,255); BORDER-LEFT: 0px" href="http://portal.acm.org/citation.cfm?id=263888"><FONT class=extract>Jayanti, Robust wait-free hierarchies, JACM 44(4):592-614, 1997</FONT></A><FONT class=extract><SPAN>&nbsp;</SPAN>as a way of classifying objects that might be robust: an object is at level n of the h<SUP>r</SUP><SUB>m</SUB><SPAN>&nbsp;</SPAN>hierarchy if having unboundedly many objects plus unboundedly many registers solves n-process wait-free consensus but not (n+1)-process wait-free consensus. Whether or not the resulting hierarchy is in fact robust for arbitrary deterministic objects is still open, but Eric Ruppert<SPAN>&nbsp;</SPAN></FONT><A class=http style="TEXT-DECORATION: none; BORDER-TOP: 0px; BORDER-RIGHT: 0px; BORDER-BOTTOM: 0px; COLOR: rgb(68,119,255); BORDER-LEFT: 0px" href="http://epubs.siam.org/sam-bin/dbq/article/32943"><FONT class=extract>Ruppert, Determining consensus numbers, SICOMP 30(4):1156-1168, 2000</FONT></A><FONT class=extract><SPAN>&nbsp;</SPAN>subsequently showed that it is robust for RMW registers and objects with a read operation that returns the current state, and there is a paper by Borowsky, Gafni, and Afek (</FONT><A class=http style="TEXT-DECORATION: none; BORDER-TOP: 0px; BORDER-RIGHT: 0px; BORDER-BOTTOM: 0px; COLOR: rgb(68,119,255); BORDER-LEFT: 0px" href="http://portal.acm.org/citation.cfm?id=198126&amp;dl=GUIDE&amp;coll=GUIDE&amp;CFID=56558675&amp;CFTOKEN=97060299"><FONT class=extract>Consensus power makes (some) sense! (extended abstract), PODC 1994</FONT></A><FONT class=extract>) that sketches a proof based on a topological characterization of computability that h<SUP>r</SUP><SUB>m</SUB><SPAN>&nbsp;</SPAN>is robust for deterministic objects that don't discriminate between processes (unlike, say, single-writer registers). So for well-behaved shared-memory objects (i.e., deterministic, symmetrically accessible, with read operations, etc.), consensus number appears to give a real classification that allows us to say for example that any collection of read-write registers (consensus number 1), fetch-and-increments (2), test-and-set bits (2), and queues (2) is not enough to build a compare-and-swap (&#8734;).<SPAN id=line-8 class=anchor></SPAN><SPAN id=line-9 class=anchor></SPAN></FONT></P>
<P class=line862 style="FONT-SIZE: 16px; FONT-FAMILY: sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(0,0,0); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial"><FONT class=extract>We won't do the full robustness proofs of Borowsky et al or Ruppert that let us get away with this. Instead, we'll concentrate on Herlihy's original results and show that specific objects have specific consensus numbers when used in isolation. The procedure in each case will be to show an upper bound on the consensus number using a variant of<SPAN>&nbsp;</SPAN></FONT><A style="TEXT-DECORATION: none; BORDER-TOP: 0px; BORDER-RIGHT: 0px; BORDER-BOTTOM: 0px; COLOR: rgb(68,119,255); BORDER-LEFT: 0px" href="https://www.cs.yale.edu/homes/aspnes/pinewiki/FischerLynchPaterson.html"><FONT class=extract>FischerLynchPaterson</FONT></A><FONT class=extract><SPAN>&nbsp;</SPAN>(made easier because we are wait-free and don't have to worry about fairness) and then show a matching lower bound (for non-trivial upper bounds) by exhibiting an n-process consensus protocol for some n. Essentially everything below is taken from Herlihy's paper, so reading that may make more sense than reading these notes.<SPAN id=line-10 class=anchor></SPAN><SPAN id=line-11 class=anchor></SPAN></FONT></P>
<P class=line867 style="FONT-SIZE: 16px; FONT-FAMILY: sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(0,0,0); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial"><FONT class=extract></FONT></P>
<H1 id=Classification_by_consensus_number style="FONT-FAMILY: sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial"><FONT class=extract>1. Classification by consensus number</FONT></H1><SPAN id=line-12 class=anchor style="FONT-SIZE: 16px; FONT-FAMILY: sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(0,0,0); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial"></SPAN><SPAN id=line-13 class=anchor style="FONT-SIZE: 16px; FONT-FAMILY: sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(0,0,0); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial"></SPAN>
<P class=line874 style="FONT-SIZE: 16px; FONT-FAMILY: sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(0,0,0); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial"><FONT class=extract>Here's the quick table:<SPAN id=line-14 class=anchor></SPAN><SPAN id=line-15 class=anchor></SPAN></FONT></P>
<DIV style="FONT-SIZE: 16px; FONT-FAMILY: sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(0,0,0); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial">
<TABLE style="BORDER-COLLAPSE: collapse; MARGIN: 0.5em 0px 0px 0.5em">
<TBODY>
<TR>
<TD style="BORDER-TOP: rgb(173,185,204) 1pt solid; BORDER-RIGHT: rgb(173,185,204) 1pt solid; BORDER-BOTTOM: rgb(173,185,204) 1pt solid; PADDING-BOTTOM: 0.25em; PADDING-TOP: 0.25em; PADDING-LEFT: 0.5em; BORDER-LEFT: rgb(173,185,204) 1pt solid; PADDING-RIGHT: 0.5em">
<P class=line862 style="PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 0px; PADDING-RIGHT: 0px"><FONT class=extract>Consensus number</FONT></P></TD>
<TD style="BORDER-TOP: rgb(173,185,204) 1pt solid; BORDER-RIGHT: rgb(173,185,204) 1pt solid; BORDER-BOTTOM: rgb(173,185,204) 1pt solid; PADDING-BOTTOM: 0.25em; PADDING-TOP: 0.25em; PADDING-LEFT: 0.5em; BORDER-LEFT: rgb(173,185,204) 1pt solid; PADDING-RIGHT: 0.5em">
<P class=line862 style="PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 0px; PADDING-RIGHT: 0px"><FONT class=extract>Defining characteristic</FONT></P></TD>
<TD style="BORDER-TOP: rgb(173,185,204) 1pt solid; BORDER-RIGHT: rgb(173,185,204) 1pt solid; BORDER-BOTTOM: rgb(173,185,204) 1pt solid; PADDING-BOTTOM: 0.25em; PADDING-TOP: 0.25em; PADDING-LEFT: 0.5em; BORDER-LEFT: rgb(173,185,204) 1pt solid; PADDING-RIGHT: 0.5em">
<P class=line862 style="PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 0px; PADDING-RIGHT: 0px"><FONT class=extract>Examples</FONT></P></TD></TR>
<TR>
<TD style="BORDER-TOP: rgb(173,185,204) 1pt solid; BORDER-RIGHT: rgb(173,185,204) 1pt solid; BORDER-BOTTOM: rgb(173,185,204) 1pt solid; PADDING-BOTTOM: 0.25em; PADDING-TOP: 0.25em; PADDING-LEFT: 0.5em; BORDER-LEFT: rgb(173,185,204) 1pt solid; PADDING-RIGHT: 0.5em"><SPAN id=line-16 class=anchor></SPAN>
<P class=line862 style="PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 0px; PADDING-RIGHT: 0px"><FONT class=extract>1</FONT></P></TD>
<TD style="BORDER-TOP: rgb(173,185,204) 1pt solid; BORDER-RIGHT: rgb(173,185,204) 1pt solid; BORDER-BOTTOM: rgb(173,185,204) 1pt solid; PADDING-BOTTOM: 0.25em; PADDING-TOP: 0.25em; PADDING-LEFT: 0.5em; BORDER-LEFT: rgb(173,185,204) 1pt solid; PADDING-RIGHT: 0.5em">
<P class=line862 style="PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 0px; PADDING-RIGHT: 0px"><FONT class=extract>Read + interfering no-return RMW</FONT></P></TD>
<TD style="BORDER-TOP: rgb(173,185,204) 1pt solid; BORDER-RIGHT: rgb(173,185,204) 1pt solid; BORDER-BOTTOM: rgb(173,185,204) 1pt solid; PADDING-BOTTOM: 0.25em; PADDING-TOP: 0.25em; PADDING-LEFT: 0.5em; BORDER-LEFT: rgb(173,185,204) 1pt solid; PADDING-RIGHT: 0.5em">
<P class=line862 style="PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 0px; PADDING-RIGHT: 0px"><FONT class=extract>Registers, counters, generalized counters</FONT></P></TD></TR>
<TR>
<TD style="BORDER-TOP: rgb(173,185,204) 1pt solid; BORDER-RIGHT: rgb(173,185,204) 1pt solid; BORDER-BOTTOM: rgb(173,185,204) 1pt solid; PADDING-BOTTOM: 0.25em; PADDING-TOP: 0.25em; PADDING-LEFT: 0.5em; BORDER-LEFT: rgb(173,185,204) 1pt solid; PADDING-RIGHT: 0.5em"><SPAN id=line-17 class=anchor></SPAN>
<P class=line862 style="PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 0px; PADDING-RIGHT: 0px"><FONT class=extract>2</FONT></P></TD>
<TD style="BORDER-TOP: rgb(173,185,204) 1pt solid; BORDER-RIGHT: rgb(173,185,204) 1pt solid; BORDER-BOTTOM: rgb(173,185,204) 1pt solid; PADDING-BOTTOM: 0.25em; PADDING-TOP: 0.25em; PADDING-LEFT: 0.5em; BORDER-LEFT: rgb(173,185,204) 1pt solid; PADDING-RIGHT: 0.5em">
<P class=line862 style="PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 0px; PADDING-RIGHT: 0px"><FONT class=extract>Interfering RMW; queue-like structures</FONT></P></TD>
<TD style="BORDER-TOP: rgb(173,185,204) 1pt solid; BORDER-RIGHT: rgb(173,185,204) 1pt solid; BORDER-BOTTOM: rgb(173,185,204) 1pt solid; PADDING-BOTTOM: 0.25em; PADDING-TOP: 0.25em; PADDING-LEFT: 0.5em; BORDER-LEFT: rgb(173,185,204) 1pt solid; PADDING-RIGHT: 0.5em">
<P class=line862 style="PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 0px; PADDING-RIGHT: 0px"><FONT class=extract>Fetch-and-write, fetch-and-add, queues, process-to-memory swap</FONT></P></TD></TR>
<TR>
<TD style="BORDER-TOP: rgb(173,185,204) 1pt solid; BORDER-RIGHT: rgb(173,185,204) 1pt solid; BORDER-BOTTOM: rgb(173,185,204) 1pt solid; PADDING-BOTTOM: 0.25em; PADDING-TOP: 0.25em; PADDING-LEFT: 0.5em; BORDER-LEFT: rgb(173,185,204) 1pt solid; PADDING-RIGHT: 0.5em"><SPAN id=line-18 class=anchor></SPAN>
<P class=line862 style="PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 0px; PADDING-RIGHT: 0px"><FONT class=extract>m</FONT></P></TD>
<TD style="BORDER-TOP: rgb(173,185,204) 1pt solid; BORDER-RIGHT: rgb(173,185,204) 1pt solid; BORDER-BOTTOM: rgb(173,185,204) 1pt solid; PADDING-BOTTOM: 0.25em; PADDING-TOP: 0.25em; PADDING-LEFT: 0.5em; BORDER-LEFT: rgb(173,185,204) 1pt solid; PADDING-RIGHT: 0.5em">
<P class=line862 style="PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 0px; PADDING-RIGHT: 0px"><FONT class=extract></FONT></P></TD>
<TD style="BORDER-TOP: rgb(173,185,204) 1pt solid; BORDER-RIGHT: rgb(173,185,204) 1pt solid; BORDER-BOTTOM: rgb(173,185,204) 1pt solid; PADDING-BOTTOM: 0.25em; PADDING-TOP: 0.25em; PADDING-LEFT: 0.5em; BORDER-LEFT: rgb(173,185,204) 1pt solid; PADDING-RIGHT: 0.5em">
<P class=line862 style="PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 0px; PADDING-RIGHT: 0px"><FONT class=extract>m-process consensus objects</FONT></P></TD></TR>
<TR>
<TD style="BORDER-TOP: rgb(173,185,204) 1pt solid; BORDER-RIGHT: rgb(173,185,204) 1pt solid; BORDER-BOTTOM: rgb(173,185,204) 1pt solid; PADDING-BOTTOM: 0.25em; PADDING-TOP: 0.25em; PADDING-LEFT: 0.5em; BORDER-LEFT: rgb(173,185,204) 1pt solid; PADDING-RIGHT: 0.5em"><SPAN id=line-19 class=anchor></SPAN>
<P class=line862 style="PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 0px; PADDING-RIGHT: 0px"><FONT class=extract>2m-2</FONT></P></TD>
<TD style="BORDER-TOP: rgb(173,185,204) 1pt solid; BORDER-RIGHT: rgb(173,185,204) 1pt solid; BORDER-BOTTOM: rgb(173,185,204) 1pt solid; PADDING-BOTTOM: 0.25em; PADDING-TOP: 0.25em; PADDING-LEFT: 0.5em; BORDER-LEFT: rgb(173,185,204) 1pt solid; PADDING-RIGHT: 0.5em">
<P class=line862 style="PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 0px; PADDING-RIGHT: 0px"><FONT class=extract></FONT></P></TD>
<TD style="BORDER-TOP: rgb(173,185,204) 1pt solid; BORDER-RIGHT: rgb(173,185,204) 1pt solid; BORDER-BOTTOM: rgb(173,185,204) 1pt solid; PADDING-BOTTOM: 0.25em; PADDING-TOP: 0.25em; PADDING-LEFT: 0.5em; BORDER-LEFT: rgb(173,185,204) 1pt solid; PADDING-RIGHT: 0.5em">
<P class=line862 style="PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 0px; PADDING-RIGHT: 0px"><FONT class=extract>atomic m-register write</FONT></P></TD></TR>
<TR>
<TD style="BORDER-TOP: rgb(173,185,204) 1pt solid; BORDER-RIGHT: rgb(173,185,204) 1pt solid; BORDER-BOTTOM: rgb(173,185,204) 1pt solid; PADDING-BOTTOM: 0.25em; PADDING-TOP: 0.25em; PADDING-LEFT: 0.5em; BORDER-LEFT: rgb(173,185,204) 1pt solid; PADDING-RIGHT: 0.5em"><SPAN id=line-20 class=anchor></SPAN>
<P class=line862 style="PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 0px; PADDING-RIGHT: 0px"><FONT class=extract>&#8734;</FONT></P></TD>
<TD style="BORDER-TOP: rgb(173,185,204) 1pt solid; BORDER-RIGHT: rgb(173,185,204) 1pt solid; BORDER-BOTTOM: rgb(173,185,204) 1pt solid; PADDING-BOTTOM: 0.25em; PADDING-TOP: 0.25em; PADDING-LEFT: 0.5em; BORDER-LEFT: rgb(173,185,204) 1pt solid; PADDING-RIGHT: 0.5em">
<P class=line862 style="PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 0px; PADDING-RIGHT: 0px"><FONT class=extract>First write-like operation wins</FONT></P></TD>
<TD style="BORDER-TOP: rgb(173,185,204) 1pt solid; BORDER-RIGHT: rgb(173,185,204) 1pt solid; BORDER-BOTTOM: rgb(173,185,204) 1pt solid; PADDING-BOTTOM: 0.25em; PADDING-TOP: 0.25em; PADDING-LEFT: 0.5em; BORDER-LEFT: rgb(173,185,204) 1pt solid; PADDING-RIGHT: 0.5em">
<P class=line862 style="PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 0px; PADDING-RIGHT: 0px"><FONT class=extract>Queue with peek, fetch-and-cons, sticky bits, compare-and-swap, memory-to-memory swap, memory-to-memory copy</FONT></P></TD></TR></TBODY></TABLE></DIV><SPAN id=line-21 class=anchor style="FONT-SIZE: 16px; FONT-FAMILY: sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(0,0,0); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial"></SPAN><SPAN id=line-22 class=anchor style="FONT-SIZE: 16px; FONT-FAMILY: sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(0,0,0); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial"></SPAN>
<P class=line874 style="FONT-SIZE: 16px; FONT-FAMILY: sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(0,0,0); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial"><FONT class=extract>Details below.<SPAN id=line-23 class=anchor></SPAN><SPAN id=line-24 class=anchor></SPAN></FONT></P>
<P class=line867 style="FONT-SIZE: 16px; FONT-FAMILY: sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(0,0,0); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial"><FONT class=extract></FONT></P>
<H2 id=Level_1:_atomic_registers.2C_counters.2C_other_interfering_RMW_registers_that_don.27t_return_the_old_value style="FONT-FAMILY: sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial"><FONT class=extract>1.1. Level 1: atomic registers, counters, other interfering RMW registers that don't return the old value</FONT></H2><SPAN id=line-25 class=anchor style="FONT-SIZE: 16px; FONT-FAMILY: sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(0,0,0); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial"></SPAN><SPAN id=line-26 class=anchor style="FONT-SIZE: 16px; FONT-FAMILY: sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(0,0,0); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial"></SPAN>
<P class=line874 style="FONT-SIZE: 16px; FONT-FAMILY: sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(0,0,0); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial"><FONT class=extract>First observe that any type has consensus number at least 1, since 1-process consensus is trivial.<SPAN id=line-27 class=anchor></SPAN><SPAN id=line-28 class=anchor></SPAN></FONT></P>
<P class=line862 style="FONT-SIZE: 16px; FONT-FAMILY: sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(0,0,0); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial"><FONT class=extract>We'll argue that a large class of particularly weak objects has consensus number exactly 1, by running<SPAN>&nbsp;</SPAN></FONT><A style="TEXT-DECORATION: none; BORDER-TOP: 0px; BORDER-RIGHT: 0px; BORDER-BOTTOM: 0px; COLOR: rgb(68,119,255); BORDER-LEFT: 0px" href="https://www.cs.yale.edu/homes/aspnes/pinewiki/FischerLynchPaterson.html"><FONT class=extract>FischerLynchPaterson</FONT></A><FONT class=extract><SPAN>&nbsp;</SPAN>with 2 processes. Recall that in<SPAN>&nbsp;</SPAN></FONT><A style="TEXT-DECORATION: none; BORDER-TOP: 0px; BORDER-RIGHT: 0px; BORDER-BOTTOM: 0px; COLOR: rgb(68,119,255); BORDER-LEFT: 0px" href="https://www.cs.yale.edu/homes/aspnes/pinewiki/FischerLynchPaterson.html"><FONT class=extract>FischerLynchPaterson</FONT></A><FONT class=extract><SPAN>&nbsp;</SPAN>we classify states as bivalent or univalent depending on whether both decision values are still possible, and that with at least one failure we can always start in a bivalent state (this doesn't depend on what objects we are using, since it depends only on having invisible inputs). Since the system is wait-free there is no constraint on adversary scheduling, and so if any bivalent state has a bivalent successor we can just do it. So to solve consensus we have to reach a bivalent configuration C that has only univalent successors, and in particular has a 0-valent and a 1-valent successor produced by applying operations x and y of processes p<SUB>x</SUB><SPAN>&nbsp;</SPAN>and p<SUB>y</SUB>.<SPAN id=line-29 class=anchor></SPAN><SPAN id=line-30 class=anchor></SPAN></FONT></P>
<P class=line874 style="FONT-SIZE: 16px; FONT-FAMILY: sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(0,0,0); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial"><FONT class=extract>Assuming objects don't interact with each other behind the scenes, x and y must be operations of the same object. Otherwise Cxy = Cyx and we get a contradiction.<SPAN id=line-31 class=anchor></SPAN><SPAN id=line-32 class=anchor></SPAN></FONT></P>
<P class=line874 style="FONT-SIZE: 16px; FONT-FAMILY: sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(0,0,0); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial"><FONT class=extract>Now let's suppose we are looking at atomic registers, and consider cases:<SPAN id=line-33 class=anchor></SPAN><SPAN id=line-34 class=anchor></SPAN></FONT></P>
<UL style="FONT-SIZE: 16px; FONT-FAMILY: sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(0,0,0); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial">
<LI><FONT class=extract>x and y are both reads, Then x and y commute: Cxy = Cyx &#8658; contradiction.<SPAN id=line-35 class=anchor></SPAN> </FONT>
<LI>
<P class=line862 style="MARGIN: 0.25em 0px"><FONT class=extract>x is a read and y is a write. Then p<SUB>y</SUB><SPAN>&nbsp;</SPAN>can't tell the difference between Cyx and Cxy, so running p<SUB>y</SUB><SPAN>&nbsp;</SPAN>to completion gives the same decision value from both Cyx and Cxy, another contradiction.<SPAN id=line-36 class=anchor></SPAN></FONT></P>
<LI>
<P class=line862 style="MARGIN: 0.25em 0px"><FONT class=extract>x and y are both writes. Now p<SUB>y</SUB><SPAN>&nbsp;</SPAN>can't tell the difference between Cxy and Cy, so we get the same decision value for both, again constradicting that Cx is 0-valent and Cy is 1-valent.<SPAN id=line-37 class=anchor></SPAN><SPAN id=line-38 class=anchor></SPAN></FONT></P></LI></UL>
<P class=line862 style="FONT-SIZE: 16px; FONT-FAMILY: sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(0,0,0); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial"><FONT class=extract>There's a pattern to these cases that generalizes to other objects. Suppose that an object has a read operation that returns its state and one or more read-modify-write operations that don't return anything (perhaps we could call them "modify-write" operations). We'll say that the MW operations are<SPAN>&nbsp;</SPAN><STRONG>interfering</STRONG><SPAN>&nbsp;</SPAN>if for any two operations x and y either:<SPAN id=line-39 class=anchor></SPAN><SPAN id=line-40 class=anchor></SPAN></FONT></P>
<UL style="FONT-SIZE: 16px; FONT-FAMILY: sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(0,0,0); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial">
<LI>
<P class=line862 style="MARGIN: 0.25em 0px"><FONT class=extract>x and y<SPAN>&nbsp;</SPAN><STRONG>commute</STRONG>: Cxy = Cyx.<SPAN id=line-41 class=anchor></SPAN></FONT></P>
<LI>
<P class=line862 style="MARGIN: 0.25em 0px"><FONT class=extract>One of x and y<SPAN>&nbsp;</SPAN><STRONG>overwrites</STRONG><SPAN>&nbsp;</SPAN>the other: Cxy = Cy or Cyx = Cx.<SPAN id=line-42 class=anchor></SPAN><SPAN id=line-43 class=anchor></SPAN></FONT></P></LI></UL>
<P class=line874 style="FONT-SIZE: 16px; FONT-FAMILY: sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(0,0,0); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial"><FONT class=extract>Then no pair of read or modify-write operations can get us out of a bivalent state, because reads commute, the non-reader can't tell which of a read and a MW operation happened first, and for any two MW operations either they commute or the overwriter can't detect that the first operation happened. So any MW object with uninformative, interfering MW operations has consensus number 1. For example, consider a counter that supports operations read, increment, decrement, and write: a write overwrites any other operation, and increments and decrements commute with each other, so the counter has consensus number 1. The same applies to a generalized counter that supports an atomic x&#8592;x+a operation; as long as this operation doesn't return the old value, it still commutes with other atomic increments.<SPAN id=line-44 class=anchor></SPAN><SPAN id=line-45 class=anchor></SPAN></FONT></P>
<P class=line867 style="FONT-SIZE: 16px; FONT-FAMILY: sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(0,0,0); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial"><FONT class=extract></FONT></P>
<H2 id=Level_2:_interfering_RMW_objects_that_return_the_old_value.2C_queues_.28without_peek.29 style="FONT-FAMILY: sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial"><FONT class=extract>1.2. Level 2: interfering RMW objects that return the old value, queues (without peek)</FONT></H2><SPAN id=line-46 class=anchor style="FONT-SIZE: 16px; FONT-FAMILY: sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(0,0,0); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial"></SPAN><SPAN id=line-47 class=anchor style="FONT-SIZE: 16px; FONT-FAMILY: sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(0,0,0); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial"></SPAN>
<P class=line862 style="FONT-SIZE: 16px; FONT-FAMILY: sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(0,0,0); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial"><FONT class=extract>Suppose now that we have a RMW object that returns the old value, and suppose that it is<SPAN>&nbsp;</SPAN><EM>non-trivial</EM><SPAN>&nbsp;</SPAN>in the sense that it has at least one RMW operation where the embedded function f that determines the new value is not the identity (otherwise RMW is just read). Then there is some value v such that f(v) &#8800; v. To solve two-process consensus, have each process p<SUB>i</SUB><SPAN>&nbsp;</SPAN>first write its preferred value to a register r<SUB>i</SUB>, then execute the non-trivial RMW operation on the RMW object initialized to v. The first process in sees v and decides its own value. The second process sees f(v) and decides the first process's value (which it reads from the register). It follows that non-trivial RMW object has consensus number<SPAN>&nbsp;</SPAN><EM>at least</EM><SPAN>&nbsp;</SPAN>2.<SPAN id=line-48 class=anchor></SPAN><SPAN id=line-49 class=anchor></SPAN></FONT></P>
<P class=line874 style="FONT-SIZE: 16px; FONT-FAMILY: sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(0,0,0); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial"><FONT class=extract>In many cases, this is all we get. Suppose that the operations of some RMW type T are interfering in a way analogous to the previous definition, where now we say that x and y commute if they leave the object in the same state (regardless of what values are returned) and that y overwrites x if the object is always in the same state after both x and xy (again regardless of what is returned). The two processes that carry out x and y know what happenened, but a third process z doesn't. So if we run z to completion we get the same decision value after both Cx and Cy, which means that Cx and Cy can't be 0-valent and 1-valent. It follows that no collection of RMW registers with interfering operations can solve 3-process consensus, and thus all such objects have consensus number 2.<SPAN id=line-50 class=anchor></SPAN><SPAN id=line-51 class=anchor></SPAN></FONT></P>
<P class=line862 style="FONT-SIZE: 16px; FONT-FAMILY: sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(0,0,0); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial"><FONT class=extract>There are some other objects with consensus number 2 that don't fit this pattern. Define a<SPAN>&nbsp;</SPAN><STRONG>wait-free queue</STRONG><SPAN>&nbsp;</SPAN>as an object with enqueue and dequeue operations (like normal queues), where dequeue returns empty if the queue is empty (instead of blocking). To solve 2-process consensus with a wait-free queue, initialize the queue with a single value (it doesn't matter what the value is). We can then treat the queue as a non-trivial RMW register where a process wins if it successfully dequeues the initial value and loses if it gets empty.<SPAN id=line-52 class=anchor></SPAN><SPAN id=line-53 class=anchor></SPAN></FONT></P>
<P class=line862 style="FONT-SIZE: 16px; FONT-FAMILY: sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(0,0,0); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial"><FONT class=extract>However, enqueue operations are non-interfering: if p<SUB>x</SUB><SPAN>&nbsp;</SPAN>enqueues v<SUB>x</SUB><SPAN>&nbsp;</SPAN>and p<SUB>y</SUB><SPAN>&nbsp;</SPAN>enqueues v<SUB>y</SUB>, then any third process can detect which happened first; similarly we can distinguish enq(x) deq() from deq() enq(x). So to show we can't do three process consensus we do something sneakier: given a bivalent state C with allegedly 0- and 1-valent successors C enq(x) and C enq(y), consider both C enq(x) enq(y) and C enq(y) enq(x) and run x until it does a deq() (which it must, because otherwise it can't tell what to decide) and then stop it. Now run y until it also does a deq() and then stop it. We've now destroyed the evidence of the split and poor hapless z is stuck. In the case of C deq() enq(x) and C enq(x) deq() on a non-empty queue we can kill the initial dequeuer immediately and then kill whoever dequeues x or the value it replaced, and if the queue is empty only the dequeuer knows. In either case we reach indistinguishable states after killing only 2 witnesses, and the queue has number &#8804; 2.<SPAN id=line-54 class=anchor></SPAN><SPAN id=line-55 class=anchor></SPAN></FONT></P>
<P class=line874 style="FONT-SIZE: 16px; FONT-FAMILY: sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(0,0,0); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial"><FONT class=extract>Similar arguments work on stacks, deques, and so forth&#8212;these all have consensus number exactly 2.<SPAN id=line-56 class=anchor></SPAN><SPAN id=line-57 class=anchor></SPAN></FONT></P>
<P class=line867 style="FONT-SIZE: 16px; FONT-FAMILY: sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(0,0,0); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial"><FONT class=extract></FONT></P>
<H2 id=Level_.2BIh4:_queue_with_peek.2C_compare-and-swap.2C_various_memory-to-memory_operations.2C_fetch-and-cons.2C_sticky_bits style="FONT-FAMILY: sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial"><FONT class=extract>1.3. Level &#8734;: queue with peek, compare-and-swap, various memory-to-memory operations, fetch-and-cons, sticky bits</FONT></H2><SPAN id=line-58 class=anchor style="FONT-SIZE: 16px; FONT-FAMILY: sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(0,0,0); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial"></SPAN><SPAN id=line-59 class=anchor style="FONT-SIZE: 16px; FONT-FAMILY: sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(0,0,0); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial"></SPAN>
<P class=line874 style="FONT-SIZE: 16px; FONT-FAMILY: sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(0,0,0); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial"><FONT class=extract>Here are a bunch of level-&#8734; objects:<SPAN id=line-60 class=anchor></SPAN><SPAN id=line-61 class=anchor></SPAN></FONT></P>
<DL style="FONT-SIZE: 16px; FONT-FAMILY: sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(0,0,0); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial">
<DT style="MARGIN-TOP: 0.5em; FONT-WEIGHT: bold"><FONT class=extract>Queue with peek </FONT>
<DD style="MARGIN-BOTTOM: 0px; MARGIN-TOP: 0px"><FONT class=extract>Has operations enq(x) and peek(), which returns the first value enqueued. (Maybe also deq(), but we don't use it). Protocol is to enq my input and then peek and return the first value into the queue.<SPAN id=line-62 class=anchor></SPAN> </FONT>
<DT style="MARGIN-TOP: 0.5em; FONT-WEIGHT: bold"><FONT class=extract>Fetch-and-cons </FONT>
<DD style="MARGIN-BOTTOM: 0px; MARGIN-TOP: 0px"><FONT class=extract>Returns old cdr and adds new car on to the head of a list. Use preceding protocol where peek() = tail(car::cdr).<SPAN id=line-63 class=anchor></SPAN> </FONT>
<DT style="MARGIN-TOP: 0.5em; FONT-WEIGHT: bold"><FONT class=extract>Sticky bits </FONT>
<DD style="MARGIN-BOTTOM: 0px; MARGIN-TOP: 0px"><FONT class=extract>Has write operation that fails unless register is in the initial &#8869; state. Protocol is to write my input and then return result of a read.<SPAN id=line-64 class=anchor></SPAN> </FONT>
<DT style="MARGIN-TOP: 0.5em; FONT-WEIGHT: bold"><FONT class=extract>Compare-and-swap </FONT>
<DD style="MARGIN-BOTTOM: 0px; MARGIN-TOP: 0px"><FONT class=extract>has CAS(old, new) operation that writes new only if previous value = old. Use it to build a sticky bit.<SPAN id=line-65 class=anchor></SPAN> </FONT>
<DT style="MARGIN-TOP: 0.5em; FONT-WEIGHT: bold"><FONT class=extract>Memory-to-memory swap </FONT>
<DD style="MARGIN-BOTTOM: 0px; MARGIN-TOP: 0px">
<P class=line862 style="MARGIN: 0.25em 0px"><FONT class=extract>Has swap(r<SUB>i</SUB>, r<SUB>j</SUB>) operation that atomically swaps contents of r<SUB>i</SUB><SPAN>&nbsp;</SPAN>with r<SUB>j</SUB>, as well as the usual read and write operations for all registers. Use to implement fetch-and-cons. Alternatively, use two registers<SPAN>&nbsp;</SPAN><TT class=backtick>input</TT><SUB>i</SUB><SPAN>&nbsp;</SPAN>and<SPAN>&nbsp;</SPAN><TT class=backtick>victory</TT><SUB>i</SUB><SPAN>&nbsp;</SPAN>for each process, where<SPAN>&nbsp;</SPAN><TT class=backtick>victory</TT><SUB>i</SUB><SPAN>&nbsp;</SPAN>is initialized to 0, and a single central register<SPAN>&nbsp;</SPAN><TT class=backtick>token</TT>, initialized to 1. To execute consensus, write your input to<SPAN>&nbsp;</SPAN><TT class=backtick>input</TT><SUB>i</SUB>, then swap<SPAN>&nbsp;</SPAN><TT class=backtick>victory</TT><SUB>i</SUB><SPAN>&nbsp;</SPAN>with<SPAN>&nbsp;</SPAN><TT class=backtick>token</TT>. The winning value is obtained by scanning all the<SPAN>&nbsp;</SPAN><TT class=backtick>victory</TT><SPAN>&nbsp;</SPAN>registers for the one that contains a 1, then returning the corresponding<SPAN>&nbsp;</SPAN><TT class=backtick>input</TT><SPAN>&nbsp;</SPAN>value.)<SPAN id=line-66 class=anchor></SPAN></FONT></P>
<DT style="MARGIN-TOP: 0.5em; FONT-WEIGHT: bold"><FONT class=extract>Memory-to-memory copy </FONT>
<DD style="MARGIN-BOTTOM: 0px; MARGIN-TOP: 0px">
<P class=line862 style="MARGIN: 0.25em 0px"><FONT class=extract>Has copy(r<SUB>i</SUB>, r<SUB>j</SUB>) operation that copies r<SUB>i</SUB><SPAN>&nbsp;</SPAN>to r<SUB>j</SUB><SPAN>&nbsp;</SPAN>atomically. Idea is that each process has registers r<SUB>p1</SUB><SPAN>&nbsp;</SPAN>and r<SUB>p2</SUB><SPAN>&nbsp;</SPAN>and stakes its claim by copying r<SUB>p1</SUB><SPAN>&nbsp;</SPAN>to r<SUB>p2</SUB>. It then writes 0 to all r<SUB>p'1</SUB><SPAN>&nbsp;</SPAN>for p' &gt; p, and works backward looking for last non-zero r<SUB>p'2</SUB>, which is the winner (because it staked its claim before anybody else could shut it down). No better claim will come up at this point because all the zeroes in r<SUB>p'1</SUB><SPAN>&nbsp;</SPAN>for p' &gt; p mean that there can be no further changes in any r<SUB>p'2</SUB><SPAN>&nbsp;</SPAN>for p' &gt; p, and we don't care about r<SUB>p'2</SUB><SPAN>&nbsp;</SPAN>for p' &lt; p because nobody will get that far during their backward scan without hitting r<SUB>p2</SUB><SPAN>&nbsp;</SPAN>= 1 first.<SPAN id=line-67 class=anchor></SPAN><SPAN id=line-68 class=anchor></SPAN></FONT></P></DD></DL>
<P class=line867 style="FONT-SIZE: 16px; FONT-FAMILY: sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(0,0,0); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial"><FONT class=extract></FONT></P>
<H2 id=Level_2m-2:_simultaneous_m-register_write style="FONT-FAMILY: sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial"><FONT class=extract>1.4. Level 2m-2: simultaneous m-register write</FONT></H2><SPAN id=line-69 class=anchor style="FONT-SIZE: 16px; FONT-FAMILY: sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(0,0,0); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial"></SPAN><SPAN id=line-70 class=anchor style="FONT-SIZE: 16px; FONT-FAMILY: sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(0,0,0); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial"></SPAN>
<P class=line862 style="FONT-SIZE: 16px; FONT-FAMILY: sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(0,0,0); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial"><FONT class=extract>Here we have a (large) collection of atomic registers augmented by an m-register write operation that performs all the writes simultaneously. The intuition for why this is helpful is that if p<SUB>1</SUB><SPAN>&nbsp;</SPAN>writes r<SUB>1</SUB><SPAN>&nbsp;</SPAN>and r<SUB>shared</SUB><SPAN>&nbsp;</SPAN>while p<SUB>2</SUB><SPAN>&nbsp;</SPAN>writes r<SUB>2</SUB><SPAN>&nbsp;</SPAN>and r<SUB>shared</SUB><SPAN>&nbsp;</SPAN>then any process can look at the state of r<SUB>1</SUB>, r<SUB>2</SUB><SPAN>&nbsp;</SPAN>and r<SUB>shared</SUB><SPAN>&nbsp;</SPAN>and tell which write happened first:<SPAN id=line-71 class=anchor></SPAN><SPAN id=line-72 class=anchor></SPAN></FONT></P>
<UL style="FONT-SIZE: 16px; FONT-FAMILY: sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(0,0,0); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial">
<LI>
<P class=line862 style="MARGIN: 0.25em 0px"><FONT class=extract>If the process reads r<SUB>1</SUB><SPAN>&nbsp;</SPAN>= r<SUB>2</SUB><SPAN>&nbsp;</SPAN>= &#8869;, then we don't care which went first, because the reader (or somebody else) already won.<SPAN id=line-73 class=anchor></SPAN></FONT></P>
<LI>
<P class=line862 style="MARGIN: 0.25em 0px"><FONT class=extract>If the process reads r<SUB>1</SUB><SPAN>&nbsp;</SPAN>= 1 and then r<SUB>2</SUB><SPAN>&nbsp;</SPAN>= &#8869;, then p<SUB>1</SUB><SPAN>&nbsp;</SPAN>went first.<SPAN id=line-74 class=anchor></SPAN></FONT></P>
<LI>
<P class=line862 style="MARGIN: 0.25em 0px"><FONT class=extract>If the process reads r<SUB>2</SUB><SPAN>&nbsp;</SPAN>= 2 and then r<SUB>1</SUB><SPAN>&nbsp;</SPAN>= &#8869;, then p<SUB>2</SUB><SPAN>&nbsp;</SPAN>went first. (This requires at least one more read after checking the first case.)<SPAN id=line-75 class=anchor></SPAN></FONT></P>
<LI>
<P class=line862 style="MARGIN: 0.25em 0px"><FONT class=extract>Otherwise the process saw r<SUB>1</SUB><SPAN>&nbsp;</SPAN>= 1 and r<SUB>2</SUB><SPAN>&nbsp;</SPAN>= 2. Now read p<SUB>shared</SUB>: if it's 1, p<SUB>2</SUB><SPAN>&nbsp;</SPAN>went first, and vice versa.<SPAN id=line-76 class=anchor></SPAN><SPAN id=line-77 class=anchor></SPAN></FONT></P></LI></UL>
<P class=line862 style="FONT-SIZE: 16px; FONT-FAMILY: sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(0,0,0); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial"><FONT class=extract>This requires 2-register writes, and will give us a protocol for 2 processes (since the reader above has to participate somewhere to make the first case work). For m processes, we can do the same thing with m-register writes. We have a register r<SUB>pq</SUB><SPAN>&nbsp;</SPAN>= r<SUB>qp</SUB><SPAN>&nbsp;</SPAN>for each pair of distinct processes p and q, plus a register r<SUB>pp</SUB><SPAN>&nbsp;</SPAN>for each p; this gives a total of m(m+1)/2 = O(m<SUP>2</SUP>) registers. All registers are initialized to &#8869;. Process p then writes its initial preference to some single-writer register pref<SUB>p</SUB><SPAN>&nbsp;</SPAN>and then simultaneously writes p to r<SUB>pq</SUB><SPAN>&nbsp;</SPAN>for all q (including r<SUB>pp</SUB>). It then attempts to figure out the first writer by applying the above test for each q to r<SUB>pq</SUB><SPAN>&nbsp;</SPAN>(standing in for r<SUB>shared</SUB>), r<SUB>pp</SUB><SPAN>&nbsp;</SPAN>(= r<SUB>1</SUB>) and r<SUB>qq</SUB><SPAN>&nbsp;</SPAN>(= r<SUB>2</SUB>). If it won against all the other processes, it decides its own value. If not, it repeats the test recursively for some p' that beat it until it finds a process that beat everybody, and returns its value. So m-register writes solve m-process wait-free consensus.<SPAN id=line-78 class=anchor></SPAN><SPAN id=line-79 class=anchor></SPAN></FONT></P>
<P class=line862 style="FONT-SIZE: 16px; FONT-FAMILY: sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(0,0,0); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial"><FONT class=extract>A further tweak gets 2m-2: run two copies of an m-1 process protocol using separate arrays of registers to decide a winner for each group. Then add a second phase where each process has one register s<SUB>p</SUB>, in which each process p from group 1 writes the winning id for its group simultaneously into s<SUB>p</SUB><SPAN>&nbsp;</SPAN>and s<SUB>q</SUB><SPAN>&nbsp;</SPAN>for each q in the other group. To figure out who won in the end, build a graph of all victories, where there is an edge from p to q iff p beat q in phase 1 or p's id was written before q's id in phase 2. The winner is the (unique) process with at least one outgoing edge and no incoming edges, which will be the process that won its own group (by writing first) and whose value was written first in phase 2.<SPAN id=line-80 class=anchor></SPAN><SPAN id=line-81 class=anchor></SPAN></FONT></P>
<P class=line867 style="FONT-SIZE: 16px; FONT-FAMILY: sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(0,0,0); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial"><FONT class=extract></FONT></P>
<H3 id=Matching_impossibility_result style="FONT-FAMILY: sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial"><FONT class=extract>1.4.1. Matching impossibility result</FONT></H3><SPAN id=line-82 class=anchor style="FONT-SIZE: 16px; FONT-FAMILY: sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(0,0,0); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial"></SPAN><SPAN id=line-83 class=anchor style="FONT-SIZE: 16px; FONT-FAMILY: sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(0,0,0); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial"></SPAN>
<P class=line862 style="FONT-SIZE: 16px; FONT-FAMILY: sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(0,0,0); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial"><FONT class=extract>It would seem that the technique used to boost from m-process consensus to (2m-2)-process consensus could be repeated to get up to at least &#920;(m<SUP>2</SUP>), but this turns out not to be the case. The essential idea is to show that in order to escape bivalence, we have to get to a configuration C where<SPAN>&nbsp;</SPAN><EM>every</EM><SPAN>&nbsp;</SPAN>process is about to do an m-register write leading to a univalent configuration (since reads don't help for the usual reasons, and normal writes can be simulated by m-register writes with an extra m-1 dummy registers), and then argue that these writes can't overlap too much. So suppose we are in such a configuration, and suppose that Cx is 0-valent and Cy is 1-valent, and we also have many other operations z<SUB>1</SUB>...z<SUB>k</SUB><SPAN>&nbsp;</SPAN>that lead to univalent states. Following Herlihy, we argue in two steps:<SPAN id=line-84 class=anchor></SPAN><SPAN id=line-85 class=anchor></SPAN></FONT></P>
<OL style="FONT-SIZE: 16px; FONT-FAMILY: sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(0,0,0); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial" type=1>
<LI>
<P class=line862 style="MARGIN: 0.25em 0px"><FONT class=extract>There is some register that is written to by x alone out of all the pending operations. Proof: Suppose not. Then the 0-valent configuration Cxyz<SUB>1</SUB>...z<SUB>k</SUB><SPAN>&nbsp;</SPAN>is indistinguishable from the 1-valent configuration Cyz<SUB>1</SUB>...z<SUB>k</SUB><SPAN>&nbsp;</SPAN>by any process except p<SUB>x</SUB>, and we're in trouble.<SPAN id=line-86 class=anchor></SPAN></FONT></P>
<LI>
<P class=line862 style="MARGIN: 0.25em 0px"><FONT class=extract>There is some register that is written to by x and y but not by any of the z<SUB>i</SUB>. Proof:: Suppose not; then Cxyz<SUB>1</SUB>...z<SUB>k</SUB><SPAN>&nbsp;</SPAN>is indistinguishable from Cyxz<SUB>1</SUB>...z<SUB>k</SUB><SPAN>&nbsp;</SPAN>for any process other than p<SUB>x</SUB><SPAN>&nbsp;</SPAN>and p<SUB>y</SUB>, and we're still in trouble.<SPAN id=line-87 class=anchor></SPAN><SPAN id=line-88 class=anchor></SPAN></FONT></P></LI></OL>
<P class=line862 style="FONT-SIZE: 16px; FONT-FAMILY: sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(0,0,0); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial"><FONT class=extract>Now suppose we have 2m-1 processes. The first part says that each of the pending operations (x, y, all of the z<SUB>i</SUB>) writes to 1 single-writer register and at least k two-writer registers where k is the number of processes leading to a different univalent value. This gives k+1 total registers simultaneously written by this operation. Now observe that with 2m-1 process, there is some set of m processes whose operations all lead to a b-valent state; so for any process to get to a (&#172;b)-valent state, it must write m+1 registers simultaneously. It follows that with only m simultaneous writes we can only do (2m-2)-consensus.<SPAN id=line-89 class=anchor></SPAN><SPAN id=line-90 class=anchor></SPAN></FONT></P>
<P class=line867 style="FONT-SIZE: 16px; FONT-FAMILY: sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(0,0,0); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial"><FONT class=extract></FONT></P>
<H2 id=Level_m:_m-process_consensus_objects style="FONT-FAMILY: sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial"><FONT class=extract>1.5. Level m: m-process consensus objects</FONT></H2><SPAN id=line-91 class=anchor style="FONT-SIZE: 16px; FONT-FAMILY: sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(0,0,0); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial"></SPAN><SPAN id=line-92 class=anchor style="FONT-SIZE: 16px; FONT-FAMILY: sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(0,0,0); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial"></SPAN>
<P class=line862 style="FONT-SIZE: 16px; FONT-FAMILY: sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(0,0,0); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial"><FONT class=extract>An<SPAN>&nbsp;</SPAN><STRONG>m-process consensus object</STRONG><SPAN>&nbsp;</SPAN>has a single<SPAN>&nbsp;</SPAN><EM>consensus</EM><SPAN>&nbsp;</SPAN>operation that, the first m times it is called, returns the input value in the first operation, and thereafter returns only &#8869;. Clearly this solves m-process consensus. To show that it doesn't solve (m+1)-process consensus even when augmented with registers, run a bivalent initial configuration to a configuration C where any further operation yields a univalent state. By an argument similar to the m-register write case we can show that the pending operations in C must all be consensus operations on the same consensus object (anything else commutes or overwrites). Now run Cxyz<SUB>1</SUB>...z<SUB>k</SUB><SPAN>&nbsp;</SPAN>and Cyxz<SUB>1</SUB>...z<SUB>k</SUB>, where x and y lead to 0- and 1-valent states, and observe that p<SUB>k</SUB><SPAN>&nbsp;</SPAN>can't distinguish the resulting configurations because all it got was &#8869;. (Note: this works even if the consensus object isn't in its initial state, since we know that before x or y the configuration is still bivalent.)<SPAN id=line-93 class=anchor></SPAN><SPAN id=line-94 class=anchor></SPAN></FONT></P>
<P class=line862 style="FONT-SIZE: 16px; FONT-FAMILY: sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(0,0,0); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial"><FONT class=extract>So the m-process consensus object has consensus number m. This shows that h<SUP>r</SUP><SUB>m</SUB><SPAN>&nbsp;</SPAN>is nonempty at each level.<SPAN id=line-95 class=anchor></SPAN><SPAN id=line-96 class=anchor></SPAN></FONT></P>
<P class=line874 style="FONT-SIZE: 16px; FONT-FAMILY: sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(0,0,0); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial"><FONT class=extract>A natural question at this point is whether the inability of m-process consensus objects to solve (m+1)-process consensus implies robustness of the hierarchy. One might consider the following argument: given any object at level m, we can simulate it with an m-process consensus object, and since we can't combine m-process consensus objects to boost the consensus number, we can't combine any objects they can simulate either. The problem here is that while m-process consensus objects can simulate any object in a system with m processes (see below), it may be that some objects can do more in a system with m+1 objects while still not solving (m+1)-process consensus. A simple way to see this would be to imagine a variant of the m-process consensus object that doesn't fail completely after m operations; for example, it might return one of the first two inputs given to it instead of &#8869;. This doesn't help with solving consensus, but it might (or might not) make it too powerful to implement using standard m-process consensus objects.<SPAN id=line-97 class=anchor></SPAN><SPAN id=line-98 class=anchor></SPAN></FONT></P>
<P class=line867 style="FONT-SIZE: 16px; FONT-FAMILY: sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(0,0,0); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial"><FONT class=extract></FONT></P>
<H1 id=Universality_of_consensus style="FONT-FAMILY: sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial"><FONT class=extract>2. Universality of consensus</FONT></H1><SPAN id=line-99 class=anchor style="FONT-SIZE: 16px; FONT-FAMILY: sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(0,0,0); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial"></SPAN><SPAN id=line-100 class=anchor style="FONT-SIZE: 16px; FONT-FAMILY: sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(0,0,0); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial"></SPAN>
<P class=line874 style="FONT-SIZE: 16px; FONT-FAMILY: sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(0,0,0); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial"><FONT class=extract>This says that any type that can implement n-process consensus can, together with atomic registers, give a wait-free implementation of any object in a system with n processes.<SPAN id=line-101 class=anchor></SPAN><SPAN id=line-102 class=anchor></SPAN></FONT></P>
<P class=line874 style="FONT-SIZE: 16px; FONT-FAMILY: sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(0,0,0); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial"><FONT class=extract>See Herlihy paper for the full result, which does a lot of extra work to handle garbage collection and reduce overhead. Simplified profligate version goes like this: the processes repeatedly use consensus to decide between candidate histories of the simulated object, and a process successfully completes an operation when its operation (tagged to distinguish it from other similar operations) appears in a winning history. In slightly more detail:<SPAN id=line-103 class=anchor></SPAN><SPAN id=line-104 class=anchor></SPAN></FONT></P>
<OL style="FONT-SIZE: 16px; FONT-FAMILY: sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(0,0,0); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial" type=1>
<LI><FONT class=extract>Have a separate n-process consensus protocol for each of a series of phases 0, 1, 2, ... . These protocols should allow processes as input values instead of just 0 or 1 (it's possible to build such objects out of binary consensus objects by doing tournaments).<SPAN id=line-105 class=anchor></SPAN> </FONT>
<LI><FONT class=extract>Processes post a list of (a) the operation they want to do and (b) the last phase they've participated in.<SPAN id=line-106 class=anchor></SPAN> </FONT>
<LI><FONT class=extract>To do an operation, process i:<SPAN id=line-107 class=anchor></SPAN> </FONT>
<OL type=a>
<LI><FONT class=extract>Posts the operation to its register.<SPAN id=line-108 class=anchor></SPAN> </FONT>
<LI><FONT class=extract>Reads all the last-phase values and takes their max.<SPAN id=line-109 class=anchor></SPAN> </FONT>
<LI><FONT class=extract>Runs the consensus protocol for the max phase to get the history decided on up to that phase.<SPAN id=line-110 class=anchor></SPAN> </FONT>
<LI><FONT class=extract>If the max phase history includes the process's pending operation, returns the result that operation would have had in the winning history.<SPAN id=line-111 class=anchor></SPAN> </FONT>
<LI><FONT class=extract>Otherwise, constructs a new history by appending all announced operations to the previous history, and tries to win with that history in phase max+1.<SPAN id=line-112 class=anchor></SPAN> </FONT>
<LI><FONT class=extract>Returns to step (b) if its operation doesn't make it into the winning history.<SPAN id=line-113 class=anchor></SPAN><SPAN id=line-114 class=anchor></SPAN></FONT></LI></OL></LI></OL>
<P class=line874 style="FONT-SIZE: 16px; FONT-FAMILY: sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(0,0,0); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial"><FONT class=extract>This terminates because even if process i doesn't get its value into the winning history, eventually some other process will pick up the announced value and include it.</FONT>