<b> : </b>1.4. Level 2m-2: simultaneous m-register write</H2><SPAN id=line-69 class=anchor style="FONT-SIZE: 16px; FONT-FAMILY: sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(0,0,0); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial"></SPAN><SPAN id=line-70 class=anchor style="FONT-SIZE: 16px; FONT-FAMILY: sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(0,0,0); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial"></SPAN>
<P class=line862 style="FONT-SIZE: 16px; FONT-FAMILY: sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(0,0,0); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial">Here we have a (large) collection of atomic registers augmented by an m-register write operation that performs all the writes simultaneously. The intuition for why this is helpful is that if p<SUB>1</SUB><SPAN>&nbsp;</SPAN>writes r<SUB>1</SUB><SPAN>&nbsp;</SPAN>and r<SUB>shared</SUB><SPAN>&nbsp;</SPAN>while p<SUB>2</SUB><SPAN>&nbsp;</SPAN>writes r<SUB>2</SUB><SPAN>&nbsp;</SPAN>and r<SUB>shared</SUB><SPAN>&nbsp;</SPAN>then any process can look at the state of r<SUB>1</SUB>, r<SUB>2</SUB><SPAN>&nbsp;</SPAN>and r<SUB>shared</SUB><SPAN>&nbsp;</SPAN>and tell which write happened first:<SPAN id=line-71 class=anchor></SPAN><SPAN id=line-72 class=anchor></SPAN></P>
<UL style="FONT-SIZE: 16px; FONT-FAMILY: sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(0,0,0); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial">
<LI>
<P class=line862 style="MARGIN: 0.25em 0px">If the process reads r<SUB>1</SUB><SPAN>&nbsp;</SPAN>= r<SUB>2</SUB><SPAN>&nbsp;</SPAN>= &#8869;, then we don't care which went first, because the reader (or somebody else) already won.<SPAN id=line-73 class=anchor></SPAN></P></LI>
<LI>
<P class=line862 style="MARGIN: 0.25em 0px">If the process reads r<SUB>1</SUB><SPAN>&nbsp;</SPAN>= 1 and then r<SUB>2</SUB><SPAN>&nbsp;</SPAN>= &#8869;, then p<SUB>1</SUB><SPAN>&nbsp;</SPAN>went first.<SPAN id=line-74 class=anchor></SPAN></P></LI>
<LI>
<P class=line862 style="MARGIN: 0.25em 0px">If the process reads r<SUB>2</SUB><SPAN>&nbsp;</SPAN>= 2 and then r<SUB>1</SUB><SPAN>&nbsp;</SPAN>= &#8869;, then p<SUB>2</SUB><SPAN>&nbsp;</SPAN>went first. (This requires at least one more read after checking the first case.)<SPAN id=line-75 class=anchor></SPAN></P></LI>
<LI>
<P class=line862 style="MARGIN: 0.25em 0px">Otherwise the process saw r<SUB>1</SUB><SPAN>&nbsp;</SPAN>= 1 and r<SUB>2</SUB><SPAN>&nbsp;</SPAN>= 2. Now read p<SUB>shared</SUB>: if it's 1, p<SUB>2</SUB><SPAN>&nbsp;</SPAN>went first, and vice versa.<SPAN id=line-76 class=anchor></SPAN><SPAN id=line-77 class=anchor></SPAN></P></LI></UL>
<P class=line862 style="FONT-SIZE: 16px; FONT-FAMILY: sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(0,0,0); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial">This requires 2-register writes, and will give us a protocol for 2 processes (since the reader above has to participate somewhere to make the first case work). For m processes, we can do the same thing with m-register writes. We have a register r<SUB>pq</SUB><SPAN>&nbsp;</SPAN>= r<SUB>qp</SUB><SPAN>&nbsp;</SPAN>for each pair of distinct processes p and q, plus a register r<SUB>pp</SUB><SPAN>&nbsp;</SPAN>for each p; this gives a total of m(m+1)/2 = O(m<SUP>2</SUP>) registers. All registers are initialized to &#8869;. Process p then writes its initial preference to some single-writer register pref<SUB>p</SUB><SPAN>&nbsp;</SPAN>and then simultaneously writes p to r<SUB>pq</SUB><SPAN>&nbsp;</SPAN>for all q (including r<SUB>pp</SUB>). It then attempts to figure out the first writer by applying the above test for each q to r<SUB>pq</SUB><SPAN>&nbsp;</SPAN>(standing in for r<SUB>shared</SUB>), r<SUB>pp</SUB><SPAN>&nbsp;</SPAN>(= r<SUB>1</SUB>) and r<SUB>qq</SUB><SPAN>&nbsp;</SPAN>(= r<SUB>2</SUB>). If it won against all the other processes, it decides its own value. If not, it repeats the test recursively for some p' that beat it until it finds a process that beat everybody, and returns its value. So m-register writes solve m-process wait-free consensus.<SPAN id=line-78 class=anchor></SPAN><SPAN id=line-79 class=anchor></SPAN></P>
<P class=line862 style="FONT-SIZE: 16px; FONT-FAMILY: sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(0,0,0); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial">A further tweak gets 2m-2: run two copies of an m-1 process protocol using separate arrays of registers to decide a winner for each group. Then add a second phase where each process has one register s<SUB>p</SUB>, in which each process p from group 1 writes the winning id for its group simultaneously into s<SUB>p</SUB><SPAN>&nbsp;</SPAN>and s<SUB>q</SUB><SPAN>&nbsp;</SPAN>for each q in the other group. To figure out who won in the end, build a graph of all victories, where there is an edge from p to q iff p beat q in phase 1 or p's id was written before q's id in phase 2. The winner is the (unique) process with at least one outgoing edge and no incoming edges, which will be the process that won its own group (by writing first) and whose value was written first in phase 2.<SPAN id=line-80 class=anchor></SPAN><SPAN id=line-81 class=anchor></SPAN></P>
<P class=line867 style="FONT-SIZE: 16px; FONT-FAMILY: sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(0,0,0); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial">