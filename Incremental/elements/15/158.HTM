<b> : </b>1.3. Level &#8734;: queue with peek, compare-and-swap, various memory-to-memory operations, fetch-and-cons, sticky bits</H2><SPAN id=line-58 class=anchor style="FONT-SIZE: 16px; FONT-FAMILY: sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(0,0,0); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial"></SPAN><SPAN id=line-59 class=anchor style="FONT-SIZE: 16px; FONT-FAMILY: sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(0,0,0); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial"></SPAN>
<P class=line874 style="FONT-SIZE: 16px; FONT-FAMILY: sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(0,0,0); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial">Here are a bunch of level-&#8734; objects:<SPAN id=line-60 class=anchor></SPAN><SPAN id=line-61 class=anchor></SPAN></P>
<DL style="FONT-SIZE: 16px; FONT-FAMILY: sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(0,0,0); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial">
<DT style="MARGIN-TOP: 0.5em; FONT-WEIGHT: bold">Queue with peek</DT>
<DD style="MARGIN-BOTTOM: 0px; MARGIN-TOP: 0px">Has operations enq(x) and peek(), which returns the first value enqueued. (Maybe also deq(), but we don't use it). Protocol is to enq my input and then peek and return the first value into the queue.<SPAN id=line-62 class=anchor></SPAN></DD>
<DT style="MARGIN-TOP: 0.5em; FONT-WEIGHT: bold">Fetch-and-cons</DT>
<DD style="MARGIN-BOTTOM: 0px; MARGIN-TOP: 0px">Returns old cdr and adds new car on to the head of a list. Use preceding protocol where peek() = tail(car::cdr).<SPAN id=line-63 class=anchor></SPAN></DD>
<DT style="MARGIN-TOP: 0.5em; FONT-WEIGHT: bold">Sticky bits</DT>
<DD style="MARGIN-BOTTOM: 0px; MARGIN-TOP: 0px">Has write operation that fails unless register is in the initial &#8869; state. Protocol is to write my input and then return result of a read.<SPAN id=line-64 class=anchor></SPAN></DD>
<DT style="MARGIN-TOP: 0.5em; FONT-WEIGHT: bold">Compare-and-swap</DT>
<DD style="MARGIN-BOTTOM: 0px; MARGIN-TOP: 0px">has CAS(old, new) operation that writes new only if previous value = old. Use it to build a sticky bit.<SPAN id=line-65 class=anchor></SPAN></DD>
<DT style="MARGIN-TOP: 0.5em; FONT-WEIGHT: bold">Memory-to-memory swap</DT>
<DD style="MARGIN-BOTTOM: 0px; MARGIN-TOP: 0px">
<P class=line862 style="MARGIN: 0.25em 0px">Has swap(r<SUB>i</SUB>, r<SUB>j</SUB>) operation that atomically swaps contents of r<SUB>i</SUB><SPAN>&nbsp;</SPAN>with r<SUB>j</SUB>, as well as the usual read and write operations for all registers. Use to implement fetch-and-cons. Alternatively, use two registers<SPAN>&nbsp;</SPAN><TT class=backtick>input</TT><SUB>i</SUB><SPAN>&nbsp;</SPAN>and<SPAN>&nbsp;</SPAN><TT class=backtick>victory</TT><SUB>i</SUB><SPAN>&nbsp;</SPAN>for each process, where<SPAN>&nbsp;</SPAN><TT class=backtick>victory</TT><SUB>i</SUB><SPAN>&nbsp;</SPAN>is initialized to 0, and a single central register<SPAN>&nbsp;</SPAN><TT class=backtick>token</TT>, initialized to 1. To execute consensus, write your input to<SPAN>&nbsp;</SPAN><TT class=backtick>input</TT><SUB>i</SUB>, then swap<SPAN>&nbsp;</SPAN><TT class=backtick>victory</TT><SUB>i</SUB><SPAN>&nbsp;</SPAN>with<SPAN>&nbsp;</SPAN><TT class=backtick>token</TT>. The winning value is obtained by scanning all the<SPAN>&nbsp;</SPAN><TT class=backtick>victory</TT><SPAN>&nbsp;</SPAN>registers for the one that contains a 1, then returning the corresponding<SPAN>&nbsp;</SPAN><TT class=backtick>input</TT><SPAN>&nbsp;</SPAN>value.)<SPAN id=line-66 class=anchor></SPAN></P></DD>
<DT style="MARGIN-TOP: 0.5em; FONT-WEIGHT: bold">Memory-to-memory copy</DT>
<DD style="MARGIN-BOTTOM: 0px; MARGIN-TOP: 0px">
<P class=line862 style="MARGIN: 0.25em 0px">Has copy(r<SUB>i</SUB>, r<SUB>j</SUB>) operation that copies r<SUB>i</SUB><SPAN>&nbsp;</SPAN>to r<SUB>j</SUB><SPAN>&nbsp;</SPAN>atomically. Idea is that each process has registers r<SUB>p1</SUB><SPAN>&nbsp;</SPAN>and r<SUB>p2</SUB><SPAN>&nbsp;</SPAN>and stakes its claim by copying r<SUB>p1</SUB><SPAN>&nbsp;</SPAN>to r<SUB>p2</SUB>. It then writes 0 to all r<SUB>p'1</SUB><SPAN>&nbsp;</SPAN>for p' &gt; p, and works backward looking for last non-zero r<SUB>p'2</SUB>, which is the winner (because it staked its claim before anybody else could shut it down). No better claim will come up at this point because all the zeroes in r<SUB>p'1</SUB><SPAN>&nbsp;</SPAN>for p' &gt; p mean that there can be no further changes in any r<SUB>p'2</SUB><SPAN>&nbsp;</SPAN>for p' &gt; p, and we don't care about r<SUB>p'2</SUB><SPAN>&nbsp;</SPAN>for p' &lt; p because nobody will get that far during their backward scan without hitting r<SUB>p2</SUB><SPAN>&nbsp;</SPAN>= 1 first.<SPAN id=line-67 class=anchor></SPAN><SPAN id=line-68 class=anchor></SPAN></P></DD></DL>
<P class=line867 style="FONT-SIZE: 16px; FONT-FAMILY: sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(0,0,0); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial">