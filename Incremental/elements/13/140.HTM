<b> : </b>A Duplication Checker</H2>
<P style="LINE-HEIGHT: 1.5">Now that we know the basics of PlusCal, let&#8217;s apply it to a small problem. I like to start with simple array algorithms, because we already have the tools to specify them. First we write an operator that expresses the high-level goal of the algorithm, then we write the algorithm, then we verify the algorithm matches the operator.</P>
<P style="LINE-HEIGHT: 1.5">For example, if we were writing an algorithm to check if<SPAN>&nbsp;</SPAN><CODE class="docutils literal notranslate" style='FONT-SIZE: 0.9em; FONT-FAMILY: "Roboto Mono", monospace, Monaco, Consolas, "Andale Mono"; PADDING-BOTTOM: 2px; PADDING-TOP: 2px; PADDING-LEFT: 4px; PADDING-RIGHT: 4px; border-radius: 0.2rem'><SPAN class=pre>seq</SPAN></CODE><SPAN>&nbsp;</SPAN>has any duplicate elements, the operator might be<SPAN>&nbsp;</SPAN><CODE class="docutils literal notranslate" style='FONT-SIZE: 0.9em; FONT-FAMILY: "Roboto Mono", monospace, Monaco, Consolas, "Andale Mono"; PADDING-BOTTOM: 2px; PADDING-TOP: 2px; PADDING-LEFT: 4px; PADDING-RIGHT: 4px; border-radius: 0.2rem'><SPAN class=pre>IsUnique(seq)</SPAN></CODE>, and then the algorithm could work like this:</P>
<OL class=arabic style="LIST-STYLE-TYPE: decimal">
<LI style="LINE-HEIGHT: 1.5">
<P style="MARGIN: 0px; LINE-HEIGHT: 1.5">Create an empty set<SPAN>&nbsp;</SPAN><CODE class="docutils literal notranslate" style='FONT-SIZE: 0.9em; FONT-FAMILY: "Roboto Mono", monospace, Monaco, Consolas, "Andale Mono"; PADDING-BOTTOM: 2px; PADDING-TOP: 2px; PADDING-LEFT: 4px; PADDING-RIGHT: 4px; border-radius: 0.2rem'><SPAN class=pre>seen</SPAN></CODE>, then step through the elements of<SPAN>&nbsp;</SPAN><CODE class="docutils literal notranslate" style='FONT-SIZE: 0.9em; FONT-FAMILY: "Roboto Mono", monospace, Monaco, Consolas, "Andale Mono"; PADDING-BOTTOM: 2px; PADDING-TOP: 2px; PADDING-LEFT: 4px; PADDING-RIGHT: 4px; border-radius: 0.2rem'><SPAN class=pre>seq</SPAN></CODE>.</P></LI>
<LI style="LINE-HEIGHT: 1.5">
<P style="MARGIN: 0px; LINE-HEIGHT: 1.5">Every time we see a number, we check if it&#8217;s already in<SPAN>&nbsp;</SPAN><CODE class="docutils literal notranslate" style='FONT-SIZE: 0.9em; FONT-FAMILY: "Roboto Mono", monospace, Monaco, Consolas, "Andale Mono"; PADDING-BOTTOM: 2px; PADDING-TOP: 2px; PADDING-LEFT: 4px; PADDING-RIGHT: 4px; border-radius: 0.2rem'><SPAN class=pre>seen</SPAN></CODE>.</P>
<BLOCKQUOTE>
<DIV>
<UL class=simple>
<LI style="LINE-HEIGHT: 1.5">
<P style="MARGIN: 0px; LINE-HEIGHT: 1.5">If it is, we say the list is not unique.</P></LI>
<LI style="LINE-HEIGHT: 1.5">
<P style="MARGIN: 0px; LINE-HEIGHT: 1.5">Otherwise, we add the element to<SPAN>&nbsp;</SPAN><CODE class="docutils literal notranslate" style='FONT-SIZE: 0.9em; FONT-FAMILY: "Roboto Mono", monospace, Monaco, Consolas, "Andale Mono"; PADDING-BOTTOM: 2px; PADDING-TOP: 2px; PADDING-LEFT: 4px; PADDING-RIGHT: 4px; border-radius: 0.2rem'><SPAN class=pre>seen</SPAN></CODE><SPAN>&nbsp;</SPAN>and continue.</P></LI></UL></DIV></BLOCKQUOTE></LI>
<LI style="LINE-HEIGHT: 1.5">
<P style="MARGIN: 0px; LINE-HEIGHT: 1.5">If we reach the end and haven&#8217;t seen any duplicate elements, we say the list is unique.</P></LI>
<LI style="LINE-HEIGHT: 1.5">
<P style="MARGIN: 0px; LINE-HEIGHT: 1.5">Our decision should match the operator<SPAN>&nbsp;</SPAN><CODE class="docutils literal notranslate" style='FONT-SIZE: 0.9em; FONT-FAMILY: "Roboto Mono", monospace, Monaco, Consolas, "Andale Mono"; PADDING-BOTTOM: 2px; PADDING-TOP: 2px; PADDING-LEFT: 4px; PADDING-RIGHT: 4px; border-radius: 0.2rem'><SPAN class=pre>IsUnique(seq)</SPAN></CODE>.</P></LI></OL>
<P style="LINE-HEIGHT: 1.5">In this chapter we&#8217;ll focus on just writing out the spec, parts (2) and (3). In<SPAN>&nbsp;</SPAN><A class="reference internal" style="TEXT-DECORATION: none; COLOR: " href="https://www.learntla.com/core/invariants.html"><SPAN class=doc><FONT color=#0066cc size=3>the next chapter</FONT></SPAN></A><SPAN>&nbsp;</SPAN>we&#8217;ll do steps (1) and (4), actually verifying the algorithm.</P>
<P style="LINE-HEIGHT: 1.5">I called this spec<SPAN>&nbsp;</SPAN><CODE class="docutils literal notranslate" style='FONT-SIZE: 0.9em; FONT-FAMILY: "Roboto Mono", monospace, Monaco, Consolas, "Andale Mono"; PADDING-BOTTOM: 2px; PADDING-TOP: 2px; PADDING-LEFT: 4px; PADDING-RIGHT: 4px; border-radius: 0.2rem'><SPAN class=pre>duplicates</SPAN></CODE>, but the name isn&#8217;t too important for this.</P>
<DIV id=id10 class="literal-block-wrapper docutils container">
<DIV class="highlight-tla notranslate" style="OVERFLOW-X: auto">
<DIV class=highlight style="BOX-SIZING: border-box; BACKGROUND: rgb(248,248,248); MARGIN-TOP: 0px; OVERFLOW-X: auto; COLOR: rgb(37,38,48); PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN-LEFT: 0px; PADDING-RIGHT: 0px; MARGIN-RIGHT: 0px; border-radius: 0.2rem"><PRE style='FONT-FAMILY: "Roboto Mono", monospace, Monaco, Consolas, "Andale Mono"; LINE-HEIGHT: 18px'><SPAN></SPAN><SPAN class="c c-PreProc" style="COLOR: rgb(61,123,123); FONT-STYLE: italic">----</SPAN> <SPAN class="c c-PreProc" style="COLOR: rgb(61,123,123); FONT-STYLE: italic">MODULE</SPAN> <SPAN class="c c-PreProc" style="COLOR: rgb(61,123,123); FONT-STYLE: italic">duplicates</SPAN> <SPAN class="c c-PreProc" style="COLOR: rgb(61,123,123); FONT-STYLE: italic">----</SPAN>
<SPAN class=kn style="FONT-WEIGHT: bold; COLOR: rgb(0,128,0)">EXTENDS</SPAN> <SPAN class=n>Integers</SPAN><SPAN class=p>,</SPAN> <SPAN class=n>Sequences</SPAN><SPAN class=p>,</SPAN> <SPAN class=n>TLC</SPAN>

<SPAN class=nf style="COLOR: rgb(0,0,255)">(*--algorithm dup</SPAN>
  <SPAN class=n>variable</SPAN> <SPAN class=n>seq</SPAN> <SPAN class=o style="COLOR: rgb(102,102,102)">=</SPAN> <SPAN class=o style="COLOR: rgb(102,102,102)">&lt;&lt;</SPAN><SPAN class=m style="COLOR: rgb(102,102,102)">1</SPAN><SPAN class=p>,</SPAN> <SPAN class=m style="COLOR: rgb(102,102,102)">2</SPAN><SPAN class=p>,</SPAN> <SPAN class=m style="COLOR: rgb(102,102,102)">3</SPAN><SPAN class=p>,</SPAN> <SPAN class=m style="COLOR: rgb(102,102,102)">2</SPAN><SPAN class=o style="COLOR: rgb(102,102,102)">&gt;&gt;</SPAN><SPAN class=p>;</SPAN>
  <SPAN class=n>index</SPAN> <SPAN class=o style="COLOR: rgb(102,102,102)">=</SPAN> <SPAN class=m style="COLOR: rgb(102,102,102)">1</SPAN><SPAN class=p>;</SPAN>
  <SPAN class=n>seen</SPAN> <SPAN class=o style="COLOR: rgb(102,102,102)">=</SPAN> <SPAN class=n>{}</SPAN><SPAN class=p>;</SPAN>
  <SPAN class=n>is_unique</SPAN> <SPAN class=o style="COLOR: rgb(102,102,102)">=</SPAN> <SPAN class=bp style="COLOR: rgb(0,128,0)">TRUE</SPAN><SPAN class=p>;</SPAN>

<SPAN class=nf style="COLOR: rgb(0,0,255)">begin</SPAN>
<SPAN class=nt style="FONT-WEIGHT: bold; COLOR: rgb(0,128,0)">  Iterate:</SPAN>
    <SPAN class=k style="FONT-WEIGHT: bold; COLOR: rgb(0,128,0)">while</SPAN> <SPAN class=n>index</SPAN> <SPAN class=o style="COLOR: rgb(102,102,102)">&lt;=</SPAN> <SPAN class=n>Len</SPAN><SPAN class=p>(</SPAN><SPAN class=n>seq</SPAN><SPAN class=p>)</SPAN> <SPAN class=k style="FONT-WEIGHT: bold; COLOR: rgb(0,128,0)">do</SPAN>
      <SPAN class=k style="FONT-WEIGHT: bold; COLOR: rgb(0,128,0)">if</SPAN> <SPAN class=n>seq</SPAN><SPAN class=p>[</SPAN><SPAN class=n>index</SPAN><SPAN class=p>]</SPAN> <SPAN class=s style="COLOR: rgb(186,33,33)">\notin</SPAN> <SPAN class=n>seen</SPAN> <SPAN class=k style="FONT-WEIGHT: bold; COLOR: rgb(0,128,0)">then</SPAN>
        <SPAN class=n>seen</SPAN> <SPAN class=o style="COLOR: rgb(102,102,102)">:=</SPAN> <SPAN class=n>seen</SPAN> <SPAN class=nb style="COLOR: rgb(0,128,0)">\union</SPAN> <SPAN class=n>{seq</SPAN><SPAN class=p>[</SPAN><SPAN class=n>index</SPAN><SPAN class=p>]</SPAN><SPAN class=n>}</SPAN><SPAN class=p>;</SPAN>
      <SPAN class=k style="FONT-WEIGHT: bold; COLOR: rgb(0,128,0)">else</SPAN>
        <SPAN class=n>is_unique</SPAN> <SPAN class=o style="COLOR: rgb(102,102,102)">:=</SPAN> <SPAN class=bp style="COLOR: rgb(0,128,0)">FALSE</SPAN><SPAN class=p>;</SPAN>
      <SPAN class=k style="FONT-WEIGHT: bold; COLOR: rgb(0,128,0)">end</SPAN> <SPAN class=k style="FONT-WEIGHT: bold; COLOR: rgb(0,128,0)">if</SPAN><SPAN class=p>;</SPAN>
      <SPAN class=n>index</SPAN> <SPAN class=o style="COLOR: rgb(102,102,102)">:=</SPAN> <SPAN class=n>index</SPAN> <SPAN class=o style="COLOR: rgb(102,102,102)">+</SPAN> <SPAN class=m style="COLOR: rgb(102,102,102)">1</SPAN><SPAN class=p>;</SPAN>
    <SPAN class=k style="FONT-WEIGHT: bold; COLOR: rgb(0,128,0)">end</SPAN> <SPAN class=k style="FONT-WEIGHT: bold; COLOR: rgb(0,128,0)">while</SPAN><SPAN class=p>;</SPAN>
<SPAN class=nf style="COLOR: rgb(0,0,255)">end algorithm; *)</SPAN>
<SPAN class="c c-PreProc" style="COLOR: rgb(61,123,123); FONT-STYLE: italic">====</SPAN>
</PRE></DIV></DIV>
<DIV class=code-block-caption style="FONT-SIZE: 0.8em; TEXT-ALIGN: center"><SPAN class=caption-text><A class="reference download internal" style="TEXT-DECORATION: none; COLOR: " href="https://www.learntla.com/_downloads/53a13df4b96b3e1932a79ad9184e0eb4/duplicates.tla" download=""><CODE class="xref download docutils literal notranslate" style='FONT-SIZE: 0.9em; FONT-FAMILY: "Roboto Mono", monospace, Monaco, Consolas, "Andale Mono"; PADDING-BOTTOM: 2px; PADDING-TOP: 2px; PADDING-LEFT: 4px; PADDING-RIGHT: 4px; border-radius: 0.2rem'><SPAN class=pre><FONT color=#0066cc size=2>spec</FONT></SPAN></CODE></A></SPAN></DIV></DIV>
<P style="LINE-HEIGHT: 1.5">(I<SPAN>&nbsp;</SPAN><EM>think</EM><SPAN>&nbsp;</SPAN>this is self-explanatory, but I&#8217;ve been doing this so long I have no idea what is or isn&#8217;t explanatory anymore. If enough people say otherwise I&#8217;ll put a fuller description here.)</P>
<P style="LINE-HEIGHT: 1.5">If you<SPAN>&nbsp;</SPAN><A class="reference internal" style="TEXT-DECORATION: none; COLOR: " href="https://www.learntla.com/core/setup.html#running-models"><SPAN class="std std-ref"><FONT color=#0066cc size=3>run it</FONT></SPAN></A>, you will see a page like this:</P><FIGURE id=id11 class=align-default style="DISPLAY: flex; flex-wrap: wrap; justify-content: center"><A class="reference internal image-reference" style="TEXT-DECORATION: none; COLOR: " href="https://www.learntla.com/_images/pluscal_run.png"><IMG style="MAX-WIDTH: 100%; BORDER-TOP: 1px; HEIGHT: 176px; BORDER-RIGHT: 1px; WIDTH: 768px; BORDER-BOTTOM: 1px; BORDER-LEFT: 1px" alt=../_images/pluscal_run.png src="https://www.learntla.com/_images/pluscal_run.png"></A><FIGCAPTION>
<P style="LINE-HEIGHT: 1.5"><SPAN class=caption-text style="FONT-SIZE: 0.8em; MARGIN-TOP: 8px; TEXT-ALIGN: center">(Click to zoom in)</SPAN></P></FIGCAPTION></FIGURE>
<P style="LINE-HEIGHT: 1.5">I know this completed successfully because otherwise a big error bar would have appeared on the right-hand side. Everything on this page is statistics to help you understand the run better:</P>
<OL class="arabic simple" style="LIST-STYLE-TYPE: decimal">
<LI style="LINE-HEIGHT: 1.5">
<P style="MARGIN: 0px; LINE-HEIGHT: 1.5">Since complicated models can take a long time to check, the &#8220;state space progress&#8221; tab updates roughly once a minute.</P></LI></OL>
<OL id=index-7 class="arabic simple" style="LIST-STYLE-TYPE: decimal" start=2>
<LI style="LINE-HEIGHT: 1.5">
<P style="MARGIN: 0px; LINE-HEIGHT: 1.5">Diameter is the length of the longest behavior. If TLC found a thousand behaviors with length 2 and one with length 20, the diameter will be reported as 20.</P></LI>
<LI style="LINE-HEIGHT: 1.5">
<P style="MARGIN: 0px; LINE-HEIGHT: 1.5">States found is how many system states the model checker has explored. This includes duplicate states the checker found in different paths.</P></LI>
<LI style="LINE-HEIGHT: 1.5">
<P style="MARGIN: 0px; LINE-HEIGHT: 1.5">The number of<SPAN>&nbsp;</SPAN><EM>unique</EM><SPAN>&nbsp;</SPAN>states found.</P></LI>
<LI style="LINE-HEIGHT: 1.5">
<P style="MARGIN: 0px; LINE-HEIGHT: 1.5">How many states TLC knows<SPAN>&nbsp;</SPAN><EM>for certain</EM><SPAN>&nbsp;</SPAN>it&#8217;ll have to check. Some of these states will add more states to check, and so on and so forth.</P></LI>
<LI style="LINE-HEIGHT: 1.5">
<P style="MARGIN: 0px; LINE-HEIGHT: 1.5">TLC stores explored states as hashes, this is the chance that there&#8217;s a hash collision. In practice this never goes above one in a million billion and can be ignored.</P></LI>
<LI style="LINE-HEIGHT: 1.5">
<P style="MARGIN: 0px; LINE-HEIGHT: 1.5">How often each label was run and how many states that lead to. If one label has 0 states then there&#8217;s probably a bug in your spec.</P></LI></OL><FIGURE id=id12 class=align-default style="DISPLAY: flex; flex-wrap: wrap; justify-content: center">
<DIV class=graphviz style="DISPLAY: flex; justify-content: center"><IMG  src=""  class=graphviz style="MAX-WIDTH: 100%; BORDER-TOP: 0px; BORDER-RIGHT: 0px; BORDER-BOTTOM: 0px; BORDER-LEFT: 0px" alt='digraph duplicates_1 {&#10;edge[arrowhead=vee];&#10;&#10;I1 [label="i=1\nseq[i]=1"];&#10;I2 [label="i=2\nseq[i]=2"];&#10;I3 [label="i=3\nseq[i]=3"];&#10;I4 [label="i=4\nseq[i]=4"];&#10;&#10;I1 -> I2 -> I3 -> I4;&#10;}' src="https://www.learntla.com/_images/graphviz-461f60caf2c10786c856f951afae43859fb31a67.png"></DIV><FIGCAPTION>
<P style="LINE-HEIGHT: 1.5"><SPAN class=caption-text style="FONT-SIZE: 0.8em; MARGIN-TOP: 8px; TEXT-ALIGN: center">Four iterate loops, plus Initial and Done states, makes 6 distinct states.</SPAN></P></FIGCAPTION></FIGURE>
<P style="LINE-HEIGHT: 1.5">To make sure that you&#8217;re following properly, you can check that that you got the same number of states and distinct states I did. In my case, I got<SPAN>&nbsp;</SPAN><SPAN>7 states / 6 distinct</SPAN>; you should see that too. If you get a different number, you may have made a mistake in transcribing the spec. The states and distinct states make a partial &#8220;fingerprint&#8221; of the model. Going forward, whenever I show a spec, I&#8217;ll list the states and distinct states of the model check under the code listing.</P>
<DIV class="admonition note" style="OVERFLOW: hidden; MARGIN-TOP: 1px; MARGIN-LEFT: 1px; BORDER-LEFT: rgb(88,127,159) 5px solid; MARGIN-RIGHT: 1px; box-shadow: 0px 0px 0px 1px var(--dividerColor); border-radius: 0.2rem">
<P class=admonition-title style="BOX-SIZING: border-box; FONT-WEIGHT: bolder; COLOR: rgb(88,127,159); PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 0px; LINE-HEIGHT: 1.5; PADDING-RIGHT: 0px">Note</P>
<P style="BOX-SIZING: border-box; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 0px; LINE-HEIGHT: 1.5; PADDING-RIGHT: 0px">You&#8217;ll get a different number than me if the spec<SPAN>&nbsp;</SPAN><EM>fails</EM>, because TLC will terminate execution early. In that case, I will note that the modelcheck should fail when showing the code listing.</P></DIV><SPAN id=multiple-starting-states class=target></SPAN><SECTION id=testing-more-inputs style="MARGIN-TOP: 2px; MARGIN-LEFT: 2px; MARGIN-RIGHT: 2px"><SPAN id=index-8></SPAN>