<b> : </b>Label Rules</H3>
<P style="LINE-HEIGHT: 1.5">We&#8217;re modeling time here, so there are restrictions on where we can place the labels. We&#8217;ll recap all of the label rules<SPAN>&nbsp;</SPAN><A class="reference internal" style="TEXT-DECORATION: none; COLOR: " href="https://www.learntla.com/core/pluscal.html#label-rules-summary"><SPAN class="std std-ref"><FONT color=#0066cc size=3>at the end</FONT></SPAN></A>.</P>
<P style="LINE-HEIGHT: 1.5">First,<SPAN>&nbsp;</SPAN><STRONG>all statements must belong to a label.</STRONG><SPAN>&nbsp;</SPAN>This means, among other things, that you must always start the algorithm with a label.</P>
<P style="LINE-HEIGHT: 1.5">Second,<SPAN>&nbsp;</SPAN><STRONG>any variable can only be updated once per label.</STRONG><SPAN>&nbsp;</SPAN>Remember, each label only represents one single instant of time. If the variable is updated twice, that means it&#8217;s gone through two separate values in a single instant of time, meaning&#8230; it&#8217;s not an instant of time anymore.</P>
<P style="LINE-HEIGHT: 1.5">This poses a problem when updating sequences. This is invalid:</P>
<DIV class="highlight-tla notranslate" style="OVERFLOW-X: auto">
<DIV class=highlight style="BOX-SIZING: border-box; BACKGROUND: rgb(248,248,248); MARGIN-TOP: 0px; OVERFLOW-X: auto; COLOR: rgb(37,38,48); PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN-LEFT: 0px; PADDING-RIGHT: 0px; MARGIN-RIGHT: 0px; border-radius: 0.2rem"><PRE style='FONT-FAMILY: "Roboto Mono", monospace, Monaco, Consolas, "Andale Mono"; LINE-HEIGHT: 18px'><SPAN></SPAN><SPAN class=nt style="FONT-WEIGHT: bold; COLOR: rgb(0,128,0)">Label:</SPAN>
  <SPAN class=n>seq</SPAN><SPAN class=p>[</SPAN><SPAN class=m style="COLOR: rgb(102,102,102)">1</SPAN><SPAN class=p>]</SPAN> <SPAN class=o style="COLOR: rgb(102,102,102)">:=</SPAN> <SPAN class=n>seq</SPAN><SPAN class=p>[</SPAN><SPAN class=m style="COLOR: rgb(102,102,102)">1</SPAN><SPAN class=p>]</SPAN> <SPAN class=o style="COLOR: rgb(102,102,102)">+</SPAN> <SPAN class=m style="COLOR: rgb(102,102,102)">1</SPAN><SPAN class=p>;</SPAN>
  <SPAN class=n>seq</SPAN><SPAN class=p>[</SPAN><SPAN class=m style="COLOR: rgb(102,102,102)">2</SPAN><SPAN class=p>]</SPAN> <SPAN class=o style="COLOR: rgb(102,102,102)">:=</SPAN> <SPAN class=n>seq</SPAN><SPAN class=p>[</SPAN><SPAN class=m style="COLOR: rgb(102,102,102)">2</SPAN><SPAN class=p>]</SPAN> <SPAN class=o style="COLOR: rgb(102,102,102)">-</SPAN> <SPAN class=m style="COLOR: rgb(102,102,102)">1</SPAN><SPAN class=p>;</SPAN>
</PRE></DIV></DIV>
<P id=id3 style="LINE-HEIGHT: 1.5"><SPAN id=index-1></SPAN>Because we&#8217;re updating the<SPAN>&nbsp;</SPAN><CODE class="docutils literal notranslate" style='FONT-SIZE: 0.9em; FONT-FAMILY: "Roboto Mono", monospace, Monaco, Consolas, "Andale Mono"; PADDING-BOTTOM: 2px; PADDING-TOP: 2px; PADDING-LEFT: 4px; PADDING-RIGHT: 4px; border-radius: 0.2rem'><SPAN class=pre>seq</SPAN></CODE><SPAN>&nbsp;</SPAN>variable twice in one label. To get around this, PlusCal has the &#8220;simultaneous assignment&#8221; operator<SPAN>&nbsp;</SPAN><CODE class="docutils literal notranslate" style='FONT-SIZE: 0.9em; FONT-FAMILY: "Roboto Mono", monospace, Monaco, Consolas, "Andale Mono"; PADDING-BOTTOM: 2px; PADDING-TOP: 2px; PADDING-LEFT: 4px; PADDING-RIGHT: 4px; border-radius: 0.2rem'><SPAN class=pre>||</SPAN></CODE>:</P>
<DIV class="highlight-tla notranslate" style="OVERFLOW-X: auto">
<DIV class=highlight style="BOX-SIZING: border-box; BACKGROUND: rgb(248,248,248); MARGIN-TOP: 0px; OVERFLOW-X: auto; COLOR: rgb(37,38,48); PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN-LEFT: 0px; PADDING-RIGHT: 0px; MARGIN-RIGHT: 0px; border-radius: 0.2rem"><PRE style='FONT-FAMILY: "Roboto Mono", monospace, Monaco, Consolas, "Andale Mono"; LINE-HEIGHT: 18px'><SPAN></SPAN><SPAN class=nt style="FONT-WEIGHT: bold; COLOR: rgb(0,128,0)">Label:</SPAN>

  <SPAN class=n>seq</SPAN><SPAN class=p>[</SPAN><SPAN class=m style="COLOR: rgb(102,102,102)">1</SPAN><SPAN class=p>]</SPAN> <SPAN class=o style="COLOR: rgb(102,102,102)">:=</SPAN> <SPAN class=n>seq</SPAN><SPAN class=p>[</SPAN><SPAN class=m style="COLOR: rgb(102,102,102)">1</SPAN><SPAN class=p>]</SPAN> <SPAN class=o style="COLOR: rgb(102,102,102)">+</SPAN> <SPAN class=m style="COLOR: rgb(102,102,102)">1</SPAN> <SPAN class=o style="COLOR: rgb(102,102,102)">||</SPAN>
  <SPAN class=n>seq</SPAN><SPAN class=p>[</SPAN><SPAN class=m style="COLOR: rgb(102,102,102)">2</SPAN><SPAN class=p>]</SPAN> <SPAN class=o style="COLOR: rgb(102,102,102)">:=</SPAN> <SPAN class=n>seq</SPAN><SPAN class=p>[</SPAN><SPAN class=m style="COLOR: rgb(102,102,102)">2</SPAN><SPAN class=p>]</SPAN> <SPAN class=o style="COLOR: rgb(102,102,102)">-</SPAN> <SPAN class=m style="COLOR: rgb(102,102,102)">1</SPAN><SPAN class=p>;</SPAN>
</PRE></DIV></DIV>
<P style="LINE-HEIGHT: 1.5">The rest of the label rules relate to<SPAN>&nbsp;</SPAN><EM>specific</EM><SPAN>&nbsp;</SPAN>constructs in PlusCal, so let&#8217;s go over those constructs now.</P></SECTION><SECTION id=pluscal-expressions style="MARGIN-TOP: 2px; MARGIN-LEFT: 2px; MARGIN-RIGHT: 2px">