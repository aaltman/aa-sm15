<b> : </b>Managing Machines</H2>
<P style="MARGIN: 0px 0px 20px"><EM style="FONT-WEIGHT: bold; FONT-STYLE: normal">Borg</EM>, illustrated in<SPAN>&nbsp;</SPAN><A style="TEXT-DECORATION: none; COLOR: rgb(67,136,255)" href="https://sre.google/sre-book/production-environment/#fig_production-environment_borg" data-type="xref">Figure 2-2</A>, is a distributed cluster operating system<SPAN>&nbsp;</SPAN><A style="TEXT-DECORATION: none; COLOR: rgb(67,136,255)" href="https://sre.google/sre-book/bibliography#Ver15" data-type="xref">[Ver15]</A>, similar to Apache Mesos.<SUP style="FONT-SIZE: 11px; TEXT-DECORATION: none; COLOR: rgb(67,136,255); LINE-HEIGHT: 0"><A id=id-BWDuecjF7IPTj-marker class=jumptarget style="TEXT-DECORATION: none; COLOR: rgb(67,136,255); OUTLINE-WIDTH: 0px; OUTLINE-STYLE: none; OUTLINE-COLOR: invert" href="https://sre.google/sre-book/production-environment/#id-BWDuecjF7IPTj" data-type="noteref">10</A></SUP><SPAN>&nbsp;</SPAN>Borg manages its jobs at the cluster level.</P><FIGURE id=fig_production-environment_borg class="horizontal vertical jumptarget" style="FONT-WEIGHT: 700; OUTLINE-WIDTH: 0px; TEXT-ALIGN: center; PADDING-TOP: 50px; OUTLINE-STYLE: none; MARGIN: 20px auto; OUTLINE-COLOR: invert"><IMG style="MARGIN-BOTTOM: 20px; MAX-WIDTH: 820px; BORDER-TOP: 0px; BORDER-RIGHT: 0px; BORDER-BOTTOM: 0px; BORDER-LEFT: 0px; MAX-HEIGHT: 440px" alt="High-level Borg cluster architecture." src="https://lh3.googleusercontent.com/u-b_doOMDhXmXkA52nLOu6OEn9sf_hXxku7Hp8GQe6xj_hO5RZ6OKuSbTa4MUE-71jTxGSJ3N2gjt9juDJ5hXsQCeIxFu37BmjblZw=s900"><FIGCAPTION><SPAN class=label>Figure 2-2.<SPAN>&nbsp;</SPAN></SPAN>High-level Borg cluster architecture</FIGCAPTION></FIGURE>
<P style="MARGIN: 0px 0px 20px">Borg is responsible for running users&#8217;<SPAN>&nbsp;</SPAN><EM style="FONT-WEIGHT: bold; FONT-STYLE: normal">jobs</EM>, which can either be indefinitely running servers or batch processes like a MapReduce<SPAN>&nbsp;</SPAN><A style="TEXT-DECORATION: none; COLOR: rgb(67,136,255)" href="https://sre.google/sre-book/bibliography#Dea04" data-type="xref">[Dea04]</A>. Jobs can consist of more than one (and sometimes thousands) of identical<SPAN>&nbsp;</SPAN><EM style="FONT-WEIGHT: bold; FONT-STYLE: normal">tasks</EM>, both for reasons of reliability and because a single process can&#8217;t usually handle all cluster traffic. When Borg starts a job, it finds machines for the tasks and tells the machines to start the server program. Borg then continually monitors these tasks. If a task malfunctions, it is killed and restarted, possibly on a different machine.</P>
<P style="MARGIN: 0px 0px 20px">Because tasks are fluidly allocated over machines, we can&#8217;t simply rely on IP addresses and port numbers to refer to the tasks. We solve this problem with an extra level of indirection: when starting a job, Borg allocates a name and index number to each task using the<SPAN>&nbsp;</SPAN><EM style="FONT-WEIGHT: bold; FONT-STYLE: normal">Borg Naming Service</EM><SPAN>&nbsp;</SPAN>(BNS). Rather than using the IP address and port number, other processes connect to Borg tasks via the BNS name, which is translated to an IP address and port number by BNS. For example, the BNS path might be a string such as<SPAN>&nbsp;</SPAN><CODE style='COLOR: rgb(0,102,0); FONT: 18px/28px "Roboto mono"'>/bns/&lt;<EM style="FONT-WEIGHT: bold; FONT-STYLE: normal">cluster</EM>&gt;/&lt;<EM style="FONT-WEIGHT: bold; FONT-STYLE: normal">user</EM>&gt;/&lt;<EM style="FONT-WEIGHT: bold; FONT-STYLE: normal">job name</EM>&gt;/&lt;<EM style="FONT-WEIGHT: bold; FONT-STYLE: normal">task number</EM>&gt;</CODE>, which would resolve to<SPAN>&nbsp;</SPAN><CODE style='COLOR: rgb(0,102,0); FONT: 18px/28px "Roboto mono"'>&lt;<EM style="FONT-WEIGHT: bold; FONT-STYLE: normal">IP address</EM>&gt;:&lt;<EM style="FONT-WEIGHT: bold; FONT-STYLE: normal">port</EM>&gt;</CODE>.</P>
<P style="MARGIN: 0px 0px 20px">Borg is also responsible for the allocation of resources to jobs. Every job needs to specify its required resources (e.g., 3 CPU cores, 2 GiB of RAM). Using the list of requirements for all jobs, Borg can binpack the tasks over the machines in an optimal way that also accounts for failure domains (for example: Borg won&#8217;t run all of a job&#8217;s tasks on the same rack, as doing so means that the top of rack switch is a single point of failure for that job).</P>
<P style="MARGIN: 0px 0px 20px">If a task tries to use more resources than it requested, Borg kills the task and restarts it (as a slowly crashlooping task is usually preferable to a task that hasn&#8217;t been restarted at all).</P></SECTION><SECTION id=storage-jWsvt4TM data-type="sect2">