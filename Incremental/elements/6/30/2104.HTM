<B>: </B><FONT class=extract>Aggregate availability</FONT> 
<H5></H5>
<P style="MARGIN: 0px 0px 20px" data-type="tex"><FONT class=extract></FONT></P>
<P style="MARGIN: 0px 0px 20px"><FONT class=extract><IMG class=equation style="MAX-WIDTH: 100%; BORDER-TOP: 0px; BORDER-RIGHT: 0px; BORDER-BOTTOM: 0px; BORDER-LEFT: 0px" alt="" src="https://lh3.googleusercontent.com/IBFAixHY-GpJm8DW8EL9yKCaKiRdv_-3lHtYonZy40NLio19oPiLWnT24w9U45LSTb02-OYmrqtD2PLRy2ujoQcb81MlSTtjp8qYYTw=s304"></FONT></P>
<DIV></DIV>
<P style="MARGIN: 0px 0px 20px">For example, <FONT class=extract>a system that serves 2.5M requests in a day with a daily availability target of 99.99% can serve up to 250 errors and still hit its target for that given day.</FONT></P>
<P style="MARGIN: 0px 0px 20px"><FONT class=extract>In a typical application, not all requests are equal: failing a new user sign-up request is different from failing a request polling for new email in the background. In many cases, however, availability calculated as the request success rate over all requests is a reasonable approximation of unplanned downtime, as viewed from the end-user perspective.</FONT></P>
<P style="MARGIN: 0px 0px 20px"><FONT class=extract>Quantifying unplanned downtime as a request success rate also makes this availability metric more amenable for use in systems that do not typically serve end users directly. Most nonserving systems (e.g., batch, pipeline, storage, and transactional systems) have a well-defined notion of successful and unsuccessful units of work.</FONT> Indeed, while the systems discussed in this chapter are primarily consumer and infrastructure serving systems, many of the same principles also apply to nonserving systems with minimal modification.</P>
<P style="MARGIN: 0px 0px 20px">For example, a batch process that extracts, transforms, and inserts the contents of one of our customer databases into a data warehouse to enable further analysis may be set to run periodically. Using a request success rate defined in terms of records successfully and unsuccessfully processed, we can calculate a useful availability metric despite the fact that the batch system does not run constantly.</P>
<P style="MARGIN: 0px 0px 20px"><FONT class=extract>Most often, we set quarterly availability targets for a service and track our performance against those targets on a weekly, or even daily, basis. This strategy lets us manage the service to a high-level availability objective by looking for, tracking down, and fixing meaningful deviations as they inevitably arise.</FONT> See<SPAN>&nbsp;</SPAN><A style="TEXT-DECORATION: none; COLOR: rgb(67,136,255)" href="https://sre.google/sre-book/service-level-objectives/" data-type="xref">Service Level Objectives</A><SPAN>&nbsp;</SPAN>for more details.</P></SECTION><SECTION id=risk-tolerance-of-services-jWsAcw data-type="sect1">