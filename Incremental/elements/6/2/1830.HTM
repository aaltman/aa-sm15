<b> : </b><SPAN class=section-number style="BOX-SIZING: border-box">4.1.<SPAN>&nbsp;</SPAN></SPAN>SIMT Architecture<A title="Permalink to this headline" class=headerlink style="BOX-SIZING: border-box; CURSOR: pointer; TEXT-DECORATION: none; COLOR: ; FONT: 14px/1 FontAwesome; MARGIN-LEFT: 0.5em; DISPLAY: inline-block; text-rendering: auto; -webkit-font-smoothing: antialiased; opacity: 0" href="https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#simt-architecture">&#61633;</A></H2>
<P style="BOX-SIZING: border-box; COLOR: ; MARGIN: 15px 5px 15px 0px">The multiprocessor creates, manages, schedules, and executes threads in groups of 32 parallel threads called<SPAN>&nbsp;</SPAN><EM style="BOX-SIZING: border-box">warps</EM>. Individual threads composing a warp start together at the same program address, but they have their own instruction address counter and register state and are therefore free to branch and execute independently. The term<SPAN>&nbsp;</SPAN><EM style="BOX-SIZING: border-box">warp</EM><SPAN>&nbsp;</SPAN>originates from weaving, the first parallel thread technology. A<SPAN>&nbsp;</SPAN><EM style="BOX-SIZING: border-box">half-warp</EM><SPAN>&nbsp;</SPAN>is either the first or second half of a warp. A<SPAN>&nbsp;</SPAN><EM style="BOX-SIZING: border-box">quarter-warp</EM><SPAN>&nbsp;</SPAN>is either the first, second, third, or fourth quarter of a warp.</P>
<P style="BOX-SIZING: border-box; COLOR: ; MARGIN: 15px 5px 15px 0px">When a multiprocessor is given one or more thread blocks to execute, it partitions them into warps and each warp gets scheduled by a<SPAN>&nbsp;</SPAN><EM style="BOX-SIZING: border-box">warp scheduler</EM><SPAN>&nbsp;</SPAN>for execution. The way a block is partitioned into warps is always the same; each warp contains threads of consecutive, increasing thread IDs with the first warp containing thread 0.<SPAN>&nbsp;</SPAN><A class="reference external" style="BOX-SIZING: border-box; CURSOR: pointer; TEXT-DECORATION: none; COLOR: " href="https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#thread-hierarchy"><FONT color=#0066cc size=3>Thread Hierarchy</FONT></A><SPAN>&nbsp;</SPAN>describes how thread IDs relate to thread indices in the block.</P>
<P style="BOX-SIZING: border-box; COLOR: ; MARGIN: 15px 5px 15px 0px">A warp executes one common instruction at a time, so full efficiency is realized when all 32 threads of a warp agree on their execution path. If threads of a warp diverge via a data-dependent conditional branch, the warp executes each branch path taken, disabling threads that are not on that path. Branch divergence occurs only within a warp; different warps execute independently regardless of whether they are executing common or disjoint code paths.</P>
<P style="BOX-SIZING: border-box; COLOR: ; MARGIN: 15px 5px 15px 0px">The SIMT architecture is akin to SIMD (Single Instruction, Multiple Data) vector organizations in that a single instruction controls multiple processing elements. A key difference is that SIMD vector organizations expose the SIMD width to the software, whereas SIMT instructions specify the execution and branching behavior of a single thread. In contrast with SIMD vector machines, SIMT enables programmers to write thread-level parallel code for independent, scalar threads, as well as data-parallel code for coordinated threads. For the purposes of correctness, the programmer can essentially ignore the SIMT behavior; however, substantial performance improvements can be realized by taking care that the code seldom requires threads in a warp to diverge. In practice, this is analogous to the role of cache lines in traditional code: Cache line size can be safely ignored when designing for correctness but must be considered in the code structure when designing for peak performance. Vector architectures, on the other hand, require the software to coalesce loads into vectors and manage divergence manually.</P>
<P style="BOX-SIZING: border-box; COLOR: ; MARGIN: 15px 5px 15px 0px">Prior to NVIDIA Volta, warps used a single program counter shared amongst all 32 threads in the warp together with an active mask specifying the active threads of the warp. As a result, threads from the same warp in divergent regions or different states of execution cannot signal each other or exchange data, and algorithms requiring fine-grained sharing of data guarded by locks or mutexes can easily lead to deadlock, depending on which warp the contending threads come from.</P>
<P style="BOX-SIZING: border-box; COLOR: ; MARGIN: 15px 5px 15px 0px">Starting with the NVIDIA Volta architecture,<SPAN>&nbsp;</SPAN><EM style="BOX-SIZING: border-box">Independent Thread Scheduling</EM><SPAN>&nbsp;</SPAN>allows full concurrency between threads, regardless of warp. With Independent Thread Scheduling, the GPU maintains execution state per thread, including a program counter and call stack, and can yield execution at a per-thread granularity, either to make better use of execution resources or to allow one thread to wait for data to be produced by another. A schedule optimizer determines how to group active threads from the same warp together into SIMT units. This retains the high throughput of SIMT execution as in prior NVIDIA GPUs, but with much more flexibility: threads can now diverge and reconverge at sub-warp granularity.</P>
<P style="BOX-SIZING: border-box; COLOR: ; MARGIN: 15px 5px 15px 0px">Independent Thread Scheduling can lead to a rather different set of threads participating in the executed code than intended if the developer made assumptions about warp-synchronicity<A id=id21 class="footnote-reference brackets" style="BOX-SIZING: border-box; FONT-SIZE: 14px; CURSOR: pointer; TEXT-DECORATION: none; VERTICAL-ALIGN: baseline; POSITION: relative; COLOR: ; LINE-HEIGHT: 0; TOP: -0.4em" href="https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#fn2">2</A><SPAN>&nbsp;</SPAN>of previous hardware architectures. In particular, any warp-synchronous code (such as synchronization-free, intra-warp reductions) should be revisited to ensure compatibility with NVIDIA Volta and beyond. See<SPAN>&nbsp;</SPAN><A class="reference external" style="BOX-SIZING: border-box; CURSOR: pointer; TEXT-DECORATION: none; COLOR: " href="https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#compute-capability-7-x"><FONT color=#0066cc size=3>Compute Capability 7.x</FONT></A><SPAN>&nbsp;</SPAN>for further details.</P>
<DIV id=simt-architecture-notes class="admonition note" style="BOX-SIZING: border-box; MARGIN-BOTTOM: 24px; BACKGROUND: rgb(231,250,223); PADDING-BOTTOM: 12px; PADDING-TOP: 12px; PADDING-LEFT: 12px; CLEAR: both; LINE-HEIGHT: 24px; PADDING-RIGHT: 12px; -webkit-font-smoothing: antialiased">
<P class=admonition-title style="BOX-SIZING: border-box; FONT-FAMILY: inherit; FONT-VARIANT: normal; BACKGROUND: none transparent scroll repeat 0% 0%; FONT-WEIGHT: 700; COLOR: rgb(255,255,255); PADDING-BOTTOM: 6px; FONT-STYLE: normal; PADDING-TOP: 6px; PADDING-LEFT: 12px; MARGIN: -12px -12px 12px; DISPLAY: block; LINE-HEIGHT: 1; PADDING-RIGHT: 12px; text-rendering: auto; -webkit-font-smoothing: antialiased; font-size-adjust: none; font-kerning: auto; font-optical-sizing: auto; font-feature-settings: normal; font-variation-settings: normal; font-stretch: normal">Note</P>
<P style="BOX-SIZING: border-box; COLOR: ; MARGIN: 15px 5px 15px 0px">The threads of a warp that are participating in the current instruction are called the<SPAN>&nbsp;</SPAN><EM style="BOX-SIZING: border-box">active</EM><SPAN>&nbsp;</SPAN>threads, whereas threads not on the current instruction are<SPAN>&nbsp;</SPAN><EM style="BOX-SIZING: border-box">inactive</EM><SPAN>&nbsp;</SPAN>(disabled). Threads can be inactive for a variety of reasons including having exited earlier than other threads of their warp, having taken a different branch path than the branch path currently executed by the warp, or being the last threads of a block whose number of threads is not a multiple of the warp size.</P>
<P style="BOX-SIZING: border-box; COLOR: ; MARGIN: 15px 5px 15px 0px">If a non-atomic instruction executed by a warp writes to the same location in global or shared memory for more than one of the threads of the warp, the number of serialized writes that occur to that location varies depending on the compute capability of the device (see<SPAN>&nbsp;</SPAN><A class="reference external" style="BOX-SIZING: border-box; CURSOR: pointer; TEXT-DECORATION: none; COLOR: " href="https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#compute-capability-5-x"><FONT color=#0066cc>Compute Capability 5.x</FONT></A>,<SPAN>&nbsp;</SPAN><A class="reference external" style="BOX-SIZING: border-box; CURSOR: pointer; TEXT-DECORATION: none; COLOR: " href="https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#compute-capability-6-x"><FONT color=#0066cc>Compute Capability 6.x</FONT></A>, and<SPAN>&nbsp;</SPAN><A class="reference external" style="BOX-SIZING: border-box; CURSOR: pointer; TEXT-DECORATION: none; COLOR: " href="https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#compute-capability-7-x"><FONT color=#0066cc>Compute Capability 7.x</FONT></A>), and which thread performs the final write is undefined.</P>
<P style="BOX-SIZING: border-box; COLOR: ; MARGIN: 15px 5px 0px 0px">If an<SPAN>&nbsp;</SPAN><A class="reference external" style="BOX-SIZING: border-box; CURSOR: pointer; TEXT-DECORATION: none; COLOR: " href="https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#atomic-functions"><FONT color=#0066cc>atomic</FONT></A><SPAN>&nbsp;</SPAN>instruction executed by a warp reads, modifies, and writes to the same location in global memory for more than one of the threads of the warp, each read/modify/write to that location occurs and they are all serialized, but the order in which they occur is undefined.</P></DIV></SECTION><SECTION id=hardware-multithreading style="BOX-SIZING: border-box; FONT-SIZE: 16px; FONT-FAMILY: NVIDIA, Arial, Helvetica, sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(26,26,26); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; DISPLAY: block; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial">