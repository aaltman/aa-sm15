<b> : </b><SPAN class=section-number style="BOX-SIZING: border-box">3.2.8.6.2.<SPAN>&nbsp;</SPAN></SPAN>API Description<A title="Permalink to this headline" class=headerlink style="BOX-SIZING: border-box; CURSOR: pointer; TEXT-DECORATION: none; COLOR: ; FONT: 14px/1 FontAwesome; MARGIN-LEFT: 0.5em; DISPLAY: inline-block; text-rendering: auto; -webkit-font-smoothing: antialiased; opacity: 0" href="https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#api-description">&#61633;</A></H5>
<P style="BOX-SIZING: border-box; COLOR: ; MARGIN: 15px 5px 15px 0px">In Programmatic Dependent Launch, a primary and a secondary kernel are launched in the same CUDA stream. The primary kernel should execute<SPAN>&nbsp;</SPAN><CODE class="docutils literal notranslate" style="BOX-SIZING: border-box; FONT-SIZE: 12px; MAX-WIDTH: 100%; BORDER-TOP: rgb(225,228,229) 1px solid; FONT-FAMILY: var(--nv-font-face-mono); BORDER-RIGHT: rgb(225,228,229) 1px solid; BACKGROUND: rgb(255,255,255); WHITE-SPACE: normal; OVERFLOW-X: auto; BORDER-BOTTOM: rgb(225,228,229) 1px solid; COLOR: rgb(231,76,60); PADDING-BOTTOM: 2px; PADDING-TOP: 2px; PADDING-LEFT: 5px; BORDER-LEFT: rgb(225,228,229) 1px solid; PADDING-RIGHT: 5px"><SPAN class=pre style="BOX-SIZING: border-box">cudaTriggerProgrammaticLaunchCompletion</SPAN></CODE><SPAN>&nbsp;</SPAN>with all thread blocks when it&#8217;s ready for the secondary kernel to launch. The secondary kernel must be launched using the extensible launch API as shown.</P>
<DIV class="highlight-c++ notranslate" style="BOX-SIZING: border-box; BORDER-TOP: rgb(225,228,229) 1px solid; BORDER-RIGHT: rgb(225,228,229) 1px solid; OVERFLOW-X: auto; BORDER-BOTTOM: rgb(225,228,229) 1px solid; BORDER-LEFT: rgb(225,228,229) 1px solid; MARGIN: 1px 0px 24px">
<DIV class=highlight style="BOX-SIZING: border-box; BORDER-TOP: medium none; BORDER-RIGHT: medium none; BACKGROUND: rgb(248,248,248); OVERFLOW-X: auto; BORDER-BOTTOM: medium none; POSITION: relative; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; BORDER-LEFT: medium none; MARGIN: 0px; PADDING-RIGHT: 0px"><PRE id=codecell32 style="BOX-SIZING: border-box; FONT-SIZE: 12px; OVERFLOW: auto; FONT-FAMILY: var(--nv-font-face-mono); WHITE-SPACE: pre; PADDING-BOTTOM: 12px; PADDING-TOP: 12px; PADDING-LEFT: 12px; MARGIN: 0px; DISPLAY: block; LINE-HEIGHT: 1.4; PADDING-RIGHT: 12px"><SPAN style="BOX-SIZING: border-box"></SPAN><SPAN class=n style="BOX-SIZING: border-box">__global__</SPAN><SPAN class=w style="BOX-SIZING: border-box; COLOR: rgb(187,187,187)"> </SPAN><SPAN class=kt style="BOX-SIZING: border-box; COLOR: rgb(176,0,64)">void</SPAN><SPAN class=w style="BOX-SIZING: border-box; COLOR: rgb(187,187,187)"> </SPAN><SPAN class=n style="BOX-SIZING: border-box">primary_kernel</SPAN><SPAN class=p style="BOX-SIZING: border-box">()</SPAN><SPAN class=w style="BOX-SIZING: border-box; COLOR: rgb(187,187,187)"> </SPAN><SPAN class=p style="BOX-SIZING: border-box">{</SPAN><SPAN class=w style="BOX-SIZING: border-box; COLOR: rgb(187,187,187)"></SPAN>
<SPAN class=w style="BOX-SIZING: border-box; COLOR: rgb(187,187,187)">   </SPAN><SPAN class=c1 style="BOX-SIZING: border-box; COLOR: rgb(61,123,123); FONT-STYLE: italic">// Initial work that should finish before starting secondary kernel</SPAN>

<SPAN class=w style="BOX-SIZING: border-box; COLOR: rgb(187,187,187)">   </SPAN><SPAN class=c1 style="BOX-SIZING: border-box; COLOR: rgb(61,123,123); FONT-STYLE: italic">// Trigger the secondary kernel</SPAN>
<SPAN class=w style="BOX-SIZING: border-box; COLOR: rgb(187,187,187)">   </SPAN><SPAN class=n style="BOX-SIZING: border-box">cudaTriggerProgrammaticLaunchCompletion</SPAN><SPAN class=p style="BOX-SIZING: border-box">();</SPAN><SPAN class=w style="BOX-SIZING: border-box; COLOR: rgb(187,187,187)"></SPAN>

<SPAN class=w style="BOX-SIZING: border-box; COLOR: rgb(187,187,187)">   </SPAN><SPAN class=c1 style="BOX-SIZING: border-box; COLOR: rgb(61,123,123); FONT-STYLE: italic">// Work that can coincide with the secondary kernel</SPAN>
<SPAN class=p style="BOX-SIZING: border-box">}</SPAN><SPAN class=w style="BOX-SIZING: border-box; COLOR: rgb(187,187,187)"></SPAN>

<SPAN class=n style="BOX-SIZING: border-box">__global__</SPAN><SPAN class=w style="BOX-SIZING: border-box; COLOR: rgb(187,187,187)"> </SPAN><SPAN class=kt style="BOX-SIZING: border-box; COLOR: rgb(176,0,64)">void</SPAN><SPAN class=w style="BOX-SIZING: border-box; COLOR: rgb(187,187,187)"> </SPAN><SPAN class=n style="BOX-SIZING: border-box">secondary_kernel</SPAN><SPAN class=p style="BOX-SIZING: border-box">()</SPAN><SPAN class=w style="BOX-SIZING: border-box; COLOR: rgb(187,187,187)"></SPAN>
<SPAN class=p style="BOX-SIZING: border-box">{</SPAN><SPAN class=w style="BOX-SIZING: border-box; COLOR: rgb(187,187,187)"></SPAN>
<SPAN class=w style="BOX-SIZING: border-box; COLOR: rgb(187,187,187)">   </SPAN><SPAN class=c1 style="BOX-SIZING: border-box; COLOR: rgb(61,123,123); FONT-STYLE: italic">// Independent work</SPAN>

<SPAN class=w style="BOX-SIZING: border-box; COLOR: rgb(187,187,187)">   </SPAN><SPAN class=c1 style="BOX-SIZING: border-box; COLOR: rgb(61,123,123); FONT-STYLE: italic">// Will block until all primary kernels the secondary kernel is dependent on have completed and flushed results to global memory</SPAN>
<SPAN class=w style="BOX-SIZING: border-box; COLOR: rgb(187,187,187)">   </SPAN><SPAN class=n style="BOX-SIZING: border-box">cudaGridDependencySynchronize</SPAN><SPAN class=p style="BOX-SIZING: border-box">();</SPAN><SPAN class=w style="BOX-SIZING: border-box; COLOR: rgb(187,187,187)"></SPAN>

<SPAN class=w style="BOX-SIZING: border-box; COLOR: rgb(187,187,187)">   </SPAN><SPAN class=c1 style="BOX-SIZING: border-box; COLOR: rgb(61,123,123); FONT-STYLE: italic">// Dependent work</SPAN>
<SPAN class=p style="BOX-SIZING: border-box">}</SPAN><SPAN class=w style="BOX-SIZING: border-box; COLOR: rgb(187,187,187)"></SPAN>

<SPAN class=n style="BOX-SIZING: border-box">cudaLaunchAttribute</SPAN><SPAN class=w style="BOX-SIZING: border-box; COLOR: rgb(187,187,187)"> </SPAN><SPAN class=n style="BOX-SIZING: border-box">attribute</SPAN><SPAN class=p style="BOX-SIZING: border-box">[</SPAN><SPAN class=mi style="BOX-SIZING: border-box; COLOR: rgb(102,102,102)">1</SPAN><SPAN class=p style="BOX-SIZING: border-box">];</SPAN><SPAN class=w style="BOX-SIZING: border-box; COLOR: rgb(187,187,187)"></SPAN>
<SPAN class=n style="BOX-SIZING: border-box">attribute</SPAN><SPAN class=p style="BOX-SIZING: border-box">[</SPAN><SPAN class=mi style="BOX-SIZING: border-box; COLOR: rgb(102,102,102)">0</SPAN><SPAN class=p style="BOX-SIZING: border-box">].</SPAN><SPAN class=n style="BOX-SIZING: border-box">id</SPAN><SPAN class=w style="BOX-SIZING: border-box; COLOR: rgb(187,187,187)"> </SPAN><SPAN class=o style="BOX-SIZING: border-box; COLOR: rgb(102,102,102)">=</SPAN><SPAN class=w style="BOX-SIZING: border-box; COLOR: rgb(187,187,187)"> </SPAN><SPAN class=n style="BOX-SIZING: border-box">cudaLaunchAttributeProgrammaticStreamSerialization</SPAN><SPAN class=p style="BOX-SIZING: border-box">;</SPAN><SPAN class=w style="BOX-SIZING: border-box; COLOR: rgb(187,187,187)"></SPAN>
<SPAN class=n style="BOX-SIZING: border-box">attribute</SPAN><SPAN class=p style="BOX-SIZING: border-box">[</SPAN><SPAN class=mi style="BOX-SIZING: border-box; COLOR: rgb(102,102,102)">0</SPAN><SPAN class=p style="BOX-SIZING: border-box">].</SPAN><SPAN class=n style="BOX-SIZING: border-box">val</SPAN><SPAN class=p style="BOX-SIZING: border-box">.</SPAN><SPAN class=n style="BOX-SIZING: border-box">programmaticStreamSerializationAllowed</SPAN><SPAN class=w style="BOX-SIZING: border-box; COLOR: rgb(187,187,187)"> </SPAN><SPAN class=o style="BOX-SIZING: border-box; COLOR: rgb(102,102,102)">=</SPAN><SPAN class=w style="BOX-SIZING: border-box; COLOR: rgb(187,187,187)"> </SPAN><SPAN class=mi style="BOX-SIZING: border-box; COLOR: rgb(102,102,102)">1</SPAN><SPAN class=p style="BOX-SIZING: border-box">;</SPAN><SPAN class=w style="BOX-SIZING: border-box; COLOR: rgb(187,187,187)"></SPAN>
<SPAN class=n style="BOX-SIZING: border-box">configSecondary</SPAN><SPAN class=p style="BOX-SIZING: border-box">.</SPAN><SPAN class=n style="BOX-SIZING: border-box">attrs</SPAN><SPAN class=w style="BOX-SIZING: border-box; COLOR: rgb(187,187,187)"> </SPAN><SPAN class=o style="BOX-SIZING: border-box; COLOR: rgb(102,102,102)">=</SPAN><SPAN class=w style="BOX-SIZING: border-box; COLOR: rgb(187,187,187)"> </SPAN><SPAN class=n style="BOX-SIZING: border-box">attribute</SPAN><SPAN class=p style="BOX-SIZING: border-box">;</SPAN><SPAN class=w style="BOX-SIZING: border-box; COLOR: rgb(187,187,187)"></SPAN>
<SPAN class=n style="BOX-SIZING: border-box">configSecondary</SPAN><SPAN class=p style="BOX-SIZING: border-box">.</SPAN><SPAN class=n style="BOX-SIZING: border-box">numAttrs</SPAN><SPAN class=w style="BOX-SIZING: border-box; COLOR: rgb(187,187,187)"> </SPAN><SPAN class=o style="BOX-SIZING: border-box; COLOR: rgb(102,102,102)">=</SPAN><SPAN class=w style="BOX-SIZING: border-box; COLOR: rgb(187,187,187)"> </SPAN><SPAN class=mi style="BOX-SIZING: border-box; COLOR: rgb(102,102,102)">1</SPAN><SPAN class=p style="BOX-SIZING: border-box">;</SPAN><SPAN class=w style="BOX-SIZING: border-box; COLOR: rgb(187,187,187)"></SPAN>

<SPAN class=n style="BOX-SIZING: border-box">primary_kernel</SPAN><SPAN class=o style="BOX-SIZING: border-box; COLOR: rgb(102,102,102)">&lt;&lt;&lt;</SPAN><SPAN class=n style="BOX-SIZING: border-box">grid_dim</SPAN><SPAN class=p style="BOX-SIZING: border-box">,</SPAN><SPAN class=w style="BOX-SIZING: border-box; COLOR: rgb(187,187,187)"> </SPAN><SPAN class=n style="BOX-SIZING: border-box">block_dim</SPAN><SPAN class=p style="BOX-SIZING: border-box">,</SPAN><SPAN class=w style="BOX-SIZING: border-box; COLOR: rgb(187,187,187)"> </SPAN><SPAN class=mi style="BOX-SIZING: border-box; COLOR: rgb(102,102,102)">0</SPAN><SPAN class=p style="BOX-SIZING: border-box">,</SPAN><SPAN class=w style="BOX-SIZING: border-box; COLOR: rgb(187,187,187)"> </SPAN><SPAN class=n style="BOX-SIZING: border-box">stream</SPAN><SPAN class=o style="BOX-SIZING: border-box; COLOR: rgb(102,102,102)">&gt;&gt;&gt;</SPAN><SPAN class=p style="BOX-SIZING: border-box">();</SPAN><SPAN class=w style="BOX-SIZING: border-box; COLOR: rgb(187,187,187)"></SPAN>
<SPAN class=n style="BOX-SIZING: border-box">cudaLaunchKernelEx</SPAN><SPAN class=p style="BOX-SIZING: border-box">(</SPAN><SPAN class=o style="BOX-SIZING: border-box; COLOR: rgb(102,102,102)">&amp;</SPAN><SPAN class=n style="BOX-SIZING: border-box">configSecondary</SPAN><SPAN class=p style="BOX-SIZING: border-box">,</SPAN><SPAN class=w style="BOX-SIZING: border-box; COLOR: rgb(187,187,187)"> </SPAN><SPAN class=n style="BOX-SIZING: border-box">secondary_kernel</SPAN><SPAN class=p style="BOX-SIZING: border-box">);</SPAN><SPAN class=w style="BOX-SIZING: border-box; COLOR: rgb(187,187,187)"></SPAN>
</PRE></DIV></DIV>
<P style="BOX-SIZING: border-box; COLOR: ; MARGIN: 15px 5px 15px 0px">When the secondary kernel is launched using the<SPAN>&nbsp;</SPAN><CODE class="docutils literal notranslate" style="BOX-SIZING: border-box; FONT-SIZE: 12px; MAX-WIDTH: 100%; BORDER-TOP: rgb(225,228,229) 1px solid; FONT-FAMILY: var(--nv-font-face-mono); BORDER-RIGHT: rgb(225,228,229) 1px solid; BACKGROUND: rgb(255,255,255); WHITE-SPACE: normal; OVERFLOW-X: auto; BORDER-BOTTOM: rgb(225,228,229) 1px solid; COLOR: rgb(231,76,60); PADDING-BOTTOM: 2px; PADDING-TOP: 2px; PADDING-LEFT: 5px; BORDER-LEFT: rgb(225,228,229) 1px solid; PADDING-RIGHT: 5px"><SPAN class=pre style="BOX-SIZING: border-box">cudaLaunchAttributeProgrammaticStreamSerialization</SPAN></CODE><SPAN>&nbsp;</SPAN>attribute, the CUDA driver is safe to launch the secondary kernel early and not wait on the completion and memory flush of the primary before launching the secondary.</P>
<P style="BOX-SIZING: border-box; COLOR: ; MARGIN: 15px 5px 15px 0px">The CUDA driver can launch the secondary kernel when all primary thread blocks have launched and executed<SPAN>&nbsp;</SPAN><CODE class="docutils literal notranslate" style="BOX-SIZING: border-box; FONT-SIZE: 12px; MAX-WIDTH: 100%; BORDER-TOP: rgb(225,228,229) 1px solid; FONT-FAMILY: var(--nv-font-face-mono); BORDER-RIGHT: rgb(225,228,229) 1px solid; BACKGROUND: rgb(255,255,255); WHITE-SPACE: normal; OVERFLOW-X: auto; BORDER-BOTTOM: rgb(225,228,229) 1px solid; COLOR: rgb(231,76,60); PADDING-BOTTOM: 2px; PADDING-TOP: 2px; PADDING-LEFT: 5px; BORDER-LEFT: rgb(225,228,229) 1px solid; PADDING-RIGHT: 5px"><SPAN class=pre style="BOX-SIZING: border-box">cudaTriggerProgrammaticLaunchCompletion</SPAN></CODE>. If the primary kernel doesn&#8217;t execute the trigger, it implicitly occurs after all thread blocks in the primary kernel exit.</P>
<P style="BOX-SIZING: border-box; COLOR: ; MARGIN: 15px 5px 15px 0px">In either case, the secondary thread blocks might launch before data written by the primary kernel is visible. As such, when the secondary kernel is configured with<SPAN>&nbsp;</SPAN><EM style="BOX-SIZING: border-box">Programmatic Dependent Launch</EM>, it must always use<SPAN>&nbsp;</SPAN><CODE class="docutils literal notranslate" style="BOX-SIZING: border-box; FONT-SIZE: 12px; MAX-WIDTH: 100%; BORDER-TOP: rgb(225,228,229) 1px solid; FONT-FAMILY: var(--nv-font-face-mono); BORDER-RIGHT: rgb(225,228,229) 1px solid; BACKGROUND: rgb(255,255,255); WHITE-SPACE: normal; OVERFLOW-X: auto; BORDER-BOTTOM: rgb(225,228,229) 1px solid; COLOR: rgb(231,76,60); PADDING-BOTTOM: 2px; PADDING-TOP: 2px; PADDING-LEFT: 5px; BORDER-LEFT: rgb(225,228,229) 1px solid; PADDING-RIGHT: 5px"><SPAN class=pre style="BOX-SIZING: border-box">cudaGridDependencySynchronize</SPAN></CODE><SPAN>&nbsp;</SPAN>or other means to verify that the result data from the primary is available.</P>
<P style="BOX-SIZING: border-box; COLOR: ; MARGIN: 15px 5px 15px 0px">Please note that these methods provide the opportunity for the primary and secondary kernels to execute concurrently, however this behavior is opportunistic and not guaranteed to lead to concurrent kernel execution. Reliance on concurrent execution in this manner is unsafe and can lead to deadlock.</P></SECTION><SECTION id=use-in-cuda-graphs style="BOX-SIZING: border-box; DISPLAY: block">