<b> : </b><SPAN class=section-number style="BOX-SIZING: border-box">8.8.<SPAN>&nbsp;</SPAN></SPAN>Multi-Device Synchronization<A title="Permalink to this headline" class=headerlink style="BOX-SIZING: border-box; CURSOR: pointer; TEXT-DECORATION: none; COLOR: ; FONT: 14px/1 FontAwesome; MARGIN-LEFT: 0.5em; DISPLAY: inline-block; text-rendering: auto; -webkit-font-smoothing: antialiased; opacity: 0" href="https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#multi-device-synchronization">&#61633;</A></H2>
<P style="BOX-SIZING: border-box; COLOR: ; MARGIN: 15px 5px 15px 0px">In order to enable synchronization across multiple devices with Cooperative Groups, use of the<SPAN>&nbsp;</SPAN><CODE class="docutils literal notranslate" style="BOX-SIZING: border-box; FONT-SIZE: 12px; MAX-WIDTH: 100%; BORDER-TOP: rgb(225,228,229) 1px solid; FONT-FAMILY: var(--nv-font-face-mono); BORDER-RIGHT: rgb(225,228,229) 1px solid; BACKGROUND: rgb(255,255,255); WHITE-SPACE: normal; OVERFLOW-X: auto; BORDER-BOTTOM: rgb(225,228,229) 1px solid; COLOR: rgb(231,76,60); PADDING-BOTTOM: 2px; PADDING-TOP: 2px; PADDING-LEFT: 5px; BORDER-LEFT: rgb(225,228,229) 1px solid; PADDING-RIGHT: 5px"><SPAN class=pre style="BOX-SIZING: border-box">cudaLaunchCooperativeKernelMultiDevice</SPAN></CODE><SPAN>&nbsp;</SPAN>CUDA API is required. This, a significant departure from existing CUDA APIs, will allow a single host thread to launch a kernel across multiple devices. In addition to the constraints and guarantees made by<SPAN>&nbsp;</SPAN><CODE class="docutils literal notranslate" style="BOX-SIZING: border-box; FONT-SIZE: 12px; MAX-WIDTH: 100%; BORDER-TOP: rgb(225,228,229) 1px solid; FONT-FAMILY: var(--nv-font-face-mono); BORDER-RIGHT: rgb(225,228,229) 1px solid; BACKGROUND: rgb(255,255,255); WHITE-SPACE: normal; OVERFLOW-X: auto; BORDER-BOTTOM: rgb(225,228,229) 1px solid; COLOR: rgb(231,76,60); PADDING-BOTTOM: 2px; PADDING-TOP: 2px; PADDING-LEFT: 5px; BORDER-LEFT: rgb(225,228,229) 1px solid; PADDING-RIGHT: 5px"><SPAN class=pre style="BOX-SIZING: border-box">cudaLaunchCooperativeKernel</SPAN></CODE>, this API has additional semantics:</P>
<UL class=simple style="LIST-STYLE-TYPE: disc; BOX-SIZING: border-box; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 0px 0px 24px; LINE-HEIGHT: 24px; PADDING-RIGHT: 0px">
<LI style="LIST-STYLE-TYPE: disc; BOX-SIZING: border-box; MARGIN-LEFT: 24px">
<P style="BOX-SIZING: border-box; COLOR: ; MARGIN: 0px 5px 0px 0px">This API will ensure that a launch is atomic, i.e. if the API call succeeds, then the provided number of thread blocks will launch on all specified devices.</P></LI>
<LI style="LIST-STYLE-TYPE: disc; BOX-SIZING: border-box; MARGIN-LEFT: 24px">
<P style="BOX-SIZING: border-box; COLOR: ; MARGIN: 0px 5px 0px 0px">The functions launched via this API must be identical. No explicit checks are done by the driver in this regard because it is largely not feasible. It is up to the application to ensure this.</P></LI>
<LI style="LIST-STYLE-TYPE: disc; BOX-SIZING: border-box; MARGIN-LEFT: 24px">
<P style="BOX-SIZING: border-box; COLOR: ; MARGIN: 0px 5px 0px 0px">No two entries in the provided<SPAN>&nbsp;</SPAN><CODE class="docutils literal notranslate" style="BOX-SIZING: border-box; FONT-SIZE: 12px; MAX-WIDTH: 100%; BORDER-TOP: rgb(225,228,229) 1px solid; FONT-FAMILY: var(--nv-font-face-mono); BORDER-RIGHT: rgb(225,228,229) 1px solid; BACKGROUND: rgb(255,255,255); WHITE-SPACE: normal; OVERFLOW-X: auto; BORDER-BOTTOM: rgb(225,228,229) 1px solid; COLOR: rgb(231,76,60); PADDING-BOTTOM: 2px; PADDING-TOP: 2px; PADDING-LEFT: 5px; BORDER-LEFT: rgb(225,228,229) 1px solid; PADDING-RIGHT: 5px"><SPAN class=pre style="BOX-SIZING: border-box">cudaLaunchParams</SPAN></CODE><SPAN>&nbsp;</SPAN>may map to the same device.</P></LI>
<LI style="LIST-STYLE-TYPE: disc; BOX-SIZING: border-box; MARGIN-LEFT: 24px">
<P style="BOX-SIZING: border-box; COLOR: ; MARGIN: 0px 5px 0px 0px">All devices being targeted by this launch must be of the same compute capability - major and minor versions.</P></LI>
<LI style="LIST-STYLE-TYPE: disc; BOX-SIZING: border-box; MARGIN-LEFT: 24px">
<P style="BOX-SIZING: border-box; COLOR: ; MARGIN: 0px 5px 0px 0px">The block size, grid size and amount of shared memory per grid must be the same across all devices. Note that this means the maximum number of blocks that can be launched per device will be limited by the device with the least number of SMs.</P></LI>
<LI style="LIST-STYLE-TYPE: disc; BOX-SIZING: border-box; MARGIN-LEFT: 24px">
<P style="BOX-SIZING: border-box; COLOR: ; MARGIN: 0px 5px 0px 0px">Any user defined<SPAN>&nbsp;</SPAN><CODE class="docutils literal notranslate" style="BOX-SIZING: border-box; FONT-SIZE: 12px; MAX-WIDTH: 100%; BORDER-TOP: rgb(225,228,229) 1px solid; FONT-FAMILY: var(--nv-font-face-mono); BORDER-RIGHT: rgb(225,228,229) 1px solid; BACKGROUND: rgb(255,255,255); WHITE-SPACE: normal; OVERFLOW-X: auto; BORDER-BOTTOM: rgb(225,228,229) 1px solid; COLOR: rgb(231,76,60); PADDING-BOTTOM: 2px; PADDING-TOP: 2px; PADDING-LEFT: 5px; BORDER-LEFT: rgb(225,228,229) 1px solid; PADDING-RIGHT: 5px"><SPAN class=pre style="BOX-SIZING: border-box">__device__</SPAN></CODE>,<SPAN>&nbsp;</SPAN><CODE class="docutils literal notranslate" style="BOX-SIZING: border-box; FONT-SIZE: 12px; MAX-WIDTH: 100%; BORDER-TOP: rgb(225,228,229) 1px solid; FONT-FAMILY: var(--nv-font-face-mono); BORDER-RIGHT: rgb(225,228,229) 1px solid; BACKGROUND: rgb(255,255,255); WHITE-SPACE: normal; OVERFLOW-X: auto; BORDER-BOTTOM: rgb(225,228,229) 1px solid; COLOR: rgb(231,76,60); PADDING-BOTTOM: 2px; PADDING-TOP: 2px; PADDING-LEFT: 5px; BORDER-LEFT: rgb(225,228,229) 1px solid; PADDING-RIGHT: 5px"><SPAN class=pre style="BOX-SIZING: border-box">__constant__</SPAN></CODE><SPAN>&nbsp;</SPAN>or<SPAN>&nbsp;</SPAN><CODE class="docutils literal notranslate" style="BOX-SIZING: border-box; FONT-SIZE: 12px; MAX-WIDTH: 100%; BORDER-TOP: rgb(225,228,229) 1px solid; FONT-FAMILY: var(--nv-font-face-mono); BORDER-RIGHT: rgb(225,228,229) 1px solid; BACKGROUND: rgb(255,255,255); WHITE-SPACE: normal; OVERFLOW-X: auto; BORDER-BOTTOM: rgb(225,228,229) 1px solid; COLOR: rgb(231,76,60); PADDING-BOTTOM: 2px; PADDING-TOP: 2px; PADDING-LEFT: 5px; BORDER-LEFT: rgb(225,228,229) 1px solid; PADDING-RIGHT: 5px"><SPAN class=pre style="BOX-SIZING: border-box">__managed__</SPAN></CODE><SPAN>&nbsp;</SPAN>device global variables present in the module that owns the CUfunction being launched are independently instantiated on every device. The user is responsible for initializing such device global variables appropriately.</P></LI></UL>
<P style="BOX-SIZING: border-box; COLOR: ; MARGIN: 15px 5px 15px 0px">Deprecation Notice:<SPAN>&nbsp;</SPAN><CODE class="docutils literal notranslate" style="BOX-SIZING: border-box; FONT-SIZE: 12px; MAX-WIDTH: 100%; BORDER-TOP: rgb(225,228,229) 1px solid; FONT-FAMILY: var(--nv-font-face-mono); BORDER-RIGHT: rgb(225,228,229) 1px solid; BACKGROUND: rgb(255,255,255); WHITE-SPACE: normal; OVERFLOW-X: auto; BORDER-BOTTOM: rgb(225,228,229) 1px solid; COLOR: rgb(231,76,60); PADDING-BOTTOM: 2px; PADDING-TOP: 2px; PADDING-LEFT: 5px; BORDER-LEFT: rgb(225,228,229) 1px solid; PADDING-RIGHT: 5px"><SPAN class=pre style="BOX-SIZING: border-box">cudaLaunchCooperativeKernelMultiDevice</SPAN></CODE><SPAN>&nbsp;</SPAN>has been deprecated in CUDA 11.3 for all devices. Example of an alternative approach can be found in the multi device conjugate gradient sample.</P>
<P style="BOX-SIZING: border-box; COLOR: ; MARGIN: 15px 5px 15px 0px">Optimal performance in multi-device synchronization is achieved by enabling peer access via<SPAN>&nbsp;</SPAN><CODE class="docutils literal notranslate" style="BOX-SIZING: border-box; FONT-SIZE: 12px; MAX-WIDTH: 100%; BORDER-TOP: rgb(225,228,229) 1px solid; FONT-FAMILY: var(--nv-font-face-mono); BORDER-RIGHT: rgb(225,228,229) 1px solid; BACKGROUND: rgb(255,255,255); WHITE-SPACE: normal; OVERFLOW-X: auto; BORDER-BOTTOM: rgb(225,228,229) 1px solid; COLOR: rgb(231,76,60); PADDING-BOTTOM: 2px; PADDING-TOP: 2px; PADDING-LEFT: 5px; BORDER-LEFT: rgb(225,228,229) 1px solid; PADDING-RIGHT: 5px"><SPAN class=pre style="BOX-SIZING: border-box">cuCtxEnablePeerAccess</SPAN></CODE><SPAN>&nbsp;</SPAN>or<SPAN>&nbsp;</SPAN><CODE class="docutils literal notranslate" style="BOX-SIZING: border-box; FONT-SIZE: 12px; MAX-WIDTH: 100%; BORDER-TOP: rgb(225,228,229) 1px solid; FONT-FAMILY: var(--nv-font-face-mono); BORDER-RIGHT: rgb(225,228,229) 1px solid; BACKGROUND: rgb(255,255,255); WHITE-SPACE: normal; OVERFLOW-X: auto; BORDER-BOTTOM: rgb(225,228,229) 1px solid; COLOR: rgb(231,76,60); PADDING-BOTTOM: 2px; PADDING-TOP: 2px; PADDING-LEFT: 5px; BORDER-LEFT: rgb(225,228,229) 1px solid; PADDING-RIGHT: 5px"><SPAN class=pre style="BOX-SIZING: border-box">cudaDeviceEnablePeerAccess</SPAN></CODE><SPAN>&nbsp;</SPAN>for all participating devices.</P>
<P style="BOX-SIZING: border-box; COLOR: ; MARGIN: 15px 5px 15px 0px">The launch parameters should be defined using an array of structs (one per device), and launched with<SPAN>&nbsp;</SPAN><CODE class="docutils literal notranslate" style="BOX-SIZING: border-box; FONT-SIZE: 12px; MAX-WIDTH: 100%; BORDER-TOP: rgb(225,228,229) 1px solid; FONT-FAMILY: var(--nv-font-face-mono); BORDER-RIGHT: rgb(225,228,229) 1px solid; BACKGROUND: rgb(255,255,255); WHITE-SPACE: normal; OVERFLOW-X: auto; BORDER-BOTTOM: rgb(225,228,229) 1px solid; COLOR: rgb(231,76,60); PADDING-BOTTOM: 2px; PADDING-TOP: 2px; PADDING-LEFT: 5px; BORDER-LEFT: rgb(225,228,229) 1px solid; PADDING-RIGHT: 5px"><SPAN class=pre style="BOX-SIZING: border-box">cudaLaunchCooperativeKernelMultiDevice</SPAN></CODE></P>
<P style="BOX-SIZING: border-box; COLOR: ; MARGIN: 15px 5px 15px 0px"><STRONG style="BOX-SIZING: border-box; FONT-WEIGHT: 700">Example:</STRONG></P>
<DIV class="highlight-c++ notranslate" style="BOX-SIZING: border-box; BORDER-TOP: rgb(225,228,229) 1px solid; BORDER-RIGHT: rgb(225,228,229) 1px solid; OVERFLOW-X: auto; BORDER-BOTTOM: rgb(225,228,229) 1px solid; BORDER-LEFT: rgb(225,228,229) 1px solid; MARGIN: 1px 0px 24px">
<DIV class=highlight style="BOX-SIZING: border-box; BORDER-TOP: medium none; BORDER-RIGHT: medium none; BACKGROUND: rgb(248,248,248); OVERFLOW-X: auto; BORDER-BOTTOM: medium none; POSITION: relative; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; BORDER-LEFT: medium none; MARGIN: 0px; PADDING-RIGHT: 0px"><PRE id=codecell408 style="BOX-SIZING: border-box; FONT-SIZE: 12px; OVERFLOW: auto; FONT-FAMILY: var(--nv-font-face-mono); WHITE-SPACE: pre; PADDING-BOTTOM: 12px; PADDING-TOP: 12px; PADDING-LEFT: 12px; MARGIN: 0px; DISPLAY: block; LINE-HEIGHT: 1.4; PADDING-RIGHT: 12px"><SPAN style="BOX-SIZING: border-box"></SPAN><SPAN class=n style="BOX-SIZING: border-box">cudaDeviceProp</SPAN><SPAN class=w style="BOX-SIZING: border-box; COLOR: rgb(187,187,187)"> </SPAN><SPAN class=n style="BOX-SIZING: border-box">deviceProp</SPAN><SPAN class=p style="BOX-SIZING: border-box">;</SPAN><SPAN class=w style="BOX-SIZING: border-box; COLOR: rgb(187,187,187)"></SPAN>
<SPAN class=n style="BOX-SIZING: border-box">cudaGetDeviceCount</SPAN><SPAN class=p style="BOX-SIZING: border-box">(</SPAN><SPAN class=o style="BOX-SIZING: border-box; COLOR: rgb(102,102,102)">&amp;</SPAN><SPAN class=n style="BOX-SIZING: border-box">numGpus</SPAN><SPAN class=p style="BOX-SIZING: border-box">);</SPAN><SPAN class=w style="BOX-SIZING: border-box; COLOR: rgb(187,187,187)"></SPAN>

<SPAN class=c1 style="BOX-SIZING: border-box; COLOR: rgb(61,123,123); FONT-STYLE: italic">// Per device launch parameters</SPAN>
<SPAN class=n style="BOX-SIZING: border-box">cudaLaunchParams</SPAN><SPAN class=w style="BOX-SIZING: border-box; COLOR: rgb(187,187,187)"> </SPAN><SPAN class=o style="BOX-SIZING: border-box; COLOR: rgb(102,102,102)">*</SPAN><SPAN class=n style="BOX-SIZING: border-box">launchParams</SPAN><SPAN class=w style="BOX-SIZING: border-box; COLOR: rgb(187,187,187)"> </SPAN><SPAN class=o style="BOX-SIZING: border-box; COLOR: rgb(102,102,102)">=</SPAN><SPAN class=w style="BOX-SIZING: border-box; COLOR: rgb(187,187,187)"> </SPAN><SPAN class=p style="BOX-SIZING: border-box">(</SPAN><SPAN class=n style="BOX-SIZING: border-box">cudaLaunchParams</SPAN><SPAN class=o style="BOX-SIZING: border-box; COLOR: rgb(102,102,102)">*</SPAN><SPAN class=p style="BOX-SIZING: border-box">)</SPAN><SPAN class=n style="BOX-SIZING: border-box">malloc</SPAN><SPAN class=p style="BOX-SIZING: border-box">(</SPAN><SPAN class=k style="BOX-SIZING: border-box; FONT-WEIGHT: bold; COLOR: rgb(0,128,0)">sizeof</SPAN><SPAN class=p style="BOX-SIZING: border-box">(</SPAN><SPAN class=n style="BOX-SIZING: border-box">cudaLaunchParams</SPAN><SPAN class=p style="BOX-SIZING: border-box">)</SPAN><SPAN class=w style="BOX-SIZING: border-box; COLOR: rgb(187,187,187)"> </SPAN><SPAN class=o style="BOX-SIZING: border-box; COLOR: rgb(102,102,102)">*</SPAN><SPAN class=w style="BOX-SIZING: border-box; COLOR: rgb(187,187,187)"> </SPAN><SPAN class=n style="BOX-SIZING: border-box">numGpus</SPAN><SPAN class=p style="BOX-SIZING: border-box">);</SPAN><SPAN class=w style="BOX-SIZING: border-box; COLOR: rgb(187,187,187)"></SPAN>
<SPAN class=n style="BOX-SIZING: border-box">cudaStream_t</SPAN><SPAN class=w style="BOX-SIZING: border-box; COLOR: rgb(187,187,187)"> </SPAN><SPAN class=o style="BOX-SIZING: border-box; COLOR: rgb(102,102,102)">*</SPAN><SPAN class=n style="BOX-SIZING: border-box">streams</SPAN><SPAN class=w style="BOX-SIZING: border-box; COLOR: rgb(187,187,187)"> </SPAN><SPAN class=o style="BOX-SIZING: border-box; COLOR: rgb(102,102,102)">=</SPAN><SPAN class=w style="BOX-SIZING: border-box; COLOR: rgb(187,187,187)"> </SPAN><SPAN class=p style="BOX-SIZING: border-box">(</SPAN><SPAN class=n style="BOX-SIZING: border-box">cudaStream_t</SPAN><SPAN class=o style="BOX-SIZING: border-box; COLOR: rgb(102,102,102)">*</SPAN><SPAN class=p style="BOX-SIZING: border-box">)</SPAN><SPAN class=n style="BOX-SIZING: border-box">malloc</SPAN><SPAN class=p style="BOX-SIZING: border-box">(</SPAN><SPAN class=k style="BOX-SIZING: border-box; FONT-WEIGHT: bold; COLOR: rgb(0,128,0)">sizeof</SPAN><SPAN class=p style="BOX-SIZING: border-box">(</SPAN><SPAN class=n style="BOX-SIZING: border-box">cudaStream_t</SPAN><SPAN class=p style="BOX-SIZING: border-box">)</SPAN><SPAN class=w style="BOX-SIZING: border-box; COLOR: rgb(187,187,187)"> </SPAN><SPAN class=o style="BOX-SIZING: border-box; COLOR: rgb(102,102,102)">*</SPAN><SPAN class=w style="BOX-SIZING: border-box; COLOR: rgb(187,187,187)"> </SPAN><SPAN class=n style="BOX-SIZING: border-box">numGpus</SPAN><SPAN class=p style="BOX-SIZING: border-box">);</SPAN><SPAN class=w style="BOX-SIZING: border-box; COLOR: rgb(187,187,187)"></SPAN>

<SPAN class=c1 style="BOX-SIZING: border-box; COLOR: rgb(61,123,123); FONT-STYLE: italic">// The kernel arguments are copied over during launch</SPAN>
<SPAN class=c1 style="BOX-SIZING: border-box; COLOR: rgb(61,123,123); FONT-STYLE: italic">// Its also possible to have individual copies of kernel arguments per device, but</SPAN>
<SPAN class=c1 style="BOX-SIZING: border-box; COLOR: rgb(61,123,123); FONT-STYLE: italic">// the signature and name of the function/kernel must be the same.</SPAN>
<SPAN class=kt style="BOX-SIZING: border-box; COLOR: rgb(176,0,64)">void</SPAN><SPAN class=w style="BOX-SIZING: border-box; COLOR: rgb(187,187,187)"> </SPAN><SPAN class=o style="BOX-SIZING: border-box; COLOR: rgb(102,102,102)">*</SPAN><SPAN class=n style="BOX-SIZING: border-box">kernelArgs</SPAN><SPAN class=p style="BOX-SIZING: border-box">[]</SPAN><SPAN class=w style="BOX-SIZING: border-box; COLOR: rgb(187,187,187)"> </SPAN><SPAN class=o style="BOX-SIZING: border-box; COLOR: rgb(102,102,102)">=</SPAN><SPAN class=w style="BOX-SIZING: border-box; COLOR: rgb(187,187,187)"> </SPAN><SPAN class=p style="BOX-SIZING: border-box">{</SPAN><SPAN class=w style="BOX-SIZING: border-box; COLOR: rgb(187,187,187)"> </SPAN><SPAN class=cm style="BOX-SIZING: border-box; COLOR: rgb(61,123,123); FONT-STYLE: italic">/* Add kernel arguments */</SPAN><SPAN class=w style="BOX-SIZING: border-box; COLOR: rgb(187,187,187)"> </SPAN><SPAN class=p style="BOX-SIZING: border-box">};</SPAN><SPAN class=w style="BOX-SIZING: border-box; COLOR: rgb(187,187,187)"></SPAN>

<SPAN class=k style="BOX-SIZING: border-box; FONT-WEIGHT: bold; COLOR: rgb(0,128,0)">for</SPAN><SPAN class=w style="BOX-SIZING: border-box; COLOR: rgb(187,187,187)"> </SPAN><SPAN class=p style="BOX-SIZING: border-box">(</SPAN><SPAN class=kt style="BOX-SIZING: border-box; COLOR: rgb(176,0,64)">int</SPAN><SPAN class=w style="BOX-SIZING: border-box; COLOR: rgb(187,187,187)"> </SPAN><SPAN class=n style="BOX-SIZING: border-box">i</SPAN><SPAN class=w style="BOX-SIZING: border-box; COLOR: rgb(187,187,187)"> </SPAN><SPAN class=o style="BOX-SIZING: border-box; COLOR: rgb(102,102,102)">=</SPAN><SPAN class=w style="BOX-SIZING: border-box; COLOR: rgb(187,187,187)"> </SPAN><SPAN class=mi style="BOX-SIZING: border-box; COLOR: rgb(102,102,102)">0</SPAN><SPAN class=p style="BOX-SIZING: border-box">;</SPAN><SPAN class=w style="BOX-SIZING: border-box; COLOR: rgb(187,187,187)"> </SPAN><SPAN class=n style="BOX-SIZING: border-box">i</SPAN><SPAN class=w style="BOX-SIZING: border-box; COLOR: rgb(187,187,187)"> </SPAN><SPAN class=o style="BOX-SIZING: border-box; COLOR: rgb(102,102,102)">&lt;</SPAN><SPAN class=w style="BOX-SIZING: border-box; COLOR: rgb(187,187,187)"> </SPAN><SPAN class=n style="BOX-SIZING: border-box">numGpus</SPAN><SPAN class=p style="BOX-SIZING: border-box">;</SPAN><SPAN class=w style="BOX-SIZING: border-box; COLOR: rgb(187,187,187)"> </SPAN><SPAN class=n style="BOX-SIZING: border-box">i</SPAN><SPAN class=o style="BOX-SIZING: border-box; COLOR: rgb(102,102,102)">++</SPAN><SPAN class=p style="BOX-SIZING: border-box">)</SPAN><SPAN class=w style="BOX-SIZING: border-box; COLOR: rgb(187,187,187)"> </SPAN><SPAN class=p style="BOX-SIZING: border-box">{</SPAN><SPAN class=w style="BOX-SIZING: border-box; COLOR: rgb(187,187,187)"></SPAN>
<SPAN class=w style="BOX-SIZING: border-box; COLOR: rgb(187,187,187)">    </SPAN><SPAN class=n style="BOX-SIZING: border-box">cudaSetDevice</SPAN><SPAN class=p style="BOX-SIZING: border-box">(</SPAN><SPAN class=n style="BOX-SIZING: border-box">i</SPAN><SPAN class=p style="BOX-SIZING: border-box">);</SPAN><SPAN class=w style="BOX-SIZING: border-box; COLOR: rgb(187,187,187)"></SPAN>
<SPAN class=w style="BOX-SIZING: border-box; COLOR: rgb(187,187,187)">    </SPAN><SPAN class=c1 style="BOX-SIZING: border-box; COLOR: rgb(61,123,123); FONT-STYLE: italic">// Per device stream, but its also possible to use the default NULL stream of each device</SPAN>
<SPAN class=w style="BOX-SIZING: border-box; COLOR: rgb(187,187,187)">    </SPAN><SPAN class=n style="BOX-SIZING: border-box">cudaStreamCreate</SPAN><SPAN class=p style="BOX-SIZING: border-box">(</SPAN><SPAN class=o style="BOX-SIZING: border-box; COLOR: rgb(102,102,102)">&amp;</SPAN><SPAN class=n style="BOX-SIZING: border-box">streams</SPAN><SPAN class=p style="BOX-SIZING: border-box">[</SPAN><SPAN class=n style="BOX-SIZING: border-box">i</SPAN><SPAN class=p style="BOX-SIZING: border-box">]);</SPAN><SPAN class=w style="BOX-SIZING: border-box; COLOR: rgb(187,187,187)"></SPAN>
<SPAN class=w style="BOX-SIZING: border-box; COLOR: rgb(187,187,187)">    </SPAN><SPAN class=c1 style="BOX-SIZING: border-box; COLOR: rgb(61,123,123); FONT-STYLE: italic">// Loop over other devices and cudaDeviceEnablePeerAccess to get a faster barrier implementation</SPAN>
<SPAN class=p style="BOX-SIZING: border-box">}</SPAN><SPAN class=w style="BOX-SIZING: border-box; COLOR: rgb(187,187,187)"></SPAN>
<SPAN class=c1 style="BOX-SIZING: border-box; COLOR: rgb(61,123,123); FONT-STYLE: italic">// Since all devices must be of the same compute capability and have the same launch configuration</SPAN>
<SPAN class=c1 style="BOX-SIZING: border-box; COLOR: rgb(61,123,123); FONT-STYLE: italic">// it is sufficient to query device 0 here</SPAN>
<SPAN class=n style="BOX-SIZING: border-box">cudaGetDeviceProperties</SPAN><SPAN class=p style="BOX-SIZING: border-box">(</SPAN><SPAN class=o style="BOX-SIZING: border-box; COLOR: rgb(102,102,102)">&amp;</SPAN><SPAN class=n style="BOX-SIZING: border-box">deviceProp</SPAN><SPAN class=p style="BOX-SIZING: border-box">[</SPAN><SPAN class=n style="BOX-SIZING: border-box">i</SPAN><SPAN class=p style="BOX-SIZING: border-box">],</SPAN><SPAN class=w style="BOX-SIZING: border-box; COLOR: rgb(187,187,187)"> </SPAN><SPAN class=mi style="BOX-SIZING: border-box; COLOR: rgb(102,102,102)">0</SPAN><SPAN class=p style="BOX-SIZING: border-box">);</SPAN><SPAN class=w style="BOX-SIZING: border-box; COLOR: rgb(187,187,187)"></SPAN>
<SPAN class=n style="BOX-SIZING: border-box">dim3</SPAN><SPAN class=w style="BOX-SIZING: border-box; COLOR: rgb(187,187,187)"> </SPAN><SPAN class=nf style="BOX-SIZING: border-box; COLOR: rgb(0,0,255)">dimBlock</SPAN><SPAN class=p style="BOX-SIZING: border-box">(</SPAN><SPAN class=n style="BOX-SIZING: border-box">numThreads</SPAN><SPAN class=p style="BOX-SIZING: border-box">,</SPAN><SPAN class=w style="BOX-SIZING: border-box; COLOR: rgb(187,187,187)"> </SPAN><SPAN class=mi style="BOX-SIZING: border-box; COLOR: rgb(102,102,102)">1</SPAN><SPAN class=p style="BOX-SIZING: border-box">,</SPAN><SPAN class=w style="BOX-SIZING: border-box; COLOR: rgb(187,187,187)"> </SPAN><SPAN class=mi style="BOX-SIZING: border-box; COLOR: rgb(102,102,102)">1</SPAN><SPAN class=p style="BOX-SIZING: border-box">);</SPAN><SPAN class=w style="BOX-SIZING: border-box; COLOR: rgb(187,187,187)"></SPAN>
<SPAN class=n style="BOX-SIZING: border-box">dim3</SPAN><SPAN class=w style="BOX-SIZING: border-box; COLOR: rgb(187,187,187)"> </SPAN><SPAN class=nf style="BOX-SIZING: border-box; COLOR: rgb(0,0,255)">dimGrid</SPAN><SPAN class=p style="BOX-SIZING: border-box">(</SPAN><SPAN class=n style="BOX-SIZING: border-box">deviceProp</SPAN><SPAN class=p style="BOX-SIZING: border-box">.</SPAN><SPAN class=n style="BOX-SIZING: border-box">multiProcessorCount</SPAN><SPAN class=p style="BOX-SIZING: border-box">,</SPAN><SPAN class=w style="BOX-SIZING: border-box; COLOR: rgb(187,187,187)"> </SPAN><SPAN class=mi style="BOX-SIZING: border-box; COLOR: rgb(102,102,102)">1</SPAN><SPAN class=p style="BOX-SIZING: border-box">,</SPAN><SPAN class=w style="BOX-SIZING: border-box; COLOR: rgb(187,187,187)"> </SPAN><SPAN class=mi style="BOX-SIZING: border-box; COLOR: rgb(102,102,102)">1</SPAN><SPAN class=p style="BOX-SIZING: border-box">);</SPAN><SPAN class=w style="BOX-SIZING: border-box; COLOR: rgb(187,187,187)"></SPAN>
<SPAN class=k style="BOX-SIZING: border-box; FONT-WEIGHT: bold; COLOR: rgb(0,128,0)">for</SPAN><SPAN class=w style="BOX-SIZING: border-box; COLOR: rgb(187,187,187)"> </SPAN><SPAN class=p style="BOX-SIZING: border-box">(</SPAN><SPAN class=kt style="BOX-SIZING: border-box; COLOR: rgb(176,0,64)">int</SPAN><SPAN class=w style="BOX-SIZING: border-box; COLOR: rgb(187,187,187)"> </SPAN><SPAN class=n style="BOX-SIZING: border-box">i</SPAN><SPAN class=w style="BOX-SIZING: border-box; COLOR: rgb(187,187,187)"> </SPAN><SPAN class=o style="BOX-SIZING: border-box; COLOR: rgb(102,102,102)">=</SPAN><SPAN class=w style="BOX-SIZING: border-box; COLOR: rgb(187,187,187)"> </SPAN><SPAN class=mi style="BOX-SIZING: border-box; COLOR: rgb(102,102,102)">0</SPAN><SPAN class=p style="BOX-SIZING: border-box">;</SPAN><SPAN class=w style="BOX-SIZING: border-box; COLOR: rgb(187,187,187)"> </SPAN><SPAN class=n style="BOX-SIZING: border-box">i</SPAN><SPAN class=w style="BOX-SIZING: border-box; COLOR: rgb(187,187,187)"> </SPAN><SPAN class=o style="BOX-SIZING: border-box; COLOR: rgb(102,102,102)">&lt;</SPAN><SPAN class=w style="BOX-SIZING: border-box; COLOR: rgb(187,187,187)"> </SPAN><SPAN class=n style="BOX-SIZING: border-box">numGpus</SPAN><SPAN class=p style="BOX-SIZING: border-box">;</SPAN><SPAN class=w style="BOX-SIZING: border-box; COLOR: rgb(187,187,187)"> </SPAN><SPAN class=n style="BOX-SIZING: border-box">i</SPAN><SPAN class=o style="BOX-SIZING: border-box; COLOR: rgb(102,102,102)">++</SPAN><SPAN class=p style="BOX-SIZING: border-box">)</SPAN><SPAN class=w style="BOX-SIZING: border-box; COLOR: rgb(187,187,187)"> </SPAN><SPAN class=p style="BOX-SIZING: border-box">{</SPAN><SPAN class=w style="BOX-SIZING: border-box; COLOR: rgb(187,187,187)"></SPAN>
<SPAN class=w style="BOX-SIZING: border-box; COLOR: rgb(187,187,187)">    </SPAN><SPAN class=n style="BOX-SIZING: border-box">launchParamsList</SPAN><SPAN class=p style="BOX-SIZING: border-box">[</SPAN><SPAN class=n style="BOX-SIZING: border-box">i</SPAN><SPAN class=p style="BOX-SIZING: border-box">].</SPAN><SPAN class=n style="BOX-SIZING: border-box">func</SPAN><SPAN class=w style="BOX-SIZING: border-box; COLOR: rgb(187,187,187)"> </SPAN><SPAN class=o style="BOX-SIZING: border-box; COLOR: rgb(102,102,102)">=</SPAN><SPAN class=w style="BOX-SIZING: border-box; COLOR: rgb(187,187,187)"> </SPAN><SPAN class=p style="BOX-SIZING: border-box">(</SPAN><SPAN class=kt style="BOX-SIZING: border-box; COLOR: rgb(176,0,64)">void</SPAN><SPAN class=o style="BOX-SIZING: border-box; COLOR: rgb(102,102,102)">*</SPAN><SPAN class=p style="BOX-SIZING: border-box">)</SPAN><SPAN class=n style="BOX-SIZING: border-box">my_kernel</SPAN><SPAN class=p style="BOX-SIZING: border-box">;</SPAN><SPAN class=w style="BOX-SIZING: border-box; COLOR: rgb(187,187,187)"></SPAN>
<SPAN class=w style="BOX-SIZING: border-box; COLOR: rgb(187,187,187)">    </SPAN><SPAN class=n style="BOX-SIZING: border-box">launchParamsList</SPAN><SPAN class=p style="BOX-SIZING: border-box">[</SPAN><SPAN class=n style="BOX-SIZING: border-box">i</SPAN><SPAN class=p style="BOX-SIZING: border-box">].</SPAN><SPAN class=n style="BOX-SIZING: border-box">gridDim</SPAN><SPAN class=w style="BOX-SIZING: border-box; COLOR: rgb(187,187,187)"> </SPAN><SPAN class=o style="BOX-SIZING: border-box; COLOR: rgb(102,102,102)">=</SPAN><SPAN class=w style="BOX-SIZING: border-box; COLOR: rgb(187,187,187)"> </SPAN><SPAN class=n style="BOX-SIZING: border-box">dimGrid</SPAN><SPAN class=p style="BOX-SIZING: border-box">;</SPAN><SPAN class=w style="BOX-SIZING: border-box; COLOR: rgb(187,187,187)"></SPAN>
<SPAN class=w style="BOX-SIZING: border-box; COLOR: rgb(187,187,187)">    </SPAN><SPAN class=n style="BOX-SIZING: border-box">launchParamsList</SPAN><SPAN class=p style="BOX-SIZING: border-box">[</SPAN><SPAN class=n style="BOX-SIZING: border-box">i</SPAN><SPAN class=p style="BOX-SIZING: border-box">].</SPAN><SPAN class=n style="BOX-SIZING: border-box">blockDim</SPAN><SPAN class=w style="BOX-SIZING: border-box; COLOR: rgb(187,187,187)"> </SPAN><SPAN class=o style="BOX-SIZING: border-box; COLOR: rgb(102,102,102)">=</SPAN><SPAN class=w style="BOX-SIZING: border-box; COLOR: rgb(187,187,187)"> </SPAN><SPAN class=n style="BOX-SIZING: border-box">dimBlock</SPAN><SPAN class=p style="BOX-SIZING: border-box">;</SPAN><SPAN class=w style="BOX-SIZING: border-box; COLOR: rgb(187,187,187)"></SPAN>
<SPAN class=w style="BOX-SIZING: border-box; COLOR: rgb(187,187,187)">    </SPAN><SPAN class=n style="BOX-SIZING: border-box">launchParamsList</SPAN><SPAN class=p style="BOX-SIZING: border-box">[</SPAN><SPAN class=n style="BOX-SIZING: border-box">i</SPAN><SPAN class=p style="BOX-SIZING: border-box">].</SPAN><SPAN class=n style="BOX-SIZING: border-box">sharedMem</SPAN><SPAN class=w style="BOX-SIZING: border-box; COLOR: rgb(187,187,187)"> </SPAN><SPAN class=o style="BOX-SIZING: border-box; COLOR: rgb(102,102,102)">=</SPAN><SPAN class=w style="BOX-SIZING: border-box; COLOR: rgb(187,187,187)"> </SPAN><SPAN class=mi style="BOX-SIZING: border-box; COLOR: rgb(102,102,102)">0</SPAN><SPAN class=p style="BOX-SIZING: border-box">;</SPAN><SPAN class=w style="BOX-SIZING: border-box; COLOR: rgb(187,187,187)"></SPAN>
<SPAN class=w style="BOX-SIZING: border-box; COLOR: rgb(187,187,187)">    </SPAN><SPAN class=n style="BOX-SIZING: border-box">launchParamsList</SPAN><SPAN class=p style="BOX-SIZING: border-box">[</SPAN><SPAN class=n style="BOX-SIZING: border-box">i</SPAN><SPAN class=p style="BOX-SIZING: border-box">].</SPAN><SPAN class=n style="BOX-SIZING: border-box">stream</SPAN><SPAN class=w style="BOX-SIZING: border-box; COLOR: rgb(187,187,187)"> </SPAN><SPAN class=o style="BOX-SIZING: border-box; COLOR: rgb(102,102,102)">=</SPAN><SPAN class=w style="BOX-SIZING: border-box; COLOR: rgb(187,187,187)"> </SPAN><SPAN class=n style="BOX-SIZING: border-box">streams</SPAN><SPAN class=p style="BOX-SIZING: border-box">[</SPAN><SPAN class=n style="BOX-SIZING: border-box">i</SPAN><SPAN class=p style="BOX-SIZING: border-box">];</SPAN><SPAN class=w style="BOX-SIZING: border-box; COLOR: rgb(187,187,187)"></SPAN>
<SPAN class=w style="BOX-SIZING: border-box; COLOR: rgb(187,187,187)">    </SPAN><SPAN class=n style="BOX-SIZING: border-box">launchParamsList</SPAN><SPAN class=p style="BOX-SIZING: border-box">[</SPAN><SPAN class=n style="BOX-SIZING: border-box">i</SPAN><SPAN class=p style="BOX-SIZING: border-box">].</SPAN><SPAN class=n style="BOX-SIZING: border-box">args</SPAN><SPAN class=w style="BOX-SIZING: border-box; COLOR: rgb(187,187,187)"> </SPAN><SPAN class=o style="BOX-SIZING: border-box; COLOR: rgb(102,102,102)">=</SPAN><SPAN class=w style="BOX-SIZING: border-box; COLOR: rgb(187,187,187)"> </SPAN><SPAN class=n style="BOX-SIZING: border-box">kernelArgs</SPAN><SPAN class=p style="BOX-SIZING: border-box">;</SPAN><SPAN class=w style="BOX-SIZING: border-box; COLOR: rgb(187,187,187)"></SPAN>
<SPAN class=p style="BOX-SIZING: border-box">}</SPAN><SPAN class=w style="BOX-SIZING: border-box; COLOR: rgb(187,187,187)"></SPAN>
<SPAN class=n style="BOX-SIZING: border-box">cudaLaunchCooperativeKernelMultiDevice</SPAN><SPAN class=p style="BOX-SIZING: border-box">(</SPAN><SPAN class=n style="BOX-SIZING: border-box">launchParams</SPAN><SPAN class=p style="BOX-SIZING: border-box">,</SPAN><SPAN class=w style="BOX-SIZING: border-box; COLOR: rgb(187,187,187)"> </SPAN><SPAN class=n style="BOX-SIZING: border-box">numGpus</SPAN><SPAN class=p style="BOX-SIZING: border-box">);</SPAN><SPAN class=w style="BOX-SIZING: border-box; COLOR: rgb(187,187,187)"></SPAN>
</PRE></DIV></DIV>
<P style="BOX-SIZING: border-box; COLOR: ; MARGIN: 15px 5px 15px 0px">Also, as with grid-wide synchronization, the resulting device code looks very similar:</P>
<DIV class="highlight-c++ notranslate" style="BOX-SIZING: border-box; BORDER-TOP: rgb(225,228,229) 1px solid; BORDER-RIGHT: rgb(225,228,229) 1px solid; OVERFLOW-X: auto; BORDER-BOTTOM: rgb(225,228,229) 1px solid; BORDER-LEFT: rgb(225,228,229) 1px solid; MARGIN: 1px 0px 24px">
<DIV class=highlight style="BOX-SIZING: border-box; BORDER-TOP: medium none; BORDER-RIGHT: medium none; BACKGROUND: rgb(248,248,248); OVERFLOW-X: auto; BORDER-BOTTOM: medium none; POSITION: relative; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; BORDER-LEFT: medium none; MARGIN: 0px; PADDING-RIGHT: 0px"><PRE id=codecell409 style="BOX-SIZING: border-box; FONT-SIZE: 12px; OVERFLOW: auto; FONT-FAMILY: var(--nv-font-face-mono); WHITE-SPACE: pre; PADDING-BOTTOM: 12px; PADDING-TOP: 12px; PADDING-LEFT: 12px; MARGIN: 0px; DISPLAY: block; LINE-HEIGHT: 1.4; PADDING-RIGHT: 12px"><SPAN style="BOX-SIZING: border-box"></SPAN><SPAN class=n style="BOX-SIZING: border-box">multi_grid_group</SPAN><SPAN class=w style="BOX-SIZING: border-box; COLOR: rgb(187,187,187)"> </SPAN><SPAN class=n style="BOX-SIZING: border-box">multi_grid</SPAN><SPAN class=w style="BOX-SIZING: border-box; COLOR: rgb(187,187,187)"> </SPAN><SPAN class=o style="BOX-SIZING: border-box; COLOR: rgb(102,102,102)">=</SPAN><SPAN class=w style="BOX-SIZING: border-box; COLOR: rgb(187,187,187)"> </SPAN><SPAN class=n style="BOX-SIZING: border-box">this_multi_grid</SPAN><SPAN class=p style="BOX-SIZING: border-box">();</SPAN><SPAN class=w style="BOX-SIZING: border-box; COLOR: rgb(187,187,187)"></SPAN>
<SPAN class=n style="BOX-SIZING: border-box">multi_grid</SPAN><SPAN class=p style="BOX-SIZING: border-box">.</SPAN><SPAN class=n style="BOX-SIZING: border-box">sync</SPAN><SPAN class=p style="BOX-SIZING: border-box">();</SPAN><SPAN class=w style="BOX-SIZING: border-box; COLOR: rgb(187,187,187)"></SPAN>
</PRE></DIV></DIV>
<P style="BOX-SIZING: border-box; COLOR: ; MARGIN: 15px 5px 15px 0px">However, the code needs to be compiled in separate compilation by passing<SPAN>&nbsp;</SPAN><CODE class="docutils literal notranslate" style="BOX-SIZING: border-box; FONT-SIZE: 12px; MAX-WIDTH: 100%; BORDER-TOP: rgb(225,228,229) 1px solid; FONT-FAMILY: var(--nv-font-face-mono); BORDER-RIGHT: rgb(225,228,229) 1px solid; BACKGROUND: rgb(255,255,255); WHITE-SPACE: normal; OVERFLOW-X: auto; BORDER-BOTTOM: rgb(225,228,229) 1px solid; COLOR: rgb(231,76,60); PADDING-BOTTOM: 2px; PADDING-TOP: 2px; PADDING-LEFT: 5px; BORDER-LEFT: rgb(225,228,229) 1px solid; PADDING-RIGHT: 5px"><SPAN class=pre style="BOX-SIZING: border-box">-rdc=true</SPAN></CODE><SPAN>&nbsp;</SPAN>to nvcc.</P>
<P style="BOX-SIZING: border-box; COLOR: ; MARGIN: 15px 5px 15px 0px">It is good practice to first ensure the device supports multi-device cooperative launches by querying the device attribute<SPAN>&nbsp;</SPAN><CODE class="docutils literal notranslate" style="BOX-SIZING: border-box; FONT-SIZE: 12px; MAX-WIDTH: 100%; BORDER-TOP: rgb(225,228,229) 1px solid; FONT-FAMILY: var(--nv-font-face-mono); BORDER-RIGHT: rgb(225,228,229) 1px solid; BACKGROUND: rgb(255,255,255); WHITE-SPACE: normal; OVERFLOW-X: auto; BORDER-BOTTOM: rgb(225,228,229) 1px solid; COLOR: rgb(231,76,60); PADDING-BOTTOM: 2px; PADDING-TOP: 2px; PADDING-LEFT: 5px; BORDER-LEFT: rgb(225,228,229) 1px solid; PADDING-RIGHT: 5px"><SPAN class=pre style="BOX-SIZING: border-box">cudaDevAttrCooperativeMultiDeviceLaunch</SPAN></CODE>:</P>
<DIV class="highlight-c++ notranslate" style="BOX-SIZING: border-box; BORDER-TOP: rgb(225,228,229) 1px solid; BORDER-RIGHT: rgb(225,228,229) 1px solid; OVERFLOW-X: auto; BORDER-BOTTOM: rgb(225,228,229) 1px solid; BORDER-LEFT: rgb(225,228,229) 1px solid; MARGIN: 1px 0px 24px">
<DIV class=highlight style="BOX-SIZING: border-box; BORDER-TOP: medium none; BORDER-RIGHT: medium none; BACKGROUND: rgb(248,248,248); OVERFLOW-X: auto; BORDER-BOTTOM: medium none; POSITION: relative; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; BORDER-LEFT: medium none; MARGIN: 0px; PADDING-RIGHT: 0px"><PRE id=codecell410 style="BOX-SIZING: border-box; FONT-SIZE: 12px; OVERFLOW: auto; FONT-FAMILY: var(--nv-font-face-mono); WHITE-SPACE: pre; PADDING-BOTTOM: 12px; PADDING-TOP: 12px; PADDING-LEFT: 12px; MARGIN: 0px; DISPLAY: block; LINE-HEIGHT: 1.4; PADDING-RIGHT: 12px"><SPAN style="BOX-SIZING: border-box"></SPAN><SPAN class=kt style="BOX-SIZING: border-box; COLOR: rgb(176,0,64)">int</SPAN><SPAN class=w style="BOX-SIZING: border-box; COLOR: rgb(187,187,187)"> </SPAN><SPAN class=n style="BOX-SIZING: border-box">dev</SPAN><SPAN class=w style="BOX-SIZING: border-box; COLOR: rgb(187,187,187)"> </SPAN><SPAN class=o style="BOX-SIZING: border-box; COLOR: rgb(102,102,102)">=</SPAN><SPAN class=w style="BOX-SIZING: border-box; COLOR: rgb(187,187,187)"> </SPAN><SPAN class=mi style="BOX-SIZING: border-box; COLOR: rgb(102,102,102)">0</SPAN><SPAN class=p style="BOX-SIZING: border-box">;</SPAN><SPAN class=w style="BOX-SIZING: border-box; COLOR: rgb(187,187,187)"></SPAN>
<SPAN class=kt style="BOX-SIZING: border-box; COLOR: rgb(176,0,64)">int</SPAN><SPAN class=w style="BOX-SIZING: border-box; COLOR: rgb(187,187,187)"> </SPAN><SPAN class=n style="BOX-SIZING: border-box">supportsMdCoopLaunch</SPAN><SPAN class=w style="BOX-SIZING: border-box; COLOR: rgb(187,187,187)"> </SPAN><SPAN class=o style="BOX-SIZING: border-box; COLOR: rgb(102,102,102)">=</SPAN><SPAN class=w style="BOX-SIZING: border-box; COLOR: rgb(187,187,187)"> </SPAN><SPAN class=mi style="BOX-SIZING: border-box; COLOR: rgb(102,102,102)">0</SPAN><SPAN class=p style="BOX-SIZING: border-box">;</SPAN><SPAN class=w style="BOX-SIZING: border-box; COLOR: rgb(187,187,187)"></SPAN>
<SPAN class=n style="BOX-SIZING: border-box">cudaDeviceGetAttribute</SPAN><SPAN class=p style="BOX-SIZING: border-box">(</SPAN><SPAN class=o style="BOX-SIZING: border-box; COLOR: rgb(102,102,102)">&amp;</SPAN><SPAN class=n style="BOX-SIZING: border-box">supportsMdCoopLaunch</SPAN><SPAN class=p style="BOX-SIZING: border-box">,</SPAN><SPAN class=w style="BOX-SIZING: border-box; COLOR: rgb(187,187,187)"> </SPAN><SPAN class=n style="BOX-SIZING: border-box">cudaDevAttrCooperativeMultiDeviceLaunch</SPAN><SPAN class=p style="BOX-SIZING: border-box">,</SPAN><SPAN class=w style="BOX-SIZING: border-box; COLOR: rgb(187,187,187)"> </SPAN><SPAN class=n style="BOX-SIZING: border-box">dev</SPAN><SPAN class=p style="BOX-SIZING: border-box">);</SPAN><SPAN class=w style="BOX-SIZING: border-box; COLOR: rgb(187,187,187)"></SPAN>
</PRE></DIV></DIV>
<P style="BOX-SIZING: border-box; COLOR: ; MARGIN: 15px 5px 15px 0px">which will set<SPAN>&nbsp;</SPAN><CODE class="docutils literal notranslate" style="BOX-SIZING: border-box; FONT-SIZE: 12px; MAX-WIDTH: 100%; BORDER-TOP: rgb(225,228,229) 1px solid; FONT-FAMILY: var(--nv-font-face-mono); BORDER-RIGHT: rgb(225,228,229) 1px solid; BACKGROUND: rgb(255,255,255); WHITE-SPACE: normal; OVERFLOW-X: auto; BORDER-BOTTOM: rgb(225,228,229) 1px solid; COLOR: rgb(231,76,60); PADDING-BOTTOM: 2px; PADDING-TOP: 2px; PADDING-LEFT: 5px; BORDER-LEFT: rgb(225,228,229) 1px solid; PADDING-RIGHT: 5px"><SPAN class=pre style="BOX-SIZING: border-box">supportsMdCoopLaunch</SPAN></CODE><SPAN>&nbsp;</SPAN>to 1 if the property is supported on device 0. Only devices with compute capability of 6.0 and higher are supported. In addition, you need to be running on the Linux platform (without MPS) or on current versions of Windows with the device in TCC mode.</P>
<P style="BOX-SIZING: border-box; COLOR: ; MARGIN: 15px 5px 15px 0px">See the<SPAN>&nbsp;</SPAN><CODE class="docutils literal notranslate" style="BOX-SIZING: border-box; FONT-SIZE: 12px; MAX-WIDTH: 100%; BORDER-TOP: rgb(225,228,229) 1px solid; FONT-FAMILY: var(--nv-font-face-mono); BORDER-RIGHT: rgb(225,228,229) 1px solid; BACKGROUND: rgb(255,255,255); WHITE-SPACE: normal; OVERFLOW-X: auto; BORDER-BOTTOM: rgb(225,228,229) 1px solid; COLOR: rgb(231,76,60); PADDING-BOTTOM: 2px; PADDING-TOP: 2px; PADDING-LEFT: 5px; BORDER-LEFT: rgb(225,228,229) 1px solid; PADDING-RIGHT: 5px"><SPAN class=pre style="BOX-SIZING: border-box">cudaLaunchCooperativeKernelMultiDevice</SPAN></CODE><SPAN>&nbsp;</SPAN>API documentation for more information.</P></SECTION>