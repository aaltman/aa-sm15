<DIV id=content-header class=column style="BOX-SIZING: border-box; MARGIN: 0px 150px">
<DIV class=section>
<H1 id=page-title class=title style="FONT-SIZE: 50px; FONT-FAMILY: Klavika, sans-serif; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; TEXT-ALIGN: center; MARGIN: 30px 0px; LINE-HEIGHT: 60px"><FONT class=extract>Metastable Failures in the Wild</FONT></H1></DIV></DIV>
<DIV id=content class=column>
<DIV class=section>
<DIV class="region region-content">
<DIV id=block-system-main class="block block-system main">
<DIV class=content>
<DIV id=node-281493 class="node node-login-online view-mode-full view-mode-full--node view-mode-full--node--login_online clearfix">
<DIV class=content>
<DIV class="group-article-body-wrapper field-group-div" style="BOX-SIZING: border-box; MAX-WIDTH: 1200px; POSITION: relative; PADDING-LEFT: 0px; MARGIN: 0px auto; PADDING-RIGHT: 0px; box-shadow: rgba(0, 0, 0, 0.15) 0px 11px 10px 0px">
<DIV class="field field-name-field-lv2-publication-date field-type-datetime field-label-hidden" style="FONT-SIZE: 14px; PADDING-BOTTOM: 10px; TEXT-ALIGN: center; PADDING-TOP: 10px">
<DIV class=field-items>
<DIV class="field-item odd"><SPAN class=date-display-single><FONT class=extract>June 20, 2022</FONT></SPAN></DIV></DIV></DIV>
<DIV class="field field-name-field-lv2-article-type field-type-taxonomy-term-reference field-label-hidden" style="BOX-SIZING: border-box; FONT-SIZE: 14px; TEXT-TRANSFORM: uppercase; FONT-WEIGHT: 800; MARGIN: 0px 150px; DISPLAY: flex; align-items: center; justify-content: center">
<DIV class=field-items>
<DIV class="field-item odd" style="PADDING-LEFT: 10px; PADDING-RIGHT: 10px; flex-shrink: 0"><FONT class=extract>Research</FONT></DIV></DIV></DIV>
<DIV class="field field-label-inline clearfix field-type-text-long field-pseudo-field field-pseudo-field--author-list" style="BOX-SIZING: border-box; FONT-SIZE: 16px; PADDING-BOTTOM: 10px; TEXT-ALIGN: justify; MARGIN: 0px 150px; DISPLAY: flex; justify-content: center; flex-direction: row">
<DIV class=field-label style="FLOAT: left; FONT-WEIGHT: 400"><FONT class=extract>Authors:&nbsp;</FONT></DIV>
<DIV class=field-items style="FLOAT: left"><A title="Lexiang Huang" style="TEXT-DECORATION: none; COLOR: rgb(3,57,216); BACKGROUND-COLOR: transparent" href="https://www.usenix.org/publications/loginonline/metastable-failures-wild#Lexiang%20Huang"><FONT class=extract>Lexiang Huang</FONT></A><FONT class=extract>,<SPAN>&nbsp;</SPAN></FONT><A title="Matthew Magnusson" style="TEXT-DECORATION: none; COLOR: rgb(3,57,216); BACKGROUND-COLOR: transparent" href="https://www.usenix.org/publications/loginonline/metastable-failures-wild#Matthew%20Magnusson"><FONT class=extract>Matthew Magnusson</FONT></A><FONT class=extract>,<SPAN>&nbsp;</SPAN></FONT><A title="Abishek Bangalore Muralikrishna" style="TEXT-DECORATION: none; COLOR: rgb(3,57,216); BACKGROUND-COLOR: transparent" href="https://www.usenix.org/publications/loginonline/metastable-failures-wild#Abishek%20Bangalore%20Muralikrishna"><FONT class=extract>Abishek Bangalore Muralikrishna</FONT></A><FONT class=extract>,<SPAN>&nbsp;</SPAN></FONT><A title="Salman Estyak" style="TEXT-DECORATION: none; COLOR: rgb(3,57,216); BACKGROUND-COLOR: transparent" href="https://www.usenix.org/publications/loginonline/metastable-failures-wild#Salman%20Estyak"><FONT class=extract>Salman Estyak</FONT></A><FONT class=extract>,<SPAN>&nbsp;</SPAN></FONT><A title="Rebecca Isaacs" style="TEXT-DECORATION: none; COLOR: rgb(3,57,216); BACKGROUND-COLOR: transparent" href="https://www.usenix.org/publications/loginonline/metastable-failures-wild#Rebecca%20Isaacs"><FONT class=extract>Rebecca Isaacs</FONT></A><FONT class=extract>,<SPAN>&nbsp;</SPAN></FONT><A title="Abutalib Aghayev" style="TEXT-DECORATION: none; COLOR: rgb(3,57,216); BACKGROUND-COLOR: transparent" href="https://www.usenix.org/publications/loginonline/metastable-failures-wild#Abutalib%20Aghayev"><FONT class=extract>Abutalib Aghayev</FONT></A><FONT class=extract>,<SPAN>&nbsp;</SPAN></FONT><A title="Timothy Zhu" style="TEXT-DECORATION: none; COLOR: rgb(3,57,216); BACKGROUND-COLOR: transparent" href="https://www.usenix.org/publications/loginonline/metastable-failures-wild#Timothy%20Zhu"><FONT class=extract>Timothy Zhu</FONT></A><FONT class=extract>,<SPAN>&nbsp;</SPAN></FONT><A title="Aleksey Charapko" style="TEXT-DECORATION: none; COLOR: rgb(3,57,216); BACKGROUND-COLOR: transparent" href="https://www.usenix.org/publications/loginonline/metastable-failures-wild#Aleksey%20Charapko"><FONT class=extract>Aleksey Charapko</FONT></A></DIV></DIV>
<DIV class="field field-name-field-lv2-shepherds field-type-user-reference field-label-inline clearfix" style="BOX-SIZING: border-box; FONT-SIZE: 16px; PADDING-BOTTOM: 10px; TEXT-ALIGN: justify; MARGIN: 0px 150px; DISPLAY: flex; justify-content: center; flex-direction: row">
<DIV class=field-label style="FLOAT: left; FONT-WEIGHT: 400"><FONT class=extract>Article shepherded by:&nbsp;</FONT></DIV>
<DIV class=field-items style="FLOAT: left">
<DIV class="field-item odd"><SPAN class=usenix-user-reference-names><FONT class=extract>Rik Farrow</FONT></SPAN></DIV></DIV></DIV>
<DIV class="paragraphs-items paragraphs-items-field-lv2-body paragraphs-items-field-lv2-body-full paragraphs-items-full" style="BOX-SIZING: border-box; BORDER-TOP: rgb(143,143,143) 2px solid; PADDING-BOTTOM: 20px; PADDING-TOP: 20px; MARGIN: 0px 150px">
<DIV class="field field-name-field-lv2-body field-type-paragraphs field-label-hidden">
<DIV class=field-items>
<DIV class="field-item odd" style="FONT-SIZE: 18px; FONT-FAMILY: Muli, sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(0,0,0); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial">
<DIV class="entity entity-paragraphs-item paragraphs-item-single-column-text view-mode-full view-mode-full--paragraphs_item view-mode-full--paragraphs_item--single_column_text paragraphs-first-text" style="PADDING-BOTTOM: 20px; PADDING-TOP: 20px">
<DIV class=content>
<DIV class="field field-name-field-single-column-text field-type-text-long field-label-hidden">
<DIV class=field-items>
<DIV class="field-item odd">
<P><FONT class=extract>Building reliable distributed systems has been the holy grail of distributed computing research. Historically, academic researchers studied the reliability of distributed systems under the assumptions of fail-stop and Byzantine failure modes. The proliferation of cloud services led to previously unseen scales and the discovery of new failure modes, such as stragglers, fail-slow hardware failures, and scalability failures. Most recently, Bronson et al. [2] introduced a new class of failures called metastable failures.</FONT></P>
<P><FONT class=extract>Bronson et al. define the<SPAN>&nbsp;</SPAN><EM>metastable failure state</EM><SPAN>&nbsp;</SPAN>as the state of a<STRONG style="FONT-WEIGHT: bolder"><SPAN>&nbsp;</SPAN>permanent overload with an ultra-low goodput</STRONG><SPAN>&nbsp;</SPAN>(throughput of useful work). In their framework, they also define the<SPAN>&nbsp;</SPAN><EM>stable state</EM><SPAN>&nbsp;</SPAN>as the state when a system experiences a low enough load than it can successfully recover from temporary overloads, and the<SPAN>&nbsp;</SPAN><EM>vulnerable state</EM><SPAN>&nbsp;</SPAN>as the state when a system experiences a high load, but it can successfully handle that load in the absence of temporary overloads. A system experiences a metastable failure when it is in a vulnerable state and a<SPAN>&nbsp;</SPAN><EM>trigger</EM><SPAN>&nbsp;</SPAN>causes a temporary overload that sets off a<SPAN>&nbsp;</SPAN><EM>sustaining effect&nbsp;</EM>&nbsp;&#8212; a work amplification due to a common-case optimization &#8212; that tips the system into a metastable failure state. The distinguishing characteristic of a metastable failure is that the sustaining effect keeps the system in the metastable failure state<SPAN>&nbsp;</SPAN><STRONG style="FONT-WEIGHT: bolder">even after the trigger is removed</STRONG>.</FONT></P>
<P><FONT class=extract>This phenomenon of metastable failure is not new. However, instances of such failures look so dissimilar that it is hard to spot the commonality. As a result, distributed systems practitioners have given different names to different instances of metastable failures, such as persistent congestion, overload, cascading failures, retry storms, death spirals, among others. Bronson et al. [2] is the first work that generalizes all of these different-looking failures under the same framework.</FONT></P>
<P><FONT class=extract>A key property of metastable failures is that their root cause is not a specific hardware failure or a software bug. It is an emergent behavior of a system, and it naturally arises from the optimizations for the common case that lead to sustained work amplification. As such, metastable failures are hard to predict, may potentially have catastrophic effects, and incur significant ongoing human engineering costs because automated recovery is difficult (since these failures are not understood well). Incidentally, at the time of writing this article, a metastable failure at Amazon Web Services (AWS) disrupted the operation of airlines, home appliances, smart homes, payment systems, and other critical services for several hours.</FONT></P>
<P><FONT class=extract>As Bronson et al. point out, operators choose to run their systems in the vulnerable state all the time because it is much more efficient than running them in the stable state. As a simple example, an operator of a system with a database that can handle 300 requests per second (RPS) can install a cache with a 90% hit-rate and start serving up to 3,000 RPS. While more efficient, the system is now operating in a vulnerable state because a cache failure can overwhelm the database with more requests that it can handle. The problem is that in a complex, large-scale distributed system, we lack the ability to analyze the consequences of this decision to run in a vulnerable state under different conditions; e.g., what happens if load increases, or if the downstream latency increases, or if messages increase in size and serialization/deserialization starts to cost more CPU? So picking &#8220;how vulnerable&#8221; of a state to operate in, under normal conditions, is a best guess and not always the right choice, which is why we continue to experience metastable failures.</FONT></P>
<P><FONT class=extract>In this article, we perform a large-scale study of actual metastable failures in the wild by sifting through hundreds of publicly available incident reports. We confirm that metastable failures are universally observed and that they are a recurring pattern in many severe outages. In addition, we present an insider view of a metastable failure that occurred at Twitter, a large-scale internet company. Our study of this failure reveals a new type of metastable failure where garbage collection acts as an amplification mechanism and brings under the spotlight the engineering cost of handling metastable failures. For a detailed model to better understand metastability and more case studies to demonstrate the different types of metastable failures, please refer to our full-length paper [1].</FONT></P></DIV></DIV></DIV></DIV></DIV></DIV>
<DIV class="field-item even" style="FONT-SIZE: 18px; FONT-FAMILY: Muli, sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(0,0,0); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial">
<DIV class="entity entity-paragraphs-item paragraphs-item-single-column-text view-mode-full view-mode-full--paragraphs_item view-mode-full--paragraphs_item--single_column_text" style="PADDING-BOTTOM: 20px; PADDING-TOP: 20px">
<DIV class=content>
<DIV class="field field-name-field-single-column-sub field-type-text field-label-hidden" style="FONT-SIZE: 40px; FONT-FAMILY: Klavika, sans-serif; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; PADDING-TOP: 20px; MARGIN: 0px; LINE-HEIGHT: 50px">
<DIV class=field-items>
<DIV class="field-item odd"><FONT class=extract>Metastability in the Wild</FONT></DIV></DIV></DIV>
<DIV class="field field-name-field-single-column-text field-type-text-long field-label-hidden">
<DIV class=field-items>
<DIV class="field-item odd">
<P><FONT class=extract>In this section, we perform a large-scale study of actual metastable failures in the wild by sifting through hundreds of publicly available incident reports. It is an arduous task that requires an in-depth analysis of each incident report to understand if the failure is metastable, and the lack of details in the reports makes it even more challenging.&nbsp;</FONT></P>
<P><FONT class=extract>We identify 21 metastable failures that are severe enough to warrant public incident reports in a range of organizations, including four at AWS, four at Google Cloud, and four at Microsoft Azure. Though this number may appear low compared to other failure types in distributed systems, metastable failures usually have devastating results that last many hours, which makes them an important class of failures to study.&nbsp;</FONT></P>
<H5 style="FONT-SIZE: 24px; FONT-FAMILY: Muli, sans-serif; TEXT-TRANSFORM: none; FONT-WEIGHT: 600; PADDING-TOP: 20px; MARGIN: 0px; LINE-HEIGHT: 30px"><FONT class=extract>Methodology</FONT></H5>
<P><FONT class=extract>To find examples of metastability, we searched through troves of publicly available post-mortem incident reports from large cloud infrastructure providers and significantly smaller companies or services. Large infrastructure providers, such as Amazon Web Services (AWS), Azure, and Google, are held accountable by many paying customers, forcing greater transparency into their reliability and operation practices. Smaller businesses often operate with higher self-imposed transparency goals until they grow large enough to become a significant target for malicious attacks.</FONT></P>
<P><FONT class=extract>Infrastructure providers often maintain incident and outage reporting tools, which became our primary source for metastable failures. We analyzed hundreds of incidents to find a handful that depicts systems in the metastable state. We also found several smaller failures from other public sources such as postmortem communities, weekly outage incident digests, etc.</FONT></P>
<P><FONT class=extract>The reports from different sources do not follow the same format nor provide the same level of information, making our job of finding examples of metastability more difficult. While going through these reports, we focus on tell-tale signs of metastability&nbsp;&#8212;&nbsp;temporary triggers, work amplification or sustaining effects, and certain specific mitigation practices. More specifically, we look for patterns when a trigger initiates some processes that amplify the initial trigger-induced problem and sustain the degraded performance state even after the trigger is removed. The sustaining effect can take multiple forms, such as exacerbated queue growth or retries that create more load. We also pay attention to mitigation efforts, as metastable failures often require significant load shedding for recovery.</FONT></P>
<P><FONT class=extract>We perform a comprehensive analysis of these incidents, focusing on impact, trigger, work amplification mechanisms, and mitigation practices. To study the impact, we focus on the duration and number of impacted services. This information is usually readily available in the reports. For the triggers, we identify the triggers and classify them into several distinct categories. We use a similar identification and classification process to distill work-amplification mechanisms and mitigation patterns. We present our summarized findings in<SPAN>&nbsp;</SPAN></FONT><A style="TEXT-DECORATION: none; COLOR: rgb(3,57,216); BACKGROUND-COLOR: transparent" href="https://www.usenix.org/sites/default/files/metastability_in_the_wild.pdf"><FONT class=extract>Table 1</FONT></A><FONT class=extract>.</FONT></P>
<H5 style="FONT-SIZE: 24px; FONT-FAMILY: Muli, sans-serif; TEXT-TRANSFORM: none; FONT-WEIGHT: 600; PADDING-TOP: 20px; MARGIN: 0px; LINE-HEIGHT: 30px"><FONT class=extract>Summary of Metastable Failures in the Wild</FONT></H5>
<P><FONT class=extract>In<SPAN>&nbsp;</SPAN></FONT><A style="TEXT-DECORATION: none; COLOR: rgb(3,57,216); BACKGROUND-COLOR: transparent" href="https://www.usenix.org/sites/default/files/metastability_in_the_wild.pdf"><FONT class=extract>Table 1</FONT></A><FONT class=extract>, we provide a breakdown of metastable failure incidents we have found. The examples include instances from both major cloud providers (e.g., Microsoft, Amazon, Google, IBM) and smaller companies and projects (e.g., Spotify, Elasticsearch, Apache Cassandra). Our summary table describes high-level aspects of these failures: duration of the incident, impacted services, triggers leading to the outage, the sustaining effect mechanism, and corrective actions taken by the engineers.&nbsp;</FONT></P>
<P><FONT class=extract>Due to the often limited scope of provided information, we use our best judgment in identifying metastable failures. The most important criteria we use is the sustaining effect mechanism. We highlight several instances in gray color when the incident description is not clear on the presence of such a sustaining effect, but metastable failure is plausible depending on the interpretation and given the rest of the information provided. Additionally, we assign each incident a unique identifier to refer to each incident later.&nbsp;</FONT></P>
<P><FONT class=extract>Triggers are the starting events in the chain leading to metastable failures. Around 45% of observed triggers in<SPAN>&nbsp;</SPAN></FONT><A style="TEXT-DECORATION: none; COLOR: rgb(3,57,216); BACKGROUND-COLOR: transparent" href="https://www.usenix.org/sites/default/files/metastability_in_the_wild.pdf"><FONT class=extract>Table 1</FONT></A><FONT class=extract><SPAN>&nbsp;</SPAN>are due to engineer errors, such as buggy configuration or code deployments, and latent bugs (i.e., undetected pre-existing bugs). These can be observed in incidents GGL1, GGL2, GGL3, GGL4, AWS1, AWS3, AZR3, ELC1, SPF1. Load spikes are another prominent trigger category, with around 35% of incidents reporting it. A significant number of cases (45%) have more than one trigger.&nbsp;</FONT></P>
<P><FONT class=extract>Handling and recovering from metastable failures is not easy, with our data suggesting that incidents cause significant outages. For instance, the IBM1 incident lasted over three days. More generally, we have observed outages in a range of 1.5 to 73.53 hours, with 4 to 10 hours of outages being the most common (35% of incidents reporting the outage period).</FONT></P>
<P><FONT class=extract>While triggers initiate the failure, the sustaining effect mechanisms prevent the system from recovering. We observed a variety of different sustaining effects, such as load increase due to retries, expensive error handling, lock contention, or performance degradation due to leader election churn. By far, the most common sustaining effect is due to the retry policy, affecting more than 50% of the studied incidents &#8212; GGL2, GGL3, AWS1, AWS2, AWS3, AZR2, AZR4, IBM1, SPF1, SPF2, and CAS2 incidents are all sustained by retries.</FONT></P>
<P><FONT class=extract>Recovery from a metastable failure is challenging and often requires reducing load. Direct load shedding, such as throttling, dropping requests, or changing workload parameters, was used in over 55% of the cases. Some indirect mechanisms were also popular, such as reboots to clean the queues or operation backlogs, or policy changes. An example of such a policy change is the CAS1 incident where a feature was turned off to allow the servers to join the cluster.&nbsp;</FONT></P></DIV></DIV></DIV></DIV></DIV></DIV>
<DIV class="field-item odd" style="FONT-SIZE: 18px; FONT-FAMILY: Muli, sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(0,0,0); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial">
<DIV class="entity entity-paragraphs-item paragraphs-item-single-column-text view-mode-full view-mode-full--paragraphs_item view-mode-full--paragraphs_item--single_column_text" style="PADDING-BOTTOM: 20px; PADDING-TOP: 20px">
<DIV class=content>
<DIV class="field field-name-field-single-column-sub field-type-text field-label-hidden" style="FONT-SIZE: 40px; FONT-FAMILY: Klavika, sans-serif; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; PADDING-TOP: 20px; MARGIN: 0px; LINE-HEIGHT: 50px">
<DIV class=field-items>
<DIV class="field-item odd"><FONT class=extract>Metastability at Twitter</FONT></DIV></DIV></DIV>
<DIV class="field field-name-field-single-column-text field-type-text-long field-label-hidden">
<DIV class=field-items>
<DIV class="field-item odd">
<P><FONT class=extract>While publicly available incident reports provide enough high-level information to identify the metastable failures, they lack the depth and detail to understand the complex interactions between components in large systems. In this case study, we use insider information to describe in detail one specific metastable failure occurring at Twitter, a large internet company, due to garbage collection (GC). We identify a sustaining loop where high queueing increases memory pressure and mark-and-sweep processing during GC, causing job slowdowns and thus higher queueing. The effect is more pronounced at high system loads, where the system is more vulnerable to spikes. Specifically, we see that a peak load test during a busy day triggers the system to enter a metastable failure state where jobs start to fail, and it is only after sufficient load shedding that the success rate stops dropping.</FONT></P></DIV></DIV></DIV></DIV></DIV></DIV>
<DIV class="field-item even" style="FONT-SIZE: 18px; FONT-FAMILY: Muli, sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(0,0,0); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial">
<DIV class="entity entity-paragraphs-item paragraphs-item-article-image view-mode-full view-mode-full--paragraphs_item view-mode-full--paragraphs_item--article_image" style="BORDER-BOTTOM: rgb(20,53,147) 3px solid; PADDING-BOTTOM: 20px; PADDING-TOP: 20px">
<DIV class=content>
<DIV class="field field-name-field-article-image field-type-image field-label-hidden">
<DIV class=field-items>
<DIV class="field-item odd"><FONT class=extract><IMG style="MAX-WIDTH: 100%; BORDER-TOP: 0px; HEIGHT: auto; BORDER-RIGHT: 0px; BORDER-BOTTOM: 0px; BORDER-LEFT: 0px" alt="" src="https://www.usenix.org/sites/default/files/styles/article_embedded/public/case_study_timeseries_0.png?itok=kcT-i7YN" width=1440 height=285></FONT></DIV></DIV></DIV>
<DIV class="field field-name-field-article-image-caption field-type-text field-label-hidden" style="FONT-SIZE: 14px; FONT-WEIGHT: 600; COLOR: rgb(0,0,0); FONT-STYLE: normal">
<DIV class=field-items>
<DIV class="field-item odd"><FONT class=extract>Figure 1: Timeseries of a core service under a peak load test at Twitter. Metrics are normalized except for the success rate, which is scaled to show the trend dropping below the SLO.</FONT></DIV></DIV></DIV></DIV></DIV></DIV>
<DIV class="field-item odd" style="FONT-SIZE: 18px; FONT-FAMILY: Muli, sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(0,0,0); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial">
<DIV class="entity entity-paragraphs-item paragraphs-item-single-column-text view-mode-full view-mode-full--paragraphs_item view-mode-full--paragraphs_item--single_column_text" style="PADDING-BOTTOM: 20px; PADDING-TOP: 20px">
<DIV class=content>
<DIV class="field field-name-field-single-column-text field-type-text-long field-label-hidden">
<DIV class=field-items>
<DIV class="field-item odd">
<P><FONT class=extract>Peak load tests are one of the common types of tests used regularly in industry to expose potential problems and highlight the necessary steps to prevent incidents from happening. Figure 1 shows the timeseries of system metrics at a core service during a peak load test where we see a metastable failure. System load, GC duration, and queue length have been normalized to show only the trend, while success rate (SR) is scaled to demonstrate it dropping sharply below the SLO. All metrics are measured using the standard observability tools at Twitter, except for the (average) queue length, which is inferred using Little&#8217;s Law. By queue length, we mean the count of all the requests in the system. The service is a mature production service that's well-tuned and has been running for several years, under all the usual operating practices of frequent deployments, regular stress tests, and continuous monitoring and alerting.</FONT></P>
<P><FONT class=extract>In this incident, the peak load occurs around the 48-minute mark, and the SR starts to drop over time. Once the SR of this service drops below a critical threshold (i.e., the SLO), service operators are alerted to mitigate the problem. In this incident, the operators start load shedding at around the 83-minute mark and continue with more load shedding at 106 minutes. This had the desired effect of lowering the load, which also lowers GC and queue length. However, the SR still continues to drop and does not start to recover even when the load is back down to the level before the test. SR remains below the SLO until the service is restarted by operators. This is because even after the load shedding, a sustaining effect is still slowing down the system and causing it to remain in a metastable failure state.</FONT></P>
<P><FONT class=extract>Studying the internal system metrics from the test has shed some light on the problem. We find that the changes to GC duration are highly correlated with load fluctuations, as more load brings more memory allocation, thus requiring more GC. However, the GC is busier than normal during the peak load test. During the second load-shedding period between 106-118 minute marks, the load is more than 20% lower than that at the 40-minute offset, yet the GC is busier and SR is still dropping. At the same time, the queue length is also more than 50% higher, which implies that there are more jobs stuck in the system exacerbating GC. Thus, there is contention between arriving traffic and GC consuming resources, suggesting the metastability sustaining effect.</FONT></P>
<P><FONT class=extract>Specifically, the incident is caused by the sustaining effect in the following steps: (i) a load spike caused by peak load test introduces initial high queue length in the system; (ii) high queue length results in high GC behaviors; (iii) high GC behaviors slow job processing; (iv) more jobs get stuck in the system, which leads to higher queue length.</FONT></P>
<P><FONT class=extract>To demonstrate each of these steps, we further study data from this test as well as non-test data as a baseline. For (i), we can see the initial trigger in Figure 1 at around minute 48 where the load spike causes a sharp increase in queue length. For (ii), we see that queue length and GC duration are correlated over time in Figure 1. &nbsp;Additionally, we plot queue length vs. GC duration (see Figure 2(a)) under 3 normal days without the test to show these metrics generally exhibit a positive correlation. One might wonder whether the system load affects these metrics, and we find that it is correlated to both queue length and GC duration. But to eliminate the impact of system load, we also filtered the data to only include results with approximately the same system load, and we still see a correlation between queue length and GC duration, which suggests that high queue length leads to high GC. Correlation does not imply causation, so we validate and reproduce these effects in the next section via a simple example. For (iii), we plot GC duration vs. latency (see Figure 2(b)) during the same period without peak load testing and observe that the latency increases with GC duration. As GC consumes CPU cycles, there is CPU contention with job processing, which causes slowdowns to jobs as evidenced by the higher latencies. Naturally, job slowdowns will cause additional congestion and queueing, which completes the sustaining loop (iv).</FONT></P>
<P><FONT class=extract>Similar incidents recur many times, and engineers take different approaches to mitigate/fix this issue. For example, (i) observing unusually high latency spikes in backend services resulted in work to improve their performance to lower queue lengths, (ii) observing higher GC duration than normal resulted in adjusting the JVM memory configuration (e.g., increasing max heap size) to tweak GC behavior, and (iii) observing high resource utilization (e.g., CPU) resulted in adding more servers to lower per-server load. These approaches decrease system vulnerabilities and make it more robust to the trigger at the magnitude of the peak load test level.</FONT></P></DIV></DIV></DIV></DIV></DIV></DIV>
<DIV class="field-item even" style="FONT-SIZE: 18px; FONT-FAMILY: Muli, sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(0,0,0); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial">
<DIV class="entity entity-paragraphs-item paragraphs-item-article-image view-mode-full view-mode-full--paragraphs_item view-mode-full--paragraphs_item--article_image" style="BORDER-BOTTOM: rgb(20,53,147) 3px solid; PADDING-BOTTOM: 20px; PADDING-TOP: 20px">
<DIV class=content>
<DIV class="field field-name-field-article-image field-type-image field-label-hidden">
<DIV class=field-items>
<DIV class="field-item odd"><FONT class=extract><IMG style="MAX-WIDTH: 100%; BORDER-TOP: 0px; HEIGHT: auto; BORDER-RIGHT: 0px; BORDER-BOTTOM: 0px; BORDER-LEFT: 0px" alt="" src="https://www.usenix.org/sites/default/files/styles/article_embedded/public/case_study_scatter.png?itok=DiDkAK9p" width=1440 height=545></FONT></DIV></DIV></DIV>
<DIV class="field field-name-field-article-image-caption field-type-text field-label-hidden" style="FONT-SIZE: 14px; FONT-WEIGHT: 600; COLOR: rgb(0,0,0); FONT-STYLE: normal">
<DIV class=field-items>
<DIV class="field-item odd"><FONT class=extract>Figure 2: Correlation between metrics during 3 normal days at Twitter.</FONT></DIV></DIV></DIV></DIV></DIV></DIV>
<DIV class="field-item odd" style="FONT-SIZE: 18px; FONT-FAMILY: Muli, sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(0,0,0); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial">
<DIV class="entity entity-paragraphs-item paragraphs-item-single-column-text view-mode-full view-mode-full--paragraphs_item view-mode-full--paragraphs_item--single_column_text" style="PADDING-BOTTOM: 20px; PADDING-TOP: 20px">
<DIV class=content>
<DIV class="field field-name-field-single-column-sub field-type-text field-label-hidden" style="FONT-SIZE: 40px; FONT-FAMILY: Klavika, sans-serif; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; PADDING-TOP: 20px; MARGIN: 0px; LINE-HEIGHT: 50px">
<DIV class=field-items>
<DIV class="field-item odd"><FONT class=extract>Replicating Metastability</FONT></DIV></DIV></DIV>
<DIV class="field field-name-field-single-column-text field-type-text-long field-label-hidden">
<DIV class=field-items>
<DIV class="field-item odd">
<P><FONT class=extract>In this section, we develop a small-scale reproduction of the GC metastable failure seen in the Twitter case study. This allows us to perform controlled experiments to validate the sustaining effect and study the factors that affect vulnerability. Our code is open-sourced<SPAN>&nbsp;</SPAN></FONT><A title=GC_Metastability style="TEXT-DECORATION: none; COLOR: rgb(3,57,216); BACKGROUND-COLOR: transparent" href="https://github.com/lexiangh/Metastability/tree/main/GC_Metastability" rel=nofollow><FONT class=extract>here</FONT></A><FONT class=extract>. We confirm that GC can cause metastability and that the vulnerability increases with load. Since the sustaining effect is due to a high queue length causing memory pressure and GC slowdowns, we find that the memory size also impacts the degree of vulnerability.</FONT></P>
<H5 style="FONT-SIZE: 24px; FONT-FAMILY: Muli, sans-serif; TEXT-TRANSFORM: none; FONT-WEIGHT: 600; PADDING-TOP: 20px; MARGIN: 0px; LINE-HEIGHT: 30px"><FONT class=extract>Experiment Setup</FONT></H5>
<P><FONT class=extract>Our reproduction is a multi-threaded java program compiled via JDK 8 under default GC settings except we experiment with MaxHeapSize. Each thread processes a job consisting of many memory allocations. Each job allocates a 0.5MB array of arrays and then proceeds to allocate each row in this 2D array, adding an additional 0.5MB of data. Once a job completes, the allocated memory is unreferenced and will eventually be garbage collected. The main thread launches jobs following a Poisson process with a configured request rate measured in requests per second (RPS). We launch the java program in a docker container configured with 1GB of memory running on an AWS EC2 m5.large instance.</FONT></P>
<H5 style="FONT-SIZE: 24px; FONT-FAMILY: Muli, sans-serif; TEXT-TRANSFORM: none; FONT-WEIGHT: 600; PADDING-TOP: 20px; MARGIN: 0px; LINE-HEIGHT: 30px"><FONT class=extract>Inducing Metastable Failures</FONT></H5>
<P><FONT class=extract>To illustrate the metastability, we vary RPS over time and plot the relevant metrics in Figure 3. The initial RPS increase causes queue length and the GC duration to increase. Even as RPS is reduced over time, the sustaining effect causes the queue length and GC duration to remain high.</FONT></P></DIV></DIV></DIV></DIV></DIV></DIV>
<DIV class="field-item even" style="FONT-SIZE: 18px; FONT-FAMILY: Muli, sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(0,0,0); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial">
<DIV class="entity entity-paragraphs-item paragraphs-item-article-image view-mode-full view-mode-full--paragraphs_item view-mode-full--paragraphs_item--article_image" style="BORDER-BOTTOM: rgb(20,53,147) 3px solid; PADDING-BOTTOM: 20px; PADDING-TOP: 20px">
<DIV class=content>
<DIV class="field field-name-field-article-image field-type-image field-label-hidden">
<DIV class=field-items>
<DIV class="field-item odd"><FONT class=extract><IMG style="MAX-WIDTH: 100%; BORDER-TOP: 0px; HEIGHT: auto; BORDER-RIGHT: 0px; BORDER-BOTTOM: 0px; BORDER-LEFT: 0px" alt="" src="https://www.usenix.org/sites/default/files/styles/article_embedded/public/screen_shot_2022-06-19_at_23.33.32.png?itok=mHhKQ8Pc" width=1346 height=524></FONT></DIV></DIV></DIV>
<DIV class="field field-name-field-article-image-caption field-type-text field-label-hidden" style="FONT-SIZE: 14px; FONT-WEIGHT: 600; COLOR: rgb(0,0,0); FONT-STYLE: normal">
<DIV class=field-items>
<DIV class="field-item odd"><FONT class=extract>Figure 3: Timeseries of GC metastability.</FONT></DIV></DIV></DIV></DIV></DIV></DIV>
<DIV class="field-item odd" style="FONT-SIZE: 18px; FONT-FAMILY: Muli, sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(0,0,0); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial">
<DIV class="entity entity-paragraphs-item paragraphs-item-single-column-text view-mode-full view-mode-full--paragraphs_item view-mode-full--paragraphs_item--single_column_text" style="PADDING-BOTTOM: 20px; PADDING-TOP: 20px">
<DIV class=content>
<DIV class="field field-name-field-single-column-text field-type-text-long field-label-hidden">
<DIV class=field-items>
<DIV class="field-item odd">
<P><FONT class=extract>To gain a deeper understanding of the sustaining effect that causes the metastability, we extract detailed metrics from GC logs. Figure 4 shows that queue length, which we directly measure from arrival/completion timestamps, is correlated with GC duration. This is because there are more active objects to process during a GC cycle when there's a high queue length, and there is higher memory pressure as well. The figure shows a scatterplot of the normal behavior, though we see a similar correlation during metastable failures as well.</FONT></P>
<P><FONT class=extract>Figure 4 also shows that GC causes the application to pause, which slows down the jobs. Here, we configure the JVM to print a more detailed metric (PrintGCApplicationStoppedTime) to indicate how the JVM impacts the job's running time. We find that GC activity is causing the application to pause and slow down. As a result, the application isn't able to process jobs as efficiently, resulting in a higher queue length, thus completing the feedback cycle.</FONT></P></DIV></DIV></DIV></DIV></DIV></DIV>
<DIV class="field-item even" style="FONT-SIZE: 18px; FONT-FAMILY: Muli, sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(0,0,0); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial">
<DIV class="entity entity-paragraphs-item paragraphs-item-article-image view-mode-full view-mode-full--paragraphs_item view-mode-full--paragraphs_item--article_image" style="BORDER-BOTTOM: rgb(20,53,147) 3px solid; PADDING-BOTTOM: 20px; PADDING-TOP: 20px">
<DIV class=content>
<DIV class="field field-name-field-article-image field-type-image field-label-hidden">
<DIV class=field-items>
<DIV class="field-item odd"><FONT class=extract><IMG style="MAX-WIDTH: 100%; BORDER-TOP: 0px; HEIGHT: auto; BORDER-RIGHT: 0px; BORDER-BOTTOM: 0px; BORDER-LEFT: 0px" alt="" src="https://www.usenix.org/sites/default/files/styles/article_embedded/public/screen_shot_2022-06-19_at_23.33.41.png?itok=EGKF0oQj" width=706 height=456></FONT></DIV></DIV></DIV>
<DIV class="field field-name-field-article-image-caption field-type-text field-label-hidden" style="FONT-SIZE: 14px; FONT-WEIGHT: 600; COLOR: rgb(0,0,0); FONT-STYLE: normal">
<DIV class=field-items>
<DIV class="field-item odd"><FONT class=extract>Figure 4: Correlation between queue length, GC, &amp; application stalls.</FONT></DIV></DIV></DIV></DIV></DIV></DIV>
<DIV class="field-item odd" style="FONT-SIZE: 18px; FONT-FAMILY: Muli, sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(0,0,0); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial">
<DIV class="entity entity-paragraphs-item paragraphs-item-single-column-text view-mode-full view-mode-full--paragraphs_item view-mode-full--paragraphs_item--single_column_text" style="PADDING-BOTTOM: 20px; PADDING-TOP: 20px">
<DIV class=content>
<DIV class="field field-name-field-single-column-text field-type-text-long field-label-hidden">
<DIV class=field-items>
<DIV class="field-item odd">
<P><FONT class=extract>We next study the factors that affect vulnerability by exposing the example to varying trigger sizes. In our example, we generate triggers by injecting 100% stalls in the program for varying trigger durations. During the trigger, requests still arrive, but are not launched and do not begin processing. Once the trigger completes, there is effectively a large burst of backlogged requests that creates a large spike in the queue length until the backlog is handled.</FONT></P>
<P><FONT class=extract>Figure 5 shows how the vulnerability varies as a function of RPS. At high RPS, even small delays would cause the system to fall into a metastable failure state, whereas at low RPS, the system can mostly recover unless there is a very large trigger duration. The figure also shows how the vulnerability changes with the JVM memory size. Striped areas show regions where the metastability depends on the higher or lower memory size. For example, the striped region between the max heap (i.e., JVM memory) sizes indicates it is a metastable failure region for the smaller size and a vulnerable or stable region for the larger memory size (depending on RPS). Larger memory sizes decrease the memory pressure, which lowers the effect of GC. Thus, the system is less vulnerable with more memory and can sustain higher trigger durations and higher RPS. Nevertheless, the system is still subject to metastable failures, so understanding the degree of vulnerability is important for managing the system.</FONT></P></DIV></DIV></DIV></DIV></DIV></DIV>
<DIV class="field-item even" style="FONT-SIZE: 18px; FONT-FAMILY: Muli, sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(0,0,0); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial">
<DIV class="entity entity-paragraphs-item paragraphs-item-article-image view-mode-full view-mode-full--paragraphs_item view-mode-full--paragraphs_item--article_image" style="BORDER-BOTTOM: rgb(20,53,147) 3px solid; PADDING-BOTTOM: 20px; PADDING-TOP: 20px">
<DIV class=content>
<DIV class="field field-name-field-article-image field-type-image field-label-hidden">
<DIV class=field-items>
<DIV class="field-item odd"><FONT class=extract><IMG style="MAX-WIDTH: 100%; BORDER-TOP: 0px; HEIGHT: auto; BORDER-RIGHT: 0px; BORDER-BOTTOM: 0px; BORDER-LEFT: 0px" alt="" src="https://www.usenix.org/sites/default/files/styles/article_embedded/public/screen_shot_2022-06-19_at_23.33.53.png?itok=gZW6NF5e" width=912 height=538></FONT></DIV></DIV></DIV>
<DIV class="field field-name-field-article-image-caption field-type-text field-label-hidden" style="FONT-SIZE: 14px; FONT-WEIGHT: 600; COLOR: rgb(0,0,0); FONT-STYLE: normal">
<DIV class=field-items>
<DIV class="field-item odd"><FONT class=extract>Figure 5: Degrees of vulnerabilities.</FONT></DIV></DIV></DIV></DIV></DIV></DIV>
<DIV class="field-item odd" style="FONT-SIZE: 18px; FONT-FAMILY: Muli, sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(0,0,0); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial">
<DIV class="entity entity-paragraphs-item paragraphs-item-single-column-text view-mode-full view-mode-full--paragraphs_item view-mode-full--paragraphs_item--single_column_text" style="PADDING-BOTTOM: 20px; PADDING-TOP: 20px">
<DIV class=content>
<DIV class="field field-name-field-single-column-sub field-type-text field-label-hidden" style="FONT-SIZE: 40px; FONT-FAMILY: Klavika, sans-serif; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; PADDING-TOP: 20px; MARGIN: 0px; LINE-HEIGHT: 50px">
<DIV class=field-items><BR class=Apple-interchange-newline></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV>