<H1 class="heading jumptargets" style="FONT-SIZE: 44px; FONT-FAMILY: Roboto; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(66,66,66); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; MARGIN: 1.23em 0px 36px; LETTER-SPACING: normal; LINE-HEIGHT: 54px; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial"><FONT class=extract>The Production Environment at Google, from the Viewpoint of an SRE</FONT></H1>
<P class="byline author" style="FONT-SIZE: 18px; FONT-FAMILY: Roboto; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: 500; COLOR: rgb(81,81,84); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; MARGIN: 0px 0px 30px; LETTER-SPACING: normal; LINE-HEIGHT: 30px; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial"><FONT class=extract>Written by JC van Winkel<BR>Edited by Betsy Beyer</FONT></P>
<P style="FONT-SIZE: 18px; FONT-FAMILY: Roboto; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(81,81,84); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; MARGIN: 0px 0px 20px; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial"><FONT class=extract>Google datacenters are very different from most conventional datacenters and small-scale server farms. These differences present both extra problems and opportunities. This chapter discusses the challenges and opportunities that characterize Google datacenters and introduces terminology that is used throughout the book.</FONT></P><SECTION id=hardware-xqsjhK style="FONT-SIZE: 18px; FONT-FAMILY: Roboto; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(81,81,84); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial" data-type="sect1">
<H1 class="heading jumptargets" style="FONT-SIZE: 44px; FONT-FAMILY: Roboto; FONT-WEIGHT: 400; COLOR: rgb(66,66,66); MARGIN: 1.23em 0px 36px; LINE-HEIGHT: 54px"><FONT class=extract>Hardware</FONT></H1>
<P style="MARGIN: 0px 0px 20px"><FONT class=extract>Most of Google&#8217;s compute resources are in Google-designed datacenters with proprietary power distribution, cooling, networking, and compute hardware (see<SPAN>&nbsp;</SPAN></FONT><A style="TEXT-DECORATION: none; COLOR: rgb(67,136,255)" href="https://sre.google/sre-book/bibliography#Bar13" data-type="xref"><FONT class=extract>[Bar13]</FONT></A><FONT class=extract>). Unlike "standard" colocation datacenters, the compute hardware in a Google-designed datacenter is the same across the board.<SUP style="FONT-SIZE: 11px; TEXT-DECORATION: none; COLOR: rgb(67,136,255); LINE-HEIGHT: 0"><A id=id-N1KFQTnFxhW-marker class=jumptarget style="TEXT-DECORATION: none; COLOR: rgb(67,136,255); OUTLINE-WIDTH: 0px; OUTLINE-STYLE: none; OUTLINE-COLOR: invert" href="https://sre.google/sre-book/production-environment/#id-N1KFQTnFxhW" data-type="noteref">9</A></SUP><SPAN>&nbsp;</SPAN>To eliminate the confusion between server hardware and server software, we use the following terminology throughout the book:</FONT></P>
<DL class=desc-list style="MARGIN-BOTTOM: 50px">
<DT id=machine class="subheaders jumptargets" style="FONT-SIZE: 32px; MARGIN-BOTTOM: 20px; FONT-FAMILY: Roboto; FONT-WEIGHT: 400; COLOR: rgb(66,66,66); LINE-HEIGHT: 44px"><FONT class=extract>Machine </FONT>
<DD style="MARGIN-BOTTOM: 20px"><FONT class=extract>A piece of hardware (or perhaps a VM) </FONT>
<DT id=server class="subheaders jumptargets" style="FONT-SIZE: 32px; MARGIN-BOTTOM: 20px; FONT-FAMILY: Roboto; FONT-WEIGHT: 400; COLOR: rgb(66,66,66); LINE-HEIGHT: 44px"><FONT class=extract>Server </FONT>
<DD style="MARGIN-BOTTOM: 20px"><FONT class=extract>A piece of software that implements a service</FONT></DD></DL>
<P style="MARGIN: 0px 0px 20px"><FONT class=extract>Machines can run any server, so we don&#8217;t dedicate specific machines to specific server programs. There&#8217;s no specific machine that runs our mail server, for example. Instead, resource allocation is handled by our cluster operating system,<SPAN>&nbsp;</SPAN><EM style="FONT-WEIGHT: bold; FONT-STYLE: normal">Borg</EM>.</FONT></P>
<P style="MARGIN: 0px 0px 20px"><FONT class=extract>We realize this use of the word<SPAN>&nbsp;</SPAN><EM style="FONT-WEIGHT: bold; FONT-STYLE: normal">server</EM><SPAN>&nbsp;</SPAN>is unusual. The common use of the word conflates &#8220;binary that accepts network connection&#8221; with<SPAN>&nbsp;</SPAN><EM style="FONT-WEIGHT: bold; FONT-STYLE: normal">machine</EM>, but differentiating between the two is important when talking about computing at Google. Once you get used to our usage of<SPAN>&nbsp;</SPAN><EM style="FONT-WEIGHT: bold; FONT-STYLE: normal">server</EM>, it becomes more apparent why it makes sense to use this specialized terminology, not just within Google but also in the rest of this book.</FONT></P>
<P style="MARGIN: 0px 0px 20px"><A style="TEXT-DECORATION: none; COLOR: rgb(67,136,255)" href="https://sre.google/sre-book/production-environment/#fig_production-environment_topology" data-type="xref"><FONT class=extract>Figure 2-1</FONT></A><FONT class=extract><SPAN>&nbsp;</SPAN>illustrates the topology of a Google datacenter:</FONT></P>
<UL style="PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 0px 0px 0px 55px; PADDING-RIGHT: 0px">
<LI style="PADDING-BOTTOM: 25px"><FONT class=extract>Tens of machines are placed in a<SPAN>&nbsp;</SPAN><EM style="FONT-WEIGHT: bold; FONT-STYLE: normal">rack</EM>. </FONT>
<LI style="PADDING-BOTTOM: 25px"><FONT class=extract>Racks stand in a<SPAN>&nbsp;</SPAN><EM style="FONT-WEIGHT: bold; FONT-STYLE: normal">row</EM>. </FONT>
<LI style="PADDING-BOTTOM: 25px"><FONT class=extract>One or more rows form a<SPAN>&nbsp;</SPAN><EM style="FONT-WEIGHT: bold; FONT-STYLE: normal">cluster</EM>. </FONT>
<LI style="PADDING-BOTTOM: 25px"><FONT class=extract>Usually a<SPAN>&nbsp;</SPAN><EM style="FONT-WEIGHT: bold; FONT-STYLE: normal">datacenter</EM><SPAN>&nbsp;</SPAN>building houses multiple clusters. </FONT>
<LI style="PADDING-BOTTOM: 25px"><FONT class=extract>Multiple datacenter buildings that are located close together form a<SPAN>&nbsp;</SPAN><EM style="FONT-WEIGHT: bold; FONT-STYLE: normal">campus</EM>.</FONT></LI></UL><FIGURE id=fig_production-environment_topology class="horizontal vertical jumptarget" style="FONT-WEIGHT: 700; OUTLINE-WIDTH: 0px; TEXT-ALIGN: center; PADDING-TOP: 50px; OUTLINE-STYLE: none; MARGIN: 20px auto; OUTLINE-COLOR: invert"><FONT class=extract><IMG style="MARGIN-BOTTOM: 20px; MAX-WIDTH: 820px; BORDER-TOP: 0px; BORDER-RIGHT: 0px; BORDER-BOTTOM: 0px; BORDER-LEFT: 0px; MAX-HEIGHT: 440px" alt="Example Google datacenter campus topology." src="https://lh3.googleusercontent.com/reety2gbKIv2DsOTZ_xlGO4NwoGNVMRJUchhm6Ov1PiOODJc5svag80YGi1W_-iIXpKjtR_5dU9PsvSoUnRCRMXeJzvbslEjwr6FUQ=s900"><FIGCAPTION><SPAN class=label>Figure 2-1.<SPAN>&nbsp;</SPAN></SPAN>Example Google datacenter campus topology</FIGCAPTION></FIGURE> </FONT>
<P style="MARGIN: 0px 0px 20px"><FONT class=extract>Machines within a given datacenter need to be able to talk with each other, so we created a very fast virtual switch with tens of thousands of ports. We accomplished this by connecting hundreds of Google-built switches in a Clos network fabric<SPAN>&nbsp;</SPAN></FONT><A style="TEXT-DECORATION: none; COLOR: rgb(67,136,255)" href="https://sre.google/sre-book/bibliography#Clos53" data-type="xref"><FONT class=extract>[Clos53]</FONT></A><FONT class=extract><SPAN>&nbsp;</SPAN>named<SPAN>&nbsp;</SPAN><EM style="FONT-WEIGHT: bold; FONT-STYLE: normal">Jupiter</EM><SPAN>&nbsp;</SPAN></FONT><A style="TEXT-DECORATION: none; COLOR: rgb(67,136,255)" href="https://sre.google/sre-book/bibliography#Sin15" data-type="xref"><FONT class=extract>[Sin15]</FONT></A><FONT class=extract>. In its largest configuration, Jupiter supports 1.3 Pbps bisection bandwidth among servers.</FONT></P>
<P style="MARGIN: 0px 0px 20px"><FONT class=extract>Datacenters are connected to each other with our globe-spanning backbone network<SPAN>&nbsp;</SPAN><EM style="FONT-WEIGHT: bold; FONT-STYLE: normal">B4</EM><SPAN>&nbsp;</SPAN></FONT><A style="TEXT-DECORATION: none; COLOR: rgb(67,136,255)" href="https://sre.google/sre-book/bibliography#Jai13" data-type="xref"><FONT class=extract>[Jai13]</FONT></A><FONT class=extract>. B4 is a software-defined networking architecture (and uses the OpenFlow open-standard communications protocol). It supplies massive bandwidth to a modest number of sites, and uses elastic bandwidth allocation to maximize average bandwidth<SPAN>&nbsp;</SPAN></FONT><A style="TEXT-DECORATION: none; COLOR: rgb(67,136,255)" href="https://sre.google/sre-book/bibliography#Kum15" data-type="xref"><FONT class=extract>[Kum15]</FONT></A><FONT class=extract>.</FONT></P></SECTION><SECTION id=system-software-that-organizes-the-hardware-PasaTg style="FONT-SIZE: 18px; FONT-FAMILY: Roboto; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(81,81,84); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial" data-type="sect1">
<H1 class="heading jumptargets" style="FONT-SIZE: 44px; FONT-FAMILY: Roboto; FONT-WEIGHT: 400; COLOR: rgb(66,66,66); MARGIN: 1.23em 0px 36px; LINE-HEIGHT: 54px"><FONT class=extract>System Software That "Organizes" the Hardware</FONT></H1>
<P style="MARGIN: 0px 0px 20px"><FONT class=extract>Our hardware must be controlled and administered by software that can handle massive scale. Hardware failures are one notable problem that we manage with software. Given the large number of hardware components in a cluster, hardware failures occur quite frequently. In a single cluster in a typical year, thousands of machines fail and thousands of hard disks break; when multiplied by the number of clusters we operate globally, these numbers become somewhat breathtaking. Therefore, we want to abstract such problems away from users, and the teams running our services similarly don&#8217;t want to be bothered by hardware failures. Each datacenter campus has teams dedicated to maintaining the hardware and datacenter infrastructure.</FONT></P><SECTION id=managing-machines-XQsKIBTq data-type="sect2">
<H2 class="subheaders jumptargets" style="FONT-SIZE: 32px; FONT-FAMILY: Roboto; FONT-WEIGHT: 400; COLOR: rgb(66,66,66); MARGIN: 1.23em 0px 20px; LINE-HEIGHT: 44px"><FONT class=extract>Managing Machines</FONT></H2>
<P style="MARGIN: 0px 0px 20px"><FONT class=extract><EM style="FONT-WEIGHT: bold; FONT-STYLE: normal">Borg</EM>, illustrated in<SPAN>&nbsp;</SPAN></FONT><A style="TEXT-DECORATION: none; COLOR: rgb(67,136,255)" href="https://sre.google/sre-book/production-environment/#fig_production-environment_borg" data-type="xref"><FONT class=extract>Figure 2-2</FONT></A><FONT class=extract>, is a distributed cluster operating system<SPAN>&nbsp;</SPAN></FONT><A style="TEXT-DECORATION: none; COLOR: rgb(67,136,255)" href="https://sre.google/sre-book/bibliography#Ver15" data-type="xref"><FONT class=extract>[Ver15]</FONT></A><FONT class=extract>, similar to Apache Mesos.<SUP style="FONT-SIZE: 11px; TEXT-DECORATION: none; COLOR: rgb(67,136,255); LINE-HEIGHT: 0"><A id=id-BWDuecjF7IPTj-marker class=jumptarget style="TEXT-DECORATION: none; COLOR: rgb(67,136,255); OUTLINE-WIDTH: 0px; OUTLINE-STYLE: none; OUTLINE-COLOR: invert" href="https://sre.google/sre-book/production-environment/#id-BWDuecjF7IPTj" data-type="noteref">10</A></SUP><SPAN>&nbsp;</SPAN>Borg manages its jobs at the cluster level.</FONT></P><FIGURE id=fig_production-environment_borg class="horizontal vertical jumptarget" style="FONT-WEIGHT: 700; OUTLINE-WIDTH: 0px; TEXT-ALIGN: center; PADDING-TOP: 50px; OUTLINE-STYLE: none; MARGIN: 20px auto; OUTLINE-COLOR: invert"><FONT class=extract><IMG style="MARGIN-BOTTOM: 20px; MAX-WIDTH: 820px; BORDER-TOP: 0px; BORDER-RIGHT: 0px; BORDER-BOTTOM: 0px; BORDER-LEFT: 0px; MAX-HEIGHT: 440px" alt="High-level Borg cluster architecture." src="https://lh3.googleusercontent.com/u-b_doOMDhXmXkA52nLOu6OEn9sf_hXxku7Hp8GQe6xj_hO5RZ6OKuSbTa4MUE-71jTxGSJ3N2gjt9juDJ5hXsQCeIxFu37BmjblZw=s900"><FIGCAPTION><SPAN class=label>Figure 2-2.<SPAN>&nbsp;</SPAN></SPAN>High-level Borg cluster architecture</FIGCAPTION></FIGURE> </FONT>
<P style="MARGIN: 0px 0px 20px"><FONT class=extract>Borg is responsible for running users&#8217;<SPAN>&nbsp;</SPAN><EM style="FONT-WEIGHT: bold; FONT-STYLE: normal">jobs</EM>, which can either be indefinitely running servers or batch processes like a MapReduce<SPAN>&nbsp;</SPAN></FONT><A style="TEXT-DECORATION: none; COLOR: rgb(67,136,255)" href="https://sre.google/sre-book/bibliography#Dea04" data-type="xref"><FONT class=extract>[Dea04]</FONT></A><FONT class=extract>. Jobs can consist of more than one (and sometimes thousands) of identical<SPAN>&nbsp;</SPAN><EM style="FONT-WEIGHT: bold; FONT-STYLE: normal">tasks</EM>, both for reasons of reliability and because a single process can&#8217;t usually handle all cluster traffic. When Borg starts a job, it finds machines for the tasks and tells the machines to start the server program. Borg then continually monitors these tasks. If a task malfunctions, it is killed and restarted, possibly on a different machine.</FONT></P>
<P style="MARGIN: 0px 0px 20px"><FONT class=extract>Because tasks are fluidly allocated over machines, we can&#8217;t simply rely on IP addresses and port numbers to refer to the tasks. We solve this problem with an extra level of indirection: when starting a job, Borg allocates a name and index number to each task using the<SPAN>&nbsp;</SPAN><EM style="FONT-WEIGHT: bold; FONT-STYLE: normal">Borg Naming Service</EM><SPAN>&nbsp;</SPAN>(BNS). Rather than using the IP address and port number, other processes connect to Borg tasks via the BNS name, which is translated to an IP address and port number by BNS. For example, the BNS path might be a string such as<SPAN>&nbsp;</SPAN><CODE style='COLOR: rgb(0,102,0); FONT: 18px/28px "Roboto mono"'>/bns/&lt;<EM style="FONT-WEIGHT: bold; FONT-STYLE: normal">cluster</EM>&gt;/&lt;<EM style="FONT-WEIGHT: bold; FONT-STYLE: normal">user</EM>&gt;/&lt;<EM style="FONT-WEIGHT: bold; FONT-STYLE: normal">job name</EM>&gt;/&lt;<EM style="FONT-WEIGHT: bold; FONT-STYLE: normal">task number</EM>&gt;</CODE>, which would resolve to<SPAN>&nbsp;</SPAN><CODE style='COLOR: rgb(0,102,0); FONT: 18px/28px "Roboto mono"'>&lt;<EM style="FONT-WEIGHT: bold; FONT-STYLE: normal">IP address</EM>&gt;:&lt;<EM style="FONT-WEIGHT: bold; FONT-STYLE: normal">port</EM>&gt;</CODE>.</FONT></P>
<P style="MARGIN: 0px 0px 20px"><FONT class=extract>Borg is also responsible for the allocation of resources to jobs. Every job needs to specify its required resources (e.g., 3 CPU cores, 2 GiB of RAM). Using the list of requirements for all jobs, Borg can binpack the tasks over the machines in an optimal way that also accounts for failure domains (for example: Borg won&#8217;t run all of a job&#8217;s tasks on the same rack, as doing so means that the top of rack switch is a single point of failure for that job).</FONT></P>
<P style="MARGIN: 0px 0px 20px"><FONT class=extract>If a task tries to use more resources than it requested, Borg kills the task and restarts it (as a slowly crashlooping task is usually preferable to a task that hasn&#8217;t been restarted at all).</FONT></P></SECTION><SECTION id=storage-jWsvt4TM data-type="sect2">
<H2 class="subheaders jumptargets" style="FONT-SIZE: 32px; FONT-FAMILY: Roboto; FONT-WEIGHT: 400; COLOR: rgb(66,66,66); MARGIN: 1.23em 0px 20px; LINE-HEIGHT: 44px"><FONT class=extract>Storage</FONT></H2>
<P style="MARGIN: 0px 0px 20px"><FONT class=extract>Tasks can use the local disk on machines as a scratch pad, but we have several cluster storage options for permanent storage (and even scratch space will eventually move to the cluster storage model). These are comparable to Lustre and the Hadoop Distributed File System (HDFS), which are both open source cluster filesystems.</FONT></P>
<P style="MARGIN: 0px 0px 20px"><FONT class=extract>The storage layer is responsible for offering users easy and reliable access to the storage available for a cluster. As shown in<SPAN>&nbsp;</SPAN></FONT><A style="TEXT-DECORATION: none; COLOR: rgb(67,136,255)" href="https://sre.google/sre-book/production-environment/#fig_production-environment_storage-stack" data-type="xref"><FONT class=extract>Figure 2-3</FONT></A><FONT class=extract>, storage has many layers:</FONT></P>
<OL style="PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 10px 10px 10px 30px; PADDING-RIGHT: 0px">
<LI><FONT class=extract>The lowest layer is called<SPAN>&nbsp;</SPAN><EM style="FONT-WEIGHT: bold; FONT-STYLE: normal">D</EM><SPAN>&nbsp;</SPAN>(for<SPAN>&nbsp;</SPAN><EM style="FONT-WEIGHT: bold; FONT-STYLE: normal">disk</EM>, although D uses both spinning disks and flash storage). D is a fileserver running on almost all machines in a cluster. However, users who want to access their data don&#8217;t want to have to remember which machine is storing their data, which is where the next layer comes into play. </FONT>
<LI><FONT class=extract>A layer on top of D called<SPAN>&nbsp;</SPAN><EM style="FONT-WEIGHT: bold; FONT-STYLE: normal">Colossus</EM><SPAN>&nbsp;</SPAN>creates a cluster-wide filesystem that offers usual filesystem semantics, as well as replication and encryption. Colossus is the successor to GFS, the Google File System<SPAN>&nbsp;</SPAN></FONT><A style="TEXT-DECORATION: none; COLOR: rgb(67,136,255)" href="https://sre.google/sre-book/bibliography#Ghe03" data-type="xref"><FONT class=extract>[Ghe03]</FONT></A><FONT class=extract>. </FONT>
<LI>
<P style="MARGIN: 0px"><FONT class=extract>There are several database-like services built on top of Colossus:</FONT></P>
<OL style="PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 0px 10px 0px 30px; PADDING-RIGHT: 0px">
<LI><FONT class=extract>Bigtable<SPAN>&nbsp;</SPAN></FONT><A style="TEXT-DECORATION: none; COLOR: rgb(67,136,255)" href="https://sre.google/sre-book/bibliography#Cha06" data-type="xref"><FONT class=extract>[Cha06]</FONT></A><FONT class=extract><SPAN>&nbsp;</SPAN>is a NoSQL database system that can handle databases that are petabytes in size. A Bigtable is a sparse, distributed, persistent multidimensional sorted map that is indexed by row key, column key, and timestamp; each value in the map is an uninterpreted array of bytes. Bigtable supports eventually consistent, cross-datacenter replication. </FONT>
<LI><FONT class=extract>Spanner<SPAN>&nbsp;</SPAN></FONT><A style="TEXT-DECORATION: none; COLOR: rgb(67,136,255)" href="https://sre.google/sre-book/bibliography#Cor12" data-type="xref"><FONT class=extract>[Cor12]</FONT></A><FONT class=extract><SPAN>&nbsp;</SPAN>offers an SQL-like interface for users that require real consistency across the world. </FONT>
<LI><FONT class=extract>Several other database systems, such as<SPAN>&nbsp;</SPAN><EM style="FONT-WEIGHT: bold; FONT-STYLE: normal">Blobstore</EM>, are available. Each of these options comes with its own set of trade-offs (see<SPAN>&nbsp;</SPAN></FONT><A style="TEXT-DECORATION: none; COLOR: rgb(67,136,255)" href="https://sre.google/sre-book/data-integrity/" data-type="xref"><FONT class=extract>Data Integrity: What You Read Is What You Wrote</FONT></A><FONT class=extract>).</FONT></LI></OL></LI></OL><FIGURE id=fig_production-environment_storage-stack class="horizontal vertical jumptarget" style="FONT-WEIGHT: 700; OUTLINE-WIDTH: 0px; TEXT-ALIGN: center; PADDING-TOP: 50px; OUTLINE-STYLE: none; MARGIN: 20px auto; OUTLINE-COLOR: invert"><FONT class=extract><IMG style="MARGIN-BOTTOM: 20px; MAX-WIDTH: 820px; BORDER-TOP: 0px; BORDER-RIGHT: 0px; BORDER-BOTTOM: 0px; BORDER-LEFT: 0px; MAX-HEIGHT: 440px" alt="Portions of the Google storage stack." src="https://lh3.googleusercontent.com/vRFHzV6MGcmYL3af2KVAHkj4ODl5EcNAAlKV28S0cpf1dBvQii8SV_dguh9-8SqJFbFFhvI_wqlld1NsK2U5N3CYR6s8FRhRE8c=s901"><FIGCAPTION><SPAN class=label>Figure 2-3.<SPAN>&nbsp;</SPAN></SPAN>Portions of the Google storage stack</FIGCAPTION></FIGURE></SECTION><SECTION id=networking-2ksZhrT8 data-type="sect2"> </FONT>
<H2 class="subheaders jumptargets" style="FONT-SIZE: 32px; FONT-FAMILY: Roboto; FONT-WEIGHT: 400; COLOR: rgb(66,66,66); MARGIN: 1.23em 0px 20px; LINE-HEIGHT: 44px"><FONT class=extract>Networking</FONT></H2>
<P style="MARGIN: 0px 0px 20px"><FONT class=extract>Google&#8217;s network hardware is controlled in several ways. As discussed earlier, we use an OpenFlow-based software-defined network. Instead of using "smart" routing hardware, we rely on less expensive "dumb" switching components in combination with a central (duplicated) controller that precomputes best paths across the network. Therefore, we&#8217;re able to move compute-expensive routing decisions away from the routers and use simple switching hardware.</FONT></P>
<P style="MARGIN: 0px 0px 20px"><FONT class=extract>Network bandwidth needs to be allocated wisely. Just as Borg limits the compute resources that a task can use, the Bandwidth Enforcer (BwE) manages the available bandwidth to maximize the average available bandwidth. Optimizing bandwidth isn&#8217;t just about cost: centralized traffic engineering has been shown to solve a number of problems that are traditionally extremely difficult to solve through a combination of distributed routing and traffic engineering<SPAN>&nbsp;</SPAN></FONT><A style="TEXT-DECORATION: none; COLOR: rgb(67,136,255)" href="https://sre.google/sre-book/bibliography#Kum15" data-type="xref"><FONT class=extract>[Kum15]</FONT></A><FONT class=extract>.</FONT></P>
<P style="MARGIN: 0px 0px 20px"><FONT class=extract>Some services have jobs running in multiple clusters, which are distributed across the world. In order to minimize latency for globally distributed services, we want to direct users to the closest datacenter with available capacity. Our<SPAN>&nbsp;</SPAN><EM style="FONT-WEIGHT: bold; FONT-STYLE: normal">Global Software Load Balancer</EM><SPAN>&nbsp;</SPAN>(GSLB) performs load balancing on three levels:</FONT></P>
<UL style="PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 0px 0px 0px 55px; PADDING-RIGHT: 0px">
<LI style="PADDING-BOTTOM: 25px"><FONT class=extract>Geographic load balancing for DNS requests (for example, to<SPAN>&nbsp;</SPAN><EM style="FONT-WEIGHT: bold; FONT-STYLE: normal">www.google.com</EM>), described in<SPAN>&nbsp;</SPAN></FONT><A style="TEXT-DECORATION: none; COLOR: rgb(67,136,255)" href="https://sre.google/sre-book/load-balancing-frontend/" data-type="xref"><FONT class=extract>Load Balancing at the Frontend</FONT></A><FONT class=extract> </FONT>
<LI style="PADDING-BOTTOM: 25px"><FONT class=extract>Load balancing at a user service level (for example, YouTube or Google Maps) </FONT>
<LI style="PADDING-BOTTOM: 25px"><FONT class=extract>Load balancing at the Remote Procedure Call (RPC) level, described in<SPAN>&nbsp;</SPAN></FONT><A style="TEXT-DECORATION: none; COLOR: rgb(67,136,255)" href="https://sre.google/sre-book/load-balancing-datacenter/" data-type="xref"><FONT class=extract>Load Balancing in the Datacenter</FONT></A></LI></UL>
<P style="MARGIN: 0px 0px 20px"><FONT class=extract>Service owners specify a symbolic name for a service, a list of BNS addresses of servers, and the capacity available at each of the locations (typically measured in queries per second). GSLB then directs traffic to the BNS addresses.</FONT></P></SECTION></SECTION><SECTION id=other-system-software-OKsvc7 style="FONT-SIZE: 18px; FONT-FAMILY: Roboto; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(81,81,84); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial" data-type="sect1">
<H1 class="heading jumptargets" style="FONT-SIZE: 44px; FONT-FAMILY: Roboto; FONT-WEIGHT: 400; COLOR: rgb(66,66,66); MARGIN: 1.23em 0px 36px; LINE-HEIGHT: 54px"><FONT class=extract>Other System Software</FONT></H1>
<P style="MARGIN: 0px 0px 20px"><FONT class=extract>Several other components in a datacenter are also important.</FONT></P><SECTION id=lock-service-jWsjIlcM data-type="sect2">
<H2 class="subheaders jumptargets" style="FONT-SIZE: 32px; FONT-FAMILY: Roboto; FONT-WEIGHT: 400; COLOR: rgb(66,66,66); MARGIN: 1.23em 0px 20px; LINE-HEIGHT: 44px"><FONT class=extract>Lock Service</FONT></H2>
<P style="MARGIN: 0px 0px 20px"><FONT class=extract>The<SPAN>&nbsp;</SPAN><EM style="FONT-WEIGHT: bold; FONT-STYLE: normal">Chubby</EM><SPAN>&nbsp;</SPAN></FONT><A style="TEXT-DECORATION: none; COLOR: rgb(67,136,255)" href="https://sre.google/sre-book/bibliography#Bur06" data-type="xref"><FONT class=extract>[Bur06]</FONT></A><FONT class=extract><SPAN>&nbsp;</SPAN>lock service provides a filesystem-like API for maintaining locks. Chubby handles these locks across datacenter locations. It uses the Paxos protocol for asynchronous Consensus (see<SPAN>&nbsp;</SPAN></FONT><A style="TEXT-DECORATION: none; COLOR: rgb(67,136,255)" href="https://sre.google/sre-book/managing-critical-state/" data-type="xref"><FONT class=extract>Managing Critical State: Distributed Consensus for Reliability</FONT></A><FONT class=extract>).</FONT></P>
<P style="MARGIN: 0px 0px 20px"><FONT class=extract>Chubby also plays an important role in master election. When a service has five replicas of a job running for reliability purposes but only one replica may perform actual work, Chubby is used to select<SPAN>&nbsp;</SPAN><EM style="FONT-WEIGHT: bold; FONT-STYLE: normal">which</EM><SPAN>&nbsp;</SPAN>replica may proceed.</FONT></P>
<P style="MARGIN: 0px 0px 20px"><FONT class=extract>Data that must be consistent is well suited to storage in Chubby. For this reason, BNS uses Chubby to store mapping between BNS paths and<SPAN>&nbsp;</SPAN><CODE style='COLOR: rgb(0,102,0); FONT: 18px/28px "Roboto mono"'>IP address:port</CODE><SPAN>&nbsp;</SPAN>pairs.</FONT></P></SECTION><SECTION id=monitoring-and-alerting-2ksLtBc8 data-type="sect2">
<H2 class="subheaders jumptargets" style="FONT-SIZE: 32px; FONT-FAMILY: Roboto; FONT-WEIGHT: 400; COLOR: rgb(66,66,66); MARGIN: 1.23em 0px 20px; LINE-HEIGHT: 44px"><FONT class=extract>Monitoring and Alerting</FONT></H2>
<P style="MARGIN: 0px 0px 20px"><FONT class=extract>We want to make sure that all services are running as required. Therefore, we run many instances of our<SPAN>&nbsp;</SPAN><EM style="FONT-WEIGHT: bold; FONT-STYLE: normal">Borgmon</EM><SPAN>&nbsp;</SPAN>monitoring program (see<SPAN>&nbsp;</SPAN></FONT><A style="TEXT-DECORATION: none; COLOR: rgb(67,136,255)" href="https://sre.google/sre-book/practical-alerting/" data-type="xref"><FONT class=extract>Practical Alerting from Time-Series Data</FONT></A><FONT class=extract>). Borgmon regularly "scrapes" metrics from monitored servers. These metrics can be used instantaneously for alerting and also stored for use in historic overviews (e.g., graphs). We can use monitoring in several ways:</FONT></P>
<UL class=pagebreak-before style="PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 0px 0px 0px 55px; PADDING-RIGHT: 0px">
<LI style="PADDING-BOTTOM: 25px"><FONT class=extract>Set up alerting for acute problems. </FONT>
<LI style="PADDING-BOTTOM: 25px"><FONT class=extract>Compare behavior: did a software update make the server faster? </FONT>
<LI style="PADDING-BOTTOM: 25px"><FONT class=extract>Examine how resource consumption behavior evolves over time, which is essential for capacity planning.</FONT></LI></UL></SECTION></SECTION><SECTION id=our-software-infrastructure-XQs4iw style="FONT-SIZE: 18px; FONT-FAMILY: Roboto; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(81,81,84); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial" data-type="sect1">
<H1 class="heading jumptargets" style="FONT-SIZE: 44px; FONT-FAMILY: Roboto; FONT-WEIGHT: 400; COLOR: rgb(66,66,66); MARGIN: 1.23em 0px 36px; LINE-HEIGHT: 54px"><FONT class=extract>Our Software Infrastructure</FONT></H1>
<P style="MARGIN: 0px 0px 20px"><FONT class=extract>Our software architecture is designed to make the most efficient use of our hardware infrastructure. Our code is heavily multithreaded, so one task can easily use many cores. To facilitate dashboards, monitoring, and debugging, every server has an HTTP server that provides diagnostics and statistics for a given task.</FONT></P>
<P style="MARGIN: 0px 0px 20px"><FONT class=extract>All of Google&#8217;s services communicate using a Remote Procedure Call (RPC) infrastructure named<SPAN>&nbsp;</SPAN><EM style="FONT-WEIGHT: bold; FONT-STYLE: normal">Stubby</EM>; an open source version, gRPC, is available.<SUP style="FONT-SIZE: 11px; TEXT-DECORATION: none; COLOR: rgb(67,136,255); LINE-HEIGHT: 0"><A id=id-mX2u9tnIwix-marker class=jumptarget style="TEXT-DECORATION: none; COLOR: rgb(67,136,255); OUTLINE-WIDTH: 0px; OUTLINE-STYLE: none; OUTLINE-COLOR: invert" href="https://sre.google/sre-book/production-environment/#id-mX2u9tnIwix" data-type="noteref">11</A></SUP><SPAN>&nbsp;</SPAN>Often, an RPC call is made even when a call to a subroutine in the local program needs to be performed. This makes it easier to refactor the call into a different server if more modularity is needed, or when a server&#8217;s codebase grows. GSLB can load balance RPCs in the same way it load balances externally visible services.</FONT></P>
<P style="MARGIN: 0px 0px 20px"><FONT class=extract>A server receives RPC requests from its<SPAN>&nbsp;</SPAN><EM style="FONT-WEIGHT: bold; FONT-STYLE: normal">frontend</EM><SPAN>&nbsp;</SPAN>and sends RPCs to its<SPAN>&nbsp;</SPAN><EM style="FONT-WEIGHT: bold; FONT-STYLE: normal">backend</EM>. In traditional terms, the frontend is called the client and the backend is called the server.</FONT></P>
<P style="MARGIN: 0px 0px 20px"><FONT class=extract>Data is transferred to and from an RPC using<SPAN>&nbsp;</SPAN><EM style="FONT-WEIGHT: bold; FONT-STYLE: normal">protocol buffers</EM>,<SUP style="FONT-SIZE: 11px; TEXT-DECORATION: none; COLOR: rgb(67,136,255); LINE-HEIGHT: 0"><A id=id-BWDu0tehOiB-marker class=jumptarget style="TEXT-DECORATION: none; COLOR: rgb(67,136,255); OUTLINE-WIDTH: 0px; OUTLINE-STYLE: none; OUTLINE-COLOR: invert" href="https://sre.google/sre-book/production-environment/#id-BWDu0tehOiB" data-type="noteref">12</A></SUP><SPAN>&nbsp;</SPAN>often abbreviated to "protobufs," which are similar to Apache&#8217;s Thrift. Protocol buffers have many advantages over XML for serializing structured data: they are simpler to use, 3 to 10 times smaller, 20 to 100 times faster, and less ambiguous.</FONT></P></SECTION><SECTION id=our-development-environment-jWsMun style="FONT-SIZE: 18px; FONT-FAMILY: Roboto; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(81,81,84); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial" data-type="sect1">
<H1 class="heading jumptargets" style="FONT-SIZE: 44px; FONT-FAMILY: Roboto; FONT-WEIGHT: 400; COLOR: rgb(66,66,66); MARGIN: 1.23em 0px 36px; LINE-HEIGHT: 54px"><FONT class=extract>Our Development Environment</FONT></H1>
<P style="MARGIN: 0px 0px 20px"><FONT class=extract>Development velocity is very important to Google, so we&#8217;ve built a complete development environment to make use of our infrastructure<SPAN>&nbsp;</SPAN></FONT><A style="TEXT-DECORATION: none; COLOR: rgb(67,136,255)" href="https://sre.google/sre-book/bibliography#Mor12b" data-type="xref"><FONT class=extract>[Mor12b]</FONT></A><FONT class=extract>.</FONT></P>
<P style="MARGIN: 0px 0px 20px"><FONT class=extract>Apart from a few groups that have their own open source repositories (e.g., Android and Chrome), Google Software Engineers work from a single shared repository<SPAN>&nbsp;</SPAN></FONT><A style="TEXT-DECORATION: none; COLOR: rgb(67,136,255)" href="https://sre.google/sre-book/bibliography#Pot16" data-type="xref"><FONT class=extract>[Pot16]</FONT></A><FONT class=extract>. This has a few important practical implications for our workflows:</FONT></P>
<UL style="PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 0px 0px 0px 55px; PADDING-RIGHT: 0px">
<LI style="PADDING-BOTTOM: 25px"><FONT class=extract>If engineers encounter a problem in a component outside of their project, they can fix the problem, send the proposed changes ("changelist," or<SPAN>&nbsp;</SPAN><EM style="FONT-WEIGHT: bold; FONT-STYLE: normal">CL</EM>) to the owner for review, and submit the CL to the mainline. </FONT>
<LI style="PADDING-BOTTOM: 25px"><FONT class=extract>Changes to source code in an engineer&#8217;s own project require a review. All software is reviewed before being submitted.</FONT></LI></UL>
<P style="MARGIN: 0px 0px 20px"><FONT class=extract>When software is built, the build request is sent to build servers in a datacenter. Even large builds are executed quickly, as many build servers can compile in parallel. This infrastructure is also used for continuous testing. Each time a CL is submitted, tests run on all software that may depend on that CL, either directly or indirectly. If the framework determines that the change likely broke other parts in the system, it notifies the owner of the submitted change. Some projects use a push-on-green system, where a new version is automatically pushed to production after passing tests.</FONT></P></SECTION><SECTION id=xref_production-environment_shakespeare style="FONT-SIZE: 18px; FONT-FAMILY: Roboto; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(81,81,84); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial" data-type="sect1">
<H1 class="heading jumptargets" style="FONT-SIZE: 44px; FONT-FAMILY: Roboto; FONT-WEIGHT: 400; COLOR: rgb(66,66,66); MARGIN: 1.23em 0px 36px; LINE-HEIGHT: 54px"><FONT class=extract>Shakespeare: A Sample Service</FONT></H1>
<P style="MARGIN: 0px 0px 20px"><FONT class=extract>To provide a model of how a service would hypothetically be deployed in the Google production environment, let&#8217;s look at an example service that interacts with multiple Google technologies. Suppose we want to offer a service that lets you determine where a given word is used throughout all of Shakespeare&#8217;s works.</FONT></P>
<P style="MARGIN: 0px 0px 20px"><FONT class=extract>We can divide this system into two parts:</FONT></P>
<UL style="PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 0px 0px 0px 55px; PADDING-RIGHT: 0px">
<LI style="PADDING-BOTTOM: 25px"><FONT class=extract>A batch component that reads all of Shakespeare&#8217;s texts, creates an index, and writes the index into a Bigtable. This job need only run once, or perhaps very infrequently (as you never know if a new text might be discovered!). </FONT>
<LI style="PADDING-BOTTOM: 25px"><FONT class=extract>An application frontend that handles end-user requests. This job is always up, as users in all time zones will want to search in Shakespeare&#8217;s books.</FONT></LI></UL>
<P style="MARGIN: 0px 0px 20px"><FONT class=extract>The batch component is a MapReduce comprising three phases.</FONT></P>
<P style="MARGIN: 0px 0px 20px"><FONT class=extract>The mapping phase reads Shakespeare&#8217;s texts and splits them into individual words. This is faster if performed in parallel by multiple workers.</FONT></P>
<P style="MARGIN: 0px 0px 20px"><FONT class=extract>The shuffle phase sorts the tuples by word.</FONT></P>
<P style="MARGIN: 0px 0px 20px"><FONT class=extract>In the reduce phase, a tuple of (<EM style="FONT-WEIGHT: bold; FONT-STYLE: normal">word</EM>,<SPAN>&nbsp;</SPAN><EM style="FONT-WEIGHT: bold; FONT-STYLE: normal">list of locations</EM>) is created.</FONT></P>
<P style="MARGIN: 0px 0px 20px"><FONT class=extract>Each tuple is written to a row in a Bigtable, using the word as the key.</FONT></P><SECTION id=life-of-a-request-nqsMUBUJ class=pagebreak-before data-type="sect2">
<H2 class="subheaders jumptargets" style="FONT-SIZE: 32px; FONT-FAMILY: Roboto; FONT-WEIGHT: 400; COLOR: rgb(66,66,66); MARGIN: 1.23em 0px 20px; LINE-HEIGHT: 44px"><FONT class=extract>Life of a Request</FONT></H2>
<P style="MARGIN: 0px 0px 20px"><A style="TEXT-DECORATION: none; COLOR: rgb(67,136,255)" href="https://sre.google/sre-book/production-environment/#fig_production-environment_life-of-a-request" data-type="xref"><FONT class=extract>Figure 2-4</FONT></A><FONT class=extract><SPAN>&nbsp;</SPAN>shows how a user&#8217;s request is serviced: first, the user points their browser to<SPAN>&nbsp;</SPAN><EM style="FONT-WEIGHT: bold; FONT-STYLE: normal">shakespeare.google.com</EM>. To obtain the corresponding IP address, the user&#8217;s device resolves the address with its DNS server (1). This request ultimately ends up at Google&#8217;s DNS server, which talks to GSLB. As GSLB keeps track of traffic load among frontend servers across regions, it picks which server IP address to send to this user.</FONT></P><FIGURE id=fig_production-environment_life-of-a-request class="horizontal vertical jumptarget" style="FONT-WEIGHT: 700; OUTLINE-WIDTH: 0px; TEXT-ALIGN: center; PADDING-TOP: 50px; OUTLINE-STYLE: none; MARGIN: 20px auto; OUTLINE-COLOR: invert"><FONT class=extract><IMG style="MARGIN-BOTTOM: 20px; MAX-WIDTH: 820px; BORDER-TOP: 0px; BORDER-RIGHT: 0px; BORDER-BOTTOM: 0px; BORDER-LEFT: 0px; MAX-HEIGHT: 440px" alt="Life of a request." src="https://lh3.googleusercontent.com/oABYup26V8DtDwmugmNQebUmUSOzM9UFY-jXD-C31MIuIA7MODQe8fCOT5pHERILEcptT5ymIa12DLZACCJmlQWzE3AT2KV2cop96jA=s900"><FIGCAPTION><SPAN class=label>Figure 2-4.<SPAN>&nbsp;</SPAN></SPAN>The life of a request</FIGCAPTION></FIGURE> </FONT>
<P style="MARGIN: 0px 0px 20px"><FONT class=extract>The browser connects to the HTTP server on this IP. This server (named the Google Frontend, or GFE) is a reverse proxy that terminates the TCP connection (2). The GFE looks up which service is required (web search, maps, or&#8212;in this case&#8212;Shakespeare). Again using GSLB, the server finds an available Shakespeare frontend server, and sends that server an RPC containing the HTTP request (3).</FONT></P>
<P style="MARGIN: 0px 0px 20px"><FONT class=extract>The Shakespeare server analyzes the HTTP request and constructs a protobuf containing the word to look up. The Shakespeare frontend server now needs to contact the Shakespeare backend server: the frontend server contacts GSLB to obtain the BNS address of a suitable and unloaded backend server (4). That Shakespeare backend server now contacts a Bigtable server to obtain the requested data (5).</FONT></P>
<P style="MARGIN: 0px 0px 20px"><FONT class=extract>The answer is written to the reply protobuf and returned to the Shakespeare backend server. The backend hands a protobuf containing the results to the Shakespeare<SPAN>&nbsp;</SPAN><SPAN class=keep-together>frontend</SPAN><SPAN>&nbsp;</SPAN>server, which assembles the HTML and returns the answer to the user.</FONT></P>
<P style="MARGIN: 0px 0px 20px"><FONT class=extract>This entire chain of events is executed in the blink of an eye&#8212;just a few hundred milliseconds! Because many moving parts are involved, there are many potential points of failure; in particular, a failing GSLB would wreak havoc. However, Google&#8217;s policies of rigorous testing and careful rollout, in addition to our proactive error recovery methods such as graceful degradation, allow us to deliver the reliable service that our users have come to expect. After all, people regularly use<SPAN>&nbsp;</SPAN><EM style="FONT-WEIGHT: bold; FONT-STYLE: normal">www.google.com</EM><SPAN>&nbsp;</SPAN>to check if their Internet connection is set up correctly.</FONT></P></SECTION><SECTION id=xref_production-environment_job-and-data-organization data-type="sect2">
<H2 class="subheaders jumptargets" style="FONT-SIZE: 32px; FONT-FAMILY: Roboto; FONT-WEIGHT: 400; COLOR: rgb(66,66,66); MARGIN: 1.23em 0px 20px; LINE-HEIGHT: 44px"><FONT class=extract>Job and Data Organization</FONT></H2>
<P style="MARGIN: 0px 0px 20px"><FONT class=extract>Load testing determined that our backend server can handle about 100 queries per second (QPS). Trials performed with a limited set of users lead us to expect a peak load of about 3,470 QPS, so we need at least 35 tasks. However, the following considerations mean that we need at least 37 tasks in the job, or<SPAN>&nbsp;</SPAN><SPAN data-type="tex">N+2</SPAN>:</FONT></P>
<UL style="PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 0px 0px 0px 55px; PADDING-RIGHT: 0px">
<LI style="PADDING-BOTTOM: 25px"><FONT class=extract>During updates, one task at a time will be unavailable, leaving 36 tasks. </FONT>
<LI style="PADDING-BOTTOM: 25px"><FONT class=extract>A machine failure might occur during a task update, leaving only 35 tasks, just enough to serve peak load.<SUP style="FONT-SIZE: 11px; TEXT-DECORATION: none; COLOR: rgb(67,136,255); LINE-HEIGHT: 0"><A id=id-0vYuXSpSqF0IzCmUg-marker class=jumptarget style="TEXT-DECORATION: none; COLOR: rgb(67,136,255); OUTLINE-WIDTH: 0px; OUTLINE-STYLE: none; OUTLINE-COLOR: invert" href="https://sre.google/sre-book/production-environment/#id-0vYuXSpSqF0IzCmUg" data-type="noteref">13</A></SUP></FONT></LI></UL>
<P style="MARGIN: 0px 0px 20px"><FONT class=extract>A closer examination of user traffic shows our peak usage is distributed globally: 1,430 QPS from North America, 290 from South America, 1,400 from Europe and Africa, and 350 from Asia and Australia. Instead of locating all backends at one site, we distribute them across the USA, South America, Europe, and Asia. Allowing for<SPAN>&nbsp;</SPAN><SPAN data-type="tex">N+2</SPAN><SPAN>&nbsp;</SPAN>redundancy per region means that we end up with 17 tasks in the USA, 16 in Europe, and 6 in Asia. However, we decide to use 4 tasks (instead of 5) in South America, to lower the overhead of<SPAN>&nbsp;</SPAN><SPAN data-type="tex">N+2</SPAN><SPAN>&nbsp;</SPAN>to<SPAN>&nbsp;</SPAN><SPAN data-type="tex">N+1</SPAN>. In this case, we&#8217;re willing to tolerate a small risk of higher latency in exchange for lower hardware costs: if GSLB redirects traffic from one continent to another when our South American datacenter is over capacity, we can save 20% of the resources we&#8217;d spend on hardware. In the larger regions, we&#8217;ll spread tasks across two or three clusters for extra resiliency.</FONT></P>
<P style="MARGIN: 0px 0px 20px"><FONT class=extract>Because the backends need to contact the Bigtable holding the data, we need to also design this storage element strategically. A backend in Asia contacting a Bigtable in the USA adds a significant amount of latency, so we replicate the Bigtable in each region. Bigtable replication helps us in two ways: it provides resilience should a<SPAN>&nbsp;</SPAN><SPAN class=keep-together>Bigtable</SPAN><SPAN>&nbsp;</SPAN>server fail, and it lowers data-access latency. While Bigtable only offers eventual consistency, it isn&#8217;t a major problem because we don&#8217;t need to update the contents often.</FONT></P>
<P style="MARGIN: 0px 0px 20px"><FONT class=extract>We&#8217;ve introduced a lot of terminology here; while you don&#8217;t need to remember it all, it&#8217;s useful for framing many of the other systems we&#8217;ll refer to later.</FONT></P></SECTION></SECTION>