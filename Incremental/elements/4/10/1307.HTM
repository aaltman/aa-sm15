Pseudocode for Lamport bakery algorithm, showing how threads read remotely but only write locally, and how no RMW instruction is required.
<H4></H4><SPAN class=mw-editsection style="FONT-SIZE: small; FONT-FAMILY: sans-serif; VERTICAL-ALIGN: baseline; FONT-WEIGHT: normal; MARGIN-LEFT: 1em; LINE-HEIGHT: 0; MARGIN-RIGHT: 0px; user-select: none"><SPAN class=mw-editsection-bracket style="COLOR: ; MARGIN-RIGHT: 0.25em">[</SPAN><A title="Edit section: Pseudocode" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; WHITE-SPACE: nowrap; COLOR: ; border-radius: 2px; overflow-wrap: break-word" href="https://en.wikipedia.org/w/index.php?title=Lamport%27s_bakery_algorithm&amp;action=edit&amp;section=8"><SPAN>edit</SPAN></A><SPAN class=mw-editsection-bracket style="COLOR: ; MARGIN-LEFT: 0.25em">]</SPAN></SPAN>
<DIV></DIV>
<P style="FONT-SIZE: 16px; FONT-FAMILY: sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(32,33,34); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; MARGIN: 0.5em 0px 1em; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial">In this example, all threads execute the same "main" function,<SPAN>&nbsp;</SPAN><I>Thread</I>. In real applications, different threads often have different "main" functions.</P>
<P style="FONT-SIZE: 16px; FONT-FAMILY: sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(32,33,34); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; MARGIN: 0.5em 0px 1em; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial">Note that as in the original paper, the thread checks itself before entering the critical section. Since the loop conditions will evaluate as<SPAN>&nbsp;</SPAN><I>false</I>, this does not cause much delay.</P>
<DIV class="mw-highlight mw-highlight-lang-c mw-content-ltr mw-highlight-lines" style="FONT-SIZE: 16px; FONT-FAMILY: sans-serif; BACKGROUND: rgb(248,248,248); unicode-bidi: embed; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(51,51,51); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial" dir=ltr><PRE style="BORDER-TOP: 1px solid; FONT-FAMILY: monospace, monospace; BORDER-RIGHT: 1px solid; WHITE-SPACE: pre-wrap; OVERFLOW-X: hidden; BORDER-BOTTOM: 1px solid; POSITION: relative; COLOR: rgb(51,51,51); PADDING-BOTTOM: 1em; PADDING-TOP: 1em; PADDING-LEFT: 3.5em; BORDER-LEFT: 1px solid; LINE-HEIGHT: 1.3; PADDING-RIGHT: 1em; BACKGROUND-COLOR: rgb(248,248,248); overflow-wrap: break-word; tab-size: 4; box-shadow: rgb(240, 240, 240) 2.75em 0px 0px inset"><SPAN></SPAN><SPAN class=linenos style="BOX-SIZING: border-box; WIDTH: 2.75em; BACKGROUND: none transparent scroll repeat 0% 0%; WHITE-SPACE: pre; POSITION: absolute; COLOR: rgb(114,119,125); TEXT-ALIGN: right; PADDING-LEFT: 5px; LEFT: 0px; PADDING-RIGHT: 5px; MARGIN-RIGHT: 4px" data-line="0"></SPAN><SPAN class=w style="COLOR: rgb(187,187,187)">  </SPAN><SPAN class=c1 style="COLOR: rgb(61,123,123); FONT-STYLE: italic">// declaration and initial values of global variables</SPAN>
<SPAN class=linenos style="BOX-SIZING: border-box; WIDTH: 2.75em; BACKGROUND: none transparent scroll repeat 0% 0%; WHITE-SPACE: pre; POSITION: absolute; COLOR: rgb(114,119,125); TEXT-ALIGN: right; PADDING-LEFT: 5px; LEFT: 0px; PADDING-RIGHT: 5px; MARGIN-RIGHT: 4px" data-line="1"></SPAN><SPAN class=w style="COLOR: rgb(187,187,187)">  </SPAN><SPAN class=nl style="COLOR: rgb(118,118,0)">Entering</SPAN><SPAN class=p>:</SPAN><SPAN class=w style="COLOR: rgb(187,187,187)"> </SPAN><SPAN class=n>array</SPAN><SPAN class=w style="COLOR: rgb(187,187,187)"> </SPAN><SPAN class=p>[</SPAN><SPAN class=mf style="COLOR: rgb(102,102,102)">1.</SPAN><SPAN class=p>.</SPAN><SPAN class=n>NUM_THREADS</SPAN><SPAN class=p>]</SPAN><SPAN class=w style="COLOR: rgb(187,187,187)"> </SPAN><SPAN class=n>of</SPAN><SPAN class=w style="COLOR: rgb(187,187,187)"> </SPAN><SPAN class=kt style="COLOR: rgb(176,0,64)">bool</SPAN><SPAN class=w style="COLOR: rgb(187,187,187)"> </SPAN><SPAN class=o style="COLOR: rgb(102,102,102)">=</SPAN><SPAN class=w style="COLOR: rgb(187,187,187)"> </SPAN><SPAN class=p>{</SPAN><SPAN class=nb style="COLOR: rgb(0,128,0)">false</SPAN><SPAN class=p>};</SPAN>
<SPAN class=linenos style="BOX-SIZING: border-box; WIDTH: 2.75em; BACKGROUND: none transparent scroll repeat 0% 0%; WHITE-SPACE: pre; POSITION: absolute; COLOR: rgb(114,119,125); TEXT-ALIGN: right; PADDING-LEFT: 5px; LEFT: 0px; PADDING-RIGHT: 5px; MARGIN-RIGHT: 4px" data-line="2"></SPAN><SPAN class=w style="COLOR: rgb(187,187,187)">  </SPAN><SPAN class=nl style="COLOR: rgb(118,118,0)">Number</SPAN><SPAN class=p>:</SPAN><SPAN class=w style="COLOR: rgb(187,187,187)"> </SPAN><SPAN class=n>array</SPAN><SPAN class=w style="COLOR: rgb(187,187,187)"> </SPAN><SPAN class=p>[</SPAN><SPAN class=mf style="COLOR: rgb(102,102,102)">1.</SPAN><SPAN class=p>.</SPAN><SPAN class=n>NUM_THREADS</SPAN><SPAN class=p>]</SPAN><SPAN class=w style="COLOR: rgb(187,187,187)"> </SPAN><SPAN class=n>of</SPAN><SPAN class=w style="COLOR: rgb(187,187,187)"> </SPAN><SPAN class=n>integer</SPAN><SPAN class=w style="COLOR: rgb(187,187,187)"> </SPAN><SPAN class=o style="COLOR: rgb(102,102,102)">=</SPAN><SPAN class=w style="COLOR: rgb(187,187,187)"> </SPAN><SPAN class=p>{</SPAN><SPAN class=mi style="COLOR: rgb(102,102,102)">0</SPAN><SPAN class=p>};</SPAN>
<SPAN class=linenos style="BOX-SIZING: border-box; WIDTH: 2.75em; BACKGROUND: none transparent scroll repeat 0% 0%; WHITE-SPACE: pre; POSITION: absolute; COLOR: rgb(114,119,125); TEXT-ALIGN: right; PADDING-LEFT: 5px; LEFT: 0px; PADDING-RIGHT: 5px; MARGIN-RIGHT: 4px" data-line="3"></SPAN>
<SPAN class=linenos style="BOX-SIZING: border-box; WIDTH: 2.75em; BACKGROUND: none transparent scroll repeat 0% 0%; WHITE-SPACE: pre; POSITION: absolute; COLOR: rgb(114,119,125); TEXT-ALIGN: right; PADDING-LEFT: 5px; LEFT: 0px; PADDING-RIGHT: 5px; MARGIN-RIGHT: 4px" data-line="4"></SPAN><SPAN class=w style="COLOR: rgb(187,187,187)">  </SPAN><SPAN class=n>lock</SPAN><SPAN class=p>(</SPAN><SPAN class=n>integer</SPAN><SPAN class=w style="COLOR: rgb(187,187,187)"> </SPAN><SPAN class=n>i</SPAN><SPAN class=p>)</SPAN><SPAN class=w style="COLOR: rgb(187,187,187)"> </SPAN><SPAN class=p>{</SPAN>
<SPAN class=linenos style="BOX-SIZING: border-box; WIDTH: 2.75em; BACKGROUND: none transparent scroll repeat 0% 0%; WHITE-SPACE: pre; POSITION: absolute; COLOR: rgb(114,119,125); TEXT-ALIGN: right; PADDING-LEFT: 5px; LEFT: 0px; PADDING-RIGHT: 5px; MARGIN-RIGHT: 4px" data-line="5"></SPAN><SPAN class=w style="COLOR: rgb(187,187,187)">      </SPAN><SPAN class=n>Entering</SPAN><SPAN class=p>[</SPAN><SPAN class=n>i</SPAN><SPAN class=p>]</SPAN><SPAN class=w style="COLOR: rgb(187,187,187)"> </SPAN><SPAN class=o style="COLOR: rgb(102,102,102)">=</SPAN><SPAN class=w style="COLOR: rgb(187,187,187)"> </SPAN><SPAN class=nb style="COLOR: rgb(0,128,0)">true</SPAN><SPAN class=p>;</SPAN>
<SPAN class=linenos style="BOX-SIZING: border-box; WIDTH: 2.75em; BACKGROUND: none transparent scroll repeat 0% 0%; WHITE-SPACE: pre; POSITION: absolute; COLOR: rgb(114,119,125); TEXT-ALIGN: right; PADDING-LEFT: 5px; LEFT: 0px; PADDING-RIGHT: 5px; MARGIN-RIGHT: 4px" data-line="6"></SPAN><SPAN class=w style="COLOR: rgb(187,187,187)">      </SPAN><SPAN class=n>Number</SPAN><SPAN class=p>[</SPAN><SPAN class=n>i</SPAN><SPAN class=p>]</SPAN><SPAN class=w style="COLOR: rgb(187,187,187)"> </SPAN><SPAN class=o style="COLOR: rgb(102,102,102)">=</SPAN><SPAN class=w style="COLOR: rgb(187,187,187)"> </SPAN><SPAN class=mi style="COLOR: rgb(102,102,102)">1</SPAN><SPAN class=w style="COLOR: rgb(187,187,187)"> </SPAN><SPAN class=o style="COLOR: rgb(102,102,102)">+</SPAN><SPAN class=w style="COLOR: rgb(187,187,187)"> </SPAN><SPAN class=n>max</SPAN><SPAN class=p>(</SPAN><SPAN class=n>Number</SPAN><SPAN class=p>[</SPAN><SPAN class=mi style="COLOR: rgb(102,102,102)">1</SPAN><SPAN class=p>],</SPAN><SPAN class=w style="COLOR: rgb(187,187,187)"> </SPAN><SPAN class=p>...,</SPAN><SPAN class=w style="COLOR: rgb(187,187,187)"> </SPAN><SPAN class=n>Number</SPAN><SPAN class=p>[</SPAN><SPAN class=n>NUM_THREADS</SPAN><SPAN class=p>]);</SPAN>
<SPAN class=linenos style="BOX-SIZING: border-box; WIDTH: 2.75em; BACKGROUND: none transparent scroll repeat 0% 0%; WHITE-SPACE: pre; POSITION: absolute; COLOR: rgb(114,119,125); TEXT-ALIGN: right; PADDING-LEFT: 5px; LEFT: 0px; PADDING-RIGHT: 5px; MARGIN-RIGHT: 4px" data-line="7"></SPAN><SPAN class=w style="COLOR: rgb(187,187,187)">      </SPAN><SPAN class=n>Entering</SPAN><SPAN class=p>[</SPAN><SPAN class=n>i</SPAN><SPAN class=p>]</SPAN><SPAN class=w style="COLOR: rgb(187,187,187)"> </SPAN><SPAN class=o style="COLOR: rgb(102,102,102)">=</SPAN><SPAN class=w style="COLOR: rgb(187,187,187)"> </SPAN><SPAN class=nb style="COLOR: rgb(0,128,0)">false</SPAN><SPAN class=p>;</SPAN>
<SPAN class=linenos style="BOX-SIZING: border-box; WIDTH: 2.75em; BACKGROUND: none transparent scroll repeat 0% 0%; WHITE-SPACE: pre; POSITION: absolute; COLOR: rgb(114,119,125); TEXT-ALIGN: right; PADDING-LEFT: 5px; LEFT: 0px; PADDING-RIGHT: 5px; MARGIN-RIGHT: 4px" data-line="8"></SPAN><SPAN class=w style="COLOR: rgb(187,187,187)">      </SPAN><SPAN class=k style="FONT-WEIGHT: bold; COLOR: rgb(0,128,0)">for</SPAN><SPAN class=w style="COLOR: rgb(187,187,187)"> </SPAN><SPAN class=p>(</SPAN><SPAN class=n>integer</SPAN><SPAN class=w style="COLOR: rgb(187,187,187)"> </SPAN><SPAN class=n>j</SPAN><SPAN class=w style="COLOR: rgb(187,187,187)"> </SPAN><SPAN class=o style="COLOR: rgb(102,102,102)">=</SPAN><SPAN class=w style="COLOR: rgb(187,187,187)"> </SPAN><SPAN class=mi style="COLOR: rgb(102,102,102)">1</SPAN><SPAN class=p>;</SPAN><SPAN class=w style="COLOR: rgb(187,187,187)"> </SPAN><SPAN class=n>j</SPAN><SPAN class=w style="COLOR: rgb(187,187,187)"> </SPAN><SPAN class=o style="COLOR: rgb(102,102,102)">&lt;=</SPAN><SPAN class=w style="COLOR: rgb(187,187,187)"> </SPAN><SPAN class=n>NUM_THREADS</SPAN><SPAN class=p>;</SPAN><SPAN class=w style="COLOR: rgb(187,187,187)"> </SPAN><SPAN class=n>j</SPAN><SPAN class=o style="COLOR: rgb(102,102,102)">++</SPAN><SPAN class=p>)</SPAN><SPAN class=w style="COLOR: rgb(187,187,187)"> </SPAN><SPAN class=p>{</SPAN>
<SPAN class=linenos style="BOX-SIZING: border-box; WIDTH: 2.75em; BACKGROUND: none transparent scroll repeat 0% 0%; WHITE-SPACE: pre; POSITION: absolute; COLOR: rgb(114,119,125); TEXT-ALIGN: right; PADDING-LEFT: 5px; LEFT: 0px; PADDING-RIGHT: 5px; MARGIN-RIGHT: 4px" data-line="9"></SPAN><SPAN class=w style="COLOR: rgb(187,187,187)">          </SPAN><SPAN class=c1 style="COLOR: rgb(61,123,123); FONT-STYLE: italic">// Wait until thread j receives its number:</SPAN>
<SPAN class=linenos style="BOX-SIZING: border-box; WIDTH: 2.75em; BACKGROUND: none transparent scroll repeat 0% 0%; WHITE-SPACE: pre; POSITION: absolute; COLOR: rgb(114,119,125); TEXT-ALIGN: right; PADDING-LEFT: 5px; LEFT: 0px; PADDING-RIGHT: 5px; MARGIN-RIGHT: 4px" data-line="10"></SPAN><SPAN class=w style="COLOR: rgb(187,187,187)">          </SPAN><SPAN class=k style="FONT-WEIGHT: bold; COLOR: rgb(0,128,0)">while</SPAN><SPAN class=w style="COLOR: rgb(187,187,187)"> </SPAN><SPAN class=p>(</SPAN><SPAN class=n>Entering</SPAN><SPAN class=p>[</SPAN><SPAN class=n>j</SPAN><SPAN class=p>])</SPAN><SPAN class=w style="COLOR: rgb(187,187,187)"> </SPAN><SPAN class=p>{</SPAN><SPAN class=w style="COLOR: rgb(187,187,187)"> </SPAN><SPAN class=cm style="COLOR: rgb(61,123,123); FONT-STYLE: italic">/* nothing */</SPAN><SPAN class=w style="COLOR: rgb(187,187,187)"> </SPAN><SPAN class=p>}</SPAN>
<SPAN class=linenos style="BOX-SIZING: border-box; WIDTH: 2.75em; BACKGROUND: none transparent scroll repeat 0% 0%; WHITE-SPACE: pre; POSITION: absolute; COLOR: rgb(114,119,125); TEXT-ALIGN: right; PADDING-LEFT: 5px; LEFT: 0px; PADDING-RIGHT: 5px; MARGIN-RIGHT: 4px" data-line="11"></SPAN><SPAN class=w style="COLOR: rgb(187,187,187)">          </SPAN><SPAN class=c1 style="COLOR: rgb(61,123,123); FONT-STYLE: italic">// Wait until all threads with smaller numbers or with the same</SPAN>
<SPAN class=linenos style="BOX-SIZING: border-box; WIDTH: 2.75em; BACKGROUND: none transparent scroll repeat 0% 0%; WHITE-SPACE: pre; POSITION: absolute; COLOR: rgb(114,119,125); TEXT-ALIGN: right; PADDING-LEFT: 5px; LEFT: 0px; PADDING-RIGHT: 5px; MARGIN-RIGHT: 4px" data-line="12"></SPAN><SPAN class=w style="COLOR: rgb(187,187,187)">          </SPAN><SPAN class=c1 style="COLOR: rgb(61,123,123); FONT-STYLE: italic">// number, but with higher priority, finish their work:</SPAN>
<SPAN class=linenos style="BOX-SIZING: border-box; WIDTH: 2.75em; BACKGROUND: none transparent scroll repeat 0% 0%; WHITE-SPACE: pre; POSITION: absolute; COLOR: rgb(114,119,125); TEXT-ALIGN: right; PADDING-LEFT: 5px; LEFT: 0px; PADDING-RIGHT: 5px; MARGIN-RIGHT: 4px" data-line="13"></SPAN><SPAN class=w style="COLOR: rgb(187,187,187)">          </SPAN><SPAN class=k style="FONT-WEIGHT: bold; COLOR: rgb(0,128,0)">while</SPAN><SPAN class=w style="COLOR: rgb(187,187,187)"> </SPAN><SPAN class=p>((</SPAN><SPAN class=n>Number</SPAN><SPAN class=p>[</SPAN><SPAN class=n>j</SPAN><SPAN class=p>]</SPAN><SPAN class=w style="COLOR: rgb(187,187,187)"> </SPAN><SPAN class=o style="COLOR: rgb(102,102,102)">!=</SPAN><SPAN class=w style="COLOR: rgb(187,187,187)"> </SPAN><SPAN class=mi style="COLOR: rgb(102,102,102)">0</SPAN><SPAN class=p>)</SPAN><SPAN class=w style="COLOR: rgb(187,187,187)"> </SPAN><SPAN class=o style="COLOR: rgb(102,102,102)">&amp;&amp;</SPAN><SPAN class=w style="COLOR: rgb(187,187,187)"> </SPAN><SPAN class=p>((</SPAN><SPAN class=n>Number</SPAN><SPAN class=p>[</SPAN><SPAN class=n>j</SPAN><SPAN class=p>],</SPAN><SPAN class=w style="COLOR: rgb(187,187,187)"> </SPAN><SPAN class=n>j</SPAN><SPAN class=p>)</SPAN><SPAN class=w style="COLOR: rgb(187,187,187)"> </SPAN><SPAN class=o style="COLOR: rgb(102,102,102)">&lt;</SPAN><SPAN class=w style="COLOR: rgb(187,187,187)"> </SPAN><SPAN class=p>(</SPAN><SPAN class=n>Number</SPAN><SPAN class=p>[</SPAN><SPAN class=n>i</SPAN><SPAN class=p>],</SPAN><SPAN class=w style="COLOR: rgb(187,187,187)"> </SPAN><SPAN class=n>i</SPAN><SPAN class=p>)))</SPAN><SPAN class=w style="COLOR: rgb(187,187,187)"> </SPAN><SPAN class=p>{</SPAN><SPAN class=w style="COLOR: rgb(187,187,187)"> </SPAN><SPAN class=cm style="COLOR: rgb(61,123,123); FONT-STYLE: italic">/* nothing */</SPAN><SPAN class=w style="COLOR: rgb(187,187,187)"> </SPAN><SPAN class=p>}</SPAN>
<SPAN class=linenos style="BOX-SIZING: border-box; WIDTH: 2.75em; BACKGROUND: none transparent scroll repeat 0% 0%; WHITE-SPACE: pre; POSITION: absolute; COLOR: rgb(114,119,125); TEXT-ALIGN: right; PADDING-LEFT: 5px; LEFT: 0px; PADDING-RIGHT: 5px; MARGIN-RIGHT: 4px" data-line="14"></SPAN><SPAN class=w style="COLOR: rgb(187,187,187)">      </SPAN><SPAN class=p>}</SPAN>
<SPAN class=linenos style="BOX-SIZING: border-box; WIDTH: 2.75em; BACKGROUND: none transparent scroll repeat 0% 0%; WHITE-SPACE: pre; POSITION: absolute; COLOR: rgb(114,119,125); TEXT-ALIGN: right; PADDING-LEFT: 5px; LEFT: 0px; PADDING-RIGHT: 5px; MARGIN-RIGHT: 4px" data-line="15"></SPAN><SPAN class=w style="COLOR: rgb(187,187,187)">  </SPAN><SPAN class=p>}</SPAN>
<SPAN class=linenos style="BOX-SIZING: border-box; WIDTH: 2.75em; BACKGROUND: none transparent scroll repeat 0% 0%; WHITE-SPACE: pre; POSITION: absolute; COLOR: rgb(114,119,125); TEXT-ALIGN: right; PADDING-LEFT: 5px; LEFT: 0px; PADDING-RIGHT: 5px; MARGIN-RIGHT: 4px" data-line="16"></SPAN><SPAN class=w style="COLOR: rgb(187,187,187)">  </SPAN>
<SPAN class=linenos style="BOX-SIZING: border-box; WIDTH: 2.75em; BACKGROUND: none transparent scroll repeat 0% 0%; WHITE-SPACE: pre; POSITION: absolute; COLOR: rgb(114,119,125); TEXT-ALIGN: right; PADDING-LEFT: 5px; LEFT: 0px; PADDING-RIGHT: 5px; MARGIN-RIGHT: 4px" data-line="17"></SPAN><SPAN class=w style="COLOR: rgb(187,187,187)">  </SPAN><SPAN class=n>unlock</SPAN><SPAN class=p>(</SPAN><SPAN class=n>integer</SPAN><SPAN class=w style="COLOR: rgb(187,187,187)"> </SPAN><SPAN class=n>i</SPAN><SPAN class=p>)</SPAN><SPAN class=w style="COLOR: rgb(187,187,187)"> </SPAN><SPAN class=p>{</SPAN>
<SPAN class=linenos style="BOX-SIZING: border-box; WIDTH: 2.75em; BACKGROUND: none transparent scroll repeat 0% 0%; WHITE-SPACE: pre; POSITION: absolute; COLOR: rgb(114,119,125); TEXT-ALIGN: right; PADDING-LEFT: 5px; LEFT: 0px; PADDING-RIGHT: 5px; MARGIN-RIGHT: 4px" data-line="18"></SPAN><SPAN class=w style="COLOR: rgb(187,187,187)">      </SPAN><SPAN class=n>Number</SPAN><SPAN class=p>[</SPAN><SPAN class=n>i</SPAN><SPAN class=p>]</SPAN><SPAN class=w style="COLOR: rgb(187,187,187)"> </SPAN><SPAN class=o style="COLOR: rgb(102,102,102)">=</SPAN><SPAN class=w style="COLOR: rgb(187,187,187)"> </SPAN><SPAN class=mi style="COLOR: rgb(102,102,102)">0</SPAN><SPAN class=p>;</SPAN>
<SPAN class=linenos style="BOX-SIZING: border-box; WIDTH: 2.75em; BACKGROUND: none transparent scroll repeat 0% 0%; WHITE-SPACE: pre; POSITION: absolute; COLOR: rgb(114,119,125); TEXT-ALIGN: right; PADDING-LEFT: 5px; LEFT: 0px; PADDING-RIGHT: 5px; MARGIN-RIGHT: 4px" data-line="19"></SPAN><SPAN class=w style="COLOR: rgb(187,187,187)">  </SPAN><SPAN class=p>}</SPAN>
<SPAN class=linenos style="BOX-SIZING: border-box; WIDTH: 2.75em; BACKGROUND: none transparent scroll repeat 0% 0%; WHITE-SPACE: pre; POSITION: absolute; COLOR: rgb(114,119,125); TEXT-ALIGN: right; PADDING-LEFT: 5px; LEFT: 0px; PADDING-RIGHT: 5px; MARGIN-RIGHT: 4px" data-line="20"></SPAN>
<SPAN class=linenos style="BOX-SIZING: border-box; WIDTH: 2.75em; BACKGROUND: none transparent scroll repeat 0% 0%; WHITE-SPACE: pre; POSITION: absolute; COLOR: rgb(114,119,125); TEXT-ALIGN: right; PADDING-LEFT: 5px; LEFT: 0px; PADDING-RIGHT: 5px; MARGIN-RIGHT: 4px" data-line="21"></SPAN><SPAN class=w style="COLOR: rgb(187,187,187)">  </SPAN><SPAN class=n>Thread</SPAN><SPAN class=p>(</SPAN><SPAN class=n>integer</SPAN><SPAN class=w style="COLOR: rgb(187,187,187)"> </SPAN><SPAN class=n>i</SPAN><SPAN class=p>)</SPAN><SPAN class=w style="COLOR: rgb(187,187,187)"> </SPAN><SPAN class=p>{</SPAN>
<SPAN class=linenos style="BOX-SIZING: border-box; WIDTH: 2.75em; BACKGROUND: none transparent scroll repeat 0% 0%; WHITE-SPACE: pre; POSITION: absolute; COLOR: rgb(114,119,125); TEXT-ALIGN: right; PADDING-LEFT: 5px; LEFT: 0px; PADDING-RIGHT: 5px; MARGIN-RIGHT: 4px" data-line="22"></SPAN><SPAN class=w style="COLOR: rgb(187,187,187)">      </SPAN><SPAN class=k style="FONT-WEIGHT: bold; COLOR: rgb(0,128,0)">while</SPAN><SPAN class=w style="COLOR: rgb(187,187,187)"> </SPAN><SPAN class=p>(</SPAN><SPAN class=nb style="COLOR: rgb(0,128,0)">true</SPAN><SPAN class=p>)</SPAN><SPAN class=w style="COLOR: rgb(187,187,187)"> </SPAN><SPAN class=p>{</SPAN>
<SPAN class=linenos style="BOX-SIZING: border-box; WIDTH: 2.75em; BACKGROUND: none transparent scroll repeat 0% 0%; WHITE-SPACE: pre; POSITION: absolute; COLOR: rgb(114,119,125); TEXT-ALIGN: right; PADDING-LEFT: 5px; LEFT: 0px; PADDING-RIGHT: 5px; MARGIN-RIGHT: 4px" data-line="23"></SPAN><SPAN class=w style="COLOR: rgb(187,187,187)">          </SPAN><SPAN class=n>lock</SPAN><SPAN class=p>(</SPAN><SPAN class=n>i</SPAN><SPAN class=p>);</SPAN>
<SPAN class=linenos style="BOX-SIZING: border-box; WIDTH: 2.75em; BACKGROUND: none transparent scroll repeat 0% 0%; WHITE-SPACE: pre; POSITION: absolute; COLOR: rgb(114,119,125); TEXT-ALIGN: right; PADDING-LEFT: 5px; LEFT: 0px; PADDING-RIGHT: 5px; MARGIN-RIGHT: 4px" data-line="24"></SPAN><SPAN class=w style="COLOR: rgb(187,187,187)">          </SPAN><SPAN class=c1 style="COLOR: rgb(61,123,123); FONT-STYLE: italic">// The critical section goes here...</SPAN>
<SPAN class=linenos style="BOX-SIZING: border-box; WIDTH: 2.75em; BACKGROUND: none transparent scroll repeat 0% 0%; WHITE-SPACE: pre; POSITION: absolute; COLOR: rgb(114,119,125); TEXT-ALIGN: right; PADDING-LEFT: 5px; LEFT: 0px; PADDING-RIGHT: 5px; MARGIN-RIGHT: 4px" data-line="25"></SPAN><SPAN class=w style="COLOR: rgb(187,187,187)">          </SPAN><SPAN class=n>unlock</SPAN><SPAN class=p>(</SPAN><SPAN class=n>i</SPAN><SPAN class=p>);</SPAN>
<SPAN class=linenos style="BOX-SIZING: border-box; WIDTH: 2.75em; BACKGROUND: none transparent scroll repeat 0% 0%; WHITE-SPACE: pre; POSITION: absolute; COLOR: rgb(114,119,125); TEXT-ALIGN: right; PADDING-LEFT: 5px; LEFT: 0px; PADDING-RIGHT: 5px; MARGIN-RIGHT: 4px" data-line="26"></SPAN><SPAN class=w style="COLOR: rgb(187,187,187)">          </SPAN><SPAN class=c1 style="COLOR: rgb(61,123,123); FONT-STYLE: italic">// non-critical section...</SPAN>
<SPAN class=linenos style="BOX-SIZING: border-box; WIDTH: 2.75em; BACKGROUND: none transparent scroll repeat 0% 0%; WHITE-SPACE: pre; POSITION: absolute; COLOR: rgb(114,119,125); TEXT-ALIGN: right; PADDING-LEFT: 5px; LEFT: 0px; PADDING-RIGHT: 5px; MARGIN-RIGHT: 4px" data-line="27"></SPAN><SPAN class=w style="COLOR: rgb(187,187,187)">      </SPAN><SPAN class=p>}</SPAN>
<SPAN class=linenos style="BOX-SIZING: border-box; WIDTH: 2.75em; BACKGROUND: none transparent scroll repeat 0% 0%; WHITE-SPACE: pre; POSITION: absolute; COLOR: rgb(114,119,125); TEXT-ALIGN: right; PADDING-LEFT: 5px; LEFT: 0px; PADDING-RIGHT: 5px; MARGIN-RIGHT: 4px" data-line="28"></SPAN><SPAN class=w style="COLOR: rgb(187,187,187)">  </SPAN><SPAN class=p>}</SPAN>
</PRE></DIV>
<P style="FONT-SIZE: 16px; FONT-FAMILY: sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(32,33,34); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; MARGIN: 0.5em 0px 1em; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial">Each thread only writes its own storage, only reads are shared. It is remarkable that this algorithm is not built on top of some lower level "atomic" operation, e.g.<SPAN>&nbsp;</SPAN><A title=Compare-and-swap style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: ; border-radius: 2px; overflow-wrap: break-word" href="https://en.wikipedia.org/wiki/Compare-and-swap">compare-and-swap</A>. The original proof shows that for overlapping reads and writes to the same storage cell only the write must be correct.<SUP class="noprint Inline-Template" style="FONT-SIZE: 12px; WHITE-SPACE: nowrap; MARGIN-LEFT: 0.1em; LINE-HEIGHT: 1">[<I><A title="Wikipedia:Please clarify" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: ; border-radius: 2px; overflow-wrap: break-word" href="https://en.wikipedia.org/wiki/Wikipedia:Please_clarify"><SPAN title="This is hard to believe; throw us a bone, here. (August 2020)">clarification needed</SPAN></A></I>]</SUP><SPAN>&nbsp;</SPAN>The read operation can return an arbitrary number. Therefore, this algorithm can be used to implement mutual exclusion on memory that lacks synchronisation primitives, e.g., a simple SCSI disk shared between two computers.</P>
<P style="FONT-SIZE: 16px; FONT-FAMILY: sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(32,33,34); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; MARGIN: 0.5em 0px 1em; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial">The necessity of the variable<SPAN>&nbsp;</SPAN><I>Entering</I><SPAN>&nbsp;</SPAN>might not be obvious as there is no 'lock' around lines 7 to 13. However, suppose the variable was removed and two processes computed the same<SPAN>&nbsp;</SPAN><CODE style="BORDER-TOP: 1px solid; FONT-FAMILY: monospace, monospace; BORDER-RIGHT: 1px solid; BORDER-BOTTOM: 1px solid; COLOR: ; PADDING-BOTTOM: 1px; PADDING-TOP: 1px; PADDING-LEFT: 4px; BORDER-LEFT: 1px solid; PADDING-RIGHT: 4px; border-radius: 2px">Number[i]</CODE>. If the higher-priority process was preempted before setting<SPAN>&nbsp;</SPAN><CODE style="BORDER-TOP: 1px solid; FONT-FAMILY: monospace, monospace; BORDER-RIGHT: 1px solid; BORDER-BOTTOM: 1px solid; COLOR: ; PADDING-BOTTOM: 1px; PADDING-TOP: 1px; PADDING-LEFT: 4px; BORDER-LEFT: 1px solid; PADDING-RIGHT: 4px; border-radius: 2px">Number[i]</CODE>, the low-priority process will see that the other process has a number of zero, and enters the critical section; later, the high-priority process will ignore equal<SPAN>&nbsp;</SPAN><CODE style="BORDER-TOP: 1px solid; FONT-FAMILY: monospace, monospace; BORDER-RIGHT: 1px solid; BORDER-BOTTOM: 1px solid; COLOR: ; PADDING-BOTTOM: 1px; PADDING-TOP: 1px; PADDING-LEFT: 4px; BORDER-LEFT: 1px solid; PADDING-RIGHT: 4px; border-radius: 2px">Number[i]</CODE><SPAN>&nbsp;</SPAN>for lower-priority processes, and also enters the critical section. As a result, two processes can enter the critical section at the same time. The bakery algorithm uses the<SPAN>&nbsp;</SPAN><I>Entering</I><SPAN>&nbsp;</SPAN>variable to make the assignment on line 6 look like it was atomic; process<SPAN>&nbsp;</SPAN><I>i</I><SPAN>&nbsp;</SPAN>will never see a number equal to zero for a process<SPAN>&nbsp;</SPAN><I>j</I><SPAN>&nbsp;</SPAN>that is going to pick the same number as<SPAN>&nbsp;</SPAN><I>i</I>.</P>
<P style="FONT-SIZE: 16px; FONT-FAMILY: sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(32,33,34); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; MARGIN: 0.5em 0px 1em; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial">When implementing the pseudo code in a single process system or under<SPAN>&nbsp;</SPAN><A title="Cooperative multitasking" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: ; border-radius: 2px; overflow-wrap: break-word" href="https://en.wikipedia.org/wiki/Cooperative_multitasking">cooperative multitasking</A>, it is better to replace the "do nothing" sections with code that notifies the operating system to immediately switch to the next thread. This primitive is often referred to as<SPAN>&nbsp;</SPAN><CODE style="BORDER-TOP: 1px solid; FONT-FAMILY: monospace, monospace; BORDER-RIGHT: 1px solid; BORDER-BOTTOM: 1px solid; COLOR: ; PADDING-BOTTOM: 1px; PADDING-TOP: 1px; PADDING-LEFT: 4px; BORDER-LEFT: 1px solid; PADDING-RIGHT: 4px; border-radius: 2px">yield</CODE>.</P>
<P style="FONT-SIZE: 16px; FONT-FAMILY: sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(32,33,34); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; MARGIN: 0.5em 0px 1em; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial">Lamport's bakery algorithm assumes a sequential consistency memory model. Few, if any, languages or multi-core processors implement such a memory model. Therefore, correct implementation of the algorithm typically requires inserting fences to inhibit reordering.<SUP id=cite_ref-1 class=reference style="FONT-SIZE: 12px; WHITE-SPACE: nowrap; FONT-WEIGHT: normal; FONT-STYLE: normal; LINE-HEIGHT: 1"><A style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: ; border-radius: 2px; overflow-wrap: break-word" href="https://en.wikipedia.org/wiki/Lamport%27s_bakery_algorithm#cite_note-1"><FONT style="BACKGROUND-COLOR: #ffffff" face=Arial>[1]</FONT></A></SUP></P>
<DIV class="mw-heading mw-heading4" style="FONT-SIZE: 16px; OVERFLOW: hidden; FONT-FAMILY: sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: bold; COLOR: ; PADDING-BOTTOM: 0px; FONT-STYLE: normal; PADDING-TOP: 0.5em; ORPHANS: 2; WIDOWS: 2; MARGIN: 0.25em 0px; LETTER-SPACING: normal; LINE-HEIGHT: 1.6; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial"></DIV>