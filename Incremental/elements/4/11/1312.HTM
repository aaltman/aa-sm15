<b> : </b>The algorithm</H2><SPAN class=mw-editsection style="FONT-SIZE: small; FONT-FAMILY: sans-serif; VERTICAL-ALIGN: baseline; FONT-WEIGHT: normal; MARGIN-LEFT: 1em; LINE-HEIGHT: 0; MARGIN-RIGHT: 0px; user-select: none"><SPAN class=mw-editsection-bracket style="COLOR: ; MARGIN-RIGHT: 0.25em">[</SPAN><A title="Edit section: The algorithm" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; WHITE-SPACE: nowrap; COLOR: ; border-radius: 2px; overflow-wrap: break-word" href="https://en.wikipedia.org/w/index.php?title=Szyma%C5%84ski%27s_algorithm&amp;action=edit&amp;section=1"><SPAN>edit</SPAN></A><SPAN class=mw-editsection-bracket style="COLOR: ; MARGIN-LEFT: 0.25em">]</SPAN></SPAN></DIV>
<P style="FONT-SIZE: 16px; FONT-FAMILY: sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(32,33,34); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; MARGIN: 0.5em 0px 1em; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial">The algorithm is modeled on a waiting room with an entry and exit doorway.<SUP id=cite_ref-Sz88_1-1 class=reference style="FONT-SIZE: 12px; WHITE-SPACE: nowrap; FONT-WEIGHT: normal; FONT-STYLE: normal; LINE-HEIGHT: 1"><A style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: ; border-radius: 2px; overflow-wrap: break-word" href="https://en.wikipedia.org/wiki/Szyma%C5%84ski%27s_algorithm#cite_note-Sz88-1"><FONT style="BACKGROUND-COLOR: #ffffff" face=Arial>[1]</FONT></A></SUP><SPAN>&nbsp;</SPAN>Initially the entry door is open and the exit door is closed. All processes which request entry into the critical section at roughly the same time enter the waiting room; the last of them closes the entry door and opens the exit door. The processes then enter the critical section one by one (or in larger groups if the critical section permits this). The last process to leave the critical section closes the exit door and reopens the entry door, so the next batch of processes may enter.</P>
<P style="FONT-SIZE: 16px; FONT-FAMILY: sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(32,33,34); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; MARGIN: 0.5em 0px 1em; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial">The implementation consists of each process having a<SPAN>&nbsp;</SPAN><I>flag</I><SPAN>&nbsp;</SPAN>variable which is written by that process and read by all others (this single-writer property is desirable for efficient<SPAN>&nbsp;</SPAN><A title="Cache (computing)" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: ; border-radius: 2px; overflow-wrap: break-word" href="https://en.wikipedia.org/wiki/Cache_(computing)">cache</A><SPAN>&nbsp;</SPAN>usage).</P><FIGURE class=mw-default-size style="FONT-SIZE: 16px; FONT-FAMILY: sans-serif; BORDER-TOP-COLOR: ; WHITE-SPACE: normal; WORD-SPACING: 0px; BORDER-COLLAPSE: collapse; MIN-WIDTH: 100px; BORDER-BOTTOM: 0px; TEXT-TRANSFORM: none; FLOAT: right; BORDER-LEFT-COLOR: ; FONT-WEIGHT: 400; COLOR: rgb(32,33,34); FONT-STYLE: normal; TEXT-ALIGN: center; CLEAR: right; ORPHANS: 2; WIDOWS: 2; MARGIN: 0.5em 0px 1.3em 1.4em; DISPLAY: table; BORDER-RIGHT-COLOR: ; LETTER-SPACING: normal; LINE-HEIGHT: 0; TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial; border-image-source: ; border-image-slice: ; border-image-width: ; border-image-outset: ; border-image-repeat: " typeof="mw:File/Thumb"><A class=mw-file-description style="TEXT-DECORATION: none; BORDER-TOP: 0px; BORDER-RIGHT: 0px; BACKGROUND: none transparent scroll repeat 0% 0%; BORDER-BOTTOM: 0px; POSITION: relative; COLOR: ; BORDER-LEFT: 0px; DISPLAY: block; border-radius: 2px; overflow-wrap: break-word" href="https://en.wikipedia.org/wiki/File:Scheme_of_the_algorithm.png"><IMG class=mw-file-element style="BORDER-TOP: 1px solid; HEIGHT: auto; BORDER-RIGHT: 1px solid; VERTICAL-ALIGN: middle; BORDER-BOTTOM: 1px solid; BORDER-LEFT: 1px solid; MARGIN: 3px" src="https://upload.wikimedia.org/wikipedia/commons/thumb/a/a9/Scheme_of_the_algorithm.png/220px-Scheme_of_the_algorithm.png" width=220 height=202 data-file-height="900" data-file-width="982" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/a/a9/Scheme_of_the_algorithm.png/330px-Scheme_of_the_algorithm.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/a/a9/Scheme_of_the_algorithm.png/440px-Scheme_of_the_algorithm.png 2x" decoding="async"></A><FIGCAPTION style="FONT-SIZE: 14px; BORDER-TOP: 0px; BORDER-LEFT-COLOR: ; PADDING-BOTTOM: 6px; BORDER-BOTTOM-COLOR: ; TEXT-ALIGN: left; PADDING-TOP: 0px; PADDING-LEFT: 6px; DISPLAY: table-caption; BORDER-RIGHT-COLOR: ; LINE-HEIGHT: 1.4em; PADDING-RIGHT: 6px; CAPTION-SIDE: bottom; border-image-source: ; border-image-slice: ; border-image-width: ; border-image-outset: ; border-image-repeat: ">Scheme of Process States During Execution</FIGCAPTION></FIGURE>
<P style="FONT-SIZE: 16px; FONT-FAMILY: sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(32,33,34); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; MARGIN: 0.5em 0px 1em; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial">The<SPAN>&nbsp;</SPAN><I>flag</I><SPAN>&nbsp;</SPAN>variable assumes one of the following five values/states:</P>
<UL style="LIST-STYLE-TYPE: disc; FONT-SIZE: 16px; FONT-FAMILY: sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(32,33,34); PADDING-BOTTOM: 0px; FONT-STYLE: normal; PADDING-TOP: 0px; PADDING-LEFT: 0px; ORPHANS: 2; WIDOWS: 2; MARGIN: -0.5em 0px 0px 1.6em; LETTER-SPACING: normal; PADDING-RIGHT: 0px; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial; margin-inline: 1.6em 0px">
<LI style="MARGIN-BOTTOM: 0.1em"><B>0</B><SPAN>&nbsp;</SPAN>denoting that the process is in the noncritical section.</LI>
<LI style="MARGIN-BOTTOM: 0.1em"><B>1</B><SPAN>&nbsp;</SPAN>indicating that the process wants to enter its critical section (declaration of intention).</LI>
<LI style="MARGIN-BOTTOM: 0.1em"><B>2</B><SPAN>&nbsp;</SPAN>showing that the process waits for other processes to get through the door_in.</LI>
<LI style="MARGIN-BOTTOM: 0.1em"><B>3</B><SPAN>&nbsp;</SPAN>denoting that the process has just entered the waiting room.</LI>
<LI style="MARGIN-BOTTOM: 0.1em"><B>4</B><SPAN>&nbsp;</SPAN>indicating that the process has crossed the door_out and entered the critical section.</LI></UL>
<P style="FONT-SIZE: 16px; FONT-FAMILY: sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(32,33,34); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; MARGIN: 0.5em 0px 1em; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial">The status of the entry door is computed by reading the flags of all processes. Pseudo-code is given below:</P>
<DIV class="mw-highlight mw-highlight-lang-python mw-content-ltr" style="FONT-SIZE: 16px; FONT-FAMILY: sans-serif; BACKGROUND: rgb(248,248,248); unicode-bidi: embed; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(51,51,51); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial" dir=ltr><PRE style="BORDER-TOP: 1px solid; FONT-FAMILY: monospace, monospace; BORDER-RIGHT: 1px solid; WHITE-SPACE: pre-wrap; OVERFLOW-X: hidden; BORDER-BOTTOM: 1px solid; POSITION: relative; COLOR: rgb(51,51,51); PADDING-BOTTOM: 1em; PADDING-TOP: 1em; PADDING-LEFT: 1em; BORDER-LEFT: 1px solid; LINE-HEIGHT: 1.3; PADDING-RIGHT: 1em; BACKGROUND-COLOR: rgb(248,248,248); overflow-wrap: break-word; tab-size: 4"><SPAN></SPAN><SPAN class=c1 style="COLOR: rgb(61,123,123); FONT-STYLE: italic"># Entry protocol</SPAN>
<SPAN class=n>flag</SPAN><SPAN class=p>[</SPAN><SPAN class=bp style="COLOR: rgb(0,128,0)">self</SPAN><SPAN class=p>]</SPAN> <SPAN class=err style="BORDER-TOP: 0px; BORDER-RIGHT: 0px; BORDER-BOTTOM: 0px; BORDER-LEFT: 0px">&#8592;</SPAN> <SPAN class=mi style="COLOR: rgb(102,102,102)">1</SPAN>                    <SPAN class=c1 style="COLOR: rgb(61,123,123); FONT-STYLE: italic"># Standing outside waiting room</SPAN>
<SPAN class=k style="FONT-WEIGHT: bold; COLOR: rgb(0,128,0)">await</SPAN><SPAN class=p>(</SPAN><SPAN class=nb style="COLOR: rgb(0,128,0)">all</SPAN> <SPAN class=n>flag</SPAN><SPAN class=p>[</SPAN><SPAN class=mf style="COLOR: rgb(102,102,102)">1.</SPAN><SPAN class=o style="COLOR: rgb(102,102,102)">.</SPAN><SPAN class=n>N</SPAN><SPAN class=p>]</SPAN> <SPAN class=err style="BORDER-TOP: 0px; BORDER-RIGHT: 0px; BORDER-BOTTOM: 0px; BORDER-LEFT: 0px">&#8712;</SPAN> <SPAN class=p>{</SPAN><SPAN class=mi style="COLOR: rgb(102,102,102)">0</SPAN><SPAN class=p>,</SPAN> <SPAN class=mi style="COLOR: rgb(102,102,102)">1</SPAN><SPAN class=p>,</SPAN> <SPAN class=mi style="COLOR: rgb(102,102,102)">2</SPAN><SPAN class=p>})</SPAN> <SPAN class=c1 style="COLOR: rgb(61,123,123); FONT-STYLE: italic"># Wait for open door</SPAN>
<SPAN class=n>flag</SPAN><SPAN class=p>[</SPAN><SPAN class=bp style="COLOR: rgb(0,128,0)">self</SPAN><SPAN class=p>]</SPAN> <SPAN class=err style="BORDER-TOP: 0px; BORDER-RIGHT: 0px; BORDER-BOTTOM: 0px; BORDER-LEFT: 0px">&#8592;</SPAN> <SPAN class=mi style="COLOR: rgb(102,102,102)">3</SPAN>                    <SPAN class=c1 style="COLOR: rgb(61,123,123); FONT-STYLE: italic"># Standing in doorway</SPAN>
<SPAN class=k style="FONT-WEIGHT: bold; COLOR: rgb(0,128,0)">if</SPAN> <SPAN class=nb style="COLOR: rgb(0,128,0)">any</SPAN> <SPAN class=n>flag</SPAN><SPAN class=p>[</SPAN><SPAN class=mf style="COLOR: rgb(102,102,102)">1.</SPAN><SPAN class=o style="COLOR: rgb(102,102,102)">.</SPAN><SPAN class=n>N</SPAN><SPAN class=p>]</SPAN> <SPAN class=o style="COLOR: rgb(102,102,102)">=</SPAN> <SPAN class=mi style="COLOR: rgb(102,102,102)">1</SPAN><SPAN class=p>:</SPAN>            <SPAN class=c1 style="COLOR: rgb(61,123,123); FONT-STYLE: italic"># Another process is waiting to enter</SPAN>
    <SPAN class=n>flag</SPAN><SPAN class=p>[</SPAN><SPAN class=bp style="COLOR: rgb(0,128,0)">self</SPAN><SPAN class=p>]</SPAN> <SPAN class=err style="BORDER-TOP: 0px; BORDER-RIGHT: 0px; BORDER-BOTTOM: 0px; BORDER-LEFT: 0px">&#8592;</SPAN> <SPAN class=mi style="COLOR: rgb(102,102,102)">2</SPAN>                <SPAN class=c1 style="COLOR: rgb(61,123,123); FONT-STYLE: italic"># Waiting for other processes to enter</SPAN>
    <SPAN class=k style="FONT-WEIGHT: bold; COLOR: rgb(0,128,0)">await</SPAN><SPAN class=p>(</SPAN><SPAN class=nb style="COLOR: rgb(0,128,0)">any</SPAN> <SPAN class=n>flag</SPAN><SPAN class=p>[</SPAN><SPAN class=mf style="COLOR: rgb(102,102,102)">1.</SPAN><SPAN class=o style="COLOR: rgb(102,102,102)">.</SPAN><SPAN class=n>N</SPAN><SPAN class=p>]</SPAN> <SPAN class=o style="COLOR: rgb(102,102,102)">=</SPAN> <SPAN class=mi style="COLOR: rgb(102,102,102)">4</SPAN><SPAN class=p>)</SPAN>     <SPAN class=c1 style="COLOR: rgb(61,123,123); FONT-STYLE: italic"># Wait for a process to enter and close the door</SPAN>

<SPAN class=n>flag</SPAN><SPAN class=p>[</SPAN><SPAN class=bp style="COLOR: rgb(0,128,0)">self</SPAN><SPAN class=p>]</SPAN> <SPAN class=err style="BORDER-TOP: 0px; BORDER-RIGHT: 0px; BORDER-BOTTOM: 0px; BORDER-LEFT: 0px">&#8592;</SPAN> <SPAN class=mi style="COLOR: rgb(102,102,102)">4</SPAN>                    <SPAN class=c1 style="COLOR: rgb(61,123,123); FONT-STYLE: italic"># The door is closed</SPAN>
<SPAN class=k style="FONT-WEIGHT: bold; COLOR: rgb(0,128,0)">await</SPAN><SPAN class=p>(</SPAN><SPAN class=nb style="COLOR: rgb(0,128,0)">all</SPAN> <SPAN class=n>flag</SPAN><SPAN class=p>[</SPAN><SPAN class=mf style="COLOR: rgb(102,102,102)">1.</SPAN><SPAN class=o style="COLOR: rgb(102,102,102)">.</SPAN><SPAN class=n>self</SPAN><SPAN class=o style="COLOR: rgb(102,102,102)">-</SPAN><SPAN class=mi style="COLOR: rgb(102,102,102)">1</SPAN><SPAN class=p>]</SPAN> <SPAN class=err style="BORDER-TOP: 0px; BORDER-RIGHT: 0px; BORDER-BOTTOM: 0px; BORDER-LEFT: 0px">&#8712;</SPAN> <SPAN class=p>{</SPAN><SPAN class=mi style="COLOR: rgb(102,102,102)">0</SPAN><SPAN class=p>,</SPAN> <SPAN class=mi style="COLOR: rgb(102,102,102)">1</SPAN><SPAN class=p>})</SPAN>   <SPAN class=c1 style="COLOR: rgb(61,123,123); FONT-STYLE: italic"># Wait for everyone of lower ID to finish exit protocol</SPAN>

<SPAN class=c1 style="COLOR: rgb(61,123,123); FONT-STYLE: italic"># Critical section</SPAN>
<SPAN class=c1 style="COLOR: rgb(61,123,123); FONT-STYLE: italic"># ...</SPAN>

<SPAN class=c1 style="COLOR: rgb(61,123,123); FONT-STYLE: italic"># Exit protocol</SPAN>
<SPAN class=k style="FONT-WEIGHT: bold; COLOR: rgb(0,128,0)">await</SPAN><SPAN class=p>(</SPAN><SPAN class=nb style="COLOR: rgb(0,128,0)">all</SPAN> <SPAN class=n>flag</SPAN><SPAN class=p>[</SPAN><SPAN class=bp style="COLOR: rgb(0,128,0)">self</SPAN><SPAN class=o style="COLOR: rgb(102,102,102)">+</SPAN><SPAN class=mf style="COLOR: rgb(102,102,102)">1.</SPAN><SPAN class=o style="COLOR: rgb(102,102,102)">.</SPAN><SPAN class=n>N</SPAN><SPAN class=p>]</SPAN> <SPAN class=err style="BORDER-TOP: 0px; BORDER-RIGHT: 0px; BORDER-BOTTOM: 0px; BORDER-LEFT: 0px">&#8712;</SPAN> <SPAN class=p>{</SPAN><SPAN class=mi style="COLOR: rgb(102,102,102)">0</SPAN><SPAN class=p>,</SPAN> <SPAN class=mi style="COLOR: rgb(102,102,102)">1</SPAN><SPAN class=p>,</SPAN> <SPAN class=mi style="COLOR: rgb(102,102,102)">4</SPAN><SPAN class=p>})</SPAN> <SPAN class=c1 style="COLOR: rgb(61,123,123); FONT-STYLE: italic"># Ensure everyone in the waiting room has</SPAN>
                                       <SPAN class=c1 style="COLOR: rgb(61,123,123); FONT-STYLE: italic"># realized that the door is supposed to be closed</SPAN>
<SPAN class=n>flag</SPAN><SPAN class=p>[</SPAN><SPAN class=bp style="COLOR: rgb(0,128,0)">self</SPAN><SPAN class=p>]</SPAN> <SPAN class=err style="BORDER-TOP: 0px; BORDER-RIGHT: 0px; BORDER-BOTTOM: 0px; BORDER-LEFT: 0px">&#8592;</SPAN> <SPAN class=mi style="COLOR: rgb(102,102,102)">0</SPAN> <SPAN class=c1 style="COLOR: rgb(61,123,123); FONT-STYLE: italic"># Leave. Reopen door if nobody is still in the waiting room</SPAN>
</PRE></DIV>
<P style="FONT-SIZE: 16px; FONT-FAMILY: sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(32,33,34); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; MARGIN: 0.5em 0px 1em; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial">Note that the order of the "all" and "any" tests must be uniform. Also the "any" tests should be satisfied by a thread other than self. For example, if the test is any flag[1..<I>N</I>] = 1 and only flag[self] = 1, then the test is said to have failed/returned 0. Despite the intuitive explanation, the algorithm was not easy to<SPAN>&nbsp;</SPAN><A title="Formal verification" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: ; border-radius: 2px; overflow-wrap: break-word" href="https://en.wikipedia.org/wiki/Formal_verification">prove correct</A>, however due to its favorable properties a proof of correctness was desirable and multiple proofs have been presented.<SUP id=cite_ref-ZA91_2-1 class=reference style="FONT-SIZE: 12px; WHITE-SPACE: nowrap; FONT-WEIGHT: normal; FONT-STYLE: normal; LINE-HEIGHT: 1"><A style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: ; border-radius: 2px; overflow-wrap: break-word" href="https://en.wikipedia.org/wiki/Szyma%C5%84ski%27s_algorithm#cite_note-ZA91-2"><FONT style="BACKGROUND-COLOR: #ffffff" face=Arial>[2]</FONT></A></SUP><SUP id=cite_ref-5 class=reference style="FONT-SIZE: 12px; WHITE-SPACE: nowrap; FONT-WEIGHT: normal; FONT-STYLE: normal; LINE-HEIGHT: 1"><A style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: ; border-radius: 2px; overflow-wrap: break-word" href="https://en.wikipedia.org/wiki/Szyma%C5%84ski%27s_algorithm#cite_note-5"><FONT style="BACKGROUND-COLOR: #ffffff" face=Arial>[5]</FONT></A></SUP>