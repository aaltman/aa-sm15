<B>: </B>
<P class=western style="MARGIN-TOP: 0.09in; MARGIN-LEFT: 0.23in; LINE-HEIGHT: 96%; TEXT-INDENT: 0.13in" align=justify><FONT style="FONT-SIZE: 11pt" size=2><FONT style="FONT-SIZE: 8pt" size=1><I><B>Abstract</B></I></FONT><FONT style="FONT-SIZE: 8pt" size=1><B>&#8212;Nowadays, the distributed systems have been widely applied in a variety of fields. However, this raises more concerns on reliability. Consensus algorithm is an important measure to ensure</B></FONT><FONT style="FONT-SIZE: 8pt" size=1><SPAN style="LETTER-SPACING: -0.3pt"><B> </B></SPAN></FONT><FONT style="FONT-SIZE: 8pt" size=1><B>reliability</B></FONT><FONT style="FONT-SIZE: 8pt" size=1><SPAN style="LETTER-SPACING: -0.3pt"><B> </B></SPAN></FONT><FONT style="FONT-SIZE: 8pt" size=1><B>of</B></FONT><FONT style="FONT-SIZE: 8pt" size=1><SPAN style="LETTER-SPACING: -0.3pt"><B> </B></SPAN></FONT><FONT style="FONT-SIZE: 8pt" size=1><B>distributed</B></FONT><FONT style="FONT-SIZE: 8pt" size=1><SPAN style="LETTER-SPACING: -0.3pt"><B> </B></SPAN></FONT><FONT style="FONT-SIZE: 8pt" size=1><B>systems,</B></FONT><FONT style="FONT-SIZE: 8pt" size=1><SPAN style="LETTER-SPACING: -0.3pt"><B> </B></SPAN></FONT><FONT style="FONT-SIZE: 8pt" size=1><B>but</B></FONT><FONT style="FONT-SIZE: 8pt" size=1><SPAN style="LETTER-SPACING: -0.3pt"><B> </B></SPAN></FONT><FONT style="FONT-SIZE: 8pt" size=1><B>its</B></FONT><FONT style="FONT-SIZE: 8pt" size=1><SPAN style="LETTER-SPACING: -0.3pt"><B> </B></SPAN></FONT><FONT style="FONT-SIZE: 8pt" size=1><B>strong</B></FONT><FONT style="FONT-SIZE: 8pt" size=1><SPAN style="LETTER-SPACING: -0.3pt"><B> </B></SPAN></FONT><FONT style="FONT-SIZE: 8pt" size=1><B>consistency may reduce the performance, resulting in cluster failure or even downtime. To this end, we propose an accelerated log backtrack- ing</B></FONT><FONT style="FONT-SIZE: 8pt" size=1><SPAN style="LETTER-SPACING: -0.1pt"><B> </B></SPAN></FONT><FONT style="FONT-SIZE: 8pt" size=1><B>optimization</B></FONT><FONT style="FONT-SIZE: 8pt" size=1><SPAN style="LETTER-SPACING: -0.1pt"><B> </B></SPAN></FONT><FONT style="FONT-SIZE: 8pt" size=1><B>Raft</B></FONT><FONT style="FONT-SIZE: 8pt" size=1><SPAN style="LETTER-SPACING: -0.1pt"><B> </B></SPAN></FONT><FONT style="FONT-SIZE: 8pt" size=1><B>algorithm,</B></FONT><FONT style="FONT-SIZE: 8pt" size=1><SPAN style="LETTER-SPACING: -0.1pt"><B> </B></SPAN></FONT><FONT style="FONT-SIZE: 8pt" size=1><B>called</B></FONT><FONT style="FONT-SIZE: 8pt" size=1><SPAN style="LETTER-SPACING: -0.1pt"><B> </B></SPAN></FONT><FONT style="FONT-SIZE: 8pt" size=1><B>ALB-Raft.</B></FONT><FONT style="FONT-SIZE: 8pt" size=1><SPAN style="LETTER-SPACING: -0.1pt"><B> </B></SPAN></FONT><FONT style="FONT-SIZE: 8pt" size=1><B>It</B></FONT><FONT style="FONT-SIZE: 8pt" size=1><SPAN style="LETTER-SPACING: -0.1pt"><B> </B></SPAN></FONT><FONT style="FONT-SIZE: 8pt" size=1><B>can</B></FONT><FONT style="FONT-SIZE: 8pt" size=1><SPAN style="LETTER-SPACING: -0.1pt"><B> </B></SPAN></FONT><FONT style="FONT-SIZE: 8pt" size=1><B>improve the performance of traditional raft algorithm by enabling the backward tracker to update quickly. In particular, to achieve strong consistency, we construct a fault-tolerant distributed key- value (KV) service which conforms to the linearizable semantics. The experimental results illustrate that, when compared to the traditional raft algorithm, the proposed ALB-Raft consensus algorithm can resolve 20% of hundreds of log entry conflicts. Moreover, the ALB-Raft algorithm can also avoid the linear increase in the number of messages with the aggravation of log conflicts to ensure strong consistency.</B></FONT></FONT></P>
<P class=western style="MARGIN-TOP: 0in; MARGIN-LEFT: 0.36in" align=justify><FONT style="FONT-SIZE: 11pt" size=2><FONT style="FONT-SIZE: 8pt" size=1><I><B>Index</B></I></FONT><FONT style="FONT-SIZE: 8pt" size=1><SPAN style="LETTER-SPACING: 0.4pt"><I><B> </B></I></SPAN></FONT><FONT style="FONT-SIZE: 8pt" size=1><I><B>Terms</B></I></FONT><FONT style="FONT-SIZE: 8pt" size=1><B>&#8212;Raft;</B></FONT><FONT style="FONT-SIZE: 8pt" size=1><SPAN style="LETTER-SPACING: 0.6pt"><B> </B></SPAN></FONT><FONT style="FONT-SIZE: 8pt" size=1><B>Linearizability;</B></FONT><FONT style="FONT-SIZE: 8pt" size=1><SPAN style="LETTER-SPACING: 0.6pt"><B> </B></SPAN></FONT><FONT style="FONT-SIZE: 8pt" size=1><B>Key-Value;</B></FONT><FONT style="FONT-SIZE: 8pt" size=1><SPAN style="LETTER-SPACING: 0.6pt"><B> </B></SPAN></FONT><FONT style="FONT-SIZE: 8pt" size=1><SPAN style="LETTER-SPACING: -0.1pt"><B>Consensus</B></SPAN></FONT></FONT></P>
<P class=western style="MARGIN-TOP: 0.06in" align=left><BR></P>
<OL type=I>
<LI>
<P style="LINE-HEIGHT: 100%" align=left><FONT style="FONT-SIZE: 11pt" size=2><SPAN style="FONT-VARIANT: small-caps"><FONT style="FONT-SIZE: 9pt" size=2><SPAN style="LETTER-SPACING: -0.1pt">Introduction</SPAN></FONT></SPAN></FONT></P></LI></OL>
<P class=western style="MARGIN-TOP: 0.09in; MARGIN-LEFT: 0.23in; LINE-HEIGHT: 103%; TEXT-INDENT: 0.13in">Distributed systems have the natural concurrency feature. However, it also faces various complex failure scenarios such as server failure, message delay, loss, out-of-order, repetition, network partitioning [1], [4]. Moreover, the services provided by distributed system need to hide errors from applications<SPAN style="LETTER-SPACING: 2pt"> </SPAN>[1]. They also need to ensure service availability even in the case of a partial server failure [1], [2]. However, this requires distributed services to automatically handle server crash and recovery, and its corresponding fault-tolerant processing is a major challenge faced by distributed systems [1], [3], [5].</P>
<P class=western style="MARGIN-TOP: 0.01in; MARGIN-LEFT: 0.23in; LINE-HEIGHT: 103%; TEXT-INDENT: 0.13in">Byzantine failures [1] and fail-stop failures [2] are the two most commonly used failure models in distributed systems<SPAN style="LETTER-SPACING: 2pt"> </SPAN>[2], [3]. The most general method to deal with these two failures is to implement a reliable consensus algorithm [6], [10].<SPAN style="LETTER-SPACING: -0.6pt"> </SPAN>However,<SPAN style="LETTER-SPACING: -0.6pt"> </SPAN>existing<SPAN style="LETTER-SPACING: -0.6pt"> </SPAN>mainstream<SPAN style="LETTER-SPACING: -0.6pt"> </SPAN>consensus<SPAN style="LETTER-SPACING: -0.6pt"> </SPAN>algorithms<SPAN style="LETTER-SPACING: -0.6pt"> </SPAN>such as Paxos [7], ViewStamped Replication [8], and Zab [9] have some<SPAN style="LETTER-SPACING: -0.4pt"> </SPAN>defects.<SPAN style="LETTER-SPACING: -0.4pt"> </SPAN>First,<SPAN style="LETTER-SPACING: -0.4pt"> </SPAN>these<SPAN style="LETTER-SPACING: -0.4pt"> </SPAN>algorithms<SPAN style="LETTER-SPACING: -0.4pt"> </SPAN>are<SPAN style="LETTER-SPACING: -0.4pt"> </SPAN>difficult<SPAN style="LETTER-SPACING: -0.4pt"> </SPAN>to<SPAN style="LETTER-SPACING: -0.4pt"> </SPAN>understand in the algorithms themselves which are not easy to build the actual system. Second, building a reliable distributed system needs<SPAN style="LETTER-SPACING: -0.3pt"> </SPAN>the<SPAN style="LETTER-SPACING: -0.3pt"> </SPAN>additional<SPAN style="LETTER-SPACING: -0.3pt"> </SPAN>expansion<SPAN style="LETTER-SPACING: -0.3pt"> </SPAN>or<SPAN style="LETTER-SPACING: -0.3pt"> </SPAN>performance<SPAN style="LETTER-SPACING: -0.3pt"> </SPAN>optimization<SPAN style="LETTER-SPACING: -0.3pt"> </SPAN>of the above consensus algorithms.</P>
<P class=western style="MARGIN-TOP: 0.01in; MARGIN-LEFT: 0.23in; LINE-HEIGHT: 103%; TEXT-INDENT: 0.13in">Due to the above problems among the existing consensus algorithms, Raft algorithm has now been selected as the main solution for fault tolerance of distributed systems by both academic<SPAN style="LETTER-SPACING: -0.3pt"> </SPAN>and<SPAN style="LETTER-SPACING: -0.3pt"> </SPAN>industrial<SPAN style="LETTER-SPACING: -0.3pt"> </SPAN>communities<SPAN style="LETTER-SPACING: -0.3pt"> </SPAN>[4],<SPAN style="LETTER-SPACING: -0.3pt"> </SPAN>[10],<SPAN style="LETTER-SPACING: -0.3pt"> </SPAN>[16].<SPAN style="LETTER-SPACING: -0.3pt"> </SPAN>Generally speaking,<SPAN style="LETTER-SPACING: 1.4pt"> </SPAN>Raft<SPAN style="LETTER-SPACING: 1.4pt"> </SPAN>algorithm<SPAN style="LETTER-SPACING: 1.4pt"> </SPAN>is<SPAN style="LETTER-SPACING: 1.4pt"> </SPAN>a<SPAN style="LETTER-SPACING: 1.4pt"> </SPAN>consensus<SPAN style="LETTER-SPACING: 1.4pt"> </SPAN>algorithm<SPAN style="LETTER-SPACING: 1.4pt"> </SPAN>based<SPAN style="LETTER-SPACING: 1.4pt"> </SPAN><SPAN style="LETTER-SPACING: -0.3pt">on</SPAN></P>
<P class=western style="MARGIN-TOP: 0.07in; MARGIN-LEFT: 0.22in; LINE-HEIGHT: 103%; MARGIN-RIGHT: 0.14in">the idea of Paxos algorithm which is well understandable and easy to implement [10]. But in a real distributed system, users usually have the requirements of high performance and strict data consistency. However, the origin Raft algorithm may fail to<SPAN style="LETTER-SPACING: -0.2pt"> </SPAN>achieve<SPAN style="LETTER-SPACING: -0.2pt"> </SPAN>this,<SPAN style="LETTER-SPACING: -0.2pt"> </SPAN>while<SPAN style="LETTER-SPACING: -0.2pt"> </SPAN>conducting<SPAN style="LETTER-SPACING: -0.2pt"> </SPAN>multiple<SPAN style="LETTER-SPACING: -0.2pt"> </SPAN>leader<SPAN style="LETTER-SPACING: -0.2pt"> </SPAN>elections<SPAN style="LETTER-SPACING: -0.2pt"> </SPAN>will significantly reduce the performance of distributed system. Especially in the case of network partition or node downtime, it is also difficult to ensure effective log replications by using origin Raft. Therefore, it is necessary to design a follower&#8217;s log<SPAN style="LETTER-SPACING: -0.4pt"> </SPAN>update<SPAN style="LETTER-SPACING: -0.4pt"> </SPAN>mechanism<SPAN style="LETTER-SPACING: -0.4pt"> </SPAN>with<SPAN style="LETTER-SPACING: -0.4pt"> </SPAN>strong<SPAN style="LETTER-SPACING: -0.4pt"> </SPAN>consistency<SPAN style="LETTER-SPACING: -0.4pt"> </SPAN>requirement<SPAN style="LETTER-SPACING: -0.4pt"> </SPAN>for the origin Raft algorithm to improve the performance.</P>
<P class=western style="MARGIN-LEFT: 0.22in; LINE-HEIGHT: 103%; MARGIN-RIGHT: 0.14in; TEXT-INDENT: 0.13in">In order to improve the performance of the Raft algorithm, this paper proposes an accelerated log backtracking optimiza- tion<SPAN style="LETTER-SPACING: -0.2pt"> </SPAN>Raft<SPAN style="LETTER-SPACING: -0.2pt"> </SPAN>algorithm,<SPAN style="LETTER-SPACING: -0.2pt"> </SPAN>called<SPAN style="LETTER-SPACING: -0.2pt"> </SPAN>ALB-Raft.<SPAN style="LETTER-SPACING: -0.2pt"> </SPAN>It<SPAN style="LETTER-SPACING: -0.2pt"> </SPAN>can<SPAN style="LETTER-SPACING: -0.2pt"> </SPAN>effectively<SPAN style="LETTER-SPACING: -0.2pt"> </SPAN>reduce the number of message communications required to resolve conflicts<SPAN style="LETTER-SPACING: 2pt"> </SPAN>with<SPAN style="LETTER-SPACING: 2pt"> </SPAN>hundreds<SPAN style="LETTER-SPACING: 2pt"> </SPAN>of<SPAN style="LETTER-SPACING: 2pt"> </SPAN>log<SPAN style="LETTER-SPACING: 2pt"> </SPAN>entries,<SPAN style="LETTER-SPACING: 2pt"> </SPAN>thereby<SPAN style="LETTER-SPACING: 2pt"> </SPAN>improving the performance of traditional Raft. Moreover, we have also built a Key-Value service, which can effectively improve the fault tolerance of distributed systems while ensuring strong consistency. In particular, the main contributions of this paper are as follows.</P>
<UL>
<LI>
<P style="MARGIN-TOP: 0.02in; LINE-HEIGHT: 103%; MARGIN-RIGHT: 0.14in" align=justify><FONT style="FONT-SIZE: 11pt" size=2><FONT style="FONT-SIZE: 9pt" size=2>We propose a high-performance optimized Raft Algo- </FONT><FONT style="FONT-SIZE: 9pt" size=2><SPAN style="LETTER-SPACING: -0.1pt">rithm.</SPAN></FONT></FONT></P>
<LI>
<P style="LINE-HEIGHT: 103%; MARGIN-RIGHT: 0.14in" align=justify><FONT style="FONT-SIZE: 11pt" size=2><FONT style="FONT-SIZE: 9pt" size=2>We achieve Linearizability by implementing Key-Value service</FONT><FONT style="FONT-SIZE: 9pt" size=2><SPAN style="LETTER-SPACING: -0.1pt"> </SPAN></FONT><FONT style="FONT-SIZE: 9pt" size=2>based</FONT><FONT style="FONT-SIZE: 9pt" size=2><SPAN style="LETTER-SPACING: -0.1pt"> </SPAN></FONT><FONT style="FONT-SIZE: 9pt" size=2>on</FONT><FONT style="FONT-SIZE: 9pt" size=2><SPAN style="LETTER-SPACING: -0.1pt"> </SPAN></FONT><FONT style="FONT-SIZE: 9pt" size=2>ALB-Raft</FONT><FONT style="FONT-SIZE: 9pt" size=2><SPAN style="LETTER-SPACING: -0.1pt"> </SPAN></FONT><FONT style="FONT-SIZE: 9pt" size=2>algorithm.</FONT><FONT style="FONT-SIZE: 9pt" size=2><SPAN style="LETTER-SPACING: -0.1pt"> </SPAN></FONT><FONT style="FONT-SIZE: 9pt" size=2>The</FONT><FONT style="FONT-SIZE: 9pt" size=2><SPAN style="LETTER-SPACING: -0.1pt"> </SPAN></FONT><FONT style="FONT-SIZE: 9pt" size=2>strong</FONT><FONT style="FONT-SIZE: 9pt" size=2><SPAN style="LETTER-SPACING: -0.1pt"> </SPAN></FONT><FONT style="FONT-SIZE: 9pt" size=2>consis- tency of ALB-Raft algorithm can be effectively verified by the Porcupine Linearizability detector [18].</FONT></FONT></P>
<LI>
<P style="LINE-HEIGHT: 103%; MARGIN-RIGHT: 0.14in" align=justify><FONT style="FONT-SIZE: 11pt" size=2><FONT style="FONT-SIZE: 9pt" size=2>The</FONT><FONT style="FONT-SIZE: 9pt" size=2><SPAN style="LETTER-SPACING: -0.1pt"> </SPAN></FONT><FONT style="FONT-SIZE: 9pt" size=2>experiment</FONT><FONT style="FONT-SIZE: 9pt" size=2><SPAN style="LETTER-SPACING: -0.1pt"> </SPAN></FONT><FONT style="FONT-SIZE: 9pt" size=2>results</FONT><FONT style="FONT-SIZE: 9pt" size=2><SPAN style="LETTER-SPACING: -0.1pt"> </SPAN></FONT><FONT style="FONT-SIZE: 9pt" size=2>show</FONT><FONT style="FONT-SIZE: 9pt" size=2><SPAN style="LETTER-SPACING: -0.1pt"> </SPAN></FONT><FONT style="FONT-SIZE: 9pt" size=2>that</FONT><FONT style="FONT-SIZE: 9pt" size=2><SPAN style="LETTER-SPACING: -0.1pt"> </SPAN></FONT><FONT style="FONT-SIZE: 9pt" size=2>the</FONT><FONT style="FONT-SIZE: 9pt" size=2><SPAN style="LETTER-SPACING: -0.1pt"> </SPAN></FONT><FONT style="FONT-SIZE: 9pt" size=2>proposed</FONT><FONT style="FONT-SIZE: 9pt" size=2><SPAN style="LETTER-SPACING: -0.1pt"> </SPAN></FONT><FONT style="FONT-SIZE: 9pt" size=2>ALB-Raft algorithm can effectively improve the performance of distributed</FONT><FONT style="FONT-SIZE: 9pt" size=2><SPAN style="LETTER-SPACING: -0.1pt"> </SPAN></FONT><FONT style="FONT-SIZE: 9pt" size=2>systems</FONT><FONT style="FONT-SIZE: 9pt" size=2><SPAN style="LETTER-SPACING: -0.2pt"> </SPAN></FONT><FONT style="FONT-SIZE: 9pt" size=2>while</FONT><FONT style="FONT-SIZE: 9pt" size=2><SPAN style="LETTER-SPACING: -0.1pt"> </SPAN></FONT><FONT style="FONT-SIZE: 9pt" size=2>ensuring</FONT><FONT style="FONT-SIZE: 9pt" size=2><SPAN style="LETTER-SPACING: -0.1pt"> </SPAN></FONT><FONT style="FONT-SIZE: 9pt" size=2>the</FONT><FONT style="FONT-SIZE: 9pt" size=2><SPAN style="LETTER-SPACING: -0.1pt"> </SPAN></FONT><FONT style="FONT-SIZE: 9pt" size=2>strong</FONT><FONT style="FONT-SIZE: 9pt" size=2><SPAN style="LETTER-SPACING: -0.2pt"> </SPAN></FONT><FONT style="FONT-SIZE: 9pt" size=2>consistency </FONT><FONT style="FONT-SIZE: 9pt" size=2><SPAN style="LETTER-SPACING: -0.1pt">requirements.</SPAN></FONT></FONT></P></LI></UL>
<P class=western style="MARGIN-TOP: 0.02in; MARGIN-LEFT: 0.22in; LINE-HEIGHT: 103%; MARGIN-RIGHT: 0.14in; TEXT-INDENT: 0.13in">The rest of the paper is organized as follows: Section II describes<SPAN style="LETTER-SPACING: -0.5pt"> </SPAN>related<SPAN style="LETTER-SPACING: -0.5pt"> </SPAN>work.<SPAN style="LETTER-SPACING: -0.5pt"> </SPAN>Section<SPAN style="LETTER-SPACING: -0.5pt"> </SPAN>III<SPAN style="LETTER-SPACING: -0.5pt"> </SPAN>presents<SPAN style="LETTER-SPACING: -0.5pt"> </SPAN>our<SPAN style="LETTER-SPACING: -0.5pt"> </SPAN>design<SPAN style="LETTER-SPACING: -0.5pt"> </SPAN>of<SPAN style="LETTER-SPACING: -0.5pt"> </SPAN>ALB- Raft algorithm. Section IV constructs a fault-tolerant Key- Value service that conforms to strong consistency semantics. The analysis of system performance is provided in Section V. Conclusion and future works appear in Section VI.</P>
<OL type=I start=2>
<LI>
<P style="MARGIN-TOP: 0.08in; LINE-HEIGHT: 100%" align=left><FONT style="FONT-SIZE: 11pt" size=2><SPAN style="FONT-VARIANT: small-caps"><FONT style="FONT-SIZE: 9pt" size=2>Related</FONT></SPAN><SPAN style="FONT-VARIANT: small-caps"><FONT style="FONT-SIZE: 9pt" size=2><SPAN style="LETTER-SPACING: 3pt"> </SPAN></FONT></SPAN><SPAN style="FONT-VARIANT: small-caps"><FONT style="FONT-SIZE: 9pt" size=2><SPAN style="LETTER-SPACING: -0.2pt">Work</SPAN></FONT></SPAN></FONT></P></LI></OL>
<P class=western style="MARGIN-TOP: 0.05in; MARGIN-LEFT: 0.22in; LINE-HEIGHT: 103%; MARGIN-RIGHT: 0.14in; TEXT-INDENT: 0.13in">The &#8220;gold standard&#8221; algorithm in distributed consensus is the Paxos protocol [6]. However, Paxos has two significant drawbacks. First, the definition of Paxos is a bit abstract, thus it<SPAN style="LETTER-SPACING: -0.5pt"> </SPAN>may<SPAN style="LETTER-SPACING: -0.5pt"> </SPAN>take<SPAN style="LETTER-SPACING: -0.5pt"> </SPAN>considerable<SPAN style="LETTER-SPACING: -0.5pt"> </SPAN>efforts<SPAN style="LETTER-SPACING: -0.5pt"> </SPAN>for<SPAN style="LETTER-SPACING: -0.5pt"> </SPAN>user<SPAN style="LETTER-SPACING: -0.5pt"> </SPAN>to<SPAN style="LETTER-SPACING: -0.5pt"> </SPAN>fully<SPAN style="LETTER-SPACING: -0.5pt"> </SPAN>understand<SPAN style="LETTER-SPACING: -0.5pt"> </SPAN>[7]. The<SPAN style="LETTER-SPACING: 0.7pt"> </SPAN>second<SPAN style="LETTER-SPACING: 0.7pt"> </SPAN>problem<SPAN style="LETTER-SPACING: 0.8pt"> </SPAN>with<SPAN style="LETTER-SPACING: 0.7pt"> </SPAN>Paxos<SPAN style="LETTER-SPACING: 0.7pt"> </SPAN>is<SPAN style="LETTER-SPACING: 0.7pt"> </SPAN>that<SPAN style="LETTER-SPACING: 0.7pt"> </SPAN>it<SPAN style="LETTER-SPACING: 0.7pt"> </SPAN>may<SPAN style="LETTER-SPACING: 0.8pt"> </SPAN>fail<SPAN style="LETTER-SPACING: 0.7pt"> </SPAN>to<SPAN style="LETTER-SPACING: 0.7pt"> </SPAN><SPAN style="LETTER-SPACING: -0.1pt">provide</SPAN></P>
<DIV id=Section2 dir=ltr>
<P class=western style="MARGIN-TOP: 0.35in; MARGIN-LEFT: 0.07in" align=left><SPAN class=sd-abs-pos style="WIDTH: 20px; POSITION: absolute; LEFT: -0.43in; TOP: 2.41in"></SPAN><FONT size=2><FONT size=1>978-1-6654-6131-3/22/$31.00 &#169;2022 </FONT><FONT size=1>IEEE</FONT><FONT size=1> </FONT><FONT size=1>522</FONT></FONT> 
<P></P></DIV>
<DIV id=Section3 style="column-count: 2" dir=ltr gutter="6">
<P class=western style="MARGIN-TOP: 0.05in; PAGE-BREAK-BEFORE: always; MARGIN-LEFT: 0.22in; LINE-HEIGHT: 103%">a good foundation for building practical implementations [7], [10]. ViewStamped Replication [8] and Zab [7] are two other well-known consensus algorithms. These two algorithms are equivalent to the variants of the Paxos algorithm. However, they have the same problems as the Paxos [10].</P>
<P class=western style="MARGIN-TOP: 0in; MARGIN-LEFT: 0.22in; LINE-HEIGHT: 103%; TEXT-INDENT: 0.13in">Raft<SPAN style="LETTER-SPACING: 2pt"> </SPAN>is<SPAN style="LETTER-SPACING: 2pt"> </SPAN>a<SPAN style="LETTER-SPACING: 2pt"> </SPAN>new<SPAN style="LETTER-SPACING: 2pt"> </SPAN>distributed<SPAN style="LETTER-SPACING: 2pt"> </SPAN>consensus<SPAN style="LETTER-SPACING: 2pt"> </SPAN>algorithm<SPAN style="LETTER-SPACING: 2pt"> </SPAN>proposed by Diego in 2014 [10]. Origin Raft is designed to be very understandable and the performance is also as good as Paxos. But it still has some drawbacks. First, it ignores the higher performance requirements for fault tolerance in distributed systems. Second, the traditional Raft consensus algorithm cannot ensure the strong consistency of the distributed sys- tem, which will result in the problems of log inconsistency, message loss and data disorder of the clusters. Therefore,<SPAN style="LETTER-SPACING: 2pt"> </SPAN>some improvement works attempt to solve the problem with the origin Raft algorithm which have lower performance and weaker consistency.</P>
<P class=western style="MARGIN-TOP: 0in; MARGIN-LEFT: 0.22in; LINE-HEIGHT: 103%; TEXT-INDENT: 0.13in">Since<SPAN style="LETTER-SPACING: -0.6pt"> </SPAN>multiple<SPAN style="LETTER-SPACING: -0.6pt"> </SPAN>invalid<SPAN style="LETTER-SPACING: -0.6pt"> </SPAN>leader<SPAN style="LETTER-SPACING: -0.6pt"> </SPAN>elections<SPAN style="LETTER-SPACING: -0.6pt"> </SPAN>and<SPAN style="LETTER-SPACING: -0.6pt"> </SPAN>unnecessary<SPAN style="LETTER-SPACING: -0.6pt"> </SPAN>node communications will cause long delay and low throughput of the distributed systems, some efforts have been done to solve these problems to increase origin Raft algorithm performance. For example, Du et al. [11] proposes a novel leader election optimized Raft method to maintain low request latency and high<SPAN style="LETTER-SPACING: -0.3pt"> </SPAN>throughput<SPAN style="LETTER-SPACING: -0.3pt"> </SPAN>per<SPAN style="LETTER-SPACING: -0.3pt"> </SPAN>second.<SPAN style="LETTER-SPACING: -0.3pt"> </SPAN>Xu<SPAN style="LETTER-SPACING: -0.3pt"> </SPAN>et<SPAN style="LETTER-SPACING: -0.3pt"> </SPAN>al.<SPAN style="LETTER-SPACING: -0.3pt"> </SPAN>[12]<SPAN style="LETTER-SPACING: -0.3pt"> </SPAN>proposes<SPAN style="LETTER-SPACING: -0.3pt"> </SPAN>a<SPAN style="LETTER-SPACING: -0.3pt"> </SPAN>weighted Raft algorithm with a new node communications model. This approach reduces the latency in achieving final consistency in IoT<SPAN style="LETTER-SPACING: -0.1pt"> </SPAN>applications.<SPAN style="LETTER-SPACING: -0.1pt"> </SPAN>Choumas<SPAN style="LETTER-SPACING: -0.1pt"> </SPAN>et<SPAN style="LETTER-SPACING: -0.1pt"> </SPAN>al.<SPAN style="LETTER-SPACING: -0.1pt"> </SPAN>[13]<SPAN style="LETTER-SPACING: -0.1pt"> </SPAN>designs<SPAN style="LETTER-SPACING: -0.1pt"> </SPAN>a<SPAN style="LETTER-SPACING: -0.1pt"> </SPAN>leader<SPAN style="LETTER-SPACING: -0.1pt"> </SPAN>election time optimized Raft protocol which significantly reduce the latency between the leader and all the other nodes.</P>
<P class=western style="MARGIN-TOP: 0in; MARGIN-LEFT: 0.22in; LINE-HEIGHT: 103%; TEXT-INDENT: 0.13in">On the other hand, it is difficult for distributed systems using the Raft algorithm to achieve high performance while maintaining strong consistency. Thus, academic community has made a lot of efforts to ensure the strong consistency by optimizing<SPAN style="LETTER-SPACING: -0.3pt"> </SPAN>the<SPAN style="LETTER-SPACING: -0.3pt"> </SPAN>origin<SPAN style="LETTER-SPACING: -0.3pt"> </SPAN>Raft<SPAN style="LETTER-SPACING: -0.3pt"> </SPAN>algorithm.<SPAN style="LETTER-SPACING: -0.2pt"> </SPAN>For<SPAN style="LETTER-SPACING: -0.3pt"> </SPAN>example,<SPAN style="LETTER-SPACING: -0.3pt"> </SPAN>Wang<SPAN style="LETTER-SPACING: -0.3pt"> </SPAN>et<SPAN style="LETTER-SPACING: -0.3pt"> al.</SPAN></P>
<P class=western style="MARGIN-TOP: 0in; MARGIN-LEFT: 0.22in; LINE-HEIGHT: 103%">[14] proposes a Key-Value Raft (KV-Raft) algorithm to keep the strong consistency and reduce operations latency at the same time. Liu et al. [15] designs an optimized Raft algorithm with a new leader selection scheme to keep the blockchain network maintaining strong consistency. Huang et al. [16] implements a Raft-based Hybrid Transaction and Analytical Process (HTAP) database with strong consistency and high <SPAN style="LETTER-SPACING: -0.1pt">performance.</SPAN></P>
<P class=western style="MARGIN-TOP: 0in; MARGIN-LEFT: 0.22in; LINE-HEIGHT: 103%; TEXT-INDENT: 0.13in">However, most of the currently optimized Raft consensus algorithms<SPAN style="LETTER-SPACING: 1.6pt"> </SPAN>only<SPAN style="LETTER-SPACING: 1.6pt"> </SPAN>take<SPAN style="LETTER-SPACING: 1.6pt"> </SPAN>the<SPAN style="LETTER-SPACING: 1.6pt"> </SPAN>performance<SPAN style="LETTER-SPACING: 1.6pt"> </SPAN>or<SPAN style="LETTER-SPACING: 1.6pt"> </SPAN>strong<SPAN style="LETTER-SPACING: 1.6pt"> </SPAN>consistency as a factor to improve the reliability and fault tolerance of distributed systems. Only a few studies consider improving both performance and strong consistency at the same time. However, these efforts also have ignored strong consistency correctness<SPAN style="LETTER-SPACING: -0.3pt"> </SPAN>verification<SPAN style="LETTER-SPACING: -0.3pt"> </SPAN>for<SPAN style="LETTER-SPACING: -0.3pt"> </SPAN>distributed<SPAN style="LETTER-SPACING: -0.3pt"> </SPAN>systems.<SPAN style="LETTER-SPACING: -0.3pt"> </SPAN>Therefore,<SPAN style="LETTER-SPACING: -0.3pt"> </SPAN>this paper proposes an optimized Key-Value Raft algorithm with Linearizability verification to improve the reliability and fault tolerance with high performance and strong consistency.</P>
<OL type=I start=3>
<LI>
<P style="MARGIN-TOP: 0.11in; LINE-HEIGHT: 100%" align=left><FONT style="FONT-SIZE: 11pt" size=2><SPAN style="FONT-VARIANT: small-caps"><FONT style="FONT-SIZE: 9pt" size=2><SPAN style="LETTER-SPACING: 0.1pt">Raft</SPAN></FONT></SPAN><SPAN style="FONT-VARIANT: small-caps"><FONT style="FONT-SIZE: 9pt" size=2><SPAN style="LETTER-SPACING: 3.1pt"> </SPAN></FONT></SPAN><SPAN style="FONT-VARIANT: small-caps"><FONT style="FONT-SIZE: 9pt" size=2><SPAN style="LETTER-SPACING: 0.1pt">Optimization</SPAN></FONT></SPAN><SPAN style="FONT-VARIANT: small-caps"><FONT style="FONT-SIZE: 9pt" size=2><SPAN style="LETTER-SPACING: 3.1pt"> </SPAN></FONT></SPAN><SPAN style="FONT-VARIANT: small-caps"><FONT style="FONT-SIZE: 9pt" size=2><SPAN style="LETTER-SPACING: -0.1pt">Implementation</SPAN></FONT></SPAN></FONT></P></LI></OL>
<P class=western style="MARGIN-TOP: 0.06in; MARGIN-LEFT: 0.22in; LINE-HEIGHT: 103%; TEXT-INDENT: 0.13in">The traditional Raft consensus algorithm mainly includes log<SPAN style="LETTER-SPACING: 1.8pt"> </SPAN>replication,<SPAN style="LETTER-SPACING: 1.9pt"> </SPAN>leader<SPAN style="LETTER-SPACING: 1.8pt"> </SPAN>election,<SPAN style="LETTER-SPACING: 1.9pt"> </SPAN>persistence<SPAN style="LETTER-SPACING: 1.8pt"> </SPAN>and<SPAN style="LETTER-SPACING: 1.9pt"> </SPAN>safety<SPAN style="LETTER-SPACING: 1.9pt"> </SPAN><SPAN style="LETTER-SPACING: -0.1pt">[10].</SPAN></P>
<P class=western style="MARGIN-TOP: 0.05in; MARGIN-LEFT: 0.22in; LINE-HEIGHT: 103%; MARGIN-RIGHT: 0.13in">However, during the implementation of the origin Raft proto- col,<SPAN style="LETTER-SPACING: -0.1pt"> </SPAN>frequent<SPAN style="LETTER-SPACING: -0.1pt"> </SPAN>leader<SPAN style="LETTER-SPACING: -0.1pt"> </SPAN>crashes<SPAN style="LETTER-SPACING: -0.1pt"> </SPAN>or<SPAN style="LETTER-SPACING: -0.1pt"> </SPAN>multiple<SPAN style="LETTER-SPACING: -0.1pt"> </SPAN>network<SPAN style="LETTER-SPACING: -0.1pt"> </SPAN>partitions<SPAN style="LETTER-SPACING: -0.1pt"> </SPAN>will result in serious inconsistency between the follower logs and the leader log. Hence, we propose an accelerated log back- tracking algorithm called ALB-Raft to solve these problems.<SPAN style="LETTER-SPACING: 2pt"> </SPAN>In particular, Fig.1 exhibits the generic process diagram of the proposed ALB-Raft method.</P>
<P class=western style="MARGIN-TOP: 0.03in" align=left><SPAN class=sd-abs-pos style="WIDTH: 488px; POSITION: absolute; LEFT: 4.37in; TOP: 0.21in">&nbsp;</SPAN><BR></P>
<P class=western style="MARGIN-TOP: 0.05in; MARGIN-LEFT: 0.62in" align=left><FONT style="FONT-SIZE: 11pt" size=2><FONT style="FONT-SIZE: 7pt" size=1>Fig.</FONT><FONT style="FONT-SIZE: 7pt" size=1><SPAN style="LETTER-SPACING: 0.9pt"> </SPAN></FONT><FONT style="FONT-SIZE: 7pt" size=1>1.</FONT><FONT style="FONT-SIZE: 7pt" size=1><SPAN style="LETTER-SPACING: 3.7pt"> </SPAN></FONT><FONT style="FONT-SIZE: 7pt" size=1>Flow-process</FONT><FONT style="FONT-SIZE: 7pt" size=1><SPAN style="LETTER-SPACING: 0.9pt"> </SPAN></FONT><FONT style="FONT-SIZE: 7pt" size=1>diagram</FONT><FONT style="FONT-SIZE: 7pt" size=1><SPAN style="LETTER-SPACING: 0.9pt"> </SPAN></FONT><FONT style="FONT-SIZE: 7pt" size=1>of</FONT><FONT style="FONT-SIZE: 7pt" size=1><SPAN style="LETTER-SPACING: 0.9pt"> </SPAN></FONT><FONT style="FONT-SIZE: 7pt" size=1>the</FONT><FONT style="FONT-SIZE: 7pt" size=1><SPAN style="LETTER-SPACING: 0.9pt"> </SPAN></FONT><FONT style="FONT-SIZE: 7pt" size=1>ALB-Raft</FONT><FONT style="FONT-SIZE: 7pt" size=1><SPAN style="LETTER-SPACING: 0.9pt"> </SPAN></FONT><FONT style="FONT-SIZE: 7pt" size=1><SPAN style="LETTER-SPACING: -0.1pt">algorithm.</SPAN></FONT></FONT></P>
<P class=western style="MARGIN-TOP: 0.04in" align=left><BR></P>
<P class=western style="MARGIN-LEFT: 0.22in; LINE-HEIGHT: 103%; MARGIN-RIGHT: 0.13in; TEXT-INDENT: 0.13in">The goal of our optimization is to reduce the number of rejected <I>AppendEntries Remote Procedure Calls (RPCs) </I>of leader, while ensuring that the number of entries carried in each follower&#8217;s <I>AppendEntries RPCs </I>are as small as possible. The <I>AppendEntries RPCs </I>define as the Remote Procedure Calls of heartbeat and communications of log replication which are sent by the leader to the followers of origin Raft [10].<SPAN style="LETTER-SPACING: 1.4pt"> </SPAN>That<SPAN style="LETTER-SPACING: 1.5pt"> </SPAN>is<SPAN style="LETTER-SPACING: 1.4pt"> </SPAN>to<SPAN style="LETTER-SPACING: 1.4pt"> </SPAN>say,<SPAN style="LETTER-SPACING: 1.5pt"> </SPAN>the<SPAN style="LETTER-SPACING: 1.4pt"> </SPAN>ALB-Raft<SPAN style="LETTER-SPACING: 1.4pt"> </SPAN>allows<SPAN style="LETTER-SPACING: 1.4pt"> </SPAN>the<SPAN style="LETTER-SPACING: 1.5pt"> </SPAN>old<SPAN style="LETTER-SPACING: 1.4pt"> </SPAN>followers to update quickly than origin Raft protocol. Based on this<SPAN style="LETTER-SPACING: 2pt"> </SPAN>goal, the optimized ALB-Raft scheme is mainly to reduce log conflicts between follower and leader nodes. Note that the inconsistency of the log entries between the followers and the leader is called log conflict [10]. Processing the inconsistency of<SPAN style="LETTER-SPACING: -0.4pt"> </SPAN>the<SPAN style="LETTER-SPACING: -0.4pt"> </SPAN>log<SPAN style="LETTER-SPACING: -0.4pt"> </SPAN>entries<SPAN style="LETTER-SPACING: -0.4pt"> </SPAN>in<SPAN style="LETTER-SPACING: -0.4pt"> </SPAN>the<SPAN style="LETTER-SPACING: -0.4pt"> </SPAN>leader<SPAN style="LETTER-SPACING: -0.4pt"> </SPAN>will<SPAN style="LETTER-SPACING: -0.4pt"> </SPAN>reduce<SPAN style="LETTER-SPACING: -0.4pt"> </SPAN>the<SPAN style="LETTER-SPACING: -0.4pt"> </SPAN>number<SPAN style="LETTER-SPACING: -0.4pt"> </SPAN>of<SPAN style="LETTER-SPACING: -0.4pt"> </SPAN>entries carried in each follower&#8217;s <I>AppendEntries RPCs</I>. Log conflict handled by follower will reduce <I>AppendEntries RPCs </I>rejected by<SPAN style="LETTER-SPACING: 1.7pt"> </SPAN>the<SPAN style="LETTER-SPACING: 1.7pt"> </SPAN>leader.<SPAN style="LETTER-SPACING: 1.7pt"> </SPAN>Therefore,<SPAN style="LETTER-SPACING: 1.7pt"> </SPAN>the<SPAN style="LETTER-SPACING: 1.7pt"> </SPAN>ALB-Raft<SPAN style="LETTER-SPACING: 1.7pt"> </SPAN>is<SPAN style="LETTER-SPACING: 1.7pt"> </SPAN>divided<SPAN style="LETTER-SPACING: 1.7pt"> </SPAN>into<SPAN style="LETTER-SPACING: 1.7pt"> </SPAN><SPAN style="LETTER-SPACING: -0.3pt">two</SPAN></P></DIV>
<DIV id=Section4 style="column-count: 2" dir=ltr gutter="4">
<P class=western style="MARGIN-TOP: 0.05in; PAGE-BREAK-BEFORE: always; MARGIN-LEFT: 0.23in; LINE-HEIGHT: 103%">parts: handling the conflicted logs in follower and processing the leader&#8217;s conflicted logs.</P>
<P class=western style="MARGIN-TOP: 0in; MARGIN-LEFT: 0.23in; LINE-HEIGHT: 103%; TEXT-INDENT: 0.13in">Firstly,<SPAN style="LETTER-SPACING: -0.2pt"> </SPAN>ALB-Raft<SPAN style="LETTER-SPACING: -0.2pt"> </SPAN>handles<SPAN style="LETTER-SPACING: -0.2pt"> </SPAN>conflicted<SPAN style="LETTER-SPACING: -0.2pt"> </SPAN>log<SPAN style="LETTER-SPACING: -0.2pt"> </SPAN>which<SPAN style="LETTER-SPACING: -0.2pt"> </SPAN>happened<SPAN style="LETTER-SPACING: -0.2pt"> </SPAN>in follower. We compare the index of log between the follower and leader. When the index <I>prevLogIndex </I>exists and the term <I>log[prevLogIndex].Term </I>doesn&#8217;t equal to the one of leader, it means that the conflicted log exists in follower. We find the conflicted<SPAN style="LETTER-SPACING: -0.6pt"> </SPAN>log<SPAN style="LETTER-SPACING: -0.6pt"> </SPAN>in<SPAN style="LETTER-SPACING: -0.6pt"> </SPAN>the<SPAN style="LETTER-SPACING: -0.6pt"> </SPAN>follower.<SPAN style="LETTER-SPACING: -0.6pt"> </SPAN>The<SPAN style="LETTER-SPACING: -0.6pt"> </SPAN>follower<SPAN style="LETTER-SPACING: -0.6pt"> </SPAN>sends<SPAN style="LETTER-SPACING: -0.6pt"> </SPAN>the<SPAN style="LETTER-SPACING: -0.6pt"> </SPAN>conflicted log to the leader. The leader handles the conflicted log and keeps the next log to be updated consistent with the follower. Therefore, we can significantly reduce the inconsistency logs in follower which are rejected by the leader through the <I>AppendEntries RPCs</I>.</P>
<P class=western style="MARGIN-TOP: 0in; MARGIN-LEFT: 0.23in; LINE-HEIGHT: 103%; TEXT-INDENT: 0.13in">Secondly,<SPAN style="LETTER-SPACING: -0.5pt"> </SPAN>the<SPAN style="LETTER-SPACING: -0.5pt"> </SPAN>conflicted<SPAN style="LETTER-SPACING: -0.5pt"> </SPAN>log<SPAN style="LETTER-SPACING: -0.5pt"> </SPAN>may<SPAN style="LETTER-SPACING: -0.5pt"> </SPAN>occur<SPAN style="LETTER-SPACING: -0.5pt"> </SPAN>in<SPAN style="LETTER-SPACING: -0.5pt"> </SPAN>the<SPAN style="LETTER-SPACING: -0.5pt"> </SPAN>leader.<SPAN style="LETTER-SPACING: -0.5pt"> </SPAN>When<SPAN style="LETTER-SPACING: -0.5pt"> </SPAN>a log conflicted term <I>conflictTerm </I>exists in the leader, it means that the leader has the conflicted log. Thus, we reduce the leader conflict log by updating the log entries in leader and follower. Therefore, the log of leader is consistent to the fol- lower. Thus, decreasing the numbers of leader conflicted logs can reduce the number of entries carried in each follower&#8217;s <I>AppendEntries RPCs</I>.</P>
<OL type=I start=4>
<LI>
<P style="MARGIN-TOP: 0.11in; LINE-HEIGHT: 100%" align=center><FONT style="FONT-SIZE: 11pt" size=2><SPAN style="FONT-VARIANT: small-caps"><FONT style="FONT-SIZE: 9pt" size=2><SPAN style="LETTER-SPACING: 0.2pt">Linearizability</SPAN></FONT></SPAN><SPAN style="FONT-VARIANT: small-caps"><FONT style="FONT-SIZE: 9pt" size=2><SPAN style="LETTER-SPACING: 2.7pt"> </SPAN></FONT></SPAN><SPAN style="FONT-VARIANT: small-caps"><FONT style="FONT-SIZE: 9pt" size=2><SPAN style="LETTER-SPACING: 0.2pt">Key-Value</SPAN></FONT></SPAN><SPAN style="FONT-VARIANT: small-caps"><FONT style="FONT-SIZE: 9pt" size=2><SPAN style="LETTER-SPACING: 2.8pt"> </SPAN></FONT></SPAN><SPAN style="FONT-VARIANT: small-caps"><FONT style="FONT-SIZE: 9pt" size=2><SPAN style="LETTER-SPACING: -0.1pt">Service</SPAN></FONT></SPAN></FONT></P></LI></OL>
<P class=western style="MARGIN-TOP: 0.01in; MARGIN-LEFT: 0.23in" align=center><SPAN style="FONT-VARIANT: small-caps"><SPAN style="LETTER-SPACING: -0.1pt">Implementation</SPAN></SPAN></P>
<P class=western style="MARGIN-TOP: 0.06in; MARGIN-LEFT: 0.23in; LINE-HEIGHT: 103%; TEXT-INDENT: 0.13in">After finishing the design of ALB-Raft consensus protocol, we have only completed the client-server model based on two layers of <I>Clerk-Raft</I>. However, this model only guarantees weak consistency in distributed systems and will not keep consistent at every moment of the logical clock. This will make it difficult for all server nodes to ensure the consistency of logs across the entire system in the case of network partitions and node failures. Therefore, we add the Key-Value service layer on the basis of the original two-layer structure, thereby improving the log consistency when a fault occurs.<SPAN style="LETTER-SPACING: 4pt"> </SPAN>To sure stronger consistency, we build a Key-Value service with linearizable semantics to improve the fault tolerance of distributed systems.</P>
<OL type=A>
<LI>
<P style="MARGIN-TOP: 0.11in; LINE-HEIGHT: 100%" align=justify><FONT style="FONT-SIZE: 11pt" size=2><FONT style="FONT-SIZE: 9pt" size=2><I>Architecture</I></FONT><FONT style="FONT-SIZE: 9pt" size=2><SPAN style="LETTER-SPACING: -0.2pt"><I> </I></SPAN></FONT><FONT style="FONT-SIZE: 9pt" size=2><I>Implementation</I></FONT><FONT style="FONT-SIZE: 9pt" size=2><SPAN style="LETTER-SPACING: -0.2pt"><I> </I></SPAN></FONT><FONT style="FONT-SIZE: 9pt" size=2><I>of</I></FONT><FONT style="FONT-SIZE: 9pt" size=2><SPAN style="LETTER-SPACING: -0.2pt"><I> </I></SPAN></FONT><FONT style="FONT-SIZE: 9pt" size=2><I>Key-Value</I></FONT><FONT style="FONT-SIZE: 9pt" size=2><SPAN style="LETTER-SPACING: -0.2pt"><I> </I></SPAN></FONT><FONT style="FONT-SIZE: 9pt" size=2><SPAN style="LETTER-SPACING: -0.1pt"><I>Service</I></SPAN></FONT></FONT></P></LI></OL>
<P class=western style="MARGIN-TOP: 0.05in; MARGIN-LEFT: 0.23in; LINE-HEIGHT: 103%; TEXT-INDENT: 0.13in">When<SPAN style="LETTER-SPACING: -0.2pt"> </SPAN>a<SPAN style="LETTER-SPACING: -0.2pt"> </SPAN>node<SPAN style="LETTER-SPACING: -0.2pt"> </SPAN>in<SPAN style="LETTER-SPACING: -0.2pt"> </SPAN>the<SPAN style="LETTER-SPACING: -0.2pt"> </SPAN>Raft<SPAN style="LETTER-SPACING: -0.2pt"> </SPAN>layer<SPAN style="LETTER-SPACING: -0.2pt"> </SPAN>appears<SPAN style="LETTER-SPACING: -0.2pt"> </SPAN>the<SPAN style="LETTER-SPACING: -0.2pt"> </SPAN>downtime<SPAN style="LETTER-SPACING: -0.2pt"> </SPAN>failure, the Raft layer mainly transmits the latest logs of all nodes to the Key-Value layer through the message passing mechanism <I>applyCh</I>. After the node logs of the Key-Value layer are updated by <I>applyCh</I>, the logs of the server node will be inconsistent. The master node (Leader) needs to tell the client that the logs of all nodes in the key-value layer need to be consistent. Thus, we deliver the consistent messages to clients through a notification mechanism <I>notifyCh</I>.</P>
<P class=western style="MARGIN-TOP: 0in; MARGIN-LEFT: 0.23in; LINE-HEIGHT: 103%; TEXT-INDENT: 0.13in">The architecture of the Key-Value service is shown in Figure 2. It is typically a client-server architecture. When the Raft<SPAN style="LETTER-SPACING: 2pt"> </SPAN>layer<SPAN style="LETTER-SPACING: 2pt"> </SPAN>has<SPAN style="LETTER-SPACING: 2pt"> </SPAN>a<SPAN style="LETTER-SPACING: 2pt"> </SPAN>failure<SPAN style="LETTER-SPACING: 2pt"> </SPAN>of<SPAN style="LETTER-SPACING: 2pt"> </SPAN>the<SPAN style="LETTER-SPACING: 2pt"> </SPAN>master<SPAN style="LETTER-SPACING: 2pt"> </SPAN>node<SPAN style="LETTER-SPACING: 2pt"> </SPAN>downtime,<SPAN style="LETTER-SPACING: 2pt"> </SPAN>we send all the logs from the Raft layer to the Key-Value layer through the message passing mechanism <I>applyCh</I>. Then, we update the logs of all servers in Key-Value layer. However,<SPAN style="LETTER-SPACING: 2pt"> </SPAN>the logs of these servers may be inconsistent. The client then handles<SPAN style="LETTER-SPACING: 0.6pt"> </SPAN>the<SPAN style="LETTER-SPACING: 0.7pt"> </SPAN>consistency<SPAN style="LETTER-SPACING: 0.7pt"> </SPAN>request<SPAN style="LETTER-SPACING: 0.7pt"> </SPAN>from<SPAN style="LETTER-SPACING: 0.7pt"> </SPAN>the<SPAN style="LETTER-SPACING: 0.7pt"> </SPAN>leader<SPAN style="LETTER-SPACING: 0.7pt"> </SPAN>server<SPAN style="LETTER-SPACING: 0.7pt"> </SPAN>by<SPAN style="LETTER-SPACING: 0.7pt"> </SPAN><SPAN style="LETTER-SPACING: -0.3pt">the</SPAN></P>
<P class=western style="MARGIN-TOP: 0.06in; MARGIN-LEFT: 0.23in; LINE-HEIGHT: 103%; MARGIN-RIGHT: 0.12in">notification mechanism <I>notifyCh</I>. Finally, the client replicates the leader&#8217;s log to all other servers via the Raft module again. Therefore, each <I>kvserver </I>performs the operations in the Raft log sequentially and applies these commands to its own Key- Value<SPAN style="LETTER-SPACING: -0.3pt"> </SPAN>database.<SPAN style="LETTER-SPACING: -0.3pt"> </SPAN>As<SPAN style="LETTER-SPACING: -0.3pt"> </SPAN>a<SPAN style="LETTER-SPACING: -0.3pt"> </SPAN>result,<SPAN style="LETTER-SPACING: -0.3pt"> </SPAN>all<SPAN style="LETTER-SPACING: -0.3pt"> </SPAN>servers<SPAN style="LETTER-SPACING: -0.3pt"> </SPAN>maintain<SPAN style="LETTER-SPACING: -0.3pt"> </SPAN>the<SPAN style="LETTER-SPACING: -0.3pt"> </SPAN>same<SPAN style="LETTER-SPACING: -0.3pt"> </SPAN>copy of the Key-Value state machine. The logs of all server node<SPAN style="LETTER-SPACING: 2pt"> </SPAN>are consistent.</P>
<P class=western style="MARGIN-TOP: 0in" align=left><SPAN class=sd-abs-pos style="WIDTH: 491px; POSITION: absolute; LEFT: 4.38in; TOP: 0.14in">&nbsp;</SPAN><BR></P>
<P class=western style="MARGIN-TOP: 0.1in; MARGIN-LEFT: 1.04in" align=left><FONT style="FONT-SIZE: 11pt" size=2><FONT style="FONT-SIZE: 7pt" size=1>Fig.</FONT><FONT style="FONT-SIZE: 7pt" size=1><SPAN style="LETTER-SPACING: 0.7pt"> </SPAN></FONT><FONT style="FONT-SIZE: 7pt" size=1>2.</FONT><FONT style="FONT-SIZE: 7pt" size=1><SPAN style="LETTER-SPACING: 3.2pt"> </SPAN></FONT><FONT style="FONT-SIZE: 7pt" size=1>Key-Value</FONT><FONT style="FONT-SIZE: 7pt" size=1><SPAN style="LETTER-SPACING: 0.7pt"> </SPAN></FONT><FONT style="FONT-SIZE: 7pt" size=1>service</FONT><FONT style="FONT-SIZE: 7pt" size=1><SPAN style="LETTER-SPACING: 0.7pt"> </SPAN></FONT><FONT style="FONT-SIZE: 7pt" size=1><SPAN style="LETTER-SPACING: -0.1pt">architecture.</SPAN></FONT></FONT></P>
<P class=western style="MARGIN-TOP: 0.11in" align=left><BR></P>
<OL type=A start=2>
<LI>
<P style="LINE-HEIGHT: 103%; MARGIN-RIGHT: 0.12in" align=justify><FONT style="FONT-SIZE: 11pt" size=2><FONT style="FONT-SIZE: 9pt" size=2><I>Implementation</I></FONT><FONT style="FONT-SIZE: 9pt" size=2><SPAN style="LETTER-SPACING: -0.3pt"><I> </I></SPAN></FONT><FONT style="FONT-SIZE: 9pt" size=2><I>of</I></FONT><FONT style="FONT-SIZE: 9pt" size=2><SPAN style="LETTER-SPACING: -0.3pt"><I> </I></SPAN></FONT><FONT style="FONT-SIZE: 9pt" size=2><I>Linearizability</I></FONT><FONT style="FONT-SIZE: 9pt" size=2><SPAN style="LETTER-SPACING: -0.3pt"><I> </I></SPAN></FONT><FONT style="FONT-SIZE: 9pt" size=2><I>Semantics</I></FONT><FONT style="FONT-SIZE: 9pt" size=2><SPAN style="LETTER-SPACING: -0.3pt"><I> </I></SPAN></FONT><FONT style="FONT-SIZE: 9pt" size=2><I>based</I></FONT><FONT style="FONT-SIZE: 9pt" size=2><SPAN style="LETTER-SPACING: -0.3pt"><I> </I></SPAN></FONT><FONT style="FONT-SIZE: 9pt" size=2><I>on</I></FONT><FONT style="FONT-SIZE: 9pt" size=2><SPAN style="LETTER-SPACING: -0.3pt"><I> </I></SPAN></FONT><FONT style="FONT-SIZE: 9pt" size=2><I>Key- Value Service</I></FONT></FONT></P></LI></OL>
<P class=western style="MARGIN-TOP: 0.04in; MARGIN-LEFT: 0.23in; LINE-HEIGHT: 103%; MARGIN-RIGHT: 0.12in; TEXT-INDENT: 0.13in">When completing the basic Key-Value service, we need to constrain the log orders of all nodes to achieve the require- ments<SPAN style="LETTER-SPACING: -0.2pt"> </SPAN>of<SPAN style="LETTER-SPACING: -0.2pt"> </SPAN>Linearizability.<SPAN style="LETTER-SPACING: -0.2pt"> </SPAN>Since<SPAN style="LETTER-SPACING: -0.2pt"> </SPAN>the<SPAN style="LETTER-SPACING: -0.2pt"> </SPAN>client<SPAN style="LETTER-SPACING: -0.2pt"> </SPAN>can<SPAN style="LETTER-SPACING: -0.2pt"> </SPAN>only<SPAN style="LETTER-SPACING: -0.2pt"> </SPAN>perform<SPAN style="LETTER-SPACING: -0.2pt"> </SPAN>one operation at a time [6], all operations keep a straight line at logical timestamps [17]. However, the current Raft algorithm can execute one command multiple times. Therefore, we need to implement a Linearizability consistency constraint scheme for all nodes based on Key-Value service.</P>
<OL type=A>
<OL>
<LI>
<P style="LINE-HEIGHT: 0.15in" align=justify><FONT style="FONT-SIZE: 11pt" size=2><FONT style="FONT-SIZE: 9pt" size=2><I>Client</I></FONT><FONT style="FONT-SIZE: 9pt" size=2><SPAN style="LETTER-SPACING: 0.5pt"><I> </I></SPAN></FONT><FONT style="FONT-SIZE: 9pt" size=2><I>Linearizability</I></FONT><FONT style="FONT-SIZE: 9pt" size=2><SPAN style="LETTER-SPACING: 0.5pt"><I> </I></SPAN></FONT><FONT style="FONT-SIZE: 9pt" size=2><SPAN style="LETTER-SPACING: -0.1pt"><I>Constraint:</I></SPAN></FONT></FONT></P></LI></OL></OL>
<P class=western style="MARGIN-TOP: 0.01in; MARGIN-LEFT: 0.23in; LINE-HEIGHT: 103%; MARGIN-RIGHT: 0.12in">From perspective of client, the Linearizability system satisfies the following constraints:</P>
<OL>
<LI>
<P style="LINE-HEIGHT: 103%; MARGIN-RIGHT: 0.12in" align=justify><FONT style="FONT-SIZE: 11pt" size=2><FONT style="FONT-SIZE: 9pt" size=2>Single client operations are sequential: each operation</FONT><FONT style="FONT-SIZE: 9pt" size=2><SPAN style="LETTER-SPACING: 2pt"> </SPAN></FONT><FONT style="FONT-SIZE: 9pt" size=2>of each client is executed after the previous operation returns. It represents the operations in the same client are sequential. There are no concurrent operations.</FONT></FONT></P>
<LI>
<P style="LINE-HEIGHT: 103%; MARGIN-RIGHT: 0.12in" align=justify><FONT style="FONT-SIZE: 11pt" size=2><FONT style="FONT-SIZE: 9pt" size=2>If the operations from different clients are concurrent, they may return old or new values. But after any read returns</FONT><FONT style="FONT-SIZE: 9pt" size=2><SPAN style="LETTER-SPACING: 4pt"> </SPAN></FONT><FONT style="FONT-SIZE: 9pt" size=2>a new value, all subsequent reads&#8217; operations must return a new value from server.</FONT></FONT></P></LI></OL>
<OL type=A>
<OL start=2>
<LI>
<P style="LINE-HEIGHT: 0.15in" align=justify><FONT style="FONT-SIZE: 11pt" size=2><FONT style="FONT-SIZE: 9pt" size=2><I>Client</I></FONT><FONT style="FONT-SIZE: 9pt" size=2><SPAN style="LETTER-SPACING: 0.5pt"><I> </I></SPAN></FONT><FONT style="FONT-SIZE: 9pt" size=2><I>Deduplication</I></FONT><FONT style="FONT-SIZE: 9pt" size=2><SPAN style="LETTER-SPACING: 0.5pt"><I> </I></SPAN></FONT><FONT style="FONT-SIZE: 9pt" size=2><SPAN style="LETTER-SPACING: -0.1pt"><I>Scheme:</I></SPAN></FONT></FONT></P></LI></OL></OL>
<P class=western style="MARGIN-TOP: 0in; MARGIN-LEFT: 0.23in; LINE-HEIGHT: 103%; MARGIN-RIGHT: 0.12in; TEXT-INDENT: 0.13in">For the client, how to handle repeated operation requests from servers via the client is a linearizable consistency re- quirement.<SPAN style="LETTER-SPACING: -0.5pt"> </SPAN>To<SPAN style="LETTER-SPACING: -0.5pt"> </SPAN>this<SPAN style="LETTER-SPACING: -0.5pt"> </SPAN>end,<SPAN style="LETTER-SPACING: -0.5pt"> </SPAN>a<SPAN style="LETTER-SPACING: -0.5pt"> </SPAN>client<SPAN style="LETTER-SPACING: -0.5pt"> </SPAN>operation<SPAN style="LETTER-SPACING: -0.5pt"> </SPAN>request<SPAN style="LETTER-SPACING: -0.5pt"> </SPAN>deduplication scheme<SPAN style="LETTER-SPACING: 0.7pt"> </SPAN>is<SPAN style="LETTER-SPACING: 0.7pt"> </SPAN>designed<SPAN style="LETTER-SPACING: 0.7pt"> </SPAN>to<SPAN style="LETTER-SPACING: 0.7pt"> </SPAN>achieve<SPAN style="LETTER-SPACING: 0.7pt"> </SPAN>this<SPAN style="LETTER-SPACING: 0.7pt"> </SPAN>goal<SPAN style="LETTER-SPACING: 0.7pt"> </SPAN>as<SPAN style="LETTER-SPACING: 0.7pt"> </SPAN>described<SPAN style="LETTER-SPACING: 0.7pt"> </SPAN><SPAN style="LETTER-SPACING: -0.1pt">follows.</SPAN></P></DIV>
<DIV id=Section5 style="column-count: 2" dir=ltr gutter="4">
<P class=western style="MARGIN-TOP: 0.05in; PAGE-BREAK-BEFORE: always; MARGIN-LEFT: 0.23in; LINE-HEIGHT: 103%">First, the server requests the client to perform an operation. Here we assume that a client can only make one request call<SPAN style="LETTER-SPACING: 4pt"> </SPAN>at a time. When the request sequence number of an operation <I>seq </I>from the server is greater than the most recently updated operation sequence number <I>latestSeq</I>, the client performs this operation. Second, client transmits the operation to the server via<SPAN style="LETTER-SPACING: 1.3pt"> </SPAN>RPC.<SPAN style="LETTER-SPACING: 1.3pt"> </SPAN>The<SPAN style="LETTER-SPACING: 1.3pt"> </SPAN>server<SPAN style="LETTER-SPACING: 1.3pt"> </SPAN>implements<SPAN style="LETTER-SPACING: 1.3pt"> </SPAN>the<SPAN style="LETTER-SPACING: 1.3pt"> </SPAN>operation<SPAN style="LETTER-SPACING: 1.3pt"> </SPAN>and<SPAN style="LETTER-SPACING: 1.3pt"> </SPAN>writes<SPAN style="LETTER-SPACING: 1.3pt"> </SPAN>it to<SPAN style="LETTER-SPACING: 1.4pt"> </SPAN>its<SPAN style="LETTER-SPACING: 1.4pt"> </SPAN>own<SPAN style="LETTER-SPACING: 1.4pt"> </SPAN>log.<SPAN style="LETTER-SPACING: 1.4pt"> </SPAN>Finally,<SPAN style="LETTER-SPACING: 1.4pt"> </SPAN>the<SPAN style="LETTER-SPACING: 1.4pt"> </SPAN>client<SPAN style="LETTER-SPACING: 1.4pt"> </SPAN>verifies<SPAN style="LETTER-SPACING: 1.4pt"> </SPAN>that<SPAN style="LETTER-SPACING: 1.4pt"> </SPAN>the<SPAN style="LETTER-SPACING: 1.4pt"> </SPAN>operation is not duplicated. Otherwise, when the <I>seq </I>is small than the <I>latestSeq</I>, this operation is duplicated. The client does not perform the repeat operation.</P>
<OL type=I start=5>
<LI>
<P style="MARGIN-TOP: 0.11in; LINE-HEIGHT: 100%" align=left><FONT style="FONT-SIZE: 11pt" size=2><SPAN style="FONT-VARIANT: small-caps"><FONT style="FONT-SIZE: 9pt" size=2><SPAN style="LETTER-SPACING: 0.1pt">Experiments</SPAN></FONT></SPAN><SPAN style="FONT-VARIANT: small-caps"><FONT style="FONT-SIZE: 9pt" size=2><SPAN style="LETTER-SPACING: 3.2pt"> </SPAN></FONT></SPAN><SPAN style="FONT-VARIANT: small-caps"><FONT style="FONT-SIZE: 9pt" size=2><SPAN style="LETTER-SPACING: 0.1pt">and</SPAN></FONT></SPAN><SPAN style="FONT-VARIANT: small-caps"><FONT style="FONT-SIZE: 9pt" size=2><SPAN style="LETTER-SPACING: 3.2pt"> </SPAN></FONT></SPAN><SPAN style="FONT-VARIANT: small-caps"><FONT style="FONT-SIZE: 9pt" size=2><SPAN style="LETTER-SPACING: -0.1pt">Results</SPAN></FONT></SPAN></FONT></P></LI></OL>
<P class=western style="MARGIN-TOP: 0.06in; MARGIN-LEFT: 0.23in; LINE-HEIGHT: 103%; TEXT-INDENT: 0.13in">The performance test mainly includes three parts: origin Raft and ALB-Raft performance comparison, Key-Value ser- vice simulation verification, and linearizable semantics veri- fication. We utilize a consensus algorithm simulation frame- work based on Go language to simulate. Then, we give the performance results of the Raft implementation and the Key- Value service in the test framework. Finally, we test the Linearizability consistency correctness with the open source Linearizability verification module Porcupine [18].</P>
<OL type=A>
<LI>
<P style="MARGIN-TOP: 0.11in; LINE-HEIGHT: 100%" align=justify><FONT style="FONT-SIZE: 11pt" size=2><FONT style="FONT-SIZE: 9pt" size=2><I>ALB-Raft</I></FONT><FONT style="FONT-SIZE: 9pt" size=2><SPAN style="LETTER-SPACING: 0.2pt"><I> </I></SPAN></FONT><FONT style="FONT-SIZE: 9pt" size=2><I>Optimization</I></FONT><FONT style="FONT-SIZE: 9pt" size=2><SPAN style="LETTER-SPACING: 0.2pt"><I> </I></SPAN></FONT><FONT style="FONT-SIZE: 9pt" size=2><I>Performance</I></FONT><FONT style="FONT-SIZE: 9pt" size=2><SPAN style="LETTER-SPACING: 0.2pt"><I> </I></SPAN></FONT><FONT style="FONT-SIZE: 9pt" size=2><SPAN style="LETTER-SPACING: -0.1pt"><I>Comparison</I></SPAN></FONT></FONT></P></LI></OL>
<P class=western style="MARGIN-TOP: 0.05in; MARGIN-LEFT: 0.23in; LINE-HEIGHT: 103%; TEXT-INDENT: 0.13in">To effectively verify the performance of ALB-Raft, we evaluate<SPAN style="LETTER-SPACING: 2pt"> </SPAN>its<SPAN style="LETTER-SPACING: 2pt"> </SPAN>performance<SPAN style="LETTER-SPACING: 2pt"> </SPAN>under<SPAN style="LETTER-SPACING: 2pt"> </SPAN>two<SPAN style="LETTER-SPACING: 2pt"> </SPAN>failure<SPAN style="LETTER-SPACING: 2pt"> </SPAN>scenarios.<SPAN style="LETTER-SPACING: 2pt"> </SPAN>The two scenarios are the network partition failure and unreliable network failure.</P>
<P class=western style="MARGIN-TOP: 0in; MARGIN-LEFT: 0.23in; LINE-HEIGHT: 103%; TEXT-INDENT: 0.13in" align=right>First,<SPAN style="LETTER-SPACING: 1.3pt"> </SPAN>we<SPAN style="LETTER-SPACING: 1.3pt"> </SPAN>compare<SPAN style="LETTER-SPACING: 1.3pt"> </SPAN>the<SPAN style="LETTER-SPACING: 1.3pt"> </SPAN>performance<SPAN style="LETTER-SPACING: 1.3pt"> </SPAN>of<SPAN style="LETTER-SPACING: 1.3pt"> </SPAN>Raft<SPAN style="LETTER-SPACING: 1.3pt"> </SPAN>algorithm<SPAN style="LETTER-SPACING: 1.3pt"> </SPAN>and ALB-Raft<SPAN style="LETTER-SPACING: 2pt"> </SPAN>under<SPAN style="LETTER-SPACING: 2pt"> </SPAN>the<SPAN style="LETTER-SPACING: 2pt"> </SPAN>network<SPAN style="LETTER-SPACING: 2pt"> </SPAN>partition<SPAN style="LETTER-SPACING: 2pt"> </SPAN>failure.<SPAN style="LETTER-SPACING: 2pt"> </SPAN>The<SPAN style="LETTER-SPACING: 2pt"> </SPAN>results are<SPAN style="LETTER-SPACING: 1.3pt"> </SPAN>shown<SPAN style="LETTER-SPACING: 1.3pt"> </SPAN>in<SPAN style="LETTER-SPACING: 1.3pt"> </SPAN>Fig.3.<SPAN style="LETTER-SPACING: 1.3pt"> </SPAN>In<SPAN style="LETTER-SPACING: 1.3pt"> </SPAN>this<SPAN style="LETTER-SPACING: 1.3pt"> </SPAN>scenario,<SPAN style="LETTER-SPACING: 1.3pt"> </SPAN>there<SPAN style="LETTER-SPACING: 1.3pt"> </SPAN>are<SPAN style="LETTER-SPACING: 1.3pt"> </SPAN>five<SPAN style="LETTER-SPACING: 1.3pt"> </SPAN>nodes<SPAN style="LETTER-SPACING: 1.3pt"> </SPAN>in the distributed system. The simulation framework divides the entire<SPAN style="LETTER-SPACING: 1.7pt"> </SPAN>distributed<SPAN style="LETTER-SPACING: 1.7pt"> </SPAN>system<SPAN style="LETTER-SPACING: 1.7pt"> </SPAN>into<SPAN style="LETTER-SPACING: 1.7pt"> </SPAN>two<SPAN style="LETTER-SPACING: 1.7pt"> </SPAN>networks.<SPAN style="LETTER-SPACING: 1.7pt"> </SPAN>The<SPAN style="LETTER-SPACING: 1.7pt"> </SPAN>servers<SPAN style="LETTER-SPACING: 1.7pt"> </SPAN>of each<SPAN style="LETTER-SPACING: 2pt"> </SPAN>partition<SPAN style="LETTER-SPACING: 2pt"> </SPAN>execute<SPAN style="LETTER-SPACING: 2pt"> </SPAN>the<SPAN style="LETTER-SPACING: 2pt"> </SPAN>Raft<SPAN style="LETTER-SPACING: 2pt"> </SPAN>algorithm<SPAN style="LETTER-SPACING: 2pt"> </SPAN>successively<SPAN style="LETTER-SPACING: 2pt"> </SPAN>and submit<SPAN style="LETTER-SPACING: 1.4pt"> </SPAN>100<SPAN style="LETTER-SPACING: 1.4pt"> </SPAN>logs.<SPAN style="LETTER-SPACING: 1.4pt"> </SPAN>Finally,<SPAN style="LETTER-SPACING: 1.4pt"> </SPAN>when<SPAN style="LETTER-SPACING: 1.4pt"> </SPAN>the<SPAN style="LETTER-SPACING: 1.4pt"> </SPAN>partition<SPAN style="LETTER-SPACING: 1.4pt"> </SPAN>is<SPAN style="LETTER-SPACING: 1.4pt"> </SPAN>repaired,<SPAN style="LETTER-SPACING: 1.4pt"> </SPAN>we need to commit the log again. Simulation framework checks whether<SPAN style="LETTER-SPACING: 1.6pt"> </SPAN>the<SPAN style="LETTER-SPACING: 1.6pt"> </SPAN>entire<SPAN style="LETTER-SPACING: 1.6pt"> </SPAN>process<SPAN style="LETTER-SPACING: 1.6pt"> </SPAN>is<SPAN style="LETTER-SPACING: 1.6pt"> </SPAN>conformed<SPAN style="LETTER-SPACING: 1.6pt"> </SPAN>successfully<SPAN style="LETTER-SPACING: 1.6pt"> </SPAN>to<SPAN style="LETTER-SPACING: 1.6pt"> </SPAN>the Raft<SPAN style="LETTER-SPACING: 1.5pt"> </SPAN>protocol<SPAN style="LETTER-SPACING: 1.5pt"> </SPAN>specification.<SPAN style="LETTER-SPACING: 1.5pt"> </SPAN>There<SPAN style="LETTER-SPACING: 1.5pt"> </SPAN>may<SPAN style="LETTER-SPACING: 1.5pt"> </SPAN>be<SPAN style="LETTER-SPACING: 1.5pt"> </SPAN>nearly<SPAN style="LETTER-SPACING: 1.5pt"> </SPAN>a<SPAN style="LETTER-SPACING: 1.5pt"> </SPAN>hundred conflicted<SPAN style="LETTER-SPACING: 1.9pt"> </SPAN>logs<SPAN style="LETTER-SPACING: 1.9pt"> </SPAN>between<SPAN style="LETTER-SPACING: 1.9pt"> </SPAN>the<SPAN style="LETTER-SPACING: 1.9pt"> </SPAN>leader<SPAN style="LETTER-SPACING: 1.9pt"> </SPAN>and<SPAN style="LETTER-SPACING: 1.9pt"> </SPAN>the<SPAN style="LETTER-SPACING: 1.9pt"> </SPAN>follower<SPAN style="LETTER-SPACING: 1.9pt"> </SPAN>during this<SPAN style="LETTER-SPACING: 1.2pt"> </SPAN>process<SPAN style="LETTER-SPACING: 1.2pt"> </SPAN>of<SPAN style="LETTER-SPACING: 1.2pt"> </SPAN>checking<SPAN style="LETTER-SPACING: 1.2pt"> </SPAN>the<SPAN style="LETTER-SPACING: 1.2pt"> </SPAN>Raft<SPAN style="LETTER-SPACING: 1.2pt"> </SPAN>algorithm.<SPAN style="LETTER-SPACING: 1.2pt"> </SPAN>As<SPAN style="LETTER-SPACING: 1.2pt"> </SPAN>can<SPAN style="LETTER-SPACING: 1.2pt"> </SPAN>be<SPAN style="LETTER-SPACING: 1.2pt"> </SPAN>seen from<SPAN style="LETTER-SPACING: -0.3pt"> </SPAN>Fig.3,<SPAN style="LETTER-SPACING: -0.3pt"> </SPAN>we<SPAN style="LETTER-SPACING: -0.3pt"> </SPAN>execute<SPAN style="LETTER-SPACING: -0.3pt"> </SPAN>the<SPAN style="LETTER-SPACING: -0.3pt"> </SPAN>consensus<SPAN style="LETTER-SPACING: -0.3pt"> </SPAN>algorithm<SPAN style="LETTER-SPACING: -0.3pt"> </SPAN>multiple<SPAN style="LETTER-SPACING: -0.3pt"> </SPAN>times under<SPAN style="LETTER-SPACING: -0.5pt"> </SPAN>network<SPAN style="LETTER-SPACING: -0.5pt"> </SPAN>partition<SPAN style="LETTER-SPACING: -0.5pt"> </SPAN>failure,<SPAN style="LETTER-SPACING: -0.5pt"> </SPAN>Origin<SPAN style="LETTER-SPACING: -0.5pt"> </SPAN>Raft<SPAN style="LETTER-SPACING: -0.5pt"> </SPAN>needs<SPAN style="LETTER-SPACING: -0.5pt"> </SPAN>to<SPAN style="LETTER-SPACING: -0.5pt"> </SPAN>send<SPAN style="LETTER-SPACING: -0.5pt"> </SPAN>more RPCs<SPAN style="LETTER-SPACING: -0.6pt"> </SPAN>to<SPAN style="LETTER-SPACING: -0.6pt"> </SPAN>reach<SPAN style="LETTER-SPACING: -0.6pt"> </SPAN>consensus.<SPAN style="LETTER-SPACING: -0.6pt"> </SPAN>However,<SPAN style="LETTER-SPACING: -0.6pt"> </SPAN>the<SPAN style="LETTER-SPACING: -0.6pt"> </SPAN>ALB-Raft<SPAN style="LETTER-SPACING: -0.6pt"> </SPAN>protocol<SPAN style="LETTER-SPACING: -0.6pt"> </SPAN>can significantly reduce the number of rejected RPCs. Therefore, compared<SPAN style="LETTER-SPACING: 1.2pt"> </SPAN>to<SPAN style="LETTER-SPACING: 1.2pt"> </SPAN>the<SPAN style="LETTER-SPACING: 1.2pt"> </SPAN>original<SPAN style="LETTER-SPACING: 1.2pt"> </SPAN>Raft<SPAN style="LETTER-SPACING: 1.2pt"> </SPAN>algorithm,<SPAN style="LETTER-SPACING: 1.2pt"> </SPAN>ALB-Raft<SPAN style="LETTER-SPACING: 1.2pt"> </SPAN>protocol can reduce RPCs by 20% when resolve 100 conflicted entries. Second,<SPAN style="LETTER-SPACING: 2pt"> </SPAN>we<SPAN style="LETTER-SPACING: 2pt"> </SPAN>need<SPAN style="LETTER-SPACING: 2pt"> </SPAN>to<SPAN style="LETTER-SPACING: 2pt"> </SPAN>test<SPAN style="LETTER-SPACING: 2pt"> </SPAN>ALB-Raft<SPAN style="LETTER-SPACING: 2pt"> </SPAN>performance<SPAN style="LETTER-SPACING: 2pt"> </SPAN>under<SPAN style="LETTER-SPACING: 2pt"> </SPAN>unreliable<SPAN style="LETTER-SPACING: -0.1pt"> </SPAN>network<SPAN style="LETTER-SPACING: -0.1pt"> </SPAN>failure.<SPAN style="LETTER-SPACING: -0.1pt"> </SPAN>In<SPAN style="LETTER-SPACING: -0.1pt"> </SPAN>this<SPAN style="LETTER-SPACING: -0.1pt"> </SPAN>scenario,<SPAN style="LETTER-SPACING: -0.1pt"> </SPAN>the<SPAN style="LETTER-SPACING: -0.1pt"> </SPAN>follower&#8217;s<SPAN style="LETTER-SPACING: -0.1pt"> </SPAN>logs may<SPAN style="LETTER-SPACING: -0.2pt"> </SPAN>update<SPAN style="LETTER-SPACING: -0.2pt"> </SPAN>far<SPAN style="LETTER-SPACING: -0.2pt"> </SPAN>behind<SPAN style="LETTER-SPACING: -0.2pt"> </SPAN>the<SPAN style="LETTER-SPACING: -0.2pt"> </SPAN>leader.<SPAN style="LETTER-SPACING: -0.2pt"> </SPAN>The<SPAN style="LETTER-SPACING: -0.2pt"> </SPAN>inconsistencies<SPAN style="LETTER-SPACING: -0.2pt"> </SPAN>between node<SPAN style="LETTER-SPACING: 1.7pt"> </SPAN>logs<SPAN style="LETTER-SPACING: 1.6pt"> </SPAN>become<SPAN style="LETTER-SPACING: 1.7pt"> </SPAN>more<SPAN style="LETTER-SPACING: 1.7pt"> </SPAN>serious.<SPAN style="LETTER-SPACING: 1.7pt"> </SPAN>Unreliable<SPAN style="LETTER-SPACING: 1.6pt"> </SPAN>network<SPAN style="LETTER-SPACING: 1.7pt"> </SPAN>failure leads to inconsistencies in the logs of the distributed system. The more operations submitted, the more RPCs in distributed need<SPAN style="LETTER-SPACING: 1.6pt"> </SPAN>to<SPAN style="LETTER-SPACING: 1.6pt"> </SPAN>be<SPAN style="LETTER-SPACING: 1.6pt"> </SPAN>sent<SPAN style="LETTER-SPACING: 1.6pt"> </SPAN>in<SPAN style="LETTER-SPACING: 1.6pt"> </SPAN>this<SPAN style="LETTER-SPACING: 1.6pt"> </SPAN>failure.<SPAN style="LETTER-SPACING: 1.6pt"> </SPAN>Fig.4<SPAN style="LETTER-SPACING: 1.6pt"> </SPAN>shows<SPAN style="LETTER-SPACING: 1.6pt"> </SPAN>the<SPAN style="LETTER-SPACING: 1.6pt"> </SPAN>comparison of<SPAN style="LETTER-SPACING: 2pt"> </SPAN>operation<SPAN style="LETTER-SPACING: 2pt"> </SPAN>20<SPAN style="LETTER-SPACING: 2pt"> </SPAN>times<SPAN style="LETTER-SPACING: 2pt"> </SPAN>in<SPAN style="LETTER-SPACING: 2pt"> </SPAN>the<SPAN style="LETTER-SPACING: 2pt"> </SPAN>original<SPAN style="LETTER-SPACING: 2pt"> </SPAN>Raft<SPAN style="LETTER-SPACING: 2pt"> </SPAN>algorithm<SPAN style="LETTER-SPACING: 2pt"> </SPAN>(blue columns)<SPAN style="LETTER-SPACING: 1.1pt"> </SPAN>and<SPAN style="LETTER-SPACING: 1.1pt"> </SPAN>the<SPAN style="LETTER-SPACING: 1.1pt"> </SPAN>ALB-Raft<SPAN style="LETTER-SPACING: 1.1pt"> </SPAN>(Accelerated<SPAN style="LETTER-SPACING: 1.1pt"> </SPAN>Log<SPAN style="LETTER-SPACING: 1.1pt"> </SPAN><SPAN style="LETTER-SPACING: -0.1pt">Backtracking)</SPAN></P>
<P class=western style="MARGIN-TOP: 0in; MARGIN-LEFT: 0.23in">algorithm<SPAN style="LETTER-SPACING: 0.6pt"> </SPAN>(red<SPAN style="LETTER-SPACING: 0.7pt"> </SPAN><SPAN style="LETTER-SPACING: -0.1pt">columns).</SPAN></P>
<P class=western style="MARGIN-BOTTOM: 0.02in; MARGIN-TOP: 0in; LINE-HEIGHT: 100%" align=left><BR><BR></P>
<P class=western style="MARGIN-LEFT: 0.25in" align=left><IMG border=0 name="Image 8" src="file:///C:/Users/aaron/AppData/Local/Temp/lu19324a1ngqq.tmp/lu19324a1ngr6_tmp_7d8098dd2bfff26d.jpg" width=489 align=bottom height=371> </P>
<P class=western style="MARGIN-TOP: 0.01in" align=left><BR></P>
<P class=western style="MARGIN-LEFT: 0.22in" align=left><FONT style="FONT-SIZE: 11pt" size=2><FONT style="FONT-SIZE: 7pt" size=1>Fig. 3.</FONT><FONT style="FONT-SIZE: 7pt" size=1><SPAN style="LETTER-SPACING: 2pt"> </SPAN></FONT><FONT style="FONT-SIZE: 7pt" size=1>Performance comparison of ALB-Raft and Raft algorithm under the</FONT><FONT style="FONT-SIZE: 7pt" size=1><SPAN style="LETTER-SPACING: 4pt"> </SPAN></FONT><FONT style="FONT-SIZE: 7pt" size=1>network partition..</FONT></FONT></P>
<P class=western align=left><BR></P>
<P class=western style="MARGIN-TOP: 0.07in" align=left><BR></P>
<P class=western style="MARGIN-TOP: 0in; MARGIN-LEFT: 0.22in; LINE-HEIGHT: 103%; MARGIN-RIGHT: 0.14in; TEXT-INDENT: 0.13in">In this test scenario, as the number of operations submitted increases,<SPAN style="LETTER-SPACING: -0.4pt"> </SPAN>the<SPAN style="LETTER-SPACING: -0.4pt"> </SPAN>number<SPAN style="LETTER-SPACING: -0.4pt"> </SPAN>of<SPAN style="LETTER-SPACING: -0.4pt"> </SPAN>conflicted<SPAN style="LETTER-SPACING: -0.4pt"> </SPAN>logs<SPAN style="LETTER-SPACING: -0.4pt"> </SPAN>between<SPAN style="LETTER-SPACING: -0.4pt"> </SPAN>followers<SPAN style="LETTER-SPACING: -0.4pt"> </SPAN>and leaders increase. Therefore, client node needs to send more messages to resolve the conflicted logs. When the distributed system needs to perform more operations, it increases the number of communications between nodes. Thus, this will bring more increase in the number of RPCs. We can see from Fig.4 is as follows. When the same number of operations are performed, we can see that ALB-Raft algorithm sends fewer numbers of RPCs than Raft. It means that ALB-Raft opti- mization can ensure fast backtracking when the consistency checking<SPAN style="LETTER-SPACING: 2pt"> </SPAN>fails.<SPAN style="LETTER-SPACING: 2pt"> </SPAN>ALB-Raft<SPAN style="LETTER-SPACING: 2pt"> </SPAN>algorithm<SPAN style="LETTER-SPACING: 2pt"> </SPAN>can<SPAN style="LETTER-SPACING: 2pt"> </SPAN>effectively<SPAN style="LETTER-SPACING: 2pt"> </SPAN>reduce the<SPAN style="LETTER-SPACING: 2pt"> </SPAN>number<SPAN style="LETTER-SPACING: 2pt"> </SPAN>of<SPAN style="LETTER-SPACING: 2pt"> </SPAN>rejected<SPAN style="LETTER-SPACING: 2pt"> </SPAN>RPCs<SPAN style="LETTER-SPACING: 2pt"> </SPAN>with<SPAN style="LETTER-SPACING: 2pt"> </SPAN>the<SPAN style="LETTER-SPACING: 2pt"> </SPAN>increasing<SPAN style="LETTER-SPACING: 2pt"> </SPAN>number of operations. It means the ALB-Raft algorithm is basically remains stable.</P>
<P class=western style="MARGIN-TOP: 0.01in" align=left><SPAN class=sd-abs-pos style="WIDTH: 463px; POSITION: absolute; LEFT: 4.39in; TOP: 0.19in">&nbsp;</SPAN><BR></P>
<P class=western style="MARGIN-TOP: 0.09in" align=left><BR></P>
<P class=western style="MARGIN-LEFT: 0.22in" align=left><FONT style="FONT-SIZE: 11pt" size=2><FONT style="FONT-SIZE: 7pt" size=1>Fig. 4.</FONT><FONT style="FONT-SIZE: 7pt" size=1><SPAN style="LETTER-SPACING: 2pt"> </SPAN></FONT><FONT style="FONT-SIZE: 7pt" size=1>Performance comparison of ALB-Raft and Raft algorithm under the</FONT><FONT style="FONT-SIZE: 7pt" size=1><SPAN style="LETTER-SPACING: 4pt"> </SPAN></FONT><FONT style="FONT-SIZE: 7pt" size=1>unreliable network.</FONT></FONT></P></DIV>
<DIV id=Section6 style="column-count: 2" dir=ltr gutter="4">
<OL type=A start=2>
<LI>
<P style="MARGIN-TOP: 0.05in; PAGE-BREAK-BEFORE: always; LINE-HEIGHT: 100%" align=justify><FONT style="FONT-SIZE: 11pt" size=2><FONT style="FONT-SIZE: 9pt" size=2><I>Key-Value</I></FONT><FONT style="FONT-SIZE: 9pt" size=2><SPAN style="LETTER-SPACING: 0.1pt"><I> </I></SPAN></FONT><FONT style="FONT-SIZE: 9pt" size=2><I>Service</I></FONT><FONT style="FONT-SIZE: 9pt" size=2><SPAN style="LETTER-SPACING: 0.1pt"><I> </I></SPAN></FONT><FONT style="FONT-SIZE: 9pt" size=2><I>Test</I></FONT><FONT style="FONT-SIZE: 9pt" size=2><SPAN style="LETTER-SPACING: 0.2pt"><I> </I></SPAN></FONT><FONT style="FONT-SIZE: 9pt" size=2><I>Results</I></FONT><FONT style="FONT-SIZE: 9pt" size=2><SPAN style="LETTER-SPACING: 0.1pt"><I> </I></SPAN></FONT><FONT style="FONT-SIZE: 9pt" size=2><I>and</I></FONT><FONT style="FONT-SIZE: 9pt" size=2><SPAN style="LETTER-SPACING: 0.1pt"><I> </I></SPAN></FONT><FONT style="FONT-SIZE: 9pt" size=2><SPAN style="LETTER-SPACING: -0.1pt"><I>Performance</I></SPAN></FONT></FONT></P></LI></OL>
<P class=western style="MARGIN-TOP: 0.05in; MARGIN-LEFT: 0.23in; LINE-HEIGHT: 103%; MARGIN-RIGHT: 0.05in; TEXT-INDENT: 0.13in">The Key-Value test runs under the simulation test frame- work as shown in Fig.5. The Key-Value service layer we implemented<SPAN style="LETTER-SPACING: 2pt"> </SPAN>can<SPAN style="LETTER-SPACING: 2pt"> </SPAN>run<SPAN style="LETTER-SPACING: 2pt"> </SPAN>correctly<SPAN style="LETTER-SPACING: 2pt"> </SPAN>under<SPAN style="LETTER-SPACING: 2pt"> </SPAN>fault<SPAN style="LETTER-SPACING: 2pt"> </SPAN>conditions<SPAN style="LETTER-SPACING: 2pt"> </SPAN>such as client downtime, node downtime, network partition, etc.<SPAN style="LETTER-SPACING: 4pt"> </SPAN>All the servers can send RPCs to client normally. It means<SPAN style="LETTER-SPACING: 4pt"> </SPAN>that<SPAN style="LETTER-SPACING: -0.1pt"> </SPAN>the<SPAN style="LETTER-SPACING: -0.1pt"> </SPAN>client<SPAN style="LETTER-SPACING: -0.1pt"> </SPAN>can<SPAN style="LETTER-SPACING: -0.1pt"> </SPAN>communicate<SPAN style="LETTER-SPACING: -0.1pt"> </SPAN>with<SPAN style="LETTER-SPACING: -0.1pt"> </SPAN>the<SPAN style="LETTER-SPACING: -0.1pt"> </SPAN>servers<SPAN style="LETTER-SPACING: -0.1pt"> </SPAN>in<SPAN style="LETTER-SPACING: -0.1pt"> </SPAN>Key-Value layer normally. Distributed systems can effectively maintain consistency in the presence of failure.</P>
<P class=western style="MARGIN-LEFT: 0.23in; LINE-HEIGHT: 103%; MARGIN-RIGHT: 0.05in; TEXT-INDENT: 0.13in">The experimental results also show that the Key-Value service<SPAN style="LETTER-SPACING: -0.3pt"> </SPAN>can<SPAN style="LETTER-SPACING: -0.3pt"> </SPAN>provide<SPAN style="LETTER-SPACING: -0.3pt"> </SPAN>reliable<SPAN style="LETTER-SPACING: -0.3pt"> </SPAN>service<SPAN style="LETTER-SPACING: -0.3pt"> </SPAN>for<SPAN style="LETTER-SPACING: -0.3pt"> </SPAN>the<SPAN style="LETTER-SPACING: -0.3pt"> </SPAN>client<SPAN style="LETTER-SPACING: -0.3pt"> </SPAN>under<SPAN style="LETTER-SPACING: -0.3pt"> </SPAN>various fault conditions. It guarantees normal operation even in an extreme<SPAN style="LETTER-SPACING: -0.2pt"> </SPAN>multiple<SPAN style="LETTER-SPACING: -0.2pt"> </SPAN>mixed<SPAN style="LETTER-SPACING: -0.1pt"> </SPAN>fault<SPAN style="LETTER-SPACING: -0.2pt"> </SPAN>scenario.<SPAN style="LETTER-SPACING: -0.2pt"> </SPAN>As<SPAN style="LETTER-SPACING: -0.2pt"> </SPAN>we<SPAN style="LETTER-SPACING: -0.2pt"> </SPAN>can<SPAN style="LETTER-SPACING: -0.1pt"> </SPAN>see<SPAN style="LETTER-SPACING: -0.2pt"> </SPAN>from<SPAN style="LETTER-SPACING: -0.2pt"> </SPAN>the Fig.5 that the results of all fault points are passed. It proves that Key-Value service is highly available.</P>
<P class=western style="MARGIN-TOP: 0in" align=left><BR>&nbsp;</P>
<P class=western style="MARGIN-TOP: 0.14in; MARGIN-LEFT: 0.17in" align=center><FONT style="FONT-SIZE: 11pt" size=2><FONT style="FONT-SIZE: 7pt" size=1>Fig.</FONT><FONT style="FONT-SIZE: 7pt" size=1><SPAN style="LETTER-SPACING: 0.7pt"> </SPAN></FONT><FONT style="FONT-SIZE: 7pt" size=1>5.</FONT><FONT style="FONT-SIZE: 7pt" size=1><SPAN style="LETTER-SPACING: 3.3pt"> </SPAN></FONT><FONT style="FONT-SIZE: 7pt" size=1>Key-Value</FONT><FONT style="FONT-SIZE: 7pt" size=1><SPAN style="LETTER-SPACING: 0.7pt"> </SPAN></FONT><FONT style="FONT-SIZE: 7pt" size=1>service</FONT><FONT style="FONT-SIZE: 7pt" size=1><SPAN style="LETTER-SPACING: 0.7pt"> </SPAN></FONT><FONT style="FONT-SIZE: 7pt" size=1>test</FONT><FONT style="FONT-SIZE: 7pt" size=1><SPAN style="LETTER-SPACING: 0.7pt"> </SPAN></FONT><FONT style="FONT-SIZE: 7pt" size=1><SPAN style="LETTER-SPACING: -0.1pt">result.</SPAN></FONT></FONT></P>
<P class=western style="MARGIN-TOP: 0.09in" align=left><BR></P>
<OL type=A start=3>
<LI>
<P style="LINE-HEIGHT: 100%" align=justify><FONT style="FONT-SIZE: 11pt" size=2><FONT style="FONT-SIZE: 9pt" size=2><I>Linearizability</I></FONT><FONT style="FONT-SIZE: 9pt" size=2><SPAN style="LETTER-SPACING: 0.3pt"><I> </I></SPAN></FONT><FONT style="FONT-SIZE: 9pt" size=2><SPAN style="LETTER-SPACING: -0.1pt"><I>Verification</I></SPAN></FONT></FONT></P></LI></OL>
<P class=western style="MARGIN-TOP: 0.05in; MARGIN-LEFT: 0.23in; LINE-HEIGHT: 103%; MARGIN-RIGHT: 0.05in; TEXT-INDENT: 0.13in">The general steps for Linearizability verification are run- ning a group of clients concurrently to perform a series of operations in the distributed system. The validation module randomly<SPAN style="LETTER-SPACING: -0.4pt"> </SPAN>injects<SPAN style="LETTER-SPACING: -0.5pt"> </SPAN>errors<SPAN style="LETTER-SPACING: -0.4pt"> </SPAN>and<SPAN style="LETTER-SPACING: -0.5pt"> </SPAN>failures<SPAN style="LETTER-SPACING: -0.4pt"> </SPAN>into<SPAN style="LETTER-SPACING: -0.5pt"> </SPAN>the<SPAN style="LETTER-SPACING: -0.4pt"> </SPAN>system.<SPAN style="LETTER-SPACING: -0.4pt"> </SPAN>We<SPAN style="LETTER-SPACING: -0.5pt"> </SPAN>should record the history of all operations. Finally, the operation history is verified by the validation module to determine whether it meets the requirement of Linearizability. The client generates a set of history records based on Key-Value service. The history is shown as Fig.6.</P>
<P class=western style="MARGIN-TOP: 0.01in" align=left><BR></P>
<P class=western style="MARGIN-LEFT: 0.23in; MARGIN-RIGHT: -0.04in" align=left><IMG border=0 name="Image 11" src="file:///C:/Users/aaron/AppData/Local/Temp/lu19324a1ngqq.tmp/lu19324a1ngr6_tmp_c66834992eb58e3f.jpg" width=487 align=bottom height=53> </P>
<P class=western style="MARGIN-TOP: 0.14in; MARGIN-LEFT: 0.17in" align=center><FONT style="FONT-SIZE: 11pt" size=2><FONT style="FONT-SIZE: 7pt" size=1>Fig.</FONT><FONT style="FONT-SIZE: 7pt" size=1><SPAN style="LETTER-SPACING: 0.7pt"> </SPAN></FONT><FONT style="FONT-SIZE: 7pt" size=1>6.</FONT><FONT style="FONT-SIZE: 7pt" size=1><SPAN style="LETTER-SPACING: 3.4pt"> </SPAN></FONT><FONT style="FONT-SIZE: 7pt" size=1>The</FONT><FONT style="FONT-SIZE: 7pt" size=1><SPAN style="LETTER-SPACING: 0.7pt"> </SPAN></FONT><FONT style="FONT-SIZE: 7pt" size=1>history</FONT><FONT style="FONT-SIZE: 7pt" size=1><SPAN style="LETTER-SPACING: 0.8pt"> </SPAN></FONT><FONT style="FONT-SIZE: 7pt" size=1>of</FONT><FONT style="FONT-SIZE: 7pt" size=1><SPAN style="LETTER-SPACING: 0.7pt"> </SPAN></FONT><FONT style="FONT-SIZE: 7pt" size=1>the</FONT><FONT style="FONT-SIZE: 7pt" size=1><SPAN style="LETTER-SPACING: 0.8pt"> </SPAN></FONT><FONT style="FONT-SIZE: 7pt" size=1>Key-Value</FONT><FONT style="FONT-SIZE: 7pt" size=1><SPAN style="LETTER-SPACING: 0.7pt"> </SPAN></FONT><FONT style="FONT-SIZE: 7pt" size=1><SPAN style="LETTER-SPACING: -0.1pt">Service.</SPAN></FONT></FONT></P>
<P class=western style="MARGIN-TOP: 0.01in" align=left><BR></P>
<P class=western style="MARGIN-LEFT: 0.23in; LINE-HEIGHT: 103%; MARGIN-RIGHT: 0.05in; TEXT-INDENT: 0.13in">Each row represents a history of a client operation under<SPAN style="LETTER-SPACING: 2pt"> </SPAN>this test. If two columns of the &#8221;Call&#8221; and &#8221;Return&#8221; return<SPAN style="LETTER-SPACING: 4pt"> </SPAN>data overlap, the two operations are concurrent. If there is no intersection, they are sequential. After getting the historical records, we use Porcupine Linearizability detector [18] to verify<SPAN style="LETTER-SPACING: -0.6pt"> </SPAN>them.<SPAN style="LETTER-SPACING: -0.6pt"> </SPAN>We<SPAN style="LETTER-SPACING: -0.6pt"> </SPAN>build<SPAN style="LETTER-SPACING: -0.6pt"> </SPAN>a<SPAN style="LETTER-SPACING: -0.6pt"> </SPAN>Linearizability<SPAN style="LETTER-SPACING: -0.6pt"> </SPAN>consistency<SPAN style="LETTER-SPACING: -0.6pt"> </SPAN>verification model through the historical records. The model verification process is shown as Fig 7.</P>
<P class=western style="MARGIN-BOTTOM: 0.02in; MARGIN-TOP: 0.01in; LINE-HEIGHT: 100%" align=left><BR><BR></P>
<P class=western style="MARGIN-LEFT: 1.01in" align=left><IMG border=0 name="Image 12" src="file:///C:/Users/aaron/AppData/Local/Temp/lu19324a1ngqq.tmp/lu19324a1ngr6_tmp_1af8feae8c336224.png" width=237 align=bottom height=471> </P>
<P class=western style="MARGIN-TOP: 0.08in" align=left><BR></P>
<P class=western style="MARGIN-LEFT: 0.07in" align=center><FONT style="FONT-SIZE: 11pt" size=2><FONT style="FONT-SIZE: 7pt" size=1>Fig.</FONT><FONT style="FONT-SIZE: 7pt" size=1><SPAN style="LETTER-SPACING: 0.7pt"> </SPAN></FONT><FONT style="FONT-SIZE: 7pt" size=1>7.</FONT><FONT style="FONT-SIZE: 7pt" size=1><SPAN style="LETTER-SPACING: 3.5pt"> </SPAN></FONT><FONT style="FONT-SIZE: 7pt" size=1>The</FONT><FONT style="FONT-SIZE: 7pt" size=1><SPAN style="LETTER-SPACING: 0.8pt"> </SPAN></FONT><FONT style="FONT-SIZE: 7pt" size=1>sequential</FONT><FONT style="FONT-SIZE: 7pt" size=1><SPAN style="LETTER-SPACING: 0.8pt"> </SPAN></FONT><FONT style="FONT-SIZE: 7pt" size=1>operation</FONT><FONT style="FONT-SIZE: 7pt" size=1><SPAN style="LETTER-SPACING: 0.8pt"> </SPAN></FONT><FONT style="FONT-SIZE: 7pt" size=1>model</FONT><FONT style="FONT-SIZE: 7pt" size=1><SPAN style="LETTER-SPACING: 0.8pt"> </SPAN></FONT><FONT style="FONT-SIZE: 7pt" size=1>of</FONT><FONT style="FONT-SIZE: 7pt" size=1><SPAN style="LETTER-SPACING: 0.8pt"> </SPAN></FONT><FONT style="FONT-SIZE: 7pt" size=1>the</FONT><FONT style="FONT-SIZE: 7pt" size=1><SPAN style="LETTER-SPACING: 0.8pt"> </SPAN></FONT><FONT style="FONT-SIZE: 7pt" size=1>Key-Value</FONT><FONT style="FONT-SIZE: 7pt" size=1><SPAN style="LETTER-SPACING: 0.8pt"> </SPAN></FONT><FONT style="FONT-SIZE: 7pt" size=1><SPAN style="LETTER-SPACING: -0.1pt">service.</SPAN></FONT></FONT></P>
<P class=western align=left><BR></P>
<P class=western align=left><BR></P>
<P class=western style="MARGIN-TOP: 0.05in" align=left><BR></P>
<P class=western style="MARGIN-LEFT: 0.19in; LINE-HEIGHT: 103%; MARGIN-RIGHT: 0.12in; TEXT-INDENT: 0.13in">We can see from the above Fig.7 are as follows. The values under the same Key are grouped into the same group and corresponding operations are added in the order of Key in this model. We can see that this model converts the original input log specification into a Key-Value model based on sequential operations. At this point, we have completed the initialization of the operation history model which meets the requirement<SPAN style="LETTER-SPACING: 4pt"> </SPAN>of Key-Value service. When the model does not meet the Linearizability, the established Key-Value service does not meet<SPAN style="LETTER-SPACING: -0.4pt"> </SPAN>the<SPAN style="LETTER-SPACING: -0.4pt"> </SPAN>requirements<SPAN style="LETTER-SPACING: -0.4pt"> </SPAN>of<SPAN style="LETTER-SPACING: -0.4pt"> </SPAN>strong<SPAN style="LETTER-SPACING: -0.4pt"> </SPAN>consistency.<SPAN style="LETTER-SPACING: -0.4pt"> </SPAN>When<SPAN style="LETTER-SPACING: -0.4pt"> </SPAN>we<SPAN style="LETTER-SPACING: -0.4pt"> </SPAN>execute the verification model successfully, the execution results of running the Porcupine detector is shown in Fig. 8.</P>
<P class=western style="MARGIN-TOP: 0.13in" align=left><SPAN class=sd-abs-pos style="WIDTH: 453px; POSITION: absolute; LEFT: 4.38in; TOP: 0.31in">&nbsp;</SPAN><BR></P>
<P class=western style="MARGIN-TOP: 0.14in; MARGIN-LEFT: 0.07in" align=center><FONT style="FONT-SIZE: 11pt" size=2><FONT style="FONT-SIZE: 7pt" size=1>Fig.</FONT><FONT style="FONT-SIZE: 7pt" size=1><SPAN style="LETTER-SPACING: 0.9pt"> </SPAN></FONT><FONT style="FONT-SIZE: 7pt" size=1>8.</FONT><FONT style="FONT-SIZE: 7pt" size=1><SPAN style="LETTER-SPACING: 3.7pt"> </SPAN></FONT><FONT style="FONT-SIZE: 7pt" size=1>Results</FONT><FONT style="FONT-SIZE: 7pt" size=1><SPAN style="LETTER-SPACING: 0.9pt"> </SPAN></FONT><FONT style="FONT-SIZE: 7pt" size=1>of</FONT><FONT style="FONT-SIZE: 7pt" size=1><SPAN style="LETTER-SPACING: 0.9pt"> </SPAN></FONT><FONT style="FONT-SIZE: 7pt" size=1>running</FONT><FONT style="FONT-SIZE: 7pt" size=1><SPAN style="LETTER-SPACING: 0.9pt"> </SPAN></FONT><FONT style="FONT-SIZE: 7pt" size=1>the</FONT><FONT style="FONT-SIZE: 7pt" size=1><SPAN style="LETTER-SPACING: 0.9pt"> </SPAN></FONT><FONT style="FONT-SIZE: 7pt" size=1>Porcupine</FONT><FONT style="FONT-SIZE: 7pt" size=1><SPAN style="LETTER-SPACING: 0.9pt"> </SPAN></FONT><FONT style="FONT-SIZE: 7pt" size=1><SPAN style="LETTER-SPACING: -0.1pt">detector.</SPAN></FONT></FONT></P>
<P class=western align=left><BR></P>
<P class=western style="MARGIN-TOP: 0.08in" align=left><BR></P>
<P class=western style="MARGIN-LEFT: 0.19in; LINE-HEIGHT: 103%; MARGIN-RIGHT: 0.12in; TEXT-INDENT: 0.13in">As<SPAN style="LETTER-SPACING: 1.3pt"> </SPAN>can<SPAN style="LETTER-SPACING: 1.3pt"> </SPAN>be<SPAN style="LETTER-SPACING: 1.3pt"> </SPAN>seen<SPAN style="LETTER-SPACING: 1.3pt"> </SPAN>from<SPAN style="LETTER-SPACING: 1.3pt"> </SPAN>Fig.8,<SPAN style="LETTER-SPACING: 1.3pt"> </SPAN>Porcupine<SPAN style="LETTER-SPACING: 1.3pt"> </SPAN>first<SPAN style="LETTER-SPACING: 1.3pt"> </SPAN>parses<SPAN style="LETTER-SPACING: 1.3pt"> </SPAN>the<SPAN style="LETTER-SPACING: 1.3pt"> </SPAN>list of history records that met its format requirements from the history file. Then, it tests the history records according to the object<SPAN style="LETTER-SPACING: -0.4pt"> </SPAN>and<SPAN style="LETTER-SPACING: -0.4pt"> </SPAN>history<SPAN style="LETTER-SPACING: -0.4pt"> </SPAN>list.<SPAN style="LETTER-SPACING: -0.4pt"> </SPAN>The<SPAN style="LETTER-SPACING: -0.4pt"> </SPAN>results<SPAN style="LETTER-SPACING: -0.4pt"> </SPAN>show<SPAN style="LETTER-SPACING: -0.4pt"> </SPAN>that<SPAN style="LETTER-SPACING: -0.4pt"> </SPAN>the<SPAN style="LETTER-SPACING: -0.4pt"> </SPAN>history<SPAN style="LETTER-SPACING: -0.4pt"> </SPAN>records passed<SPAN style="LETTER-SPACING: -0.2pt"> </SPAN>the<SPAN style="LETTER-SPACING: -0.2pt"> </SPAN>Porcupine<SPAN style="LETTER-SPACING: -0.2pt"> </SPAN>test.<SPAN style="LETTER-SPACING: -0.2pt"> </SPAN>The<SPAN style="LETTER-SPACING: -0.2pt"> </SPAN>Key-Value<SPAN style="LETTER-SPACING: -0.2pt"> </SPAN>service<SPAN style="LETTER-SPACING: -0.2pt"> </SPAN>in<SPAN style="LETTER-SPACING: -0.2pt"> </SPAN>this<SPAN style="LETTER-SPACING: -0.2pt"> </SPAN>paper satisfied the linearizable semantics.</P></DIV>
<OL type=I start=6>
<LI>
<P style="MARGIN-TOP: 0.05in; PAGE-BREAK-BEFORE: always; LINE-HEIGHT: 100%" align=left><FONT style="FONT-SIZE: 11pt" size=2><SPAN style="FONT-VARIANT: small-caps"><FONT style="FONT-SIZE: 9pt" size=2><SPAN style="LETTER-SPACING: -0.1pt">Conclusion</SPAN></FONT></SPAN></FONT></P></LI></OL>
<P class=western style="MARGIN-TOP: 0.07in; MARGIN-LEFT: 0.23in; LINE-HEIGHT: 103%; TEXT-INDENT: 0.13in">This paper implements a high-performance optimized Raft algorithm, named as ALB-Raft. The ALB-Raft algorithm effectively<SPAN style="LETTER-SPACING: -0.5pt"> </SPAN>reduces<SPAN style="LETTER-SPACING: -0.5pt"> </SPAN>the<SPAN style="LETTER-SPACING: -0.5pt"> </SPAN>number<SPAN style="LETTER-SPACING: -0.5pt"> </SPAN>of<SPAN style="LETTER-SPACING: -0.5pt"> </SPAN>conflicted<SPAN style="LETTER-SPACING: -0.5pt"> </SPAN>logs<SPAN style="LETTER-SPACING: -0.5pt"> </SPAN>and<SPAN style="LETTER-SPACING: -0.5pt"> </SPAN>improves the performance of the distributed system. We also implement the Key-Value service based on ALB-Raft. The Key-Value service<SPAN style="LETTER-SPACING: -0.4pt"> </SPAN>satisfies<SPAN style="LETTER-SPACING: -0.4pt"> </SPAN>the<SPAN style="LETTER-SPACING: -0.4pt"> </SPAN>requirement<SPAN style="LETTER-SPACING: -0.4pt"> </SPAN>of<SPAN style="LETTER-SPACING: -0.4pt"> </SPAN>strong<SPAN style="LETTER-SPACING: -0.4pt"> </SPAN>consistency.<SPAN style="LETTER-SPACING: -0.4pt"> </SPAN>The<SPAN style="LETTER-SPACING: -0.4pt"> </SPAN>ex- perimental<SPAN style="LETTER-SPACING: -0.1pt"> </SPAN>results<SPAN style="LETTER-SPACING: -0.1pt"> </SPAN>show<SPAN style="LETTER-SPACING: -0.1pt"> </SPAN>that<SPAN style="LETTER-SPACING: -0.1pt"> </SPAN>the<SPAN style="LETTER-SPACING: -0.1pt"> </SPAN>ALB-Raft<SPAN style="LETTER-SPACING: -0.1pt"> </SPAN>algorithm<SPAN style="LETTER-SPACING: -0.1pt"> </SPAN>has<SPAN style="LETTER-SPACING: -0.1pt"> </SPAN>good performance. The results also show that we can also ensure strong consistency in distributed systems by building efficient Key-Value services. But the current work about the ALB-Raft is not perfect. The method in this paper has shortcomings in the aspects of low consensus performance, low efficiency of log replication, and lack of effective consistency verification. In the future, we plan to accomplish works mainly includes:</P>
<OL type=A>
<OL>
<LI>
<P style="MARGIN-TOP: 0.01in; LINE-HEIGHT: 103%" align=justify><FONT style="FONT-SIZE: 11pt" size=2><FONT style="FONT-SIZE: 9pt" size=2>Raft protocol implementation with higher optimized </FONT><FONT style="FONT-SIZE: 9pt" size=2><SPAN style="LETTER-SPACING: -0.1pt">performance.</SPAN></FONT></FONT></P>
<LI>
<P style="MARGIN-TOP: 0in; LINE-HEIGHT: 103%" align=justify><FONT style="FONT-SIZE: 11pt" size=2><FONT style="FONT-SIZE: 9pt" size=2>We use batch log and pipeline log replication approach to optimize the ALB-Raft algorithm. It will improve the efficiency of log replication.</FONT></FONT></P>
<LI>
<P style="MARGIN-TOP: 0in; LINE-HEIGHT: 103%" align=justify><FONT style="FONT-SIZE: 11pt" size=2><FONT style="FONT-SIZE: 9pt" size=2>Using</FONT><FONT style="FONT-SIZE: 9pt" size=2><SPAN style="LETTER-SPACING: -0.6pt"> </SPAN></FONT><FONT style="FONT-SIZE: 9pt" size=2>Jepson</FONT><FONT style="FONT-SIZE: 9pt" size=2><SPAN style="LETTER-SPACING: -0.6pt"> </SPAN></FONT><FONT style="FONT-SIZE: 9pt" size=2>distributed</FONT><FONT style="FONT-SIZE: 9pt" size=2><SPAN style="LETTER-SPACING: -0.6pt"> </SPAN></FONT><FONT style="FONT-SIZE: 9pt" size=2>verification</FONT><FONT style="FONT-SIZE: 9pt" size=2><SPAN style="LETTER-SPACING: -0.6pt"> </SPAN></FONT><FONT style="FONT-SIZE: 9pt" size=2>framework</FONT><FONT style="FONT-SIZE: 9pt" size=2><SPAN style="LETTER-SPACING: -0.6pt"> </SPAN></FONT><FONT style="FONT-SIZE: 9pt" size=2>to</FONT><FONT style="FONT-SIZE: 9pt" size=2><SPAN style="LETTER-SPACING: -0.6pt"> </SPAN></FONT><FONT style="FONT-SIZE: 9pt" size=2>verify the Linearizability of the system with higher standard.</FONT></FONT></P></LI></OL></OL>