<b> : </b><A name="Background and Motivation"></A><A name=_bookmark5></A><A name=_bookmark51></A>Background<SPAN style="LETTER-SPACING: -0.3pt"> </SPAN>and<SPAN style="LETTER-SPACING: -0.3pt"> </SPAN>Motivation</H4></LI></OL>
<P class=western style="MARGIN-TOP: 0.04in; MARGIN-LEFT: 1.89in; LINE-HEIGHT: 106%; MARGIN-RIGHT: 0.07in; TEXT-INDENT: 0.3in" align=justify>Section <A href="file:///C:/SuperMemo/systems/Incremental/temp/HTMLFile.htm#_bookmark0"><FONT color=#0774b7>1 </FONT></A>highlights the significance of read optimization on consensus for the system<SPAN style="LETTER-SPACING: 0.1pt"> </SPAN>performance. However, to our knowledge, read optimization for asynchronous consensus<SPAN style="LETTER-SPACING: 0.1pt"> </SPAN>protocols has yet to be proposed.<SPAN style="LETTER-SPACING: 0.1pt"> </SPAN>In this section, we first introduce Rabia, the state-of-<SPAN style="LETTER-SPACING: 0.1pt"> </SPAN>the-art asynchronous consensus protocol.<SPAN style="LETTER-SPACING: 0.1pt"> </SPAN>Subsequently, we examine the existing read<SPAN style="LETTER-SPACING: 0.1pt"> </SPAN>optimizations in partially synchronous consensus protocols, explaining why they cannot<SPAN style="LETTER-SPACING: -2.2pt"> </SPAN>be<SPAN style="LETTER-SPACING: -0.6pt"> </SPAN>applied<SPAN style="LETTER-SPACING: -0.5pt"> </SPAN>to<SPAN style="LETTER-SPACING: -0.6pt"> </SPAN>asynchronous<SPAN style="LETTER-SPACING: -0.5pt"> </SPAN>consensus.<SPAN style="LETTER-SPACING: -0.1pt"> </SPAN>This<SPAN style="LETTER-SPACING: -0.5pt"> </SPAN>serves<SPAN style="LETTER-SPACING: -0.6pt"> </SPAN>as<SPAN style="LETTER-SPACING: -0.5pt"> </SPAN>the<SPAN style="LETTER-SPACING: -0.6pt"> </SPAN>motivation<SPAN style="LETTER-SPACING: -0.5pt"> </SPAN>for<SPAN style="LETTER-SPACING: -0.6pt"> </SPAN>the<SPAN style="LETTER-SPACING: -0.5pt"> </SPAN>optimization<SPAN style="LETTER-SPACING: -2.2pt"> </SPAN>we<SPAN style="LETTER-SPACING: 0.1pt"> </SPAN>propose<SPAN style="LETTER-SPACING: 0.1pt"> </SPAN>on<SPAN style="LETTER-SPACING: 0.1pt"> </SPAN>asynchronous<SPAN style="LETTER-SPACING: 0.1pt"> </SPAN>consensus.</P>
<OL>
<OL>
<LI>
<P style="MARGIN-TOP: 0.12in; LINE-HEIGHT: 100%" align=left><A name=Rabia></A><A name=Rabia1></A><FONT style="FONT-SIZE: 11pt" size=2><FONT face="Palatino Linotype, serif"><FONT style="FONT-SIZE: 10pt" size=2><I>Rabia</I></FONT></FONT></FONT></P></LI></OL></OL>
<P class=western style="MARGIN-TOP: 0.04in; MARGIN-LEFT: 1.89in; LINE-HEIGHT: 106%; MARGIN-RIGHT: 0.07in; TEXT-INDENT: 0.3in" align=justify>The Rabia protocol presented in 2021 [<A href="file:///C:/SuperMemo/systems/Incremental/temp/HTMLFile.htm#_bookmark40"><FONT color=#0774b7>25</FONT></A>] is the state-of-the-art asynchronous con-<SPAN style="LETTER-SPACING: 0.1pt"> </SPAN>sensus<SPAN style="LETTER-SPACING: 0.1pt"> </SPAN>protocol<SPAN style="LETTER-SPACING: 0.1pt"> </SPAN>that<SPAN style="LETTER-SPACING: 0.1pt"> </SPAN>fully<SPAN style="LETTER-SPACING: 0.1pt"> </SPAN>implements<SPAN style="LETTER-SPACING: 0.1pt"> </SPAN>SMR<SPAN style="LETTER-SPACING: 0.1pt"> </SPAN>(State<SPAN style="LETTER-SPACING: 0.1pt"> </SPAN>Machine<SPAN style="LETTER-SPACING: 0.1pt"> </SPAN>Replication),<SPAN style="LETTER-SPACING: 0.1pt"> </SPAN>encompassing<SPAN style="LETTER-SPACING: 0.1pt"> </SPAN>advantages inherent to asynchronous consensus, such as no network latency requirements<SPAN style="LETTER-SPACING: 0.1pt"> </SPAN>and no reliance on leader election or failure detectors.<SPAN style="LETTER-SPACING: 0.1pt"> </SPAN>As long as messages transmitted<SPAN style="LETTER-SPACING: 0.1pt"> </SPAN>between correct processes are delivered reliably, they ensure system liveness with a proba-<SPAN style="LETTER-SPACING: 0.1pt"> </SPAN>bility of 1. In simple terms, Rabia achieves this by relying on the promise that every process<SPAN style="LETTER-SPACING: 0.1pt"> </SPAN>can receive the same request with the smallest timestamp within a short time interval.<SPAN style="LETTER-SPACING: 0.1pt"> </SPAN>Consequently,<SPAN style="LETTER-SPACING: 0.4pt"> </SPAN>it<SPAN style="LETTER-SPACING: 0.4pt"> </SPAN>employs<SPAN style="LETTER-SPACING: 0.4pt"> </SPAN>random<SPAN style="LETTER-SPACING: 0.4pt"> </SPAN>binary<SPAN style="LETTER-SPACING: 0.5pt"> </SPAN>consensus<SPAN style="LETTER-SPACING: 0.4pt"> </SPAN>to<SPAN style="LETTER-SPACING: 0.4pt"> </SPAN>sort<SPAN style="LETTER-SPACING: 0.4pt"> </SPAN>the<SPAN style="LETTER-SPACING: 0.4pt"> </SPAN>head<SPAN style="LETTER-SPACING: 0.4pt"> </SPAN>of<SPAN style="LETTER-SPACING: 0.5pt"> </SPAN>the<SPAN style="LETTER-SPACING: 0.4pt"> </SPAN>pending<SPAN style="LETTER-SPACING: 0.4pt"> </SPAN>request</P>
<P class=western style="MARGIN-TOP: 0.01in; PAGE-BREAK-BEFORE: always"><BR></P>
<P class=western style="MARGIN-TOP: 0.07in; MARGIN-LEFT: 1.89in; LINE-HEIGHT: 106%; TEXT-INDENT: 0in">queue<SPAN style="LETTER-SPACING: 0.1pt"> </SPAN>for<SPAN style="LETTER-SPACING: 0.1pt"> </SPAN>all<SPAN style="LETTER-SPACING: 0.1pt"> </SPAN>processes<SPAN style="LETTER-SPACING: 0.1pt"> </SPAN>(i.e.,<SPAN style="LETTER-SPACING: 0.1pt"> </SPAN>where<SPAN style="LETTER-SPACING: 0.1pt"> </SPAN>the<SPAN style="LETTER-SPACING: 0.1pt"> </SPAN>unresolved<SPAN style="LETTER-SPACING: 0.1pt"> </SPAN>requests<SPAN style="LETTER-SPACING: 0.1pt"> </SPAN>with<SPAN style="LETTER-SPACING: 0.1pt"> </SPAN>the<SPAN style="LETTER-SPACING: 0.1pt"> </SPAN>smallest<SPAN style="LETTER-SPACING: 0.1pt"> </SPAN>timestamp<SPAN style="LETTER-SPACING: 0.1pt"> </SPAN>are<SPAN style="LETTER-SPACING: -2.1pt"> </SPAN>held),<SPAN style="LETTER-SPACING: 0.4pt"> </SPAN>thus<SPAN style="LETTER-SPACING: 0.4pt"> </SPAN>achieving<SPAN style="LETTER-SPACING: 0.4pt"> </SPAN>good<SPAN style="LETTER-SPACING: 0.5pt"> </SPAN>performance<SPAN style="LETTER-SPACING: 0.4pt"> </SPAN>within<SPAN style="LETTER-SPACING: 0.4pt"> </SPAN>a<SPAN style="LETTER-SPACING: 0.4pt"> </SPAN>single<SPAN style="LETTER-SPACING: 0.5pt"> </SPAN>data<SPAN style="LETTER-SPACING: 0.4pt"> </SPAN>center.</P>
<OL>
<OL start=2>
<LI>
<P style="MARGIN-TOP: 0.12in; LINE-HEIGHT: 100%" align=left><A name="Read Leases"></A><A name="Read Leases1"></A><FONT style="FONT-SIZE: 11pt" size=2><FONT face="Palatino Linotype, serif"><FONT style="FONT-SIZE: 10pt" size=2><I>Read</I></FONT></FONT><FONT face="Palatino Linotype, serif"><FONT style="FONT-SIZE: 10pt" size=2><SPAN style="LETTER-SPACING: -0.3pt"><I> </I></SPAN></FONT></FONT><FONT face="Palatino Linotype, serif"><FONT style="FONT-SIZE: 10pt" size=2><I>Leases</I></FONT></FONT></FONT></P></LI></OL></OL>
<P class=western style="MARGIN-TOP: 0.04in; MARGIN-LEFT: 1.89in; LINE-HEIGHT: 106%; MARGIN-RIGHT: 0.09in; TEXT-INDENT: 0.3in" align=justify>One<SPAN style="LETTER-SPACING: -0.2pt"> </SPAN>approach<SPAN style="LETTER-SPACING: -0.2pt"> </SPAN>to<SPAN style="LETTER-SPACING: -0.2pt"> </SPAN>optimize<SPAN style="LETTER-SPACING: -0.2pt"> </SPAN>reads<SPAN style="LETTER-SPACING: -0.2pt"> </SPAN>in<SPAN style="LETTER-SPACING: -0.2pt"> </SPAN>consensus<SPAN style="LETTER-SPACING: -0.2pt"> </SPAN>protocols<SPAN style="LETTER-SPACING: -0.2pt"> </SPAN>is<SPAN style="LETTER-SPACING: -0.2pt"> </SPAN>read<SPAN style="LETTER-SPACING: -0.2pt"> </SPAN>lease<SPAN style="LETTER-SPACING: -0.2pt"> </SPAN>[<A href="file:///C:/SuperMemo/systems/Incremental/temp/HTMLFile.htm#_bookmark43"><FONT color=#0774b7>28</FONT></A>].<SPAN style="LETTER-SPACING: 0.4pt"> </SPAN>The<SPAN style="LETTER-SPACING: -0.2pt"> </SPAN>lease<SPAN style="LETTER-SPACING: -2.2pt"> </SPAN>provides a time-bound guarantee, giving a particular process exclusive rights to handle<SPAN style="LETTER-SPACING: 0.1pt"> </SPAN>read requests independently for a specific period.<SPAN style="LETTER-SPACING: 0.1pt"> </SPAN>By granting a process a lease, other<SPAN style="LETTER-SPACING: 0.1pt"> </SPAN>processes can be assured that the leaseholder has the most up-to-date data, eliminating<SPAN style="LETTER-SPACING: 0.1pt"> </SPAN>the need for them to participate in the consensus of read requests. The lease assigns the<SPAN style="LETTER-SPACING: -2.2pt"> </SPAN>leader with the responsibility for all the read traffic, putting heavy burdens on it, while the<SPAN style="LETTER-SPACING: 0.1pt"> </SPAN>follower<SPAN style="LETTER-SPACING: -0.1pt"> </SPAN>processes serve<SPAN style="LETTER-SPACING: -0.1pt"> </SPAN>solely for<SPAN style="LETTER-SPACING: -0.1pt"> </SPAN>fault tolerance<SPAN style="LETTER-SPACING: -0.1pt"> </SPAN>and redundancy.</P>
<P class=western style="MARGIN-TOP: 0in; MARGIN-LEFT: 1.89in; LINE-HEIGHT: 106%; MARGIN-RIGHT: 0.09in; TEXT-INDENT: 0.3in" align=justify>However, the introduction of the lease brings its challenges, such as assuring the<SPAN style="LETTER-SPACING: 0.1pt"> </SPAN>validity period of a lease, managing lease renewals efficiently, and handling scenarios where<SPAN style="LETTER-SPACING: -2.1pt"> </SPAN>the leaseholder fails. Moreover, clocks at each process must have a bounded frequency<SPAN style="LETTER-SPACING: 0.1pt"> </SPAN>error, demanding that the CPU clock time of each process is almost accurate, which may<SPAN style="LETTER-SPACING: -2.2pt"> </SPAN>not<SPAN style="LETTER-SPACING: 0.1pt"> </SPAN>be<SPAN style="LETTER-SPACING: 0.1pt"> </SPAN>satisfied<SPAN style="LETTER-SPACING: 0.1pt"> </SPAN>by<SPAN style="LETTER-SPACING: 0.1pt"> </SPAN>current<SPAN style="LETTER-SPACING: 0.1pt"> </SPAN>commodity<SPAN style="LETTER-SPACING: 0.1pt"> </SPAN>clocks<SPAN style="LETTER-SPACING: 0.1pt"> </SPAN>[<A href="file:///C:/SuperMemo/systems/Incremental/temp/HTMLFile.htm#_bookmark49"><FONT color=#0774b7>34</FONT></A>].</P>
<P class=western style="MARGIN-TOP: 0in; MARGIN-LEFT: 1.89in; LINE-HEIGHT: 106%; MARGIN-RIGHT: 0.07in; TEXT-INDENT: 0.3in" align=justify>In summary, while read leases are widely applied in the industry [<A href="file:///C:/SuperMemo/systems/Incremental/temp/HTMLFile.htm#_bookmark21"><FONT color=#0774b7>5</FONT></A>,<A href="file:///C:/SuperMemo/systems/Incremental/temp/HTMLFile.htm#_bookmark25"><FONT color=#0774b7>9</FONT></A>,<A href="file:///C:/SuperMemo/systems/Incremental/temp/HTMLFile.htm#_bookmark28"><FONT color=#0774b7>13</FONT></A>], there are still<SPAN style="LETTER-SPACING: -2.1pt"> </SPAN>some issues to be cautious of during their implementation, such as the possibility of non-<SPAN style="LETTER-SPACING: 0.1pt"> </SPAN>linearizable reads due to improper parameter configurations. The primary issue lies in that<SPAN style="LETTER-SPACING: 0.1pt"> </SPAN>the leaseholder is typically the leader process, a role not present in asynchronous consensus,<SPAN style="LETTER-SPACING: -2.2pt"> </SPAN>thus<SPAN style="LETTER-SPACING: 0.9pt"> </SPAN>making<SPAN style="LETTER-SPACING: 0.9pt"> </SPAN>this<SPAN style="LETTER-SPACING: 0.9pt"> </SPAN>method<SPAN style="LETTER-SPACING: 0.9pt"> </SPAN>unsuitable<SPAN style="LETTER-SPACING: 0.9pt"> </SPAN>for<SPAN style="LETTER-SPACING: 0.9pt"> </SPAN>read<SPAN style="LETTER-SPACING: 1pt"> </SPAN>optimization<SPAN style="LETTER-SPACING: 0.9pt"> </SPAN>in<SPAN style="LETTER-SPACING: 0.9pt"> </SPAN>asynchronous<SPAN style="LETTER-SPACING: 0.9pt"> </SPAN>consensus.</P>
<OL>
<OL start=3>
<LI>
<P style="MARGIN-TOP: 0.12in; LINE-HEIGHT: 100%" align=left><A name="Read Quorum"></A><A name="Read Quorum1"></A><FONT style="FONT-SIZE: 11pt" size=2><FONT face="Palatino Linotype, serif"><FONT style="FONT-SIZE: 10pt" size=2><I>Read</I></FONT></FONT><FONT face="Palatino Linotype, serif"><FONT style="FONT-SIZE: 10pt" size=2><SPAN style="LETTER-SPACING: -0.3pt"><I> </I></SPAN></FONT></FONT><FONT face="Palatino Linotype, serif"><FONT style="FONT-SIZE: 10pt" size=2><I>Quorum</I></FONT></FONT></FONT></P></LI></OL></OL>
<P class=western style="MARGIN-TOP: 0.04in; MARGIN-LEFT: 1.89in; LINE-HEIGHT: 106%; MARGIN-RIGHT: 0.08in; TEXT-INDENT: 0.3in" align=justify>In recent years, related works have begun exploring an alternative read optimization<SPAN style="LETTER-SPACING: 0.1pt"> </SPAN>method<SPAN style="LETTER-SPACING: 1.4pt"> </SPAN>apart<SPAN style="LETTER-SPACING: 1.4pt"> </SPAN>from<SPAN style="LETTER-SPACING: 1.4pt"> </SPAN>reading<SPAN style="LETTER-SPACING: 1.4pt"> </SPAN>leases:<SPAN style="LETTER-SPACING: 1pt"> </SPAN>reading<SPAN style="LETTER-SPACING: 1.4pt"> </SPAN>quorum.<SPAN style="LETTER-SPACING: 2.2pt"> </SPAN>As<SPAN style="LETTER-SPACING: 1.4pt"> </SPAN>stated<SPAN style="LETTER-SPACING: 1.4pt"> </SPAN>in<SPAN style="LETTER-SPACING: 1.4pt"> </SPAN>Section<SPAN style="LETTER-SPACING: 1.4pt"> </SPAN><A href="file:///C:/SuperMemo/systems/Incremental/temp/HTMLFile.htm#_bookmark2"><FONT color=#0774b7>2</FONT></A>,<SPAN style="LETTER-SPACING: 1.7pt"> </SPAN>quorum,<SPAN style="LETTER-SPACING: -2.2pt"> </SPAN>in consensus protocols, refers to the cluster of a majority of processes sufficient to reach<SPAN style="LETTER-SPACING: -2.2pt"> </SPAN>a<SPAN style="LETTER-SPACING: 0.1pt"> </SPAN>consensus.</P>
<P class=western style="MARGIN-TOP: 0in; MARGIN-LEFT: 1.89in; LINE-HEIGHT: 106%; MARGIN-RIGHT: 0.09in; TEXT-INDENT: 0.3in" align=justify>The<SPAN style="LETTER-SPACING: 1.8pt"> </SPAN>discussion<SPAN style="LETTER-SPACING: 1.8pt"> </SPAN>on<SPAN style="LETTER-SPACING: 1.8pt"> </SPAN>read<SPAN style="LETTER-SPACING: 1.8pt"> </SPAN>optimization<SPAN style="LETTER-SPACING: 1.8pt"> </SPAN>for<SPAN style="LETTER-SPACING: 1.8pt"> </SPAN>the<SPAN style="LETTER-SPACING: 1.9pt"> </SPAN>Raft<SPAN style="LETTER-SPACING: 1.8pt"> </SPAN>algorithm<SPAN style="LETTER-SPACING: 1.8pt"> </SPAN>[<A href="file:///C:/SuperMemo/systems/Incremental/temp/HTMLFile.htm#_bookmark46"><FONT color=#0774b7>31</FONT></A>]<SPAN style="LETTER-SPACING: 1.8pt"> </SPAN>sheds<SPAN style="LETTER-SPACING: 1.8pt"> </SPAN>light<SPAN style="LETTER-SPACING: 1.8pt"> </SPAN>on<SPAN style="LETTER-SPACING: 1.9pt"> </SPAN>the<SPAN style="LETTER-SPACING: -2.1pt"> </SPAN>issue inherent in the naive read of a majority of follower processes: when a write request is<SPAN style="LETTER-SPACING: 0.1pt"> </SPAN>sent to the leader process, the leader broadcasts it to all its followers, which in turn cast<SPAN style="LETTER-SPACING: 0.1pt"> </SPAN>approval<SPAN style="LETTER-SPACING: 1.3pt"> </SPAN>votes.<SPAN style="LETTER-SPACING: 2.1pt"> </SPAN>Upon<SPAN style="LETTER-SPACING: 1.3pt"> </SPAN>collecting<SPAN style="LETTER-SPACING: 1.3pt"> </SPAN>a<SPAN style="LETTER-SPACING: 1.3pt"> </SPAN>majority<SPAN style="LETTER-SPACING: 1.3pt"> </SPAN>of<SPAN style="LETTER-SPACING: 1.3pt"> </SPAN>the<SPAN style="LETTER-SPACING: 1.3pt"> </SPAN>votes,<SPAN style="LETTER-SPACING: 1.3pt"> </SPAN>the<SPAN style="LETTER-SPACING: 1.3pt"> </SPAN>leader<SPAN style="LETTER-SPACING: 1.3pt"> </SPAN>responds<SPAN style="LETTER-SPACING: 1.3pt"> </SPAN>to<SPAN style="LETTER-SPACING: 1.3pt"> </SPAN>the<SPAN style="LETTER-SPACING: 1.3pt"> </SPAN>client<SPAN style="LETTER-SPACING: -2.1pt"> </SPAN>and applies the write to the state machine on itself. However, if a new read request seeking<SPAN style="LETTER-SPACING: 0.1pt"> </SPAN>the latest-written value is initiated at this point, all the followers have yet to receive the<SPAN style="LETTER-SPACING: 0.1pt"> </SPAN>latest state machine update, as this write request would be sent along with the following<SPAN style="LETTER-SPACING: 0.1pt"> </SPAN>heartbeat message from the leader to the followers. Consequently, the naive read majority<SPAN style="LETTER-SPACING: 0.1pt"> </SPAN>retrieves<SPAN style="LETTER-SPACING: 0.3pt"> </SPAN>stale<SPAN style="LETTER-SPACING: 0.3pt"> </SPAN>data,<SPAN style="LETTER-SPACING: 0.3pt"> </SPAN>failing<SPAN style="LETTER-SPACING: 0.3pt"> </SPAN>to<SPAN style="LETTER-SPACING: 0.4pt"> </SPAN>meet<SPAN style="LETTER-SPACING: 0.3pt"> </SPAN>the<SPAN style="LETTER-SPACING: 0.3pt"> </SPAN>linear<SPAN style="LETTER-SPACING: 0.3pt"> </SPAN>read<SPAN style="LETTER-SPACING: 0.3pt"> </SPAN>requirement.</P>
<P class=western style="MARGIN-TOP: 0in; MARGIN-LEFT: 1.89in; LINE-HEIGHT: 106%; MARGIN-RIGHT: 0.07in; TEXT-INDENT: 0.3in" align=justify>The solution proposed by this work exploits the specialized transaction layer of<SPAN style="LETTER-SPACING: 0.1pt"> </SPAN>CockroachDB<SPAN style="LETTER-SPACING: -0.4pt"> </SPAN>[<A href="file:///C:/SuperMemo/systems/Incremental/temp/HTMLFile.htm#_bookmark22"><FONT color=#0774b7>6</FONT></A>].<SPAN style="LETTER-SPACING: 0.1pt"> </SPAN>After<SPAN style="LETTER-SPACING: -0.4pt"> </SPAN>broadcasting<SPAN style="LETTER-SPACING: -0.4pt"> </SPAN>the<SPAN style="LETTER-SPACING: -0.4pt"> </SPAN>write<SPAN style="LETTER-SPACING: -0.4pt"> </SPAN>operation<SPAN style="LETTER-SPACING: -0.4pt"> </SPAN>to<SPAN style="LETTER-SPACING: -0.4pt"> </SPAN>followers<SPAN style="LETTER-SPACING: -0.4pt"> </SPAN>by<SPAN style="LETTER-SPACING: -0.4pt"> </SPAN>the<SPAN style="LETTER-SPACING: -0.4pt"> </SPAN>leader,<SPAN style="LETTER-SPACING: -0.4pt"> </SPAN>if<SPAN style="LETTER-SPACING: -0.4pt"> </SPAN>the<SPAN style="LETTER-SPACING: 0.1pt"> </SPAN>followers have not received a heartbeat message to confirm from the leader, each follower<SPAN style="LETTER-SPACING: 0.1pt"> </SPAN>leaves a write-intent mark at the corresponding key in its local database, indicating a<SPAN style="LETTER-SPACING: 0.1pt"> </SPAN>potential upcoming write, albeit without actual completion. In this situation, similar to<SPAN style="LETTER-SPACING: 0.1pt"> </SPAN>reading quorum, the client will be alerted that the latest write operation has not yet applied<SPAN style="LETTER-SPACING: 0.1pt"> </SPAN>to the state machine of the process, thus, the client will wait for the disappearance of the<SPAN style="LETTER-SPACING: -2.2pt"> </SPAN>write-intend marker by continuously sending probe messages before initiating a new read<SPAN style="LETTER-SPACING: 0.1pt"> </SPAN>operation. The two issues that exist in this kind of read optimization are, firstly, for hot-<SPAN style="LETTER-SPACING: 0.1pt"> </SPAN>spot data frequently subjected to write modifications, in which the prolonged existence<SPAN style="LETTER-SPACING: 0.1pt"> </SPAN>of<SPAN style="LETTER-SPACING: -0.6pt"> </SPAN>write-intend<SPAN style="LETTER-SPACING: -0.6pt"> </SPAN>markers<SPAN style="LETTER-SPACING: -0.6pt"> </SPAN>could<SPAN style="LETTER-SPACING: -0.6pt"> </SPAN>decelerate<SPAN style="LETTER-SPACING: -0.6pt"> </SPAN>read<SPAN style="LETTER-SPACING: -0.6pt"> </SPAN>efficiency.<SPAN style="LETTER-SPACING: -0.1pt"> </SPAN>Secondly,<SPAN style="LETTER-SPACING: -0.6pt"> </SPAN>this<SPAN style="LETTER-SPACING: -0.6pt"> </SPAN>method<SPAN style="LETTER-SPACING: -0.6pt"> </SPAN>is<SPAN style="LETTER-SPACING: -0.6pt"> </SPAN>heavily<SPAN style="LETTER-SPACING: -2.2pt"> </SPAN>intertwined with specific database products like CockroachDB, rendering it inapplicable to<SPAN style="LETTER-SPACING: 0.1pt"> </SPAN>asynchronous<SPAN style="LETTER-SPACING: 0.1pt"> </SPAN>consensus.</P>
<P class=western style="MARGIN-TOP: 0in; MARGIN-LEFT: 1.89in; LINE-HEIGHT: 106%; MARGIN-RIGHT: 0.1in; TEXT-INDENT: 0.3in" align=justify>The second read quorum method is designed for the Paxos algorithm [<A href="file:///C:/SuperMemo/systems/Incremental/temp/HTMLFile.htm#_bookmark45"><FONT color=#0774b7>30</FONT></A>]. A quorum<SPAN style="LETTER-SPACING: 0.1pt"> </SPAN>read requires two phases. In the first phase, the client reads the most recently accepted slot<SPAN style="LETTER-SPACING: 0.1pt"> </SPAN>from a majority of followers, excluding the leader processes. As each follower replies to<SPAN style="LETTER-SPACING: 0.1pt"> </SPAN>the<SPAN style="LETTER-SPACING: -0.6pt"> </SPAN>client,<SPAN style="LETTER-SPACING: -0.6pt"> </SPAN>it<SPAN style="LETTER-SPACING: -0.5pt"> </SPAN>returns<SPAN style="LETTER-SPACING: -0.6pt"> </SPAN>the<SPAN style="LETTER-SPACING: -0.6pt"> </SPAN>most<SPAN style="LETTER-SPACING: -0.5pt"> </SPAN>recently<SPAN style="LETTER-SPACING: -0.6pt"> </SPAN>accepted<SPAN style="LETTER-SPACING: -0.6pt"> </SPAN>slot<SPAN style="LETTER-SPACING: -0.5pt"> </SPAN>seen<SPAN style="LETTER-SPACING: -0.6pt"> </SPAN>by<SPAN style="LETTER-SPACING: -0.6pt"> </SPAN>that<SPAN style="LETTER-SPACING: -0.5pt"> </SPAN>follower.<SPAN style="LETTER-SPACING: -0.1pt"> </SPAN>Then,<SPAN style="LETTER-SPACING: -0.6pt"> </SPAN>the<SPAN style="LETTER-SPACING: -0.5pt"> </SPAN>client<SPAN style="LETTER-SPACING: -2.2pt"> </SPAN>collects<SPAN style="LETTER-SPACING: 0.9pt"> </SPAN>responses<SPAN style="LETTER-SPACING: 0.9pt"> </SPAN>from<SPAN style="LETTER-SPACING: 0.9pt"> </SPAN>the<SPAN style="LETTER-SPACING: 0.9pt"> </SPAN>majority<SPAN style="LETTER-SPACING: 0.9pt"> </SPAN>of<SPAN style="LETTER-SPACING: 0.9pt"> </SPAN>followers<SPAN style="LETTER-SPACING: 0.9pt"> </SPAN>and<SPAN style="LETTER-SPACING: 0.9pt"> </SPAN>selects<SPAN style="LETTER-SPACING: 0.9pt"> </SPAN>the<SPAN style="LETTER-SPACING: 0.9pt"> </SPAN>slot<SPAN style="LETTER-SPACING: 0.9pt"> </SPAN>with<SPAN style="LETTER-SPACING: 0.9pt"> </SPAN>the<SPAN style="LETTER-SPACING: 0.9pt"> </SPAN>highest</P>
<P class=western style="MARGIN-TOP: 0.01in; PAGE-BREAK-BEFORE: always"><BR></P>
<P class=western style="MARGIN-TOP: 0.07in; MARGIN-LEFT: 1.89in; LINE-HEIGHT: 106%; MARGIN-RIGHT: 0.07in" align=justify>acceptance<SPAN style="LETTER-SPACING: -0.5pt"> </SPAN>number<SPAN style="LETTER-SPACING: -0.4pt"> </SPAN>for<SPAN style="LETTER-SPACING: -0.5pt"> </SPAN>the<SPAN style="LETTER-SPACING: -0.4pt"> </SPAN>second<SPAN style="LETTER-SPACING: -0.4pt"> </SPAN>phase. The<SPAN style="LETTER-SPACING: -0.4pt"> </SPAN>result<SPAN style="LETTER-SPACING: -0.4pt"> </SPAN>of<SPAN style="LETTER-SPACING: -0.5pt"> </SPAN>this<SPAN style="LETTER-SPACING: -0.4pt"> </SPAN>consensus<SPAN style="LETTER-SPACING: -0.4pt"> </SPAN>slot<SPAN style="LETTER-SPACING: -0.5pt"> </SPAN>will<SPAN style="LETTER-SPACING: -0.4pt"> </SPAN>eventually<SPAN style="LETTER-SPACING: -2.2pt"> </SPAN>be<SPAN style="LETTER-SPACING: -0.6pt"> </SPAN>returned<SPAN style="LETTER-SPACING: -0.6pt"> </SPAN>as<SPAN style="LETTER-SPACING: -0.6pt"> </SPAN>the<SPAN style="LETTER-SPACING: -0.6pt"> </SPAN>result<SPAN style="LETTER-SPACING: -0.6pt"> </SPAN>of<SPAN style="LETTER-SPACING: -0.5pt"> </SPAN>the<SPAN style="LETTER-SPACING: -0.6pt"> </SPAN>read<SPAN style="LETTER-SPACING: -0.6pt"> </SPAN>operation.<SPAN style="LETTER-SPACING: -0.1pt"> </SPAN>In<SPAN style="LETTER-SPACING: -0.6pt"> </SPAN>the<SPAN style="LETTER-SPACING: -0.6pt"> </SPAN>upcoming<SPAN style="LETTER-SPACING: -0.6pt"> </SPAN>phase,<SPAN style="LETTER-SPACING: -0.5pt"> </SPAN>the<SPAN style="LETTER-SPACING: -0.6pt"> </SPAN>client<SPAN style="LETTER-SPACING: -0.6pt"> </SPAN>waits<SPAN style="LETTER-SPACING: -0.6pt"> </SPAN>for<SPAN style="LETTER-SPACING: -2.2pt"> </SPAN>the execution of the slot number obtained from the first phase. For this situation, the client<SPAN style="LETTER-SPACING: 0.1pt"> </SPAN>needs<SPAN style="LETTER-SPACING: -0.2pt"> </SPAN>to<SPAN style="LETTER-SPACING: -0.2pt"> </SPAN>contact<SPAN style="LETTER-SPACING: -0.2pt"> </SPAN>any<SPAN style="LETTER-SPACING: -0.2pt"> </SPAN>process<SPAN style="LETTER-SPACING: -0.2pt"> </SPAN>and<SPAN style="LETTER-SPACING: -0.1pt"> </SPAN>check<SPAN style="LETTER-SPACING: -0.2pt"> </SPAN>whether<SPAN style="LETTER-SPACING: -0.2pt"> </SPAN>the<SPAN style="LETTER-SPACING: -0.2pt"> </SPAN>command<SPAN style="LETTER-SPACING: -0.2pt"> </SPAN>at<SPAN style="LETTER-SPACING: -0.2pt"> </SPAN>that<SPAN style="LETTER-SPACING: -0.1pt"> </SPAN>slot<SPAN style="LETTER-SPACING: -0.2pt"> </SPAN>has<SPAN style="LETTER-SPACING: -0.2pt"> </SPAN>been<SPAN style="LETTER-SPACING: -0.2pt"> </SPAN>executed.<SPAN style="LETTER-SPACING: -2.1pt"> </SPAN>Checking with just a single follower for execution confirmation is sufficient as the state<SPAN style="LETTER-SPACING: 0.1pt"> </SPAN>of execution carries information regarding global replication in the system: a command<SPAN style="LETTER-SPACING: 0.1pt"> </SPAN>is executed only when all commands on previous slots have been committed across the<SPAN style="LETTER-SPACING: 0.1pt"> </SPAN>cluster. If the current slot has been executed, the client can complete the read operation and<SPAN style="LETTER-SPACING: 0.1pt"> </SPAN>utilize the result of the command executed at that slot. Otherwise, the client must retry the<SPAN style="LETTER-SPACING: 0.1pt"> </SPAN>second<SPAN style="LETTER-SPACING: 0.1pt"> </SPAN>phase<SPAN style="LETTER-SPACING: 0.1pt"> </SPAN>if<SPAN style="LETTER-SPACING: 0.1pt"> </SPAN>the<SPAN style="LETTER-SPACING: 0.2pt"> </SPAN>command<SPAN style="LETTER-SPACING: 0.1pt"> </SPAN>is<SPAN style="LETTER-SPACING: 0.1pt"> </SPAN>still<SPAN style="LETTER-SPACING: 0.1pt"> </SPAN>pending.</P>
<P class=western style="MARGIN-TOP: 0in; MARGIN-LEFT: 1.89in; LINE-HEIGHT: 106%; MARGIN-RIGHT: 0.09in; TEXT-INDENT: 0.3in" align=justify>This<SPAN style="LETTER-SPACING: 0.1pt"> </SPAN>method<SPAN style="LETTER-SPACING: 0.1pt"> </SPAN>is<SPAN style="LETTER-SPACING: 0.1pt"> </SPAN>simple<SPAN style="LETTER-SPACING: 0.1pt"> </SPAN>and<SPAN style="LETTER-SPACING: 0.1pt"> </SPAN>easy<SPAN style="LETTER-SPACING: 0.1pt"> </SPAN>to<SPAN style="LETTER-SPACING: 0.1pt"> </SPAN>understand;<SPAN style="LETTER-SPACING: 0.1pt"> </SPAN>however,<SPAN style="LETTER-SPACING: 0.1pt"> </SPAN>it<SPAN style="LETTER-SPACING: 0.1pt"> </SPAN>leverages<SPAN style="LETTER-SPACING: 0.1pt"> </SPAN>the<SPAN style="LETTER-SPACING: 0.1pt"> </SPAN>global<SPAN style="LETTER-SPACING: 0.1pt"> </SPAN>synchronization guarantee of the accept phase of Paxos, thereby rendering it unsuitable for<SPAN style="LETTER-SPACING: 0.1pt"> </SPAN>asynchronous<SPAN style="LETTER-SPACING: 0.3pt"> </SPAN>consensus.</P>
<OL>
<OL start=4>
<LI>
<P style="MARGIN-TOP: 0.12in; LINE-HEIGHT: 100%" align=left><A name="Other Read Optimization Mechanisms"></A><A name="Other Read Optimization Mechanisms1"></A><FONT style="FONT-SIZE: 11pt" size=2><FONT face="Palatino Linotype, serif"><FONT style="FONT-SIZE: 10pt" size=2><I>Other</I></FONT></FONT><FONT face="Palatino Linotype, serif"><FONT style="FONT-SIZE: 10pt" size=2><SPAN style="LETTER-SPACING: -0.3pt"><I> </I></SPAN></FONT></FONT><FONT face="Palatino Linotype, serif"><FONT style="FONT-SIZE: 10pt" size=2><I>Read</I></FONT></FONT><FONT face="Palatino Linotype, serif"><FONT style="FONT-SIZE: 10pt" size=2><SPAN style="LETTER-SPACING: -0.3pt"><I> </I></SPAN></FONT></FONT><FONT face="Palatino Linotype, serif"><FONT style="FONT-SIZE: 10pt" size=2><I>Optimization</I></FONT></FONT><FONT face="Palatino Linotype, serif"><FONT style="FONT-SIZE: 10pt" size=2><SPAN style="LETTER-SPACING: -0.2pt"><I> </I></SPAN></FONT></FONT><FONT face="Palatino Linotype, serif"><FONT style="FONT-SIZE: 10pt" size=2><I>Mechanisms</I></FONT></FONT></FONT></P></LI></OL></OL>
<P class=western style="MARGIN-TOP: 0.04in; MARGIN-LEFT: 1.89in; LINE-HEIGHT: 106%; MARGIN-RIGHT: 0.1in; TEXT-INDENT: 0.3in" align=justify>Aside from the two mainstream methods mentioned above, there are some works<SPAN style="LETTER-SPACING: 0.1pt"> </SPAN>compromising on non-linearizable reads: many practical system implementations delegate<SPAN style="LETTER-SPACING: 0.1pt"> </SPAN>data reading to protocols built on top of the Paxos-supported consensus layer, such as<SPAN style="LETTER-SPACING: 0.1pt"> </SPAN>ZooKeeper<SPAN style="LETTER-SPACING: 0.1pt"> </SPAN>[<A href="file:///C:/SuperMemo/systems/Incremental/temp/HTMLFile.htm#_bookmark50"><FONT color=#0774b7>35</FONT></A>]<SPAN style="LETTER-SPACING: 0.1pt"> </SPAN>and<SPAN style="LETTER-SPACING: 0.1pt"> </SPAN>Cassandra<SPAN style="LETTER-SPACING: 0.1pt"> </SPAN>[<A href="file:///C:/SuperMemo/systems/Incremental/temp/HTMLFile.htm#_bookmark51"><FONT color=#0774b7>36</FONT></A>].</P>
<P class=western style="MARGIN-LEFT: 1.89in; LINE-HEIGHT: 106%; MARGIN-RIGHT: 0.09in; TEXT-INDENT: 0.3in" align=justify>Based on the comparisons above, we aim to design a read optimization method for<SPAN style="LETTER-SPACING: 0.1pt"> </SPAN>asynchronous<SPAN style="LETTER-SPACING: 0.1pt"> </SPAN>consensus.</P>
<OL>
<OL start=5>
<LI>
<P style="MARGIN-TOP: 0.12in; LINE-HEIGHT: 100%" align=left><A name="Consensus vs. MVCC"></A><A name="Consensus vs. MVCC1"></A><FONT style="FONT-SIZE: 11pt" size=2><FONT face="Palatino Linotype, serif"><FONT style="FONT-SIZE: 10pt" size=2><I>Consensus</I></FONT></FONT><FONT face="Palatino Linotype, serif"><FONT style="FONT-SIZE: 10pt" size=2><SPAN style="LETTER-SPACING: 0.1pt"><I> </I></SPAN></FONT></FONT><FONT face="Palatino Linotype, serif"><FONT style="FONT-SIZE: 10pt" size=2><I>vs.</I></FONT></FONT><FONT face="Palatino Linotype, serif"><FONT style="FONT-SIZE: 10pt" size=2><SPAN style="LETTER-SPACING: 0.1pt"><I> </I></SPAN></FONT></FONT><FONT face="Palatino Linotype, serif"><FONT style="FONT-SIZE: 10pt" size=2><I>MVCC</I></FONT></FONT></FONT></P></LI></OL></OL>
<P class=western style="MARGIN-TOP: 0.04in; MARGIN-LEFT: 1.89in; LINE-HEIGHT: 106%; MARGIN-RIGHT: 0.09in; TEXT-INDENT: 0.3in" align=justify>Consensus<SPAN style="LETTER-SPACING: -0.3pt"> </SPAN>algorithms<SPAN style="LETTER-SPACING: -0.3pt"> </SPAN>and<SPAN style="LETTER-SPACING: -0.2pt"> </SPAN>Multi-Version<SPAN style="LETTER-SPACING: -0.3pt"> </SPAN>Concurrency<SPAN style="LETTER-SPACING: -0.3pt"> </SPAN>Control<SPAN style="LETTER-SPACING: -0.2pt"> </SPAN>(MVCC)<SPAN style="LETTER-SPACING: -0.3pt"> </SPAN>are<SPAN style="LETTER-SPACING: -0.2pt"> </SPAN>concepts<SPAN style="LETTER-SPACING: -2.2pt"> </SPAN>operating<SPAN style="LETTER-SPACING: -0.3pt"> </SPAN>at<SPAN style="LETTER-SPACING: -0.2pt"> </SPAN>different<SPAN style="LETTER-SPACING: -0.2pt"> </SPAN>levels.<SPAN style="LETTER-SPACING: 0.4pt"> </SPAN>In<SPAN style="LETTER-SPACING: -0.2pt"> </SPAN>previously<SPAN style="LETTER-SPACING: -0.3pt"> </SPAN>proposed<SPAN style="LETTER-SPACING: -0.2pt"> </SPAN>consensus<SPAN style="LETTER-SPACING: -0.2pt"> </SPAN>algorithms<SPAN style="LETTER-SPACING: -0.2pt"> </SPAN>[<A href="file:///C:/SuperMemo/systems/Incremental/temp/HTMLFile.htm#_bookmark24"><FONT color=#0774b7>8</FONT></A>,<A href="file:///C:/SuperMemo/systems/Incremental/temp/HTMLFile.htm#_bookmark32"><FONT color=#0774b7>17</FONT></A>,<A href="file:///C:/SuperMemo/systems/Incremental/temp/HTMLFile.htm#_bookmark40"><FONT color=#0774b7>25</FONT></A>]<SPAN style="LETTER-SPACING: -0.2pt"> </SPAN>and<SPAN style="LETTER-SPACING: -2.2pt"> </SPAN>their<SPAN style="LETTER-SPACING: -0.3pt"> </SPAN>read<SPAN style="LETTER-SPACING: -0.3pt"> </SPAN>optimizations<SPAN style="LETTER-SPACING: -0.3pt"> </SPAN>[<A href="file:///C:/SuperMemo/systems/Incremental/temp/HTMLFile.htm#_bookmark45"><FONT color=#0774b7>30</FONT></A>],<SPAN style="LETTER-SPACING: -0.3pt"> </SPAN>a<SPAN style="LETTER-SPACING: -0.3pt"> </SPAN>slot<SPAN style="LETTER-SPACING: -0.3pt"> </SPAN>number,<SPAN style="LETTER-SPACING: -0.3pt"> </SPAN>which<SPAN style="LETTER-SPACING: -0.3pt"> </SPAN>is<SPAN style="LETTER-SPACING: -0.3pt"> </SPAN>the<SPAN style="LETTER-SPACING: -0.3pt"> </SPAN>identifier<SPAN style="LETTER-SPACING: -0.3pt"> </SPAN>of<SPAN style="LETTER-SPACING: -0.3pt"> </SPAN>a<SPAN style="LETTER-SPACING: -0.3pt"> </SPAN>consensus<SPAN style="LETTER-SPACING: -0.3pt"> </SPAN>slot,<SPAN style="LETTER-SPACING: -0.3pt"> </SPAN>is<SPAN style="LETTER-SPACING: -2.2pt"> </SPAN>used to totally order all the read and write requests. A consensus slot serves as a marker of<SPAN style="LETTER-SPACING: 0.1pt"> </SPAN>consensus<SPAN style="LETTER-SPACING: -0.5pt"> </SPAN>progress,<SPAN style="LETTER-SPACING: -0.5pt"> </SPAN>where<SPAN style="LETTER-SPACING: -0.5pt"> </SPAN>different<SPAN style="LETTER-SPACING: -0.5pt"> </SPAN>processes<SPAN style="LETTER-SPACING: -0.5pt"> </SPAN>increment<SPAN style="LETTER-SPACING: -0.5pt"> </SPAN>the<SPAN style="LETTER-SPACING: -0.5pt"> </SPAN>slot<SPAN style="LETTER-SPACING: -0.5pt"> </SPAN>number<SPAN style="LETTER-SPACING: -0.5pt"> </SPAN>with<SPAN style="LETTER-SPACING: -0.5pt"> </SPAN>each<SPAN style="LETTER-SPACING: -0.5pt"> </SPAN>new<SPAN style="LETTER-SPACING: -2.2pt"> </SPAN>request for consensus. The objective is to have all the processes agree on the same order of<SPAN style="LETTER-SPACING: 0.1pt"> </SPAN>requests<SPAN style="LETTER-SPACING: 0.7pt"> </SPAN>in<SPAN style="LETTER-SPACING: 0.8pt"> </SPAN>a<SPAN style="LETTER-SPACING: 0.7pt"> </SPAN>given<SPAN style="LETTER-SPACING: 0.8pt"> </SPAN>consensus<SPAN style="LETTER-SPACING: 0.7pt"> </SPAN>slot.<SPAN style="LETTER-SPACING: 1.6pt"> </SPAN>On<SPAN style="LETTER-SPACING: 0.8pt"> </SPAN>the<SPAN style="LETTER-SPACING: 0.8pt"> </SPAN>other<SPAN style="LETTER-SPACING: 0.7pt"> </SPAN>hand,<SPAN style="LETTER-SPACING: 0.8pt"> </SPAN>MVCC<SPAN style="LETTER-SPACING: 0.7pt"> </SPAN>is<SPAN style="LETTER-SPACING: 0.8pt"> </SPAN>more<SPAN style="LETTER-SPACING: 0.8pt"> </SPAN>commonly<SPAN style="LETTER-SPACING: 0.7pt"> </SPAN>employed<SPAN style="LETTER-SPACING: -2.1pt"> </SPAN>in managing concurrent access in database transactions. This can involve concurrent reads<SPAN style="LETTER-SPACING: 0.1pt"> </SPAN>and writes on a single process.<SPAN style="LETTER-SPACING: 0.1pt"> </SPAN>For instance, InnoDB [<A href="file:///C:/SuperMemo/systems/Incremental/temp/HTMLFile.htm#_bookmark52"><FONT color=#0774b7>37</FONT></A>] assigns a version number to<SPAN style="LETTER-SPACING: 0.1pt"> </SPAN>each transaction to track updates, while TiDB [<A href="file:///C:/SuperMemo/systems/Incremental/temp/HTMLFile.htm#_bookmark21"><FONT color=#0774b7>5</FONT></A>] manages data by binding timestamps<SPAN style="LETTER-SPACING: 0.1pt"> </SPAN>to<SPAN style="LETTER-SPACING: 0.1pt"> </SPAN>transactions.</P>
<OL start=4>
<LI>