<b> : </b>How it works.</H1>
<P id=2caa class="pw-post-body-paragraph me mf fp mg b mh mi mj mk ml mm mn mo mp mq mr ms mt mu mv mw mx my mz na nb fi bj" style='FONT-SIZE: 20px; FONT-FAMILY: source-serif-pro, Georgia, Cambria, "Times New Roman", Times, serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(36,36,36); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; MARGIN: 0.94em 0px -0.46em; LETTER-SPACING: 0em; LINE-HEIGHT: 32px; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial' data-selectable-paragraph="">The router will be in charge of simulating transitions between documents by watching changes on the URL. When the document is reloaded or the URL is modified somehow, it will detect that change and render the view that is associated with the new URL.</P>
<P id=de46 class="pw-post-body-paragraph me mf fp mg b mh nc mj mk ml nd mn mo mp ne mr ms mt nf mv mw mx ng mz na nb fi bj" style='FONT-SIZE: 20px; FONT-FAMILY: source-serif-pro, Georgia, Cambria, "Times New Roman", Times, serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(36,36,36); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; MARGIN: 2.14em 0px -0.46em; LETTER-SPACING: 0em; LINE-HEIGHT: 32px; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial' data-selectable-paragraph="">I wrote a small router in javascript to illustrate the idea. At the beginning we need two objects, one to store the routes, and other to store the templates, along with two simple functions to register them.</P>
<P id=9c3e class="pw-post-body-paragraph me mf fp mg b mh nc mj mk ml nd mn mo mp ne mr ms mt nf mv mw mx ng mz na nb fi bj" style='FONT-SIZE: 20px; FONT-FAMILY: source-serif-pro, Georgia, Cambria, "Times New Roman", Times, serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(36,36,36); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; MARGIN: 2.14em 0px -0.46em; LETTER-SPACING: 0em; LINE-HEIGHT: 32px; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial' data-selectable-paragraph=""><EM class=nh style="FONT-STYLE: italic">Templates</EM><SPAN>&nbsp;</SPAN>are just one way of describing the DOM that will be generated when the transition from one route to the other is completed. The whole javascript application will live in a div element.</P><PRE class="ni nj nk nl nm nn no np nq ax nr bj" style='FONT-SIZE: medium; BORDER-TOP: medium none; FONT-FAMILY: source-code-pro, Menlo, Monaco, "Courier New", Courier, monospace; BORDER-RIGHT: medium none; BACKGROUND: rgb(242,242,242); WORD-SPACING: 0px; OVERFLOW-X: auto; BORDER-BOTTOM: medium none; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(36,36,36); PADDING-BOTTOM: 20px; FONT-STYLE: normal; PADDING-TOP: 20px; PADDING-LEFT: 20px; BORDER-LEFT: medium none; ORPHANS: 2; WIDOWS: 2; MARGIN: 56px 0px 0px; LETTER-SPACING: normal; PADDING-RIGHT: 20px; TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial; border-radius: 0px'><SPAN id=7e22 class="ns lh fp no b he nt nu l nv nw" style='FONT-SIZE: 16px; MARGIN-BOTTOM: -0.09em; FONT-FAMILY: source-code-pro, Menlo, Monaco, "Courier New", Courier, monospace; WHITE-SPACE: pre-wrap; MARGIN-TOP: -0.09em; FONT-WEIGHT: 400; FONT-STYLE: normal; DISPLAY: block; LETTER-SPACING: -0.02em; LINE-HEIGHT: 1.18' data-selectable-paragraph=""><EM class=nh style="FONT-STYLE: italic">// Application div</EM><BR>const appDiv = "app";</SPAN><SPAN id=4afc class="ns lh fp no b he nx nu l nv nw" style='FONT-SIZE: 16px; MARGIN-BOTTOM: -0.09em; FONT-FAMILY: source-code-pro, Menlo, Monaco, "Courier New", Courier, monospace; WHITE-SPACE: pre-wrap; MARGIN-TOP: 0.91em; FONT-WEIGHT: 400; FONT-STYLE: normal; DISPLAY: block; LETTER-SPACING: -0.02em; LINE-HEIGHT: 1.18' data-selectable-paragraph=""><EM class=nh style="FONT-STYLE: italic">// Both set of different routes and template generation functions</EM><BR>let routes = {};<BR>let templates = {};</SPAN><SPAN id=1e3f class="ns lh fp no b he nx nu l nv nw" style='FONT-SIZE: 16px; MARGIN-BOTTOM: -0.09em; FONT-FAMILY: source-code-pro, Menlo, Monaco, "Courier New", Courier, monospace; WHITE-SPACE: pre-wrap; MARGIN-TOP: 0.91em; FONT-WEIGHT: 400; FONT-STYLE: normal; DISPLAY: block; LETTER-SPACING: -0.02em; LINE-HEIGHT: 1.18' data-selectable-paragraph=""><EM class=nh style="FONT-STYLE: italic">// Register a template (this is to mimic a template engine)</EM><BR>let template = (name, templateFunction) =&gt; {<BR>  return templates[name] = templateFunction;<BR>};</SPAN><SPAN id=d4db class="ns lh fp no b he nx nu l nv nw" style='FONT-SIZE: 16px; MARGIN-BOTTOM: -0.09em; FONT-FAMILY: source-code-pro, Menlo, Monaco, "Courier New", Courier, monospace; WHITE-SPACE: pre-wrap; MARGIN-TOP: 0.91em; FONT-WEIGHT: 400; FONT-STYLE: normal; DISPLAY: block; LETTER-SPACING: -0.02em; LINE-HEIGHT: 1.18' data-selectable-paragraph=""><EM class=nh style="FONT-STYLE: italic">// Define the routes. Each route is described with a route path &amp; a template to render</EM><BR><EM class=nh style="FONT-STYLE: italic">// when entering that path. A template can be a string (file name), or a function that</EM><BR><EM class=nh style="FONT-STYLE: italic">// will directly create the DOM objects.</EM><BR>let route = (path, template) =&gt; {<BR>    if (typeof template == "function") {<BR>      return routes[path] = template;<BR>    }<BR>    else if (typeof template == "string") {<BR>      return routes[path] = templates[template];<BR>    }<BR>    else {<BR>      return;<BR>    }<BR>};</SPAN></PRE>
<P id=de06 class="pw-post-body-paragraph me mf fp mg b mh nc mj mk ml nd mn mo mp ne mr ms mt nf mv mw mx ng mz na nb fi bj" style='FONT-SIZE: 20px; FONT-FAMILY: source-serif-pro, Georgia, Cambria, "Times New Roman", Times, serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(36,36,36); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; MARGIN: 2.14em 0px -0.46em; LETTER-SPACING: 0em; LINE-HEIGHT: 32px; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial' data-selectable-paragraph="">Now we will be able to register templates and routes, creating the mapping between them:</P><PRE class="ni nj nk nl nm nn no np nq ax nr bj" style='FONT-SIZE: medium; BORDER-TOP: medium none; FONT-FAMILY: source-code-pro, Menlo, Monaco, "Courier New", Courier, monospace; BORDER-RIGHT: medium none; BACKGROUND: rgb(242,242,242); WORD-SPACING: 0px; OVERFLOW-X: auto; BORDER-BOTTOM: medium none; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(36,36,36); PADDING-BOTTOM: 20px; FONT-STYLE: normal; PADDING-TOP: 20px; PADDING-LEFT: 20px; BORDER-LEFT: medium none; ORPHANS: 2; WIDOWS: 2; MARGIN: 56px 0px 0px; LETTER-SPACING: normal; PADDING-RIGHT: 20px; TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial; border-radius: 0px'><SPAN id=cc03 class="ns lh fp no b he nt nu l nv nw" style='FONT-SIZE: 16px; MARGIN-BOTTOM: -0.09em; FONT-FAMILY: source-code-pro, Menlo, Monaco, "Courier New", Courier, monospace; WHITE-SPACE: pre-wrap; MARGIN-TOP: -0.09em; FONT-WEIGHT: 400; FONT-STYLE: normal; DISPLAY: block; LETTER-SPACING: -0.02em; LINE-HEIGHT: 1.18' data-selectable-paragraph=""><EM class=nh style="FONT-STYLE: italic">// Register the templates.</EM><BR>template('template1', () =&gt; {<BR>    let myDiv = document.getElementById(appDiv);<BR>    myDiv.innerHTML = "";<BR>    const link1 = createLink('view1', 'Go to view1', '#/view1');<BR>    const link2 = createLink('view2', 'Go to view2', '#/view2');</SPAN><SPAN id=0eac class="ns lh fp no b he nx nu l nv nw" style='FONT-SIZE: 16px; MARGIN-BOTTOM: -0.09em; FONT-FAMILY: source-code-pro, Menlo, Monaco, "Courier New", Courier, monospace; WHITE-SPACE: pre-wrap; MARGIN-TOP: 0.91em; FONT-WEIGHT: 400; FONT-STYLE: normal; DISPLAY: block; LETTER-SPACING: -0.02em; LINE-HEIGHT: 1.18' data-selectable-paragraph="">    myDiv.appendChild(link1);<BR>    return myDiv.appendChild(link2);<BR>});</SPAN><SPAN id=c592 class="ns lh fp no b he nx nu l nv nw" style='FONT-SIZE: 16px; MARGIN-BOTTOM: -0.09em; FONT-FAMILY: source-code-pro, Menlo, Monaco, "Courier New", Courier, monospace; WHITE-SPACE: pre-wrap; MARGIN-TOP: 0.91em; FONT-WEIGHT: 400; FONT-STYLE: normal; DISPLAY: block; LETTER-SPACING: -0.02em; LINE-HEIGHT: 1.18' data-selectable-paragraph="">template('template-view1', () =&gt; {<BR>    let myDiv = document.getElementById(appDiv);<BR>    myDiv.innerHTML = "";<BR>    const link1 = createDiv('view1', "&lt;div&gt;&lt;h1&gt;This is View 1 &lt;/h1&gt;&lt;a href='#/'&gt;Go Back to Index&lt;/a&gt;&lt;/div&gt;");<BR>    return myDiv.appendChild(link1);<BR>});</SPAN><SPAN id=8653 class="ns lh fp no b he nx nu l nv nw" style='FONT-SIZE: 16px; MARGIN-BOTTOM: -0.09em; FONT-FAMILY: source-code-pro, Menlo, Monaco, "Courier New", Courier, monospace; WHITE-SPACE: pre-wrap; MARGIN-TOP: 0.91em; FONT-WEIGHT: 400; FONT-STYLE: normal; DISPLAY: block; LETTER-SPACING: -0.02em; LINE-HEIGHT: 1.18' data-selectable-paragraph="">template('template-view2', () =&gt; {<BR>    let myDiv = document.getElementById(appDiv);<BR>    myDiv.innerHTML = "";<BR>    const link2 = createDiv('view2', "&lt;div&gt;&lt;h1&gt;This is View 2 &lt;/h1&gt;&lt;a href='#/'&gt;Go Back to Index&lt;/a&gt;&lt;/div&gt;");<BR>    return myDiv.appendChild(link2);<BR>});<BR></SPAN><SPAN id=9f71 class="ns lh fp no b he nx nu l nv nw" style='FONT-SIZE: 16px; MARGIN-BOTTOM: -0.09em; FONT-FAMILY: source-code-pro, Menlo, Monaco, "Courier New", Courier, monospace; WHITE-SPACE: pre-wrap; MARGIN-TOP: 0.91em; FONT-WEIGHT: 400; FONT-STYLE: normal; DISPLAY: block; LETTER-SPACING: -0.02em; LINE-HEIGHT: 1.18' data-selectable-paragraph=""><EM class=nh style="FONT-STYLE: italic">// Define the mappings route-&gt;template.</EM><BR>route('/', 'template1');<BR>route('/view1', 'template-view1');<BR>route('/view2', 'template-view2');</SPAN></PRE>
<P id=653e class="pw-post-body-paragraph me mf fp mg b mh nc mj mk ml nd mn mo mp ne mr ms mt nf mv mw mx ng mz na nb fi bj" style='FONT-SIZE: 20px; FONT-FAMILY: source-serif-pro, Georgia, Cambria, "Times New Roman", Times, serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(36,36,36); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; MARGIN: 2.14em 0px -0.46em; LETTER-SPACING: 0em; LINE-HEIGHT: 32px; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial' data-selectable-paragraph="">For the<SPAN>&nbsp;</SPAN><STRONG class="mg fq" style='FONT-FAMILY: source-serif-pro, Georgia, Cambria, "Times New Roman", Times, serif; FONT-WEIGHT: 700'>templates</STRONG><SPAN>&nbsp;</SPAN>we match a template name with a function that will generate javascript elements and append the resulting DOM to the<SPAN>&nbsp;</SPAN><STRONG class="mg fq" style='FONT-FAMILY: source-serif-pro, Georgia, Cambria, "Times New Roman", Times, serif; FONT-WEIGHT: 700'>div</STRONG><SPAN>&nbsp;</SPAN>where the application lives. This functionality in a real router would be taken over by the<SPAN>&nbsp;</SPAN><EM class=nh style="FONT-STYLE: italic">templating engine</EM>. For the<SPAN>&nbsp;</SPAN><STRONG class="mg fq" style='FONT-FAMILY: source-serif-pro, Georgia, Cambria, "Times New Roman", Times, serif; FONT-WEIGHT: 700'>routes</STRONG>, we just do the mapping between a route path and the corresponding template.</P>
<P id=eace class="pw-post-body-paragraph me mf fp mg b mh nc mj mk ml nd mn mo mp ne mr ms mt nf mv mw mx ng mz na nb fi bj" style='FONT-SIZE: 20px; FONT-FAMILY: source-serif-pro, Georgia, Cambria, "Times New Roman", Times, serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(36,36,36); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; MARGIN: 2.14em 0px -0.46em; LETTER-SPACING: 0em; LINE-HEIGHT: 32px; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial' data-selectable-paragraph="">The<SPAN>&nbsp;</SPAN><EM class=nh style="FONT-STYLE: italic">createLink</EM><SPAN>&nbsp;</SPAN>&amp;<SPAN>&nbsp;</SPAN><EM class=nh style="FONT-STYLE: italic">createDiv</EM><SPAN>&nbsp;</SPAN>are auxiliary functions to generate DOM:</P><PRE class="ni nj nk nl nm nn no np nq ax nr bj" style='FONT-SIZE: medium; BORDER-TOP: medium none; FONT-FAMILY: source-code-pro, Menlo, Monaco, "Courier New", Courier, monospace; BORDER-RIGHT: medium none; BACKGROUND: rgb(242,242,242); WORD-SPACING: 0px; OVERFLOW-X: auto; BORDER-BOTTOM: medium none; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(36,36,36); PADDING-BOTTOM: 20px; FONT-STYLE: normal; PADDING-TOP: 20px; PADDING-LEFT: 20px; BORDER-LEFT: medium none; ORPHANS: 2; WIDOWS: 2; MARGIN: 56px 0px 0px; LETTER-SPACING: normal; PADDING-RIGHT: 20px; TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial; border-radius: 0px'><SPAN id=4a5c class="ns lh fp no b he nt nu l nv nw" style='FONT-SIZE: 16px; MARGIN-BOTTOM: -0.09em; FONT-FAMILY: source-code-pro, Menlo, Monaco, "Courier New", Courier, monospace; WHITE-SPACE: pre-wrap; MARGIN-TOP: -0.09em; FONT-WEIGHT: 400; FONT-STYLE: normal; DISPLAY: block; LETTER-SPACING: -0.02em; LINE-HEIGHT: 1.18' data-selectable-paragraph=""><EM class=nh style="FONT-STYLE: italic">// Generate DOM tree from a string</EM><BR>let createDiv = (id, xmlString) =&gt; {<BR>    let d = document.createElement('div');<BR>    d.id = id;<BR>    d.innerHTML = xmlString;<BR>    return d.firstChild;<BR>};</SPAN><SPAN id=d1fd class="ns lh fp no b he nx nu l nv nw" style='FONT-SIZE: 16px; MARGIN-BOTTOM: -0.09em; FONT-FAMILY: source-code-pro, Menlo, Monaco, "Courier New", Courier, monospace; WHITE-SPACE: pre-wrap; MARGIN-TOP: 0.91em; FONT-WEIGHT: 400; FONT-STYLE: normal; DISPLAY: block; LETTER-SPACING: -0.02em; LINE-HEIGHT: 1.18' data-selectable-paragraph=""><EM class=nh style="FONT-STYLE: italic">// Helper function to create a link.</EM><BR>let createLink = (title, text, href) =&gt; {<BR>    let a = document.createElement('a');<BR>    let linkText = document.createTextNode(text);<BR>    a.appendChild(linkText);<BR>    a.title = title;<BR>    a.href = href;<BR>    return a;<BR>};</SPAN></PRE>
<P id=2a0b class="pw-post-body-paragraph me mf fp mg b mh nc mj mk ml nd mn mo mp ne mr ms mt nf mv mw mx ng mz na nb fi bj" style='FONT-SIZE: 20px; FONT-FAMILY: source-serif-pro, Georgia, Cambria, "Times New Roman", Times, serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(36,36,36); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; MARGIN: 2.14em 0px -0.46em; LETTER-SPACING: 0em; LINE-HEIGHT: 32px; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial' data-selectable-paragraph="">What is left is to have the logic to detect changes in the URL and resolve them to render the template. To do so, listen for the<SPAN>&nbsp;</SPAN><EM class=nh style="FONT-STYLE: italic">load</EM><SPAN>&nbsp;</SPAN>&amp;<SPAN>&nbsp;</SPAN><EM class=nh style="FONT-STYLE: italic">hashchange</EM><SPAN>&nbsp;</SPAN>events. The former fires then a document is loaded, and the latter when the URL hash changes.</P><PRE class="ni nj nk nl nm nn no np nq ax nr bj" style='FONT-SIZE: medium; BORDER-TOP: medium none; FONT-FAMILY: source-code-pro, Menlo, Monaco, "Courier New", Courier, monospace; BORDER-RIGHT: medium none; BACKGROUND: rgb(242,242,242); WORD-SPACING: 0px; OVERFLOW-X: auto; BORDER-BOTTOM: medium none; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(36,36,36); PADDING-BOTTOM: 20px; FONT-STYLE: normal; PADDING-TOP: 20px; PADDING-LEFT: 20px; BORDER-LEFT: medium none; ORPHANS: 2; WIDOWS: 2; MARGIN: 56px 0px 0px; LETTER-SPACING: normal; PADDING-RIGHT: 20px; TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial; border-radius: 0px'><SPAN id=39fa class="ns lh fp no b he nt nu l nv nw" style='FONT-SIZE: 16px; MARGIN-BOTTOM: -0.09em; FONT-FAMILY: source-code-pro, Menlo, Monaco, "Courier New", Courier, monospace; WHITE-SPACE: pre-wrap; MARGIN-TOP: -0.09em; FONT-WEIGHT: 400; FONT-STYLE: normal; DISPLAY: block; LETTER-SPACING: -0.02em; LINE-HEIGHT: 1.18' data-selectable-paragraph=""><EM class=nh style="FONT-STYLE: italic">// Give the correspondent route (template) or fail</EM><BR>let resolveRoute = (route) =&gt; {<BR>    try {<BR>     return routes[route];<BR>    } catch (error) {<BR>        throw new Error("The route is not defined");<BR>    }<BR>};</SPAN><SPAN id=5401 class="ns lh fp no b he nx nu l nv nw" style='FONT-SIZE: 16px; MARGIN-BOTTOM: -0.09em; FONT-FAMILY: source-code-pro, Menlo, Monaco, "Courier New", Courier, monospace; WHITE-SPACE: pre-wrap; MARGIN-TOP: 0.91em; FONT-WEIGHT: 400; FONT-STYLE: normal; DISPLAY: block; LETTER-SPACING: -0.02em; LINE-HEIGHT: 1.18' data-selectable-paragraph=""><EM class=nh style="FONT-STYLE: italic">// The actual router, get the current URL and generate the corresponding template</EM><BR>let router = (evt) =&gt; {<BR>    const url = window.location.hash.slice(1) || "/";<BR>    const routeResolved = resolveRoute(url);<BR>    routeResolved();<BR>};</SPAN><SPAN id=875f class="ns lh fp no b he nx nu l nv nw" style='FONT-SIZE: 16px; MARGIN-BOTTOM: -0.09em; FONT-FAMILY: source-code-pro, Menlo, Monaco, "Courier New", Courier, monospace; WHITE-SPACE: pre-wrap; MARGIN-TOP: 0.91em; FONT-WEIGHT: 400; FONT-STYLE: normal; DISPLAY: block; LETTER-SPACING: -0.02em; LINE-HEIGHT: 1.18' data-selectable-paragraph=""><EM class=nh style="FONT-STYLE: italic">// For first load or when routes are changed in browser url box.</EM><BR>window.addEventListener('load', router);<BR>window.addEventListener('hashchange', router);</SPAN></PRE>
<P id=ce31 class="pw-post-body-paragraph me mf fp mg b mh nc mj mk ml nd mn mo mp ne mr ms mt nf mv mw mx ng mz na nb fi bj" style='FONT-SIZE: 20px; FONT-FAMILY: source-serif-pro, Georgia, Cambria, "Times New Roman", Times, serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(36,36,36); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; MARGIN: 2.14em 0px -0.46em; LETTER-SPACING: 0em; LINE-HEIGHT: 32px; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial' data-selectable-paragraph="">That&#8217;s it! Of course many functionality is lacking: the use of controllers to transform data before passing it to the views, nested routes, the use of<SPAN>&nbsp;</SPAN><A class="af ny" style="TEXT-DECORATION: underline; COLOR: ; -webkit-tap-highlight-color: transparent" href="https://developer.mozilla.org/en-US/docs/Web/API/History_API" rel="noopener ugc nofollow" target=_blank><STRONG class="mg fq" style='FONT-FAMILY: source-serif-pro, Georgia, Cambria, "Times New Roman", Times, serif; FONT-WEIGHT: 700'>history api</STRONG></A>, etc.. but the idea of javascript routing is quite easy to grasp. The code together can be found in<SPAN>&nbsp;</SPAN><A class="af ny" style="TEXT-DECORATION: underline; COLOR: ; -webkit-tap-highlight-color: transparent" href="https://gist.github.com/fr0gs/133127ce31d73e7010ef19db874c319b" rel="noopener ugc nofollow" target=_blank><STRONG class="mg fq" style='FONT-FAMILY: source-serif-pro, Georgia, Cambria, "Times New Roman", Times, serif; FONT-WEIGHT: 700'>this gist</STRONG></A>.