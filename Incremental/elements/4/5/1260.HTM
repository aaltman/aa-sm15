<b> : </b>2. Starvation-Free</H4>This is sometimes called Lockout-Free. This is a dependent propriety in the sense that the progress occurs only if the underlying platform/OS provides certain guarantees.<BR><SPAN style='FONT-FAMILY: "Courier New", Courier, monospace'>Definition</SPAN>: As long as one thread is in the critical section, then some other thread that wants to enter in the critical section will eventually succeed (even if the thread in the critical section has halted).<BR><SPAN style='FONT-FAMILY: "Courier New", Courier, monospace'>Example</SPAN>: An exclusive lock with strict fairness is usually Starvation-Free.<BR>A Ticket Lock in x86 is starvation free because it uses a single<SPAN>&nbsp;</SPAN><A style="TEXT-DECORATION: none; COLOR: rgb(34,136,187)" href="http://en.cppreference.com/w/cpp/atomic/atomic_fetch_add"><SPAN style='FONT-FAMILY: "Courier New", Courier, monospace'>atomic_fetch_add()</SPAN></A><SPAN>&nbsp;</SPAN>to place itself on the<SPAN>&nbsp;</SPAN><I>virtual queue<SPAN>&nbsp;</SPAN></I>of waiting threads.<BR>Code for the Ticket Lock can be seen<SPAN>&nbsp;</SPAN><A style="TEXT-DECORATION: none; COLOR: rgb(34,136,187)" href="https://github.com/pramalhe/ConcurrencyFreaks/blob/master/C11/locks/ticket_mutex.c">here</A>.