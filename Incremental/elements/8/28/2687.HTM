<b> : </b><SPAN id=Non-Functional_Requirements class=ez-toc-section style="BOX-SIZING: border-box" ez-toc-data-id="#Non-Functional_Requirements"></SPAN>Non-Functional Requirements<SPAN class=ez-toc-section-end style="BOX-SIZING: border-box"></SPAN></H3>
<UL class=wp-block-list style='BOX-SIZING: border-box; FONT-SIZE: 16px; FONT-FAMILY: system-ui, -apple-system, "Segoe UI", Roboto, "Helvetica Neue", "Noto Sans", "Liberation Sans", Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol", "Noto Color Emoji"; WHITE-SPACE: normal; WORD-SPACING: 0px; MARGIN-TOP: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(33,37,41); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial'>
<LI style="BOX-SIZING: border-box">Scalable (scales out easily together with increasing number of requests and data) : High scalability will help to ensure our cache can handle increased number of put and get requests. And be able to handle increasing amount of data we may need to store in the cache.</LI>
<LI style="BOX-SIZING: border-box">Highly Available (tolerates hardware / network failures, no single point of failure) : High availability will help to ensure that data in the cache is not lost during hardware failures and cache is accessible in case of network partitions. This will minimize number of cache misses and as a result number of calls to the datastore.</LI>
<LI style="BOX-SIZING: border-box">Highly Performant (fast put / get) : High performance is probably the number one requirement for the cache. The whole point of the cache is to be fast as it is called on every request.</LI></UL>