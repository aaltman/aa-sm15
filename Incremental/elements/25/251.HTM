<B>: </B>Sequential Consistency
<H3></H3>
<P style="FONT-SIZE: 16px; BORDER-TOP: 0px; FONT-FAMILY: inherit; BORDER-RIGHT: 0px; VERTICAL-ALIGN: baseline; BORDER-BOTTOM: 0px; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; BORDER-LEFT: 0px; MARGIN: 0px 0px 1.5em; PADDING-RIGHT: 0px; font-stretch: inherit; font-optical-sizing: inherit; font-size-adjust: inherit; font-kerning: inherit; font-feature-settings: inherit; font-variation-settings: inherit">In a<SPAN>&nbsp;</SPAN><A style="FONT-SIZE: 16px; TEXT-DECORATION: none; BORDER-TOP: 0px; FONT-FAMILY: inherit; BORDER-RIGHT: 0px; VERTICAL-ALIGN: baseline; BORDER-BOTTOM: 0px; COLOR: rgb(33,175,211); PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; BORDER-LEFT: 0px; MARGIN: 0px; PADDING-RIGHT: 0px; font-stretch: inherit; font-optical-sizing: inherit; font-size-adjust: inherit; font-kerning: inherit; font-feature-settings: inherit; font-variation-settings: inherit; transition: color 0.3s" href="http://preshing.com/20120612/an-introduction-to-lock-free-programming#sequential-consistency">sequentially consistent</A><SPAN>&nbsp;</SPAN>memory model, there is no memory reordering. It&#8217;s as if the entire program execution is reduced to a sequential interleaving of instructions from each thread. In particular, the result r1 = r2 = 0 from<SPAN>&nbsp;</SPAN><A style="FONT-SIZE: 16px; TEXT-DECORATION: none; BORDER-TOP: 0px; FONT-FAMILY: inherit; BORDER-RIGHT: 0px; VERTICAL-ALIGN: baseline; BORDER-BOTTOM: 0px; COLOR: rgb(33,175,211); PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; BORDER-LEFT: 0px; MARGIN: 0px; PADDING-RIGHT: 0px; font-stretch: inherit; font-optical-sizing: inherit; font-size-adjust: inherit; font-kerning: inherit; font-feature-settings: inherit; font-variation-settings: inherit; transition: color 0.3s" href="http://preshing.com/20120515/memory-reordering-caught-in-the-act">Memory Reordering Caught in the Act</A><SPAN>&nbsp;</SPAN>becomes impossible.</P>
<P style="FONT-SIZE: 16px; BORDER-TOP: 0px; FONT-FAMILY: inherit; BORDER-RIGHT: 0px; VERTICAL-ALIGN: baseline; BORDER-BOTTOM: 0px; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; BORDER-LEFT: 0px; MARGIN: 0px 0px 1.5em; PADDING-RIGHT: 0px; font-stretch: inherit; font-optical-sizing: inherit; font-size-adjust: inherit; font-kerning: inherit; font-feature-settings: inherit; font-variation-settings: inherit">These days, you won&#8217;t easily find a modern multicore device which guarantees sequential consistency at the hardware level. However, it seems at least one sequentially consistent, dual-processor machine existed back in 1989: The 386-based<SPAN>&nbsp;</SPAN><A style="FONT-SIZE: 16px; TEXT-DECORATION: none; BORDER-TOP: 0px; FONT-FAMILY: inherit; BORDER-RIGHT: 0px; VERTICAL-ALIGN: baseline; BORDER-BOTTOM: 0px; COLOR: rgb(33,175,211); PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; BORDER-LEFT: 0px; MARGIN: 0px; PADDING-RIGHT: 0px; font-stretch: inherit; font-optical-sizing: inherit; font-size-adjust: inherit; font-kerning: inherit; font-feature-settings: inherit; font-variation-settings: inherit; transition: color 0.3s" href="http://vogons.zetafleet.com/viewtopic.php?t=23842#178666">Compaq SystemPro</A>. According to Intel&#8217;s docs, the 386 wasn&#8217;t advanced enough to perform any memory reordering at runtime.</P>
<P style="FONT-SIZE: 16px; BORDER-TOP: 0px; FONT-FAMILY: inherit; BORDER-RIGHT: 0px; VERTICAL-ALIGN: baseline; BORDER-BOTTOM: 0px; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; BORDER-LEFT: 0px; MARGIN: 0px 0px 1.5em; PADDING-RIGHT: 0px; font-stretch: inherit; font-optical-sizing: inherit; font-size-adjust: inherit; font-kerning: inherit; font-feature-settings: inherit; font-variation-settings: inherit"><A style="FONT-SIZE: 16px; TEXT-DECORATION: none; BORDER-TOP: 0px; FONT-FAMILY: inherit; BORDER-RIGHT: 0px; VERTICAL-ALIGN: baseline; BORDER-BOTTOM: 0px; COLOR: rgb(33,175,211); PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; BORDER-LEFT: 0px; MARGIN: 0px; PADDING-RIGHT: 0px; font-stretch: inherit; font-optical-sizing: inherit; font-size-adjust: inherit; font-kerning: inherit; font-feature-settings: inherit; font-variation-settings: inherit; transition: color 0.3s" href="http://www.amazon.com/gp/product/0123973376/ref=as_li_ss_tl?ie=UTF8&amp;tag=preshonprogr-20&amp;linkCode=as2&amp;camp=1789&amp;creative=390957&amp;creativeASIN=0123973376"><IMG class=right style="FONT-SIZE: 16px; MAX-WIDTH: 100%; BORDER-TOP: medium none; HEIGHT: auto; FONT-FAMILY: inherit; BORDER-RIGHT: medium none; VERTICAL-ALIGN: baseline; BORDER-BOTTOM: medium none; FLOAT: right; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; BORDER-LEFT: medium none; MARGIN: 0px 0px 0.8em 1.5em; PADDING-RIGHT: 0px; font-stretch: inherit; font-optical-sizing: inherit; font-size-adjust: inherit; font-kerning: inherit; font-feature-settings: inherit; font-variation-settings: inherit" src="https://preshing.com/images/art-of-multiprocessor.png"></A>In any case, sequential consistency only really becomes interesting as a<SPAN>&nbsp;</SPAN><STRONG style="FONT-SIZE: 16px; BORDER-TOP: 0px; FONT-FAMILY: inherit; BORDER-RIGHT: 0px; VERTICAL-ALIGN: baseline; BORDER-BOTTOM: 0px; FONT-WEIGHT: bold; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; BORDER-LEFT: 0px; MARGIN: 0px; PADDING-RIGHT: 0px; font-stretch: inherit; font-optical-sizing: inherit; font-size-adjust: inherit; font-kerning: inherit; font-feature-settings: inherit; font-variation-settings: inherit">software</STRONG><SPAN>&nbsp;</SPAN>memory model, when working in higher-level programming languages. In Java 5 and higher, you can declare shared variables as<SPAN>&nbsp;</SPAN><CODE style="FONT-SIZE: 0.9em; BORDER-TOP: rgb(238,238,238) 1px solid; FONT-FAMILY: cascadia_code, monospace; BORDER-RIGHT: rgb(238,238,238) 1px solid; VERTICAL-ALIGN: baseline; BACKGROUND: rgb(246,246,246); BORDER-BOTTOM: rgb(238,238,238) 1px solid; COLOR: rgb(70,70,70); PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0.3em; BORDER-LEFT: rgb(238,238,238) 1px solid; MARGIN: -1px 0px; DISPLAY: inline-block; LINE-HEIGHT: 1.5em; PADDING-RIGHT: 0.3em; font-stretch: inherit; font-optical-sizing: inherit; font-size-adjust: inherit; font-kerning: inherit; font-feature-settings: inherit; font-variation-settings: inherit; border-radius: 0.4em">volatile</CODE>. In C++11, you can use the default ordering constraint,<SPAN>&nbsp;</SPAN><CODE style="FONT-SIZE: 0.9em; BORDER-TOP: rgb(238,238,238) 1px solid; FONT-FAMILY: cascadia_code, monospace; BORDER-RIGHT: rgb(238,238,238) 1px solid; VERTICAL-ALIGN: baseline; BACKGROUND: rgb(246,246,246); BORDER-BOTTOM: rgb(238,238,238) 1px solid; COLOR: rgb(70,70,70); PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0.3em; BORDER-LEFT: rgb(238,238,238) 1px solid; MARGIN: -1px 0px; DISPLAY: inline-block; LINE-HEIGHT: 1.5em; PADDING-RIGHT: 0.3em; font-stretch: inherit; font-optical-sizing: inherit; font-size-adjust: inherit; font-kerning: inherit; font-feature-settings: inherit; font-variation-settings: inherit; border-radius: 0.4em">memory_order_seq_cst</CODE>, when performing operations on atomic library types. If you do those things, the toolchain will restrict compiler reordering and emit CPU-specific instructions which act as the appropriate memory barrier types. In this way, a sequentially consistent memory model can be &#8220;emulated&#8221; even on weakly-ordered multicore devices. If you read Herlihy &amp; Shavit&#8217;s<SPAN>&nbsp;</SPAN><A style="FONT-SIZE: 16px; TEXT-DECORATION: none; BORDER-TOP: 0px; FONT-FAMILY: inherit; BORDER-RIGHT: 0px; VERTICAL-ALIGN: baseline; BORDER-BOTTOM: 0px; COLOR: rgb(33,175,211); PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; BORDER-LEFT: 0px; MARGIN: 0px; PADDING-RIGHT: 0px; font-stretch: inherit; font-optical-sizing: inherit; font-size-adjust: inherit; font-kerning: inherit; font-feature-settings: inherit; font-variation-settings: inherit; transition: color 0.3s" href="http://www.amazon.com/gp/product/0123973376/ref=as_li_ss_tl?ie=UTF8&amp;tag=preshonprogr-20&amp;linkCode=as2&amp;camp=1789&amp;creative=390957&amp;creativeASIN=0123973376">The Art of Multiprocessor Programming</A>, be aware that most of their examples assume a sequentially consistent software memory model.