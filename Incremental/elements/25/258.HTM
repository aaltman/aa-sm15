<P class="CDt4Ke zfr3Q" style='BOX-SIZING: border-box; FONT-SIZE: 11pt; FONT-FAMILY: "Open Sans"; WHITE-SPACE: pre-wrap; WORD-SPACING: 0px; POSITION: relative; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(33,33,33); OUTLINE-WIDTH: medium; FONT-STYLE: normal; OUTLINE-STYLE: none; ORPHANS: 2; WIDOWS: 2; MARGIN: 15px 0px 0px; LETTER-SPACING: normal; OUTLINE-COLOR: invert; LINE-HEIGHT: 1.6; TEXT-INDENT: 0px; font-variant-ligatures: none; text-decoration-line: inherit; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial; font-variant-caps: normal; -webkit-text-stroke-width: 0px' dir=ltr><SPAN style='BOX-SIZING: border-box; FONT-FAMILY: "Open Sans"'><STRONG style="BOX-SIZING: border-box; FONT-WEIGHT: bold; -webkit-font-smoothing: antialiased">Mostly private state</STRONG></SPAN>. A statistics counter held in thread-local storage is a good example. Such counter is frequently written by an owner thread, and very infrequently read by some other thread. This kind of a shared state generally is of no danger for scalability.</P>
<P class="CDt4Ke zfr3Q" style='BOX-SIZING: border-box; FONT-SIZE: 11pt; FONT-FAMILY: "Open Sans"; WHITE-SPACE: pre-wrap; WORD-SPACING: 0px; POSITION: relative; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(33,33,33); OUTLINE-WIDTH: medium; FONT-STYLE: normal; OUTLINE-STYLE: none; ORPHANS: 2; WIDOWS: 2; MARGIN: 15px 0px 0px; LETTER-SPACING: normal; OUTLINE-COLOR: invert; LINE-HEIGHT: 1.6; TEXT-INDENT: 0px; font-variant-ligatures: none; text-decoration-line: inherit; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial; font-variant-caps: normal; -webkit-text-stroke-width: 0px' dir=ltr>2. <SPAN style='BOX-SIZING: border-box; FONT-FAMILY: "Open Sans"'><STRONG style="BOX-SIZING: border-box; FONT-WEIGHT: bold; -webkit-font-smoothing: antialiased">Mostly read-only state</STRONG></SPAN>. That's a state with a very high read-to-write ratio (some real-world data-structures actually have read-to-write ratio of 10^7 and higher). Such state also is of no danger for scalability.</P>
<P class="CDt4Ke zfr3Q" style='BOX-SIZING: border-box; FONT-SIZE: 11pt; FONT-FAMILY: "Open Sans"; WHITE-SPACE: pre-wrap; WORD-SPACING: 0px; POSITION: relative; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(33,33,33); OUTLINE-WIDTH: medium; FONT-STYLE: normal; OUTLINE-STYLE: none; ORPHANS: 2; WIDOWS: 2; MARGIN: 15px 0px 0px; LETTER-SPACING: normal; OUTLINE-COLOR: invert; LINE-HEIGHT: 1.6; TEXT-INDENT: 0px; font-variant-ligatures: none; text-decoration-line: inherit; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial; font-variant-caps: normal; -webkit-text-stroke-width: 0px' dir=ltr>3. <SPAN style='BOX-SIZING: border-box; FONT-FAMILY: "Open Sans"'><STRONG style="BOX-SIZING: border-box; FONT-WEIGHT: bold; -webkit-font-smoothing: antialiased">Decentralized shared state</STRONG></SPAN>. That's a shared state which is frequently written to, but is physically distributed. A good example is a hash map with an array of independent buckets. When threads concurrently work with such data structure their activity is physically scattered across the array. And consequently collisions during accesses to a memory location are less frequent. This kind of shared state may or may not represent a danger for scalability depending on distribution factor, number of threads, access patterns and other details.</P>
<P class="CDt4Ke zfr3Q" style='BOX-SIZING: border-box; FONT-SIZE: 11pt; FONT-FAMILY: "Open Sans"; WHITE-SPACE: pre-wrap; WORD-SPACING: 0px; POSITION: relative; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(33,33,33); OUTLINE-WIDTH: medium; FONT-STYLE: normal; OUTLINE-STYLE: none; ORPHANS: 2; WIDOWS: 2; MARGIN: 15px 0px 0px; LETTER-SPACING: normal; OUTLINE-COLOR: invert; LINE-HEIGHT: 1.6; TEXT-INDENT: 0px; font-variant-ligatures: none; text-decoration-line: inherit; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial; font-variant-caps: normal; -webkit-text-stroke-width: 0px' dir=ltr>4. <SPAN style='BOX-SIZING: border-box; FONT-FAMILY: "Open Sans"'><STRONG style="BOX-SIZING: border-box; FONT-WEIGHT: bold; -webkit-font-smoothing: antialiased">Centralized shared state</STRONG></SPAN>. That's a shared state which is frequently written to, and is physically centralized. A typical example is a counter of elements in a container, which is mutated on every insert and remove operation. That's a scalability killer number one, there is no way to make it scalable. A typical mistake is to maintain such a state with atomic RMW (read-modify-write) operations (InterlockedXXX(), __builtin_sync_XXX(), atomic_XXX()), and think that since there is no mutexes, they should be scalable. It does not work that way, just say no to a centralized shared state.