<b> : </b>Other Ways to Achieve<SPAN>&nbsp;</SPAN><EM style="FONT-SIZE: 29px; BORDER-TOP: 0px; FONT-FAMILY: inherit; BORDER-RIGHT: 0px; VERTICAL-ALIGN: baseline; BORDER-BOTTOM: 0px; PADDING-BOTTOM: 0px; FONT-STYLE: italic; PADDING-TOP: 0px; PADDING-LEFT: 0px; BORDER-LEFT: 0px; MARGIN: 0px; PADDING-RIGHT: 0px; font-stretch: inherit; font-optical-sizing: inherit; font-size-adjust: inherit; font-kerning: inherit; font-feature-settings: inherit; font-variation-settings: inherit">Synchronizes-With</EM></H2>
<P style="FONT-SIZE: 16px; BORDER-TOP: 0px; FONT-FAMILY: inherit; BORDER-RIGHT: 0px; VERTICAL-ALIGN: baseline; BORDER-BOTTOM: 0px; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; BORDER-LEFT: 0px; MARGIN: 0px 0px 1.5em; PADDING-RIGHT: 0px; font-stretch: inherit; font-optical-sizing: inherit; font-size-adjust: inherit; font-kerning: inherit; font-feature-settings: inherit; font-variation-settings: inherit">Just as<SPAN>&nbsp;</SPAN><EM style="FONT-SIZE: 16px; BORDER-TOP: 0px; FONT-FAMILY: inherit; BORDER-RIGHT: 0px; VERTICAL-ALIGN: baseline; BORDER-BOTTOM: 0px; PADDING-BOTTOM: 0px; FONT-STYLE: italic; PADDING-TOP: 0px; PADDING-LEFT: 0px; BORDER-LEFT: 0px; MARGIN: 0px; PADDING-RIGHT: 0px; font-stretch: inherit; font-optical-sizing: inherit; font-size-adjust: inherit; font-kerning: inherit; font-feature-settings: inherit; font-variation-settings: inherit">synchronizes-with</EM><SPAN>&nbsp;</SPAN>is not only way to achieve a<SPAN>&nbsp;</SPAN><EM style="FONT-SIZE: 16px; BORDER-TOP: 0px; FONT-FAMILY: inherit; BORDER-RIGHT: 0px; VERTICAL-ALIGN: baseline; BORDER-BOTTOM: 0px; PADDING-BOTTOM: 0px; FONT-STYLE: italic; PADDING-TOP: 0px; PADDING-LEFT: 0px; BORDER-LEFT: 0px; MARGIN: 0px; PADDING-RIGHT: 0px; font-stretch: inherit; font-optical-sizing: inherit; font-size-adjust: inherit; font-kerning: inherit; font-feature-settings: inherit; font-variation-settings: inherit">happens-before</EM><SPAN>&nbsp;</SPAN>relationship, a pair of write-release/read-acquire operations is not the only way to achieve<SPAN>&nbsp;</SPAN><EM style="FONT-SIZE: 16px; BORDER-TOP: 0px; FONT-FAMILY: inherit; BORDER-RIGHT: 0px; VERTICAL-ALIGN: baseline; BORDER-BOTTOM: 0px; PADDING-BOTTOM: 0px; FONT-STYLE: italic; PADDING-TOP: 0px; PADDING-LEFT: 0px; BORDER-LEFT: 0px; MARGIN: 0px; PADDING-RIGHT: 0px; font-stretch: inherit; font-optical-sizing: inherit; font-size-adjust: inherit; font-kerning: inherit; font-feature-settings: inherit; font-variation-settings: inherit">synchronizes-with</EM>; nor are C++11 atomics the only way to achieve acquire and release semantics. I&#8217;ve organized a few other ways into the following chart. Keep in mind that this chart is by no means exhaustive.</P>
<P style="FONT-SIZE: 16px; BORDER-TOP: 0px; FONT-FAMILY: inherit; BORDER-RIGHT: 0px; VERTICAL-ALIGN: baseline; BORDER-BOTTOM: 0px; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; BORDER-LEFT: 0px; MARGIN: 0px 0px 1.5em; PADDING-RIGHT: 0px; font-stretch: inherit; font-optical-sizing: inherit; font-size-adjust: inherit; font-kerning: inherit; font-feature-settings: inherit; font-variation-settings: inherit"><IMG class=center style="FONT-SIZE: 16px; MAX-WIDTH: 100%; BORDER-TOP: 0px; HEIGHT: auto; FONT-FAMILY: inherit; BORDER-RIGHT: 0px; VERTICAL-ALIGN: baseline; BORDER-BOTTOM: 0px; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; BORDER-LEFT: 0px; MARGIN: 0px auto 1.5em; DISPLAY: block; PADDING-RIGHT: 0px; font-stretch: inherit; font-optical-sizing: inherit; font-size-adjust: inherit; font-kerning: inherit; font-feature-settings: inherit; font-variation-settings: inherit" src="https://preshing.com/images/org-chart.png"></P>
<P style="FONT-SIZE: 16px; BORDER-TOP: 0px; FONT-FAMILY: inherit; BORDER-RIGHT: 0px; VERTICAL-ALIGN: baseline; BORDER-BOTTOM: 0px; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; BORDER-LEFT: 0px; MARGIN: 0px 0px 1.5em; PADDING-RIGHT: 0px; font-stretch: inherit; font-optical-sizing: inherit; font-size-adjust: inherit; font-kerning: inherit; font-feature-settings: inherit; font-variation-settings: inherit">The example in this post generates lock-free code (on virtually all modern compilers and processors), but C++11 and Java expose blocking operations which introduce<SPAN>&nbsp;</SPAN><EM style="FONT-SIZE: 16px; BORDER-TOP: 0px; FONT-FAMILY: inherit; BORDER-RIGHT: 0px; VERTICAL-ALIGN: baseline; BORDER-BOTTOM: 0px; PADDING-BOTTOM: 0px; FONT-STYLE: italic; PADDING-TOP: 0px; PADDING-LEFT: 0px; BORDER-LEFT: 0px; MARGIN: 0px; PADDING-RIGHT: 0px; font-stretch: inherit; font-optical-sizing: inherit; font-size-adjust: inherit; font-kerning: inherit; font-feature-settings: inherit; font-variation-settings: inherit">synchronize-with</EM><SPAN>&nbsp;</SPAN>edges as well. For instance, unlocking a mutex always<SPAN>&nbsp;</SPAN><EM style="FONT-SIZE: 16px; BORDER-TOP: 0px; FONT-FAMILY: inherit; BORDER-RIGHT: 0px; VERTICAL-ALIGN: baseline; BORDER-BOTTOM: 0px; PADDING-BOTTOM: 0px; FONT-STYLE: italic; PADDING-TOP: 0px; PADDING-LEFT: 0px; BORDER-LEFT: 0px; MARGIN: 0px; PADDING-RIGHT: 0px; font-stretch: inherit; font-optical-sizing: inherit; font-size-adjust: inherit; font-kerning: inherit; font-feature-settings: inherit; font-variation-settings: inherit">synchronizes-with</EM><SPAN>&nbsp;</SPAN>a subsequent lock of that mutex. The language specifications are pretty clear about that one, and as programmers, we naturally expect it. You can consider the mutex itself to be the guard, and the protected variables as the payload. IBM even<SPAN>&nbsp;</SPAN><A style="FONT-SIZE: 16px; TEXT-DECORATION: none; BORDER-TOP: 0px; FONT-FAMILY: inherit; BORDER-RIGHT: 0px; VERTICAL-ALIGN: baseline; BORDER-BOTTOM: 0px; COLOR: rgb(33,175,211); PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; BORDER-LEFT: 0px; MARGIN: 0px; PADDING-RIGHT: 0px; font-stretch: inherit; font-optical-sizing: inherit; font-size-adjust: inherit; font-kerning: inherit; font-feature-settings: inherit; font-variation-settings: inherit; transition: color 0.3s" href="http://www.ibm.com/developerworks/library/j-jtp03304/">published an article on Java&#8217;s updated memory model in 2004</A><SPAN>&nbsp;</SPAN>which contains a &#8220;two cones&#8221; diagram showing a pair of lock/unlock operations<SPAN>&nbsp;</SPAN><EM style="FONT-SIZE: 16px; BORDER-TOP: 0px; FONT-FAMILY: inherit; BORDER-RIGHT: 0px; VERTICAL-ALIGN: baseline; BORDER-BOTTOM: 0px; PADDING-BOTTOM: 0px; FONT-STYLE: italic; PADDING-TOP: 0px; PADDING-LEFT: 0px; BORDER-LEFT: 0px; MARGIN: 0px; PADDING-RIGHT: 0px; font-stretch: inherit; font-optical-sizing: inherit; font-size-adjust: inherit; font-kerning: inherit; font-feature-settings: inherit; font-variation-settings: inherit">synchronizing-with</EM><SPAN>&nbsp;</SPAN>each other.</P>
<P style="FONT-SIZE: 16px; BORDER-TOP: 0px; FONT-FAMILY: inherit; BORDER-RIGHT: 0px; VERTICAL-ALIGN: baseline; BORDER-BOTTOM: 0px; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; BORDER-LEFT: 0px; MARGIN: 0px 0px 1.5em; PADDING-RIGHT: 0px; font-stretch: inherit; font-optical-sizing: inherit; font-size-adjust: inherit; font-kerning: inherit; font-feature-settings: inherit; font-variation-settings: inherit"><A style="FONT-SIZE: 16px; TEXT-DECORATION: none; BORDER-TOP: 0px; FONT-FAMILY: inherit; BORDER-RIGHT: 0px; VERTICAL-ALIGN: baseline; BORDER-BOTTOM: 0px; COLOR: rgb(33,175,211); PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; BORDER-LEFT: 0px; MARGIN: 0px; PADDING-RIGHT: 0px; font-stretch: inherit; font-optical-sizing: inherit; font-size-adjust: inherit; font-kerning: inherit; font-feature-settings: inherit; font-variation-settings: inherit; transition: color 0.3s" href="http://www.ibm.com/developerworks/library/j-jtp03304/"><IMG class=center style="FONT-SIZE: 16px; MAX-WIDTH: 100%; BORDER-TOP: medium none; HEIGHT: auto; FONT-FAMILY: inherit; BORDER-RIGHT: medium none; VERTICAL-ALIGN: baseline; BORDER-BOTTOM: medium none; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; BORDER-LEFT: medium none; MARGIN: 0px auto 1.5em; DISPLAY: block; PADDING-RIGHT: 0px; font-stretch: inherit; font-optical-sizing: inherit; font-size-adjust: inherit; font-kerning: inherit; font-feature-settings: inherit; font-variation-settings: inherit" src="https://preshing.com/images/jsr133.png"></A></P>
<P style="FONT-SIZE: 16px; BORDER-TOP: 0px; FONT-FAMILY: inherit; BORDER-RIGHT: 0px; VERTICAL-ALIGN: baseline; BORDER-BOTTOM: 0px; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; BORDER-LEFT: 0px; MARGIN: 0px 0px 1.5em; PADDING-RIGHT: 0px; font-stretch: inherit; font-optical-sizing: inherit; font-size-adjust: inherit; font-kerning: inherit; font-feature-settings: inherit; font-variation-settings: inherit">As I&#8217;ve<SPAN>&nbsp;</SPAN><A style="FONT-SIZE: 16px; TEXT-DECORATION: none; BORDER-TOP: 0px; FONT-FAMILY: inherit; BORDER-RIGHT: 0px; VERTICAL-ALIGN: baseline; BORDER-BOTTOM: 0px; COLOR: rgb(33,175,211); PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; BORDER-LEFT: 0px; MARGIN: 0px; PADDING-RIGHT: 0px; font-stretch: inherit; font-optical-sizing: inherit; font-size-adjust: inherit; font-kerning: inherit; font-feature-settings: inherit; font-variation-settings: inherit; transition: color 0.3s" href="http://preshing.com/20120913/acquire-and-release-semantics">shown previously</A>, acquire and release semantics can also be implemented using standalone, explicit fence instructions. In other words, it&#8217;s possible for a release fence to<SPAN>&nbsp;</SPAN><EM style="FONT-SIZE: 16px; BORDER-TOP: 0px; FONT-FAMILY: inherit; BORDER-RIGHT: 0px; VERTICAL-ALIGN: baseline; BORDER-BOTTOM: 0px; PADDING-BOTTOM: 0px; FONT-STYLE: italic; PADDING-TOP: 0px; PADDING-LEFT: 0px; BORDER-LEFT: 0px; MARGIN: 0px; PADDING-RIGHT: 0px; font-stretch: inherit; font-optical-sizing: inherit; font-size-adjust: inherit; font-kerning: inherit; font-feature-settings: inherit; font-variation-settings: inherit">synchronize-with</EM><SPAN>&nbsp;</SPAN>an acquire fence, provided that the right conditions are met. In fact, explicit fence instructions are the only available option in<SPAN>&nbsp;</SPAN><A style="FONT-SIZE: 16px; TEXT-DECORATION: none; BORDER-TOP: 0px; FONT-FAMILY: inherit; BORDER-RIGHT: 0px; VERTICAL-ALIGN: baseline; BORDER-BOTTOM: 0px; COLOR: rgb(33,175,211); PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; BORDER-LEFT: 0px; MARGIN: 0px; PADDING-RIGHT: 0px; font-stretch: inherit; font-optical-sizing: inherit; font-size-adjust: inherit; font-kerning: inherit; font-feature-settings: inherit; font-variation-settings: inherit; transition: color 0.3s" href="http://mintomic.github.io/">Mintomic</A>, my own portable API for lock-free programming. I think that acquire and release fences are woefully misunderstood on the web right now, so I&#8217;ll probably write a dedicated post about them next.</P>
<P style="FONT-SIZE: 16px; BORDER-TOP: 0px; FONT-FAMILY: inherit; BORDER-RIGHT: 0px; VERTICAL-ALIGN: baseline; BORDER-BOTTOM: 0px; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; BORDER-LEFT: 0px; MARGIN: 0px 0px 1.5em; PADDING-RIGHT: 0px; font-stretch: inherit; font-optical-sizing: inherit; font-size-adjust: inherit; font-kerning: inherit; font-feature-settings: inherit; font-variation-settings: inherit">The bottom line is that the<SPAN>&nbsp;</SPAN><EM style="FONT-SIZE: 16px; BORDER-TOP: 0px; FONT-FAMILY: inherit; BORDER-RIGHT: 0px; VERTICAL-ALIGN: baseline; BORDER-BOTTOM: 0px; PADDING-BOTTOM: 0px; FONT-STYLE: italic; PADDING-TOP: 0px; PADDING-LEFT: 0px; BORDER-LEFT: 0px; MARGIN: 0px; PADDING-RIGHT: 0px; font-stretch: inherit; font-optical-sizing: inherit; font-size-adjust: inherit; font-kerning: inherit; font-feature-settings: inherit; font-variation-settings: inherit">synchronizes-with</EM><SPAN>&nbsp;</SPAN>relationship only exists where the language and API specifications say it exists. It&#8217;s their job to define the conditions of their own guarantees at the source code level. Therefore, when using low-level ordering constraints in C++11 atomics, you can&#8217;t just slap<SPAN>&nbsp;</SPAN><CODE style="FONT-SIZE: 0.9em; BORDER-TOP: rgb(238,238,238) 1px solid; FONT-FAMILY: cascadia_code, monospace; BORDER-RIGHT: rgb(238,238,238) 1px solid; VERTICAL-ALIGN: baseline; BACKGROUND: rgb(246,246,246); BORDER-BOTTOM: rgb(238,238,238) 1px solid; COLOR: rgb(70,70,70); PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0.3em; BORDER-LEFT: rgb(238,238,238) 1px solid; MARGIN: -1px 0px; DISPLAY: inline-block; LINE-HEIGHT: 1.5em; PADDING-RIGHT: 0.3em; font-stretch: inherit; font-optical-sizing: inherit; font-size-adjust: inherit; font-kerning: inherit; font-feature-settings: inherit; font-variation-settings: inherit; border-radius: 0.4em">std::memory_order_acquire</CODE><SPAN>&nbsp;</SPAN>and<SPAN>&nbsp;</SPAN><CODE style="FONT-SIZE: 0.9em; BORDER-TOP: rgb(238,238,238) 1px solid; FONT-FAMILY: cascadia_code, monospace; BORDER-RIGHT: rgb(238,238,238) 1px solid; VERTICAL-ALIGN: baseline; BACKGROUND: rgb(246,246,246); BORDER-BOTTOM: rgb(238,238,238) 1px solid; COLOR: rgb(70,70,70); PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0.3em; BORDER-LEFT: rgb(238,238,238) 1px solid; MARGIN: -1px 0px; DISPLAY: inline-block; LINE-HEIGHT: 1.5em; PADDING-RIGHT: 0.3em; font-stretch: inherit; font-optical-sizing: inherit; font-size-adjust: inherit; font-kerning: inherit; font-feature-settings: inherit; font-variation-settings: inherit; border-radius: 0.4em">release</CODE><SPAN>&nbsp;</SPAN>on some operations and hope things magically work out. You need to identify which<SPAN>&nbsp;</SPAN><A style="FONT-SIZE: 16px; TEXT-DECORATION: none; BORDER-TOP: 0px; FONT-FAMILY: inherit; BORDER-RIGHT: 0px; VERTICAL-ALIGN: baseline; BORDER-BOTTOM: 0px; COLOR: rgb(33,175,211); PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; BORDER-LEFT: 0px; MARGIN: 0px; PADDING-RIGHT: 0px; font-stretch: inherit; font-optical-sizing: inherit; font-size-adjust: inherit; font-kerning: inherit; font-feature-settings: inherit; font-variation-settings: inherit; transition: color 0.3s" href="http://preshing.com/20130618/atomic-vs-non-atomic-operations">atomic</A><SPAN>&nbsp;</SPAN>variable is the guard, what&#8217;s the payload, and in which codepaths a<SPAN>&nbsp;</SPAN><EM style="FONT-SIZE: 16px; BORDER-TOP: 0px; FONT-FAMILY: inherit; BORDER-RIGHT: 0px; VERTICAL-ALIGN: baseline; BORDER-BOTTOM: 0px; PADDING-BOTTOM: 0px; FONT-STYLE: italic; PADDING-TOP: 0px; PADDING-LEFT: 0px; BORDER-LEFT: 0px; MARGIN: 0px; PADDING-RIGHT: 0px; font-stretch: inherit; font-optical-sizing: inherit; font-size-adjust: inherit; font-kerning: inherit; font-feature-settings: inherit; font-variation-settings: inherit">synchronizes-with</EM><SPAN>&nbsp;</SPAN>relationship is ensured.</P>
<P style="FONT-SIZE: 16px; BORDER-TOP: 0px; FONT-FAMILY: inherit; BORDER-RIGHT: 0px; VERTICAL-ALIGN: baseline; BORDER-BOTTOM: 0px; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; BORDER-LEFT: 0px; MARGIN: 0px 0px 1.5em; PADDING-RIGHT: 0px; font-stretch: inherit; font-optical-sizing: inherit; font-size-adjust: inherit; font-kerning: inherit; font-feature-settings: inherit; font-variation-settings: inherit">Interestingly, the Go programming language is a bit of convention breaker. Go&#8217;s memory model is<SPAN>&nbsp;</SPAN><A style="FONT-SIZE: 16px; TEXT-DECORATION: none; BORDER-TOP: 0px; FONT-FAMILY: inherit; BORDER-RIGHT: 0px; VERTICAL-ALIGN: baseline; BORDER-BOTTOM: 0px; COLOR: rgb(33,175,211); PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; BORDER-LEFT: 0px; MARGIN: 0px; PADDING-RIGHT: 0px; font-stretch: inherit; font-optical-sizing: inherit; font-size-adjust: inherit; font-kerning: inherit; font-feature-settings: inherit; font-variation-settings: inherit; transition: color 0.3s" href="http://golang.org/ref/mem">well specified</A>, but the specification does not bother using the term &#8220;<EM style="FONT-SIZE: 16px; BORDER-TOP: 0px; FONT-FAMILY: inherit; BORDER-RIGHT: 0px; VERTICAL-ALIGN: baseline; BORDER-BOTTOM: 0px; PADDING-BOTTOM: 0px; FONT-STYLE: italic; PADDING-TOP: 0px; PADDING-LEFT: 0px; BORDER-LEFT: 0px; MARGIN: 0px; PADDING-RIGHT: 0px; font-stretch: inherit; font-optical-sizing: inherit; font-size-adjust: inherit; font-kerning: inherit; font-feature-settings: inherit; font-variation-settings: inherit">synchronizes-with</EM>&#8221; anywhere. It simply sticks with the term &#8220;<EM style="FONT-SIZE: 16px; BORDER-TOP: 0px; FONT-FAMILY: inherit; BORDER-RIGHT: 0px; VERTICAL-ALIGN: baseline; BORDER-BOTTOM: 0px; PADDING-BOTTOM: 0px; FONT-STYLE: italic; PADDING-TOP: 0px; PADDING-LEFT: 0px; BORDER-LEFT: 0px; MARGIN: 0px; PADDING-RIGHT: 0px; font-stretch: inherit; font-optical-sizing: inherit; font-size-adjust: inherit; font-kerning: inherit; font-feature-settings: inherit; font-variation-settings: inherit">happens-before</EM>&#8221;, which is just as good, since obviously,<SPAN>&nbsp;</SPAN><EM style="FONT-SIZE: 16px; BORDER-TOP: 0px; FONT-FAMILY: inherit; BORDER-RIGHT: 0px; VERTICAL-ALIGN: baseline; BORDER-BOTTOM: 0px; PADDING-BOTTOM: 0px; FONT-STYLE: italic; PADDING-TOP: 0px; PADDING-LEFT: 0px; BORDER-LEFT: 0px; MARGIN: 0px; PADDING-RIGHT: 0px; font-stretch: inherit; font-optical-sizing: inherit; font-size-adjust: inherit; font-kerning: inherit; font-feature-settings: inherit; font-variation-settings: inherit">happens-before</EM><SPAN>&nbsp;</SPAN>can fill the role anywhere that<SPAN>&nbsp;</SPAN><EM style="FONT-SIZE: 16px; BORDER-TOP: 0px; FONT-FAMILY: inherit; BORDER-RIGHT: 0px; VERTICAL-ALIGN: baseline; BORDER-BOTTOM: 0px; PADDING-BOTTOM: 0px; FONT-STYLE: italic; PADDING-TOP: 0px; PADDING-LEFT: 0px; BORDER-LEFT: 0px; MARGIN: 0px; PADDING-RIGHT: 0px; font-stretch: inherit; font-optical-sizing: inherit; font-size-adjust: inherit; font-kerning: inherit; font-feature-settings: inherit; font-variation-settings: inherit">synchronizes-with</EM><SPAN>&nbsp;</SPAN>would. Perhaps Go&#8217;s authors chose a reduced vocabulary because &#8220;<EM style="FONT-SIZE: 16px; BORDER-TOP: 0px; FONT-FAMILY: inherit; BORDER-RIGHT: 0px; VERTICAL-ALIGN: baseline; BORDER-BOTTOM: 0px; PADDING-BOTTOM: 0px; FONT-STYLE: italic; PADDING-TOP: 0px; PADDING-LEFT: 0px; BORDER-LEFT: 0px; MARGIN: 0px; PADDING-RIGHT: 0px; font-stretch: inherit; font-optical-sizing: inherit; font-size-adjust: inherit; font-kerning: inherit; font-feature-settings: inherit; font-variation-settings: inherit">synchronizes-with</EM>&#8221; is normally used to describe operations on different threads, and Go doesn&#8217;t expose the concept of threads.</P></DIV>