<b> : </b>Example</H2></DIV>
<P style='FONT-SIZE: 16px; FONT-FAMILY: "Segoe UI", SegoeUI, "Helvetica Neue", Helvetica, Arial, sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; MARGIN-TOP: 1px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(22,22,22); PADDING-BOTTOM: 0px; FONT-STYLE: normal; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN-LEFT: 1px; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; OUTLINE-COLOR: ; PADDING-RIGHT: 0px; BACKGROUND-COLOR: rgb(255,255,255); MARGIN-RIGHT: 1px; TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial; overflow-wrap: break-word'>This example in C# illustrates an implementation of the Retry pattern. The<SPAN>&nbsp;</SPAN><CODE style='FONT-SIZE: 13px; FONT-FAMILY: SFMono-Regular, Consolas, "Liberation Mono", Menlo, Courier, monospace; PADDING-BOTTOM: 0.1em; DIRECTION: ltr; PADDING-TOP: 0.1em; PADDING-LEFT: 0.2em; OUTLINE-COLOR: ; PADDING-RIGHT: 0.2em; overflow-wrap: break-word; border-radius: 3px'>OperationWithBasicRetryAsync</CODE><SPAN>&nbsp;</SPAN>method, shown below, invokes an external service asynchronously through the<SPAN>&nbsp;</SPAN><CODE style='FONT-SIZE: 13px; FONT-FAMILY: SFMono-Regular, Consolas, "Liberation Mono", Menlo, Courier, monospace; PADDING-BOTTOM: 0.1em; DIRECTION: ltr; PADDING-TOP: 0.1em; PADDING-LEFT: 0.2em; OUTLINE-COLOR: ; PADDING-RIGHT: 0.2em; overflow-wrap: break-word; border-radius: 3px'>TransientOperationAsync</CODE><SPAN>&nbsp;</SPAN>method. The details of the<SPAN>&nbsp;</SPAN><CODE style='FONT-SIZE: 13px; FONT-FAMILY: SFMono-Regular, Consolas, "Liberation Mono", Menlo, Courier, monospace; PADDING-BOTTOM: 0.1em; DIRECTION: ltr; PADDING-TOP: 0.1em; PADDING-LEFT: 0.2em; OUTLINE-COLOR: ; PADDING-RIGHT: 0.2em; overflow-wrap: break-word; border-radius: 3px'>TransientOperationAsync</CODE><SPAN>&nbsp;</SPAN>method will be specific to the service and are omitted from the sample code.</P>
<DIV id=code-try-0 class=codeHeader style='BOX-SIZING: content-box; FONT-FAMILY: "Segoe UI", SegoeUI, "Helvetica Neue", Helvetica, Arial, sans-serif; BORDER-TOP-COLOR: ; WHITE-SPACE: normal; WORD-SPACING: 0px; MARGIN-TOP: 16px; BORDER-BOTTOM: 0px; TEXT-TRANSFORM: none; BORDER-LEFT-COLOR: ; FONT-WEIGHT: 400; COLOR: rgb(22,22,22); FONT-STYLE: normal; MIN-HEIGHT: 30px; ORPHANS: 2; WIDOWS: 2; DISPLAY: flex; BORDER-RIGHT-COLOR: ; LETTER-SPACING: normal; OUTLINE-COLOR: ; TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial; border-image-source: ; border-image-slice: ; border-image-width: ; border-image-outset: ; border-image-repeat: ; flex-direction: row' data-bi-name="code-header"><SPAN class=language style="PADDING-BOTTOM: 2px; PADDING-TOP: 2px; PADDING-LEFT: 16px; DISPLAY: flex; OUTLINE-COLOR: ; PADDING-RIGHT: 16px; align-items: center; flex-grow: 1">C#</SPAN></DIV><PRE role=group tabIndex=0 aria-label="Horizontally scrollable code" class=has-inner-focus style='OVERFLOW: auto; FONT-FAMILY: SFMono-Regular, Consolas, "Liberation Mono", Menlo, Courier, monospace !important; WHITE-SPACE: pre; WORD-SPACING: 0px; TEXT-TRANSFORM: none; WORD-BREAK: normal; FONT-WEIGHT: 400; COLOR: rgb(22,22,22); FONT-STYLE: normal; PADDING-TOP: 1px; PADDING-LEFT: 1px; ORPHANS: 2; WIDOWS: 2; MARGIN: 0px; LETTER-SPACING: normal; OUTLINE-COLOR: ; LINE-HEIGHT: 1.3571; PADDING-RIGHT: 1px; TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial; overflow-wrap: normal; -webkit-font-smoothing: auto; tab-size: 4; hyphens: none'><CODE class=lang-csharp style='FONT-SIZE: 1em; BORDER-TOP: 0px; FONT-FAMILY: SFMono-Regular, Consolas, "Liberation Mono", Menlo, Courier, monospace; BORDER-RIGHT: 0px; BORDER-BOTTOM: 0px; POSITION: relative; PADDING-BOTTOM: 0px; DIRECTION: ltr; PADDING-TOP: 0px; PADDING-LEFT: 0px; BORDER-LEFT: 0px; DISPLAY: block; OUTLINE-COLOR: ; LINE-HEIGHT: 1.3571; PADDING-RIGHT: 0px'><SPAN style="OUTLINE-COLOR: "><SPAN class=hljs-keyword style="COLOR: rgb(1,1,253); OUTLINE-COLOR: ">private</SPAN> <SPAN class=hljs-built_in style="COLOR: rgb(1,1,253); OUTLINE-COLOR: ">int</SPAN> retryCount = <SPAN class=hljs-number style="OUTLINE-COLOR: ">3</SPAN>;
<SPAN class=hljs-keyword style="COLOR: rgb(1,1,253); OUTLINE-COLOR: ">private</SPAN> <SPAN class=hljs-keyword style="COLOR: rgb(1,1,253); OUTLINE-COLOR: ">readonly</SPAN> TimeSpan delay = TimeSpan.FromSeconds(<SPAN class=hljs-number style="OUTLINE-COLOR: ">5</SPAN>);

<SPAN class=hljs-function style="OUTLINE-COLOR: "><SPAN class=hljs-keyword style="COLOR: rgb(1,1,253); OUTLINE-COLOR: ">public</SPAN> <SPAN class=hljs-keyword style="COLOR: rgb(1,1,253); OUTLINE-COLOR: ">async</SPAN> Task <SPAN class=hljs-title style="COLOR: rgb(0,104,129); OUTLINE-COLOR: ">OperationWithBasicRetryAsync</SPAN>(<SPAN class=hljs-params style="OUTLINE-COLOR: "></SPAN>)</SPAN>
{
  <SPAN class=hljs-built_in style="COLOR: rgb(1,1,253); OUTLINE-COLOR: ">int</SPAN> currentRetry = <SPAN class=hljs-number style="OUTLINE-COLOR: ">0</SPAN>;

  <SPAN class=hljs-keyword style="COLOR: rgb(1,1,253); OUTLINE-COLOR: ">for</SPAN> (;;)
  {
    <SPAN class=hljs-keyword style="COLOR: rgb(1,1,253); OUTLINE-COLOR: ">try</SPAN>
    {
      <SPAN class=hljs-comment style="COLOR: green; OUTLINE-COLOR: ">// Call external service.</SPAN>
      <SPAN class=hljs-keyword style="COLOR: rgb(1,1,253); OUTLINE-COLOR: ">await</SPAN> TransientOperationAsync();

      <SPAN class=hljs-comment style="COLOR: green; OUTLINE-COLOR: ">// Return or break.</SPAN>
      <SPAN class=hljs-keyword style="COLOR: rgb(1,1,253); OUTLINE-COLOR: ">break</SPAN>;
    }
    catch (Exception ex)
    {
      Trace.TraceError(<SPAN class=hljs-string style="COLOR: rgb(163,21,21); OUTLINE-COLOR: ">"Operation Exception"</SPAN>);

      currentRetry++;

      <SPAN class=hljs-comment style="COLOR: green; OUTLINE-COLOR: ">// Check if the exception thrown was a transient exception</SPAN>
      <SPAN class=hljs-comment style="COLOR: green; OUTLINE-COLOR: ">// based on the logic in the error detection strategy.</SPAN>
      <SPAN class=hljs-comment style="COLOR: green; OUTLINE-COLOR: ">// Determine whether to retry the operation, as well as how</SPAN>
      <SPAN class=hljs-comment style="COLOR: green; OUTLINE-COLOR: ">// long to wait, based on the retry strategy.</SPAN>
      <SPAN class=hljs-keyword style="COLOR: rgb(1,1,253); OUTLINE-COLOR: ">if</SPAN> (currentRetry &gt; <SPAN class=hljs-keyword style="COLOR: rgb(1,1,253); OUTLINE-COLOR: ">this</SPAN>.retryCount || !IsTransient(ex))
      {
        <SPAN class=hljs-comment style="COLOR: green; OUTLINE-COLOR: ">// If this isn't a transient error or we shouldn't retry,</SPAN>
        <SPAN class=hljs-comment style="COLOR: green; OUTLINE-COLOR: ">// rethrow the exception.</SPAN>
        <SPAN class=hljs-keyword style="COLOR: rgb(1,1,253); OUTLINE-COLOR: ">throw</SPAN>;
      }
    }

    <SPAN class=hljs-comment style="COLOR: green; OUTLINE-COLOR: ">// Wait to retry the operation.</SPAN>
    <SPAN class=hljs-comment style="COLOR: green; OUTLINE-COLOR: ">// Consider calculating an exponential delay here and</SPAN>
    <SPAN class=hljs-comment style="COLOR: green; OUTLINE-COLOR: ">// using a strategy best suited for the operation and fault.</SPAN>
    <SPAN class=hljs-keyword style="COLOR: rgb(1,1,253); OUTLINE-COLOR: ">await</SPAN> Task.Delay(delay);
  }
}

<SPAN class=hljs-comment style="COLOR: green; OUTLINE-COLOR: ">// Async method that wraps a call to a remote service (details not shown).</SPAN>
<SPAN class=hljs-function style="OUTLINE-COLOR: "><SPAN class=hljs-keyword style="COLOR: rgb(1,1,253); OUTLINE-COLOR: ">private</SPAN> <SPAN class=hljs-keyword style="COLOR: rgb(1,1,253); OUTLINE-COLOR: ">async</SPAN> Task <SPAN class=hljs-title style="COLOR: rgb(0,104,129); OUTLINE-COLOR: ">TransientOperationAsync</SPAN>(<SPAN class=hljs-params style="OUTLINE-COLOR: "></SPAN>)</SPAN>
{
  ...
}
</SPAN></CODE></PRE>
<P style='FONT-SIZE: 16px; FONT-FAMILY: "Segoe UI", SegoeUI, "Helvetica Neue", Helvetica, Arial, sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; MARGIN-TOP: 1px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(22,22,22); PADDING-BOTTOM: 0px; FONT-STYLE: normal; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN-LEFT: 1px; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; OUTLINE-COLOR: ; PADDING-RIGHT: 0px; BACKGROUND-COLOR: rgb(255,255,255); MARGIN-RIGHT: 1px; TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial; overflow-wrap: break-word'>The statement that invokes this method is contained in a try/catch block wrapped in a for loop. The for loop exits if the call to the<SPAN>&nbsp;</SPAN><CODE style='FONT-SIZE: 13px; FONT-FAMILY: SFMono-Regular, Consolas, "Liberation Mono", Menlo, Courier, monospace; PADDING-BOTTOM: 0.1em; DIRECTION: ltr; PADDING-TOP: 0.1em; PADDING-LEFT: 0.2em; OUTLINE-COLOR: ; PADDING-RIGHT: 0.2em; overflow-wrap: break-word; border-radius: 3px'>TransientOperationAsync</CODE><SPAN>&nbsp;</SPAN>method succeeds without throwing an exception. If the<SPAN>&nbsp;</SPAN><CODE style='FONT-SIZE: 13px; FONT-FAMILY: SFMono-Regular, Consolas, "Liberation Mono", Menlo, Courier, monospace; PADDING-BOTTOM: 0.1em; DIRECTION: ltr; PADDING-TOP: 0.1em; PADDING-LEFT: 0.2em; OUTLINE-COLOR: ; PADDING-RIGHT: 0.2em; overflow-wrap: break-word; border-radius: 3px'>TransientOperationAsync</CODE><SPAN>&nbsp;</SPAN>method fails, the catch block examines the reason for the failure. If it's believed to be a transient error the code waits for a short delay before retrying the operation.</P>
<P style='FONT-SIZE: 16px; FONT-FAMILY: "Segoe UI", SegoeUI, "Helvetica Neue", Helvetica, Arial, sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; MARGIN-TOP: 1px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(22,22,22); PADDING-BOTTOM: 0px; FONT-STYLE: normal; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN-LEFT: 1px; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; OUTLINE-COLOR: ; PADDING-RIGHT: 0px; BACKGROUND-COLOR: rgb(255,255,255); MARGIN-RIGHT: 1px; TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial; overflow-wrap: break-word'>The for loop also tracks the number of times that the operation has been attempted, and if the code fails three times the exception is assumed to be more long lasting. If the exception isn't transient or it's long lasting, the catch handler throws an exception. This exception exits the for loop and should be caught by the code that invokes the<SPAN>&nbsp;</SPAN><CODE style='FONT-SIZE: 13px; FONT-FAMILY: SFMono-Regular, Consolas, "Liberation Mono", Menlo, Courier, monospace; PADDING-BOTTOM: 0.1em; DIRECTION: ltr; PADDING-TOP: 0.1em; PADDING-LEFT: 0.2em; OUTLINE-COLOR: ; PADDING-RIGHT: 0.2em; overflow-wrap: break-word; border-radius: 3px'>OperationWithBasicRetryAsync</CODE><SPAN>&nbsp;</SPAN>method.</P>
<P style='FONT-SIZE: 16px; FONT-FAMILY: "Segoe UI", SegoeUI, "Helvetica Neue", Helvetica, Arial, sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; MARGIN-TOP: 1px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(22,22,22); PADDING-BOTTOM: 0px; FONT-STYLE: normal; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN-LEFT: 1px; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; OUTLINE-COLOR: ; PADDING-RIGHT: 0px; BACKGROUND-COLOR: rgb(255,255,255); MARGIN-RIGHT: 1px; TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial; overflow-wrap: break-word'>The<SPAN>&nbsp;</SPAN><CODE style='FONT-SIZE: 13px; FONT-FAMILY: SFMono-Regular, Consolas, "Liberation Mono", Menlo, Courier, monospace; PADDING-BOTTOM: 0.1em; DIRECTION: ltr; PADDING-TOP: 0.1em; PADDING-LEFT: 0.2em; OUTLINE-COLOR: ; PADDING-RIGHT: 0.2em; overflow-wrap: break-word; border-radius: 3px'>IsTransient</CODE><SPAN>&nbsp;</SPAN>method, shown below, checks for a specific set of exceptions that are relevant to the environment the code is run in. The definition of a transient exception will vary according to the resources being accessed and the environment the operation is being performed in.</P>
<DIV id=code-try-1 class=codeHeader style='BOX-SIZING: content-box; FONT-FAMILY: "Segoe UI", SegoeUI, "Helvetica Neue", Helvetica, Arial, sans-serif; BORDER-TOP-COLOR: ; WHITE-SPACE: normal; WORD-SPACING: 0px; MARGIN-TOP: 16px; BORDER-BOTTOM: 0px; TEXT-TRANSFORM: none; BORDER-LEFT-COLOR: ; FONT-WEIGHT: 400; COLOR: rgb(22,22,22); FONT-STYLE: normal; MIN-HEIGHT: 30px; ORPHANS: 2; WIDOWS: 2; DISPLAY: flex; BORDER-RIGHT-COLOR: ; LETTER-SPACING: normal; OUTLINE-COLOR: ; TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial; border-image-source: ; border-image-slice: ; border-image-width: ; border-image-outset: ; border-image-repeat: ; flex-direction: row' data-bi-name="code-header"><SPAN class=language style="PADDING-BOTTOM: 2px; PADDING-TOP: 2px; PADDING-LEFT: 16px; DISPLAY: flex; OUTLINE-COLOR: ; PADDING-RIGHT: 16px; align-items: center; flex-grow: 1">C#</SPAN></DIV><PRE role=group tabIndex=0 aria-label="Horizontally scrollable code" class=has-inner-focus style='OVERFLOW: auto; FONT-FAMILY: SFMono-Regular, Consolas, "Liberation Mono", Menlo, Courier, monospace !important; WHITE-SPACE: pre; WORD-SPACING: 0px; TEXT-TRANSFORM: none; WORD-BREAK: normal; FONT-WEIGHT: 400; COLOR: rgb(22,22,22); FONT-STYLE: normal; PADDING-TOP: 1px; PADDING-LEFT: 1px; ORPHANS: 2; WIDOWS: 2; MARGIN: 0px; LETTER-SPACING: normal; OUTLINE-COLOR: ; LINE-HEIGHT: 1.3571; PADDING-RIGHT: 1px; TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial; overflow-wrap: normal; -webkit-font-smoothing: auto; tab-size: 4; hyphens: none'><CODE class=lang-csharp style='FONT-SIZE: 1em; BORDER-TOP: 0px; FONT-FAMILY: SFMono-Regular, Consolas, "Liberation Mono", Menlo, Courier, monospace; BORDER-RIGHT: 0px; BORDER-BOTTOM: 0px; POSITION: relative; PADDING-BOTTOM: 0px; DIRECTION: ltr; PADDING-TOP: 0px; PADDING-LEFT: 0px; BORDER-LEFT: 0px; DISPLAY: block; OUTLINE-COLOR: ; LINE-HEIGHT: 1.3571; PADDING-RIGHT: 0px'><SPAN style="OUTLINE-COLOR: "><SPAN class=hljs-function style="OUTLINE-COLOR: "><SPAN class=hljs-keyword style="COLOR: rgb(1,1,253); OUTLINE-COLOR: ">private</SPAN> <SPAN class=hljs-built_in style="COLOR: rgb(1,1,253); OUTLINE-COLOR: ">bool</SPAN> <SPAN class=hljs-title style="COLOR: rgb(0,104,129); OUTLINE-COLOR: ">IsTransient</SPAN>(<SPAN class=hljs-params style="OUTLINE-COLOR: ">Exception ex</SPAN>)</SPAN>
{
  <SPAN class=hljs-comment style="COLOR: green; OUTLINE-COLOR: ">// Determine if the exception is transient.</SPAN>
  <SPAN class=hljs-comment style="COLOR: green; OUTLINE-COLOR: ">// In some cases this is as simple as checking the exception type, in other</SPAN>
  <SPAN class=hljs-comment style="COLOR: green; OUTLINE-COLOR: ">// cases it might be necessary to inspect other properties of the exception.</SPAN>
  <SPAN class=hljs-keyword style="COLOR: rgb(1,1,253); OUTLINE-COLOR: ">if</SPAN> (ex <SPAN class=hljs-keyword style="COLOR: rgb(1,1,253); OUTLINE-COLOR: ">is</SPAN> OperationTransientException)
    <SPAN class=hljs-keyword style="COLOR: rgb(1,1,253); OUTLINE-COLOR: ">return</SPAN> <SPAN class=hljs-literal style="COLOR: rgb(7,112,74); OUTLINE-COLOR: ">true</SPAN>;

  <SPAN class=hljs-keyword style="COLOR: rgb(1,1,253); OUTLINE-COLOR: ">var</SPAN> webException = ex <SPAN class=hljs-keyword style="COLOR: rgb(1,1,253); OUTLINE-COLOR: ">as</SPAN> WebException;
  <SPAN class=hljs-keyword style="COLOR: rgb(1,1,253); OUTLINE-COLOR: ">if</SPAN> (webException != <SPAN class=hljs-literal style="COLOR: rgb(7,112,74); OUTLINE-COLOR: ">null</SPAN>)
  {
    <SPAN class=hljs-comment style="COLOR: green; OUTLINE-COLOR: ">// If the web exception contains one of the following status values</SPAN>
    <SPAN class=hljs-comment style="COLOR: green; OUTLINE-COLOR: ">// it might be transient.</SPAN>
    <SPAN class=hljs-keyword style="COLOR: rgb(1,1,253); OUTLINE-COLOR: ">return</SPAN> <SPAN class=hljs-keyword style="COLOR: rgb(1,1,253); OUTLINE-COLOR: ">new</SPAN>[] {WebExceptionStatus.ConnectionClosed,
                  WebExceptionStatus.Timeout,
                  WebExceptionStatus.RequestCanceled }.
            Contains(webException.Status);
  }

  <SPAN class=hljs-comment style="COLOR: green; OUTLINE-COLOR: ">// Additional exception checking logic goes here.</SPAN>
  <SPAN class=hljs-keyword style="COLOR: rgb(1,1,253); OUTLINE-COLOR: ">return</SPAN> <SPAN class=hljs-literal style="COLOR: rgb(7,112,74); OUTLINE-COLOR: ">false</SPAN>;
}</SPAN></CODE></PRE>