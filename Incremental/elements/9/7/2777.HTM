<DIV class=heading-wrapper style='FONT-SIZE: 16px; FONT-FAMILY: "Segoe UI", SegoeUI, "Helvetica Neue", Helvetica, Arial, sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; POSITION: relative; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(22,22,22); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; OUTLINE-COLOR: ; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial' data-heading-level="h2">
<H2 id=context-and-problem class=heading-anchor style="FONT-WEIGHT: 600; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 32px 0px 12px; OUTLINE-COLOR: ; LINE-HEIGHT: 1.3; PADDING-RIGHT: 0px; margin-inline-start: -1.875rem; padding-inline-start: 1.875rem"><FONT class=extract>Context and problem</FONT></H2></DIV>
<P style='FONT-SIZE: 16px; FONT-FAMILY: "Segoe UI", SegoeUI, "Helvetica Neue", Helvetica, Arial, sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; MARGIN-TOP: 1px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(22,22,22); PADDING-BOTTOM: 0px; FONT-STYLE: normal; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN-LEFT: 1px; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; OUTLINE-COLOR: ; PADDING-RIGHT: 0px; BACKGROUND-COLOR: rgb(255,255,255); MARGIN-RIGHT: 1px; TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial; overflow-wrap: break-word'><FONT class=extract>An application that communicates with elements running in the cloud has to be sensitive to the transient faults that can occur in this environment. Faults include the momentary loss of network connectivity to components and services, the temporary unavailability of a service, or timeouts that occur when a service is busy.</FONT></P>
<P style='FONT-SIZE: 16px; FONT-FAMILY: "Segoe UI", SegoeUI, "Helvetica Neue", Helvetica, Arial, sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; MARGIN-TOP: 1px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(22,22,22); PADDING-BOTTOM: 0px; FONT-STYLE: normal; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN-LEFT: 1px; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; OUTLINE-COLOR: ; PADDING-RIGHT: 0px; BACKGROUND-COLOR: rgb(255,255,255); MARGIN-RIGHT: 1px; TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial; overflow-wrap: break-word'><FONT class=extract>These faults are typically self-correcting, and if the action that triggered a fault is repeated after a suitable delay it's likely to be successful. For example, a database service that's processing a large number of concurrent requests can implement a<SPAN>&nbsp;</SPAN></FONT><A style="CURSOR: pointer; TEXT-DECORATION: none; COLOR: ; OUTLINE-WIDTH: 0px; OUTLINE-COLOR: ; overflow-wrap: break-word" href="https://learn.microsoft.com/en-us/azure/architecture/patterns/throttling" data-linktype="absolute-path"><FONT class=extract>throttling strategy</FONT></A><FONT class=extract><SPAN>&nbsp;</SPAN>that temporarily rejects any further requests until its workload has eased. An application trying to access the database might fail to connect, but if it tries again after a delay it might succeed.</FONT></P>
<DIV class=heading-wrapper style='FONT-SIZE: 16px; FONT-FAMILY: "Segoe UI", SegoeUI, "Helvetica Neue", Helvetica, Arial, sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; POSITION: relative; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(22,22,22); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; OUTLINE-COLOR: ; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial' data-heading-level="h2"><A aria-label="Section titled: Solution" class="anchor-link docon docon-link" style="OVERFLOW: hidden; CURSOR: pointer; TEXT-DECORATION: none; BORDER-TOP: 0px; CLIP: rect(1px 1px 1px 1px); HEIGHT: 1px; FONT-FAMILY: docons; BORDER-RIGHT: 0px; FONT-VARIANT: normal; WIDTH: 1px; BORDER-BOTTOM: 0px; POSITION: absolute; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: ; OUTLINE-WIDTH: 0px; PADDING-BOTTOM: 0px; DIRECTION: ltr; FONT-STYLE: normal; TEXT-ALIGN: center; PADDING-TOP: 0px; PADDING-LEFT: 0px; BORDER-LEFT: 0px; MARGIN: -1px; DISPLAY: inline-block; OUTLINE-COLOR: ; LINE-HEIGHT: 16px; PADDING-RIGHT: 0px; overflow-wrap: normal; speak: none; -webkit-font-smoothing: antialiased; transition: opacity 0.1s linear; inset-inline-start: -1.875rem; transform: translateY(-50%) scale(1); inset-block-start: 1.38125rem; clip-path: inset(50%); opacity: 0" href="https://learn.microsoft.com/en-us/azure/architecture/patterns/retry#solution"><FONT class=extract></FONT></A>
<H2 id=solution class=heading-anchor style="FONT-WEIGHT: 600; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 32px 0px 12px; OUTLINE-COLOR: ; LINE-HEIGHT: 1.3; PADDING-RIGHT: 0px; margin-inline-start: -1.875rem; padding-inline-start: 1.875rem"><FONT class=extract>Solution</FONT></H2></DIV>
<P style='FONT-SIZE: 16px; FONT-FAMILY: "Segoe UI", SegoeUI, "Helvetica Neue", Helvetica, Arial, sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; MARGIN-TOP: 1px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(22,22,22); PADDING-BOTTOM: 0px; FONT-STYLE: normal; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN-LEFT: 1px; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; OUTLINE-COLOR: ; PADDING-RIGHT: 0px; BACKGROUND-COLOR: rgb(255,255,255); MARGIN-RIGHT: 1px; TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial; overflow-wrap: break-word'><FONT class=extract>In the cloud, transient faults aren't uncommon and an application should be designed to handle them elegantly and transparently. This minimizes the effects faults can have on the business tasks the application is performing.</FONT></P>
<P style='FONT-SIZE: 16px; FONT-FAMILY: "Segoe UI", SegoeUI, "Helvetica Neue", Helvetica, Arial, sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; MARGIN-TOP: 1px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(22,22,22); PADDING-BOTTOM: 0px; FONT-STYLE: normal; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN-LEFT: 1px; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; OUTLINE-COLOR: ; PADDING-RIGHT: 0px; BACKGROUND-COLOR: rgb(255,255,255); MARGIN-RIGHT: 1px; TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial; overflow-wrap: break-word'><FONT class=extract>If an application detects a failure when it tries to send a request to a remote service, it can handle the failure using the following strategies:</FONT></P>
<UL style='LIST-STYLE-TYPE: none; FONT-SIZE: 16px; FONT-FAMILY: "Segoe UI", SegoeUI, "Helvetica Neue", Helvetica, Arial, sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(22,22,22); PADDING-BOTTOM: 0px; FONT-STYLE: normal; PADDING-TOP: 0px; PADDING-LEFT: 0px; ORPHANS: 2; WIDOWS: 2; MARGIN: 16px 0px 16px 38px; LETTER-SPACING: normal; OUTLINE-COLOR: ; PADDING-RIGHT: 0px; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial'>
<LI style="LIST-STYLE-TYPE: disc; OUTLINE-WIDTH: 0px; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 0px; OUTLINE-COLOR: ; PADDING-RIGHT: 0px">
<P style="MARGIN-TOP: 1px; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN-LEFT: 1px; OUTLINE-COLOR: ; PADDING-RIGHT: 0px; MARGIN-RIGHT: 1px; overflow-wrap: break-word"><FONT class=extract><STRONG style="FONT-WEIGHT: 600; OUTLINE-COLOR: ">Cancel</STRONG>. If the fault indicates that the failure isn't transient or is unlikely to be successful if repeated, the application should cancel the operation and report an exception. For example, an authentication failure caused by providing invalid credentials is not likely to succeed no matter how many times it's attempted.</FONT></P>
<LI style="LIST-STYLE-TYPE: disc; OUTLINE-WIDTH: 0px; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 0px; OUTLINE-COLOR: ; PADDING-RIGHT: 0px">
<P style="MARGIN-TOP: 1px; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN-LEFT: 1px; OUTLINE-COLOR: ; PADDING-RIGHT: 0px; MARGIN-RIGHT: 1px; overflow-wrap: break-word"><FONT class=extract><STRONG style="FONT-WEIGHT: 600; OUTLINE-COLOR: ">Retry</STRONG>. If the specific fault reported is unusual or rare, it might have been caused by unusual circumstances such as a network packet becoming corrupted while it was being transmitted. In this case, the application could retry the failing request again immediately because the same failure is unlikely to be repeated and the request will probably be successful.</FONT></P>
<LI style="LIST-STYLE-TYPE: disc; OUTLINE-WIDTH: 0px; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 0px; OUTLINE-COLOR: ; PADDING-RIGHT: 0px">
<P style="MARGIN-TOP: 1px; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN-LEFT: 1px; OUTLINE-COLOR: ; PADDING-RIGHT: 0px; MARGIN-RIGHT: 1px; overflow-wrap: break-word"><FONT class=extract><STRONG style="FONT-WEIGHT: 600; OUTLINE-COLOR: ">Retry after delay</STRONG>. If the fault is caused by one of the more commonplace connectivity or busy failures, the network or service might need a short period while the connectivity issues are corrected or the backlog of work is cleared. The application should wait for a suitable time before retrying the request.</FONT></P></LI></UL>
<P style='FONT-SIZE: 16px; FONT-FAMILY: "Segoe UI", SegoeUI, "Helvetica Neue", Helvetica, Arial, sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; MARGIN-TOP: 1px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(22,22,22); PADDING-BOTTOM: 0px; FONT-STYLE: normal; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN-LEFT: 1px; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; OUTLINE-COLOR: ; PADDING-RIGHT: 0px; BACKGROUND-COLOR: rgb(255,255,255); MARGIN-RIGHT: 1px; TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial; overflow-wrap: break-word'><FONT class=extract>For the more common transient failures, the period between retries should be chosen to spread requests from multiple instances of the application as evenly as possible. This reduces the chance of a busy service continuing to be overloaded. If many instances of an application are continually overwhelming a service with retry requests, it'll take the service longer to recover.</FONT></P>
<P style='FONT-SIZE: 16px; FONT-FAMILY: "Segoe UI", SegoeUI, "Helvetica Neue", Helvetica, Arial, sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; MARGIN-TOP: 1px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(22,22,22); PADDING-BOTTOM: 0px; FONT-STYLE: normal; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN-LEFT: 1px; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; OUTLINE-COLOR: ; PADDING-RIGHT: 0px; BACKGROUND-COLOR: rgb(255,255,255); MARGIN-RIGHT: 1px; TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial; overflow-wrap: break-word'><FONT class=extract>If the request still fails, the application can wait and make another attempt. If necessary, this process can be repeated with increasing delays between retry attempts, until some maximum number of requests have been attempted. The delay can be increased incrementally or exponentially, depending on the type of failure and the probability that it'll be corrected during this time.</FONT></P>
<P style='FONT-SIZE: 16px; FONT-FAMILY: "Segoe UI", SegoeUI, "Helvetica Neue", Helvetica, Arial, sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; MARGIN-TOP: 1px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(22,22,22); PADDING-BOTTOM: 0px; FONT-STYLE: normal; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN-LEFT: 1px; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; OUTLINE-COLOR: ; PADDING-RIGHT: 0px; BACKGROUND-COLOR: rgb(255,255,255); MARGIN-RIGHT: 1px; TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial; overflow-wrap: break-word'><FONT class=extract>The following diagram illustrates invoking an operation in a hosted service using this pattern. If the request is unsuccessful after a predefined number of attempts, the application should treat the fault as an exception and handle it accordingly.</FONT></P>
<P style='FONT-SIZE: 16px; FONT-FAMILY: "Segoe UI", SegoeUI, "Helvetica Neue", Helvetica, Arial, sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; MARGIN-TOP: 1px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(22,22,22); PADDING-BOTTOM: 0px; FONT-STYLE: normal; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN-LEFT: 1px; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; OUTLINE-COLOR: ; PADDING-RIGHT: 0px; BACKGROUND-COLOR: rgb(255,255,255); MARGIN-RIGHT: 1px; TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial; overflow-wrap: break-word'><FONT class=extract><IMG style="MAX-WIDTH: 100%; BORDER-TOP: 0px; HEIGHT: auto; BORDER-RIGHT: 0px; VERTICAL-ALIGN: baseline; BORDER-BOTTOM: 0px; BORDER-LEFT: 0px; DISPLAY: inline-block; OUTLINE-COLOR: " alt="Figure 1 - Invoking an operation in a hosted service using the Retry pattern" src="https://learn.microsoft.com/en-us/azure/architecture/patterns/_images/retry-pattern.png" data-linktype="absolute-path"></FONT></P>
<P style='FONT-SIZE: 16px; FONT-FAMILY: "Segoe UI", SegoeUI, "Helvetica Neue", Helvetica, Arial, sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; MARGIN-TOP: 1px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(22,22,22); PADDING-BOTTOM: 0px; FONT-STYLE: normal; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN-LEFT: 1px; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; OUTLINE-COLOR: ; PADDING-RIGHT: 0px; BACKGROUND-COLOR: rgb(255,255,255); MARGIN-RIGHT: 1px; TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial; overflow-wrap: break-word'><FONT class=extract>The application should wrap all attempts to access a remote service in code that implements a retry policy matching one of the strategies listed above. Requests sent to different services can be subject to different policies. Some vendors provide libraries that implement retry policies, where the application can specify the maximum number of retries, the time between retry attempts, and other parameters.</FONT></P>
<P style='FONT-SIZE: 16px; FONT-FAMILY: "Segoe UI", SegoeUI, "Helvetica Neue", Helvetica, Arial, sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; MARGIN-TOP: 1px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(22,22,22); PADDING-BOTTOM: 0px; FONT-STYLE: normal; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN-LEFT: 1px; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; OUTLINE-COLOR: ; PADDING-RIGHT: 0px; BACKGROUND-COLOR: rgb(255,255,255); MARGIN-RIGHT: 1px; TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial; overflow-wrap: break-word'><FONT class=extract>An application should log the details of faults and failing operations. This information is useful to operators. That being said, in order to avoid flooding operators with alerts on operations where subsequently retried attempts were successful, it is best to log early failures as<SPAN>&nbsp;</SPAN><EM style="OUTLINE-COLOR: ">informational entries</EM><SPAN>&nbsp;</SPAN>and only the failure of the last of the retry attempts as an actual error. Here is an<SPAN>&nbsp;</SPAN></FONT><A style="CURSOR: pointer; TEXT-DECORATION: none; COLOR: ; OUTLINE-WIDTH: 0px; OUTLINE-COLOR: ; overflow-wrap: break-word" href="https://docs.particular.net/nservicebus/recoverability/#retry-logging" data-linktype="external"><FONT class=extract>example of how this logging model would look like</FONT></A><FONT class=extract>.</FONT></P>
<P style='FONT-SIZE: 16px; FONT-FAMILY: "Segoe UI", SegoeUI, "Helvetica Neue", Helvetica, Arial, sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; MARGIN-TOP: 1px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(22,22,22); PADDING-BOTTOM: 0px; FONT-STYLE: normal; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN-LEFT: 1px; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; OUTLINE-COLOR: ; PADDING-RIGHT: 0px; BACKGROUND-COLOR: rgb(255,255,255); MARGIN-RIGHT: 1px; TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial; overflow-wrap: break-word'><FONT class=extract>If a service is frequently unavailable or busy, it's often because the service has exhausted its resources. You can reduce the frequency of these faults by scaling out the service. For example, if a database service is continually overloaded, it might be beneficial to partition the database and spread the load across multiple servers.</FONT></P>
<BLOCKQUOTE style='FONT-SIZE: 16px; BORDER-TOP: 0px solid; FONT-FAMILY: "Segoe UI", SegoeUI, "Helvetica Neue", Helvetica, Arial, sans-serif; BORDER-RIGHT: 0px solid; WHITE-SPACE: normal; WORD-SPACING: 0px; BORDER-BOTTOM: 0px solid; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(22,22,22); PADDING-BOTTOM: 0px; FONT-STYLE: normal; PADDING-TOP: 0px; PADDING-LEFT: 0.8em; BORDER-LEFT: 3px solid; ORPHANS: 2; WIDOWS: 2; MARGIN: 1.2em 0px 2em; DISPLAY: block; LETTER-SPACING: normal; OUTLINE-COLOR: ; PADDING-RIGHT: 0.8em; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial'>
<P style="MARGIN-TOP: 1px; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN-LEFT: 1px; OUTLINE-COLOR: ; PADDING-RIGHT: 0px; MARGIN-RIGHT: 1px; overflow-wrap: break-word"><A style="CURSOR: pointer; TEXT-DECORATION: none; COLOR: ; OUTLINE-WIDTH: 0px; OUTLINE-COLOR: ; overflow-wrap: break-word" href="https://learn.microsoft.com/en-us/ef" data-linktype="absolute-path"><FONT class=extract>Microsoft Entity Framework</FONT></A><FONT class=extract><SPAN>&nbsp;</SPAN>provides facilities for retrying database operations. Also, most Azure services and client SDKs include a retry mechanism. For more information, see<SPAN>&nbsp;</SPAN></FONT><A style="CURSOR: pointer; TEXT-DECORATION: none; COLOR: ; OUTLINE-WIDTH: 0px; OUTLINE-COLOR: ; overflow-wrap: break-word" href="https://learn.microsoft.com/en-us/azure/architecture/best-practices/retry-service-specific" data-linktype="absolute-path"><FONT class=extract>Retry guidance for specific services</FONT></A><FONT class=extract>.</FONT></P></BLOCKQUOTE>
<DIV class=heading-wrapper style='FONT-SIZE: 16px; FONT-FAMILY: "Segoe UI", SegoeUI, "Helvetica Neue", Helvetica, Arial, sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; POSITION: relative; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(22,22,22); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; OUTLINE-COLOR: ; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial' data-heading-level="h2"><A aria-label="Section titled: Issues and considerations" class="anchor-link docon docon-link" style="OVERFLOW: hidden; CURSOR: pointer; TEXT-DECORATION: none; BORDER-TOP: 0px; CLIP: rect(1px 1px 1px 1px); HEIGHT: 1px; FONT-FAMILY: docons; BORDER-RIGHT: 0px; FONT-VARIANT: normal; WIDTH: 1px; BORDER-BOTTOM: 0px; POSITION: absolute; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: ; OUTLINE-WIDTH: 0px; PADDING-BOTTOM: 0px; DIRECTION: ltr; FONT-STYLE: normal; TEXT-ALIGN: center; PADDING-TOP: 0px; PADDING-LEFT: 0px; BORDER-LEFT: 0px; MARGIN: -1px; DISPLAY: inline-block; OUTLINE-COLOR: ; LINE-HEIGHT: 16px; PADDING-RIGHT: 0px; overflow-wrap: normal; speak: none; -webkit-font-smoothing: antialiased; transition: opacity 0.1s linear; inset-inline-start: -1.875rem; transform: translateY(-50%) scale(1); inset-block-start: 1.38125rem; clip-path: inset(50%); opacity: 0" href="https://learn.microsoft.com/en-us/azure/architecture/patterns/retry#issues-and-considerations"><FONT class=extract></FONT></A>
<H2 id=issues-and-considerations class=heading-anchor style="FONT-WEIGHT: 600; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 32px 0px 12px; OUTLINE-COLOR: ; LINE-HEIGHT: 1.3; PADDING-RIGHT: 0px; margin-inline-start: -1.875rem; padding-inline-start: 1.875rem"><FONT class=extract>Issues and considerations</FONT></H2></DIV>
<P style='FONT-SIZE: 16px; FONT-FAMILY: "Segoe UI", SegoeUI, "Helvetica Neue", Helvetica, Arial, sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; MARGIN-TOP: 1px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(22,22,22); PADDING-BOTTOM: 0px; FONT-STYLE: normal; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN-LEFT: 1px; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; OUTLINE-COLOR: ; PADDING-RIGHT: 0px; BACKGROUND-COLOR: rgb(255,255,255); MARGIN-RIGHT: 1px; TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial; overflow-wrap: break-word'><FONT class=extract>You should consider the following points when deciding how to implement this pattern.</FONT></P>
<P style='FONT-SIZE: 16px; FONT-FAMILY: "Segoe UI", SegoeUI, "Helvetica Neue", Helvetica, Arial, sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; MARGIN-TOP: 1px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(22,22,22); PADDING-BOTTOM: 0px; FONT-STYLE: normal; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN-LEFT: 1px; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; OUTLINE-COLOR: ; PADDING-RIGHT: 0px; BACKGROUND-COLOR: rgb(255,255,255); MARGIN-RIGHT: 1px; TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial; overflow-wrap: break-word'><FONT class=extract>The retry policy should be tuned to match the business requirements of the application and the nature of the failure. For some noncritical operations, it's better to fail fast rather than retry several times and impact the throughput of the application. For example, in an interactive web application accessing a remote service, it's better to fail after a smaller number of retries with only a short delay between retry attempts, and display a suitable message to the user (for example, "please try again later"). For a batch application, it might be more appropriate to increase the number of retry attempts with an exponentially increasing delay between attempts.</FONT></P>
<P style='FONT-SIZE: 16px; FONT-FAMILY: "Segoe UI", SegoeUI, "Helvetica Neue", Helvetica, Arial, sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; MARGIN-TOP: 1px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(22,22,22); PADDING-BOTTOM: 0px; FONT-STYLE: normal; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN-LEFT: 1px; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; OUTLINE-COLOR: ; PADDING-RIGHT: 0px; BACKGROUND-COLOR: rgb(255,255,255); MARGIN-RIGHT: 1px; TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial; overflow-wrap: break-word'><FONT class=extract>An aggressive retry policy with minimal delay between attempts, and a large number of retries, could further degrade a busy service that's running close to or at capacity. This retry policy could also affect the responsiveness of the application if it's continually trying to perform a failing operation.</FONT></P>
<P style='FONT-SIZE: 16px; FONT-FAMILY: "Segoe UI", SegoeUI, "Helvetica Neue", Helvetica, Arial, sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; MARGIN-TOP: 1px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(22,22,22); PADDING-BOTTOM: 0px; FONT-STYLE: normal; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN-LEFT: 1px; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; OUTLINE-COLOR: ; PADDING-RIGHT: 0px; BACKGROUND-COLOR: rgb(255,255,255); MARGIN-RIGHT: 1px; TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial; overflow-wrap: break-word'><FONT class=extract>If a request still fails after a significant number of retries, it's better for the application to prevent further requests going to the same resource and simply report a failure immediately. When the period expires, the application can tentatively allow one or more requests through to see whether they're successful. For more details of this strategy, see the<SPAN>&nbsp;</SPAN></FONT><A style="CURSOR: pointer; TEXT-DECORATION: none; COLOR: ; OUTLINE-WIDTH: 0px; OUTLINE-COLOR: ; overflow-wrap: break-word" href="https://learn.microsoft.com/en-us/azure/architecture/patterns/circuit-breaker" data-linktype="absolute-path"><FONT class=extract>Circuit Breaker pattern</FONT></A><FONT class=extract>.</FONT></P>
<P style='FONT-SIZE: 16px; FONT-FAMILY: "Segoe UI", SegoeUI, "Helvetica Neue", Helvetica, Arial, sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; MARGIN-TOP: 1px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(22,22,22); PADDING-BOTTOM: 0px; FONT-STYLE: normal; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN-LEFT: 1px; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; OUTLINE-COLOR: ; PADDING-RIGHT: 0px; BACKGROUND-COLOR: rgb(255,255,255); MARGIN-RIGHT: 1px; TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial; overflow-wrap: break-word'><FONT class=extract>Consider whether the operation is idempotent. If so, it's inherently safe to retry. Otherwise, retries could cause the operation to be executed more than once, with unintended side effects. For example, a service might receive the request, process the request successfully, but fail to send a response. At that point, the retry logic might re-send the request, assuming that the first request wasn't received.</FONT></P>
<P style='FONT-SIZE: 16px; FONT-FAMILY: "Segoe UI", SegoeUI, "Helvetica Neue", Helvetica, Arial, sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; MARGIN-TOP: 1px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(22,22,22); PADDING-BOTTOM: 0px; FONT-STYLE: normal; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN-LEFT: 1px; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; OUTLINE-COLOR: ; PADDING-RIGHT: 0px; BACKGROUND-COLOR: rgb(255,255,255); MARGIN-RIGHT: 1px; TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial; overflow-wrap: break-word'><FONT class=extract>A request to a service can fail for a variety of reasons raising different exceptions depending on the nature of the failure. Some exceptions indicate a failure that can be resolved quickly, while others indicate that the failure is longer lasting. It's useful for the retry policy to adjust the time between retry attempts based on the type of the exception.</FONT></P>
<P style='FONT-SIZE: 16px; FONT-FAMILY: "Segoe UI", SegoeUI, "Helvetica Neue", Helvetica, Arial, sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; MARGIN-TOP: 1px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(22,22,22); PADDING-BOTTOM: 0px; FONT-STYLE: normal; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN-LEFT: 1px; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; OUTLINE-COLOR: ; PADDING-RIGHT: 0px; BACKGROUND-COLOR: rgb(255,255,255); MARGIN-RIGHT: 1px; TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial; overflow-wrap: break-word'><FONT class=extract>Consider how retrying an operation that's part of a transaction will affect the overall transaction consistency. Fine tune the retry policy for transactional operations to maximize the chance of success and reduce the need to undo all the transaction steps.</FONT></P>
<P style='FONT-SIZE: 16px; FONT-FAMILY: "Segoe UI", SegoeUI, "Helvetica Neue", Helvetica, Arial, sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; MARGIN-TOP: 1px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(22,22,22); PADDING-BOTTOM: 0px; FONT-STYLE: normal; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN-LEFT: 1px; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; OUTLINE-COLOR: ; PADDING-RIGHT: 0px; BACKGROUND-COLOR: rgb(255,255,255); MARGIN-RIGHT: 1px; TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial; overflow-wrap: break-word'><FONT class=extract>Ensure that all retry code is fully tested against a variety of failure conditions. Check that it doesn't severely impact the performance or reliability of the application, cause excessive load on services and resources, or generate race conditions or bottlenecks.</FONT></P>
<P style='FONT-SIZE: 16px; FONT-FAMILY: "Segoe UI", SegoeUI, "Helvetica Neue", Helvetica, Arial, sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; MARGIN-TOP: 1px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(22,22,22); PADDING-BOTTOM: 0px; FONT-STYLE: normal; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN-LEFT: 1px; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; OUTLINE-COLOR: ; PADDING-RIGHT: 0px; BACKGROUND-COLOR: rgb(255,255,255); MARGIN-RIGHT: 1px; TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial; overflow-wrap: break-word'><FONT class=extract>Implement retry logic only where the full context of a failing operation is understood. For example, if a task that contains a retry policy invokes another task that also contains a retry policy, this extra layer of retries can add long delays to the processing. It might be better to configure the lower-level task to fail fast and report the reason for the failure back to the task that invoked it. This higher-level task can then handle the failure based on its own policy.</FONT></P>
<P style='FONT-SIZE: 16px; FONT-FAMILY: "Segoe UI", SegoeUI, "Helvetica Neue", Helvetica, Arial, sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; MARGIN-TOP: 1px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(22,22,22); PADDING-BOTTOM: 0px; FONT-STYLE: normal; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN-LEFT: 1px; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; OUTLINE-COLOR: ; PADDING-RIGHT: 0px; BACKGROUND-COLOR: rgb(255,255,255); MARGIN-RIGHT: 1px; TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial; overflow-wrap: break-word'><FONT class=extract>It's important to log all connectivity failures that cause a retry so that underlying problems with the application, services, or resources can be identified.</FONT></P>
<P style='FONT-SIZE: 16px; FONT-FAMILY: "Segoe UI", SegoeUI, "Helvetica Neue", Helvetica, Arial, sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; MARGIN-TOP: 1px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(22,22,22); PADDING-BOTTOM: 0px; FONT-STYLE: normal; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN-LEFT: 1px; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; OUTLINE-COLOR: ; PADDING-RIGHT: 0px; BACKGROUND-COLOR: rgb(255,255,255); MARGIN-RIGHT: 1px; TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial; overflow-wrap: break-word'><FONT class=extract>Investigate the faults that are most likely to occur for a service or a resource to discover if they're likely to be long lasting or terminal. If they are, it's better to handle the fault as an exception. The application can report or log the exception, and then try to continue either by invoking an alternative service (if one is available), or by offering degraded functionality. For more information on how to detect and handle long-lasting faults, see the<SPAN>&nbsp;</SPAN></FONT><A style="CURSOR: pointer; TEXT-DECORATION: none; COLOR: ; OUTLINE-WIDTH: 0px; OUTLINE-COLOR: ; overflow-wrap: break-word" href="https://learn.microsoft.com/en-us/azure/architecture/patterns/circuit-breaker" data-linktype="absolute-path"><FONT class=extract>Circuit Breaker pattern</FONT></A><FONT class=extract>.</FONT></P>
<DIV class=heading-wrapper style='FONT-SIZE: 16px; FONT-FAMILY: "Segoe UI", SegoeUI, "Helvetica Neue", Helvetica, Arial, sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; POSITION: relative; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(22,22,22); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; OUTLINE-COLOR: ; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial' data-heading-level="h2"><A aria-label="Section titled: When to use this pattern" class="anchor-link docon docon-link" style="OVERFLOW: hidden; CURSOR: pointer; TEXT-DECORATION: none; BORDER-TOP: 0px; CLIP: rect(1px 1px 1px 1px); HEIGHT: 1px; FONT-FAMILY: docons; BORDER-RIGHT: 0px; FONT-VARIANT: normal; WIDTH: 1px; BORDER-BOTTOM: 0px; POSITION: absolute; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: ; OUTLINE-WIDTH: 0px; PADDING-BOTTOM: 0px; DIRECTION: ltr; FONT-STYLE: normal; TEXT-ALIGN: center; PADDING-TOP: 0px; PADDING-LEFT: 0px; BORDER-LEFT: 0px; MARGIN: -1px; DISPLAY: inline-block; OUTLINE-COLOR: ; LINE-HEIGHT: 16px; PADDING-RIGHT: 0px; overflow-wrap: normal; speak: none; -webkit-font-smoothing: antialiased; transition: opacity 0.1s linear; inset-inline-start: -1.875rem; transform: translateY(-50%) scale(1); inset-block-start: 1.38125rem; clip-path: inset(50%); opacity: 0" href="https://learn.microsoft.com/en-us/azure/architecture/patterns/retry#when-to-use-this-pattern"><FONT class=extract></FONT></A>
<H2 id=when-to-use-this-pattern class=heading-anchor style="FONT-WEIGHT: 600; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 32px 0px 12px; OUTLINE-COLOR: ; LINE-HEIGHT: 1.3; PADDING-RIGHT: 0px; margin-inline-start: -1.875rem; padding-inline-start: 1.875rem"><FONT class=extract>When to use this pattern</FONT></H2></DIV>
<P style='FONT-SIZE: 16px; FONT-FAMILY: "Segoe UI", SegoeUI, "Helvetica Neue", Helvetica, Arial, sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; MARGIN-TOP: 1px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(22,22,22); PADDING-BOTTOM: 0px; FONT-STYLE: normal; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN-LEFT: 1px; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; OUTLINE-COLOR: ; PADDING-RIGHT: 0px; BACKGROUND-COLOR: rgb(255,255,255); MARGIN-RIGHT: 1px; TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial; overflow-wrap: break-word'><FONT class=extract>Use this pattern when an application could experience transient faults as it interacts with a remote service or accesses a remote resource. These faults are expected to be short lived, and repeating a request that has previously failed could succeed on a subsequent attempt.</FONT></P>
<P style='FONT-SIZE: 16px; FONT-FAMILY: "Segoe UI", SegoeUI, "Helvetica Neue", Helvetica, Arial, sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; MARGIN-TOP: 1px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(22,22,22); PADDING-BOTTOM: 0px; FONT-STYLE: normal; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN-LEFT: 1px; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; OUTLINE-COLOR: ; PADDING-RIGHT: 0px; BACKGROUND-COLOR: rgb(255,255,255); MARGIN-RIGHT: 1px; TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial; overflow-wrap: break-word'><FONT class=extract>This pattern might not be useful:</FONT></P>
<UL style='LIST-STYLE-TYPE: none; FONT-SIZE: 16px; FONT-FAMILY: "Segoe UI", SegoeUI, "Helvetica Neue", Helvetica, Arial, sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(22,22,22); PADDING-BOTTOM: 0px; FONT-STYLE: normal; PADDING-TOP: 0px; PADDING-LEFT: 0px; ORPHANS: 2; WIDOWS: 2; MARGIN: 16px 0px 16px 38px; LETTER-SPACING: normal; OUTLINE-COLOR: ; PADDING-RIGHT: 0px; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial'>
<LI style="LIST-STYLE-TYPE: disc; OUTLINE-WIDTH: 0px; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 0px; OUTLINE-COLOR: ; PADDING-RIGHT: 0px"><FONT class=extract>When a fault is likely to be long lasting, because this can affect the responsiveness of an application. The application might be wasting time and resources trying to repeat a request that's likely to fail. </FONT>
<LI style="LIST-STYLE-TYPE: disc; OUTLINE-WIDTH: 0px; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 0px; OUTLINE-COLOR: ; PADDING-RIGHT: 0px"><FONT class=extract>For handling failures that aren't due to transient faults, such as internal exceptions caused by errors in the business logic of an application. </FONT>
<LI style="LIST-STYLE-TYPE: disc; OUTLINE-WIDTH: 0px; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 0px; OUTLINE-COLOR: ; PADDING-RIGHT: 0px"><FONT class=extract>As an alternative to addressing scalability issues in a system. If an application experiences frequent busy faults, it's often a sign that the service or resource being accessed should be scaled up.</FONT></LI></UL>
<DIV class=heading-wrapper style='FONT-SIZE: 16px; FONT-FAMILY: "Segoe UI", SegoeUI, "Helvetica Neue", Helvetica, Arial, sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; POSITION: relative; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(22,22,22); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; OUTLINE-COLOR: ; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial' data-heading-level="h2"><A aria-label="Section titled: Workload design" class="anchor-link docon docon-link" style="OVERFLOW: hidden; CURSOR: pointer; TEXT-DECORATION: none; BORDER-TOP: 0px; CLIP: rect(1px 1px 1px 1px); HEIGHT: 1px; FONT-FAMILY: docons; BORDER-RIGHT: 0px; FONT-VARIANT: normal; WIDTH: 1px; BORDER-BOTTOM: 0px; POSITION: absolute; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: ; OUTLINE-WIDTH: 0px; PADDING-BOTTOM: 0px; DIRECTION: ltr; FONT-STYLE: normal; TEXT-ALIGN: center; PADDING-TOP: 0px; PADDING-LEFT: 0px; BORDER-LEFT: 0px; MARGIN: -1px; DISPLAY: inline-block; OUTLINE-COLOR: ; LINE-HEIGHT: 16px; PADDING-RIGHT: 0px; overflow-wrap: normal; speak: none; -webkit-font-smoothing: antialiased; transition: opacity 0.1s linear; inset-inline-start: -1.875rem; transform: translateY(-50%) scale(1); inset-block-start: 1.38125rem; clip-path: inset(50%); opacity: 0" href="https://learn.microsoft.com/en-us/azure/architecture/patterns/retry#workload-design"><FONT class=extract></FONT></A>
<H2 id=workload-design class=heading-anchor style="FONT-WEIGHT: 600; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 32px 0px 12px; OUTLINE-COLOR: ; LINE-HEIGHT: 1.3; PADDING-RIGHT: 0px; margin-inline-start: -1.875rem; padding-inline-start: 1.875rem"><FONT class=extract>Workload design</FONT></H2></DIV>
<P style='FONT-SIZE: 16px; FONT-FAMILY: "Segoe UI", SegoeUI, "Helvetica Neue", Helvetica, Arial, sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; MARGIN-TOP: 1px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(22,22,22); PADDING-BOTTOM: 0px; FONT-STYLE: normal; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN-LEFT: 1px; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; OUTLINE-COLOR: ; PADDING-RIGHT: 0px; BACKGROUND-COLOR: rgb(255,255,255); MARGIN-RIGHT: 1px; TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial; overflow-wrap: break-word'><FONT class=extract>An architect should evaluate how the Retry pattern can be used in their workload's design to address the goals and principles covered in the<SPAN>&nbsp;</SPAN></FONT><A style="CURSOR: pointer; TEXT-DECORATION: none; COLOR: ; OUTLINE-WIDTH: 0px; OUTLINE-COLOR: ; overflow-wrap: break-word" href="https://learn.microsoft.com/en-us/azure/well-architected/pillars" data-linktype="absolute-path"><FONT class=extract>Azure Well-Architected Framework pillars</FONT></A><FONT class=extract>. For example:</FONT></P>
<DIV class="buttons buttons-right margin-bottom-none margin-top-sm" style='FONT-SIZE: 16px; FONT-FAMILY: "Segoe UI", SegoeUI, "Helvetica Neue", Helvetica, Arial, sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(22,22,22); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; DISPLAY: flex; LETTER-SPACING: normal; OUTLINE-COLOR: ; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial; margin-block-start: 1.5rem; margin-block-end: 1rem; flex-wrap: wrap; justify-content: flex-end; align-items: center'><FONT class=extract></FONT></DIV>
<DIV class=has-inner-focus style='FONT-SIZE: 16px; FONT-FAMILY: "Segoe UI", SegoeUI, "Helvetica Neue", Helvetica, Arial, sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(22,22,22); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; OUTLINE-COLOR: ; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial'>
<TABLE aria-label="Table 1" class=table style="BORDER-TOP: 1px solid; BORDER-RIGHT: 1px solid; WIDTH: 583px; BORDER-COLLAPSE: collapse; TABLE-LAYOUT: auto; BORDER-BOTTOM: 1px solid; BORDER-SPACING: 0px; BORDER-LEFT: 1px solid; OUTLINE-COLOR: ">
<THEAD style="OUTLINE-COLOR: ">
<TR style="OUTLINE-COLOR: ">
<TH style="VERTICAL-ALIGN: top; TEXT-ALIGN: left; PADDING-TOP: 1px; PADDING-LEFT: 1px; DISPLAY: table-cell; OUTLINE-COLOR: ; LINE-HEIGHT: 1.5; PADDING-RIGHT: 1px; overflow-wrap: break-word; border-block-start: 1px solid var(--theme-table-border-dark)"><FONT class=extract>Pillar</FONT></TH>
<TH style="VERTICAL-ALIGN: top; TEXT-ALIGN: left; PADDING-TOP: 1px; PADDING-LEFT: 1px; DISPLAY: table-cell; OUTLINE-COLOR: ; LINE-HEIGHT: 1.5; PADDING-RIGHT: 1px; overflow-wrap: break-word; border-block-start: 1px solid var(--theme-table-border-dark)"><FONT class=extract>How this pattern supports pillar goals</FONT></TH></TR></THEAD>
<TBODY style="OUTLINE-COLOR: ">
<TR style="OUTLINE-COLOR: ">
<TD style="VERTICAL-ALIGN: top; TEXT-ALIGN: left; PADDING-TOP: 1px; PADDING-LEFT: 1px; DISPLAY: table-cell; OUTLINE-COLOR: ; LINE-HEIGHT: 1.5; PADDING-RIGHT: 1px; overflow-wrap: break-word; border-block-start: 1px solid var(--theme-table-border-dark)"><A style="CURSOR: pointer; TEXT-DECORATION: none; COLOR: ; OUTLINE-WIDTH: 0px; OUTLINE-COLOR: ; overflow-wrap: break-word" href="https://learn.microsoft.com/en-us/azure/well-architected/reliability/checklist" data-linktype="absolute-path"><FONT class=extract>Reliability</FONT></A><FONT class=extract><SPAN>&nbsp;</SPAN>design decisions help your workload become<SPAN>&nbsp;</SPAN><STRONG style="FONT-WEIGHT: 600; OUTLINE-COLOR: ">resilient</STRONG><SPAN>&nbsp;</SPAN>to malfunction and to ensure that it<SPAN>&nbsp;</SPAN><STRONG style="FONT-WEIGHT: 600; OUTLINE-COLOR: ">recovers</STRONG><SPAN>&nbsp;</SPAN>to a fully functioning state after a failure occurs.</FONT></TD>
<TD style="VERTICAL-ALIGN: top; TEXT-ALIGN: left; PADDING-TOP: 1px; PADDING-LEFT: 1px; DISPLAY: table-cell; OUTLINE-COLOR: ; LINE-HEIGHT: 1.5; PADDING-RIGHT: 1px; overflow-wrap: break-word; border-block-start: 1px solid var(--theme-table-border-dark)"><FONT class=extract>Mitigating transient faults in a distributed system is a core technique for improving a workload's resilience.<BR style="OUTLINE-COLOR: "><BR style="OUTLINE-COLOR: ">-<SPAN>&nbsp;</SPAN></FONT><A style="CURSOR: pointer; TEXT-DECORATION: none; COLOR: ; OUTLINE-WIDTH: 0px; OUTLINE-COLOR: ; overflow-wrap: break-word" href="https://learn.microsoft.com/en-us/azure/well-architected/reliability/self-preservation" data-linktype="absolute-path"><FONT class=extract>RE:07 Self-preservation</FONT></A><BR style="OUTLINE-COLOR: "><FONT class=extract>-<SPAN>&nbsp;</SPAN></FONT><A style="CURSOR: pointer; TEXT-DECORATION: none; COLOR: ; OUTLINE-WIDTH: 0px; OUTLINE-COLOR: ; overflow-wrap: break-word" href="https://learn.microsoft.com/en-us/azure/well-architected/reliability/handle-transient-faults" data-linktype="absolute-path"><FONT class=extract>RE:07 Transient faults</FONT></A></TD></TR></TBODY></TABLE></DIV>
<P style='FONT-SIZE: 16px; FONT-FAMILY: "Segoe UI", SegoeUI, "Helvetica Neue", Helvetica, Arial, sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; MARGIN-TOP: 1px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(22,22,22); PADDING-BOTTOM: 0px; FONT-STYLE: normal; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN-LEFT: 1px; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; OUTLINE-COLOR: ; PADDING-RIGHT: 0px; BACKGROUND-COLOR: rgb(255,255,255); MARGIN-RIGHT: 1px; TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial; overflow-wrap: break-word'><FONT class=extract>As with any design decision, consider any tradeoffs against the goals of the other pillars that might be introduced with this pattern.</FONT></P>
<DIV class=heading-wrapper style='FONT-SIZE: 16px; FONT-FAMILY: "Segoe UI", SegoeUI, "Helvetica Neue", Helvetica, Arial, sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; POSITION: relative; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(22,22,22); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; OUTLINE-COLOR: ; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial' data-heading-level="h2"><A aria-label="Section titled: Example" class="anchor-link docon docon-link" style="OVERFLOW: hidden; CURSOR: pointer; TEXT-DECORATION: none; BORDER-TOP: 0px; CLIP: rect(1px 1px 1px 1px); HEIGHT: 1px; FONT-FAMILY: docons; BORDER-RIGHT: 0px; FONT-VARIANT: normal; WIDTH: 1px; BORDER-BOTTOM: 0px; POSITION: absolute; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: ; OUTLINE-WIDTH: 0px; PADDING-BOTTOM: 0px; DIRECTION: ltr; FONT-STYLE: normal; TEXT-ALIGN: center; PADDING-TOP: 0px; PADDING-LEFT: 0px; BORDER-LEFT: 0px; MARGIN: -1px; DISPLAY: inline-block; OUTLINE-COLOR: ; LINE-HEIGHT: 16px; PADDING-RIGHT: 0px; overflow-wrap: normal; speak: none; -webkit-font-smoothing: antialiased; transition: opacity 0.1s linear; inset-inline-start: -1.875rem; transform: translateY(-50%) scale(1); inset-block-start: 1.38125rem; clip-path: inset(50%); opacity: 0" href="https://learn.microsoft.com/en-us/azure/architecture/patterns/retry#example"><FONT class=extract></FONT></A>
<H2 id=example class=heading-anchor style="FONT-WEIGHT: 600; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 32px 0px 12px; OUTLINE-COLOR: ; LINE-HEIGHT: 1.3; PADDING-RIGHT: 0px; margin-inline-start: -1.875rem; padding-inline-start: 1.875rem"><FONT class=extract>Example</FONT></H2></DIV>
<P style='FONT-SIZE: 16px; FONT-FAMILY: "Segoe UI", SegoeUI, "Helvetica Neue", Helvetica, Arial, sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; MARGIN-TOP: 1px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(22,22,22); PADDING-BOTTOM: 0px; FONT-STYLE: normal; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN-LEFT: 1px; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; OUTLINE-COLOR: ; PADDING-RIGHT: 0px; BACKGROUND-COLOR: rgb(255,255,255); MARGIN-RIGHT: 1px; TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial; overflow-wrap: break-word'><FONT class=extract>This example in C# illustrates an implementation of the Retry pattern. The<SPAN>&nbsp;</SPAN><CODE style='FONT-SIZE: 13px; FONT-FAMILY: SFMono-Regular, Consolas, "Liberation Mono", Menlo, Courier, monospace; PADDING-BOTTOM: 0.1em; DIRECTION: ltr; PADDING-TOP: 0.1em; PADDING-LEFT: 0.2em; OUTLINE-COLOR: ; PADDING-RIGHT: 0.2em; overflow-wrap: break-word; border-radius: 3px'>OperationWithBasicRetryAsync</CODE><SPAN>&nbsp;</SPAN>method, shown below, invokes an external service asynchronously through the<SPAN>&nbsp;</SPAN><CODE style='FONT-SIZE: 13px; FONT-FAMILY: SFMono-Regular, Consolas, "Liberation Mono", Menlo, Courier, monospace; PADDING-BOTTOM: 0.1em; DIRECTION: ltr; PADDING-TOP: 0.1em; PADDING-LEFT: 0.2em; OUTLINE-COLOR: ; PADDING-RIGHT: 0.2em; overflow-wrap: break-word; border-radius: 3px'>TransientOperationAsync</CODE><SPAN>&nbsp;</SPAN>method. The details of the<SPAN>&nbsp;</SPAN><CODE style='FONT-SIZE: 13px; FONT-FAMILY: SFMono-Regular, Consolas, "Liberation Mono", Menlo, Courier, monospace; PADDING-BOTTOM: 0.1em; DIRECTION: ltr; PADDING-TOP: 0.1em; PADDING-LEFT: 0.2em; OUTLINE-COLOR: ; PADDING-RIGHT: 0.2em; overflow-wrap: break-word; border-radius: 3px'>TransientOperationAsync</CODE><SPAN>&nbsp;</SPAN>method will be specific to the service and are omitted from the sample code.</FONT></P>
<DIV id=code-try-0 class=codeHeader style='BOX-SIZING: content-box; FONT-FAMILY: "Segoe UI", SegoeUI, "Helvetica Neue", Helvetica, Arial, sans-serif; BORDER-TOP-COLOR: ; WHITE-SPACE: normal; WORD-SPACING: 0px; MARGIN-TOP: 16px; BORDER-BOTTOM: 0px; TEXT-TRANSFORM: none; BORDER-LEFT-COLOR: ; FONT-WEIGHT: 400; COLOR: rgb(22,22,22); FONT-STYLE: normal; MIN-HEIGHT: 30px; ORPHANS: 2; WIDOWS: 2; DISPLAY: flex; BORDER-RIGHT-COLOR: ; LETTER-SPACING: normal; OUTLINE-COLOR: ; TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial; border-image-source: ; border-image-slice: ; border-image-width: ; border-image-outset: ; border-image-repeat: ; flex-direction: row' data-bi-name="code-header"><SPAN class=language style="PADDING-BOTTOM: 2px; PADDING-TOP: 2px; PADDING-LEFT: 16px; DISPLAY: flex; OUTLINE-COLOR: ; PADDING-RIGHT: 16px; align-items: center; flex-grow: 1"><FONT class=extract>C#</FONT></SPAN></DIV><PRE role=group tabIndex=0 aria-label="Horizontally scrollable code" class=has-inner-focus style='OVERFLOW: auto; FONT-FAMILY: SFMono-Regular, Consolas, "Liberation Mono", Menlo, Courier, monospace !important; WHITE-SPACE: pre; WORD-SPACING: 0px; TEXT-TRANSFORM: none; WORD-BREAK: normal; FONT-WEIGHT: 400; COLOR: rgb(22,22,22); FONT-STYLE: normal; PADDING-TOP: 1px; PADDING-LEFT: 1px; ORPHANS: 2; WIDOWS: 2; MARGIN: 0px; LETTER-SPACING: normal; OUTLINE-COLOR: ; LINE-HEIGHT: 1.3571; PADDING-RIGHT: 1px; TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial; overflow-wrap: normal; -webkit-font-smoothing: auto; tab-size: 4; hyphens: none'><CODE class=lang-csharp style='FONT-SIZE: 1em; BORDER-TOP: 0px; FONT-FAMILY: SFMono-Regular, Consolas, "Liberation Mono", Menlo, Courier, monospace; BORDER-RIGHT: 0px; BORDER-BOTTOM: 0px; POSITION: relative; PADDING-BOTTOM: 0px; DIRECTION: ltr; PADDING-TOP: 0px; PADDING-LEFT: 0px; BORDER-LEFT: 0px; DISPLAY: block; OUTLINE-COLOR: ; LINE-HEIGHT: 1.3571; PADDING-RIGHT: 0px'><SPAN style="OUTLINE-COLOR: "><FONT class=extract><SPAN class=hljs-keyword style="COLOR: rgb(1,1,253); OUTLINE-COLOR: ">private</SPAN> <SPAN class=hljs-built_in style="COLOR: rgb(1,1,253); OUTLINE-COLOR: ">int</SPAN> retryCount = <SPAN class=hljs-number style="OUTLINE-COLOR: ">3</SPAN>;
<SPAN class=hljs-keyword style="COLOR: rgb(1,1,253); OUTLINE-COLOR: ">private</SPAN> <SPAN class=hljs-keyword style="COLOR: rgb(1,1,253); OUTLINE-COLOR: ">readonly</SPAN> TimeSpan delay = TimeSpan.FromSeconds(<SPAN class=hljs-number style="OUTLINE-COLOR: ">5</SPAN>);

<SPAN class=hljs-function style="OUTLINE-COLOR: "><SPAN class=hljs-keyword style="COLOR: rgb(1,1,253); OUTLINE-COLOR: ">public</SPAN> <SPAN class=hljs-keyword style="COLOR: rgb(1,1,253); OUTLINE-COLOR: ">async</SPAN> Task <SPAN class=hljs-title style="COLOR: rgb(0,104,129); OUTLINE-COLOR: ">OperationWithBasicRetryAsync</SPAN>(<SPAN class=hljs-params style="OUTLINE-COLOR: "></SPAN>)</SPAN>
{
  <SPAN class=hljs-built_in style="COLOR: rgb(1,1,253); OUTLINE-COLOR: ">int</SPAN> currentRetry = <SPAN class=hljs-number style="OUTLINE-COLOR: ">0</SPAN>;

  <SPAN class=hljs-keyword style="COLOR: rgb(1,1,253); OUTLINE-COLOR: ">for</SPAN> (;;)
  {
    <SPAN class=hljs-keyword style="COLOR: rgb(1,1,253); OUTLINE-COLOR: ">try</SPAN>
    {
      <SPAN class=hljs-comment style="COLOR: green; OUTLINE-COLOR: ">// Call external service.</SPAN>
      <SPAN class=hljs-keyword style="COLOR: rgb(1,1,253); OUTLINE-COLOR: ">await</SPAN> TransientOperationAsync();

      <SPAN class=hljs-comment style="COLOR: green; OUTLINE-COLOR: ">// Return or break.</SPAN>
      <SPAN class=hljs-keyword style="COLOR: rgb(1,1,253); OUTLINE-COLOR: ">break</SPAN>;
    }
    catch (Exception ex)
    {
      Trace.TraceError(<SPAN class=hljs-string style="COLOR: rgb(163,21,21); OUTLINE-COLOR: ">"Operation Exception"</SPAN>);

      currentRetry++;

      <SPAN class=hljs-comment style="COLOR: green; OUTLINE-COLOR: ">// Check if the exception thrown was a transient exception</SPAN>
      <SPAN class=hljs-comment style="COLOR: green; OUTLINE-COLOR: ">// based on the logic in the error detection strategy.</SPAN>
      <SPAN class=hljs-comment style="COLOR: green; OUTLINE-COLOR: ">// Determine whether to retry the operation, as well as how</SPAN>
      <SPAN class=hljs-comment style="COLOR: green; OUTLINE-COLOR: ">// long to wait, based on the retry strategy.</SPAN>
      <SPAN class=hljs-keyword style="COLOR: rgb(1,1,253); OUTLINE-COLOR: ">if</SPAN> (currentRetry &gt; <SPAN class=hljs-keyword style="COLOR: rgb(1,1,253); OUTLINE-COLOR: ">this</SPAN>.retryCount || !IsTransient(ex))
      {
        <SPAN class=hljs-comment style="COLOR: green; OUTLINE-COLOR: ">// If this isn't a transient error or we shouldn't retry,</SPAN>
        <SPAN class=hljs-comment style="COLOR: green; OUTLINE-COLOR: ">// rethrow the exception.</SPAN>
        <SPAN class=hljs-keyword style="COLOR: rgb(1,1,253); OUTLINE-COLOR: ">throw</SPAN>;
      }
    }

    <SPAN class=hljs-comment style="COLOR: green; OUTLINE-COLOR: ">// Wait to retry the operation.</SPAN>
    <SPAN class=hljs-comment style="COLOR: green; OUTLINE-COLOR: ">// Consider calculating an exponential delay here and</SPAN>
    <SPAN class=hljs-comment style="COLOR: green; OUTLINE-COLOR: ">// using a strategy best suited for the operation and fault.</SPAN>
    <SPAN class=hljs-keyword style="COLOR: rgb(1,1,253); OUTLINE-COLOR: ">await</SPAN> Task.Delay(delay);
  }
}

<SPAN class=hljs-comment style="COLOR: green; OUTLINE-COLOR: ">// Async method that wraps a call to a remote service (details not shown).</SPAN>
<SPAN class=hljs-function style="OUTLINE-COLOR: "><SPAN class=hljs-keyword style="COLOR: rgb(1,1,253); OUTLINE-COLOR: ">private</SPAN> <SPAN class=hljs-keyword style="COLOR: rgb(1,1,253); OUTLINE-COLOR: ">async</SPAN> Task <SPAN class=hljs-title style="COLOR: rgb(0,104,129); OUTLINE-COLOR: ">TransientOperationAsync</SPAN>(<SPAN class=hljs-params style="OUTLINE-COLOR: "></SPAN>)</SPAN>
{
  ...
}
</FONT></SPAN></CODE></PRE>
<P style='FONT-SIZE: 16px; FONT-FAMILY: "Segoe UI", SegoeUI, "Helvetica Neue", Helvetica, Arial, sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; MARGIN-TOP: 1px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(22,22,22); PADDING-BOTTOM: 0px; FONT-STYLE: normal; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN-LEFT: 1px; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; OUTLINE-COLOR: ; PADDING-RIGHT: 0px; BACKGROUND-COLOR: rgb(255,255,255); MARGIN-RIGHT: 1px; TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial; overflow-wrap: break-word'><FONT class=extract>The statement that invokes this method is contained in a try/catch block wrapped in a for loop. The for loop exits if the call to the<SPAN>&nbsp;</SPAN><CODE style='FONT-SIZE: 13px; FONT-FAMILY: SFMono-Regular, Consolas, "Liberation Mono", Menlo, Courier, monospace; PADDING-BOTTOM: 0.1em; DIRECTION: ltr; PADDING-TOP: 0.1em; PADDING-LEFT: 0.2em; OUTLINE-COLOR: ; PADDING-RIGHT: 0.2em; overflow-wrap: break-word; border-radius: 3px'>TransientOperationAsync</CODE><SPAN>&nbsp;</SPAN>method succeeds without throwing an exception. If the<SPAN>&nbsp;</SPAN><CODE style='FONT-SIZE: 13px; FONT-FAMILY: SFMono-Regular, Consolas, "Liberation Mono", Menlo, Courier, monospace; PADDING-BOTTOM: 0.1em; DIRECTION: ltr; PADDING-TOP: 0.1em; PADDING-LEFT: 0.2em; OUTLINE-COLOR: ; PADDING-RIGHT: 0.2em; overflow-wrap: break-word; border-radius: 3px'>TransientOperationAsync</CODE><SPAN>&nbsp;</SPAN>method fails, the catch block examines the reason for the failure. If it's believed to be a transient error the code waits for a short delay before retrying the operation.</FONT></P>
<P style='FONT-SIZE: 16px; FONT-FAMILY: "Segoe UI", SegoeUI, "Helvetica Neue", Helvetica, Arial, sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; MARGIN-TOP: 1px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(22,22,22); PADDING-BOTTOM: 0px; FONT-STYLE: normal; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN-LEFT: 1px; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; OUTLINE-COLOR: ; PADDING-RIGHT: 0px; BACKGROUND-COLOR: rgb(255,255,255); MARGIN-RIGHT: 1px; TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial; overflow-wrap: break-word'><FONT class=extract>The for loop also tracks the number of times that the operation has been attempted, and if the code fails three times the exception is assumed to be more long lasting. If the exception isn't transient or it's long lasting, the catch handler throws an exception. This exception exits the for loop and should be caught by the code that invokes the<SPAN>&nbsp;</SPAN><CODE style='FONT-SIZE: 13px; FONT-FAMILY: SFMono-Regular, Consolas, "Liberation Mono", Menlo, Courier, monospace; PADDING-BOTTOM: 0.1em; DIRECTION: ltr; PADDING-TOP: 0.1em; PADDING-LEFT: 0.2em; OUTLINE-COLOR: ; PADDING-RIGHT: 0.2em; overflow-wrap: break-word; border-radius: 3px'>OperationWithBasicRetryAsync</CODE><SPAN>&nbsp;</SPAN>method.</FONT></P>
<P style='FONT-SIZE: 16px; FONT-FAMILY: "Segoe UI", SegoeUI, "Helvetica Neue", Helvetica, Arial, sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; MARGIN-TOP: 1px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(22,22,22); PADDING-BOTTOM: 0px; FONT-STYLE: normal; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN-LEFT: 1px; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; OUTLINE-COLOR: ; PADDING-RIGHT: 0px; BACKGROUND-COLOR: rgb(255,255,255); MARGIN-RIGHT: 1px; TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial; overflow-wrap: break-word'><FONT class=extract>The<SPAN>&nbsp;</SPAN><CODE style='FONT-SIZE: 13px; FONT-FAMILY: SFMono-Regular, Consolas, "Liberation Mono", Menlo, Courier, monospace; PADDING-BOTTOM: 0.1em; DIRECTION: ltr; PADDING-TOP: 0.1em; PADDING-LEFT: 0.2em; OUTLINE-COLOR: ; PADDING-RIGHT: 0.2em; overflow-wrap: break-word; border-radius: 3px'>IsTransient</CODE><SPAN>&nbsp;</SPAN>method, shown below, checks for a specific set of exceptions that are relevant to the environment the code is run in. The definition of a transient exception will vary according to the resources being accessed and the environment the operation is being performed in.</FONT></P>
<DIV id=code-try-1 class=codeHeader style='BOX-SIZING: content-box; FONT-FAMILY: "Segoe UI", SegoeUI, "Helvetica Neue", Helvetica, Arial, sans-serif; BORDER-TOP-COLOR: ; WHITE-SPACE: normal; WORD-SPACING: 0px; MARGIN-TOP: 16px; BORDER-BOTTOM: 0px; TEXT-TRANSFORM: none; BORDER-LEFT-COLOR: ; FONT-WEIGHT: 400; COLOR: rgb(22,22,22); FONT-STYLE: normal; MIN-HEIGHT: 30px; ORPHANS: 2; WIDOWS: 2; DISPLAY: flex; BORDER-RIGHT-COLOR: ; LETTER-SPACING: normal; OUTLINE-COLOR: ; TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial; border-image-source: ; border-image-slice: ; border-image-width: ; border-image-outset: ; border-image-repeat: ; flex-direction: row' data-bi-name="code-header"><SPAN class=language style="PADDING-BOTTOM: 2px; PADDING-TOP: 2px; PADDING-LEFT: 16px; DISPLAY: flex; OUTLINE-COLOR: ; PADDING-RIGHT: 16px; align-items: center; flex-grow: 1"><FONT class=extract>C#</FONT></SPAN></DIV><PRE role=group tabIndex=0 aria-label="Horizontally scrollable code" class=has-inner-focus style='OVERFLOW: auto; FONT-FAMILY: SFMono-Regular, Consolas, "Liberation Mono", Menlo, Courier, monospace !important; WHITE-SPACE: pre; WORD-SPACING: 0px; TEXT-TRANSFORM: none; WORD-BREAK: normal; FONT-WEIGHT: 400; COLOR: rgb(22,22,22); FONT-STYLE: normal; PADDING-TOP: 1px; PADDING-LEFT: 1px; ORPHANS: 2; WIDOWS: 2; MARGIN: 0px; LETTER-SPACING: normal; OUTLINE-COLOR: ; LINE-HEIGHT: 1.3571; PADDING-RIGHT: 1px; TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial; overflow-wrap: normal; -webkit-font-smoothing: auto; tab-size: 4; hyphens: none'><CODE class=lang-csharp style='FONT-SIZE: 1em; BORDER-TOP: 0px; FONT-FAMILY: SFMono-Regular, Consolas, "Liberation Mono", Menlo, Courier, monospace; BORDER-RIGHT: 0px; BORDER-BOTTOM: 0px; POSITION: relative; PADDING-BOTTOM: 0px; DIRECTION: ltr; PADDING-TOP: 0px; PADDING-LEFT: 0px; BORDER-LEFT: 0px; DISPLAY: block; OUTLINE-COLOR: ; LINE-HEIGHT: 1.3571; PADDING-RIGHT: 0px'><SPAN style="OUTLINE-COLOR: "><FONT class=extract><SPAN class=hljs-function style="OUTLINE-COLOR: "><SPAN class=hljs-keyword style="COLOR: rgb(1,1,253); OUTLINE-COLOR: ">private</SPAN> <SPAN class=hljs-built_in style="COLOR: rgb(1,1,253); OUTLINE-COLOR: ">bool</SPAN> <SPAN class=hljs-title style="COLOR: rgb(0,104,129); OUTLINE-COLOR: ">IsTransient</SPAN>(<SPAN class=hljs-params style="OUTLINE-COLOR: ">Exception ex</SPAN>)</SPAN>
{
  <SPAN class=hljs-comment style="COLOR: green; OUTLINE-COLOR: ">// Determine if the exception is transient.</SPAN>
  <SPAN class=hljs-comment style="COLOR: green; OUTLINE-COLOR: ">// In some cases this is as simple as checking the exception type, in other</SPAN>
  <SPAN class=hljs-comment style="COLOR: green; OUTLINE-COLOR: ">// cases it might be necessary to inspect other properties of the exception.</SPAN>
  <SPAN class=hljs-keyword style="COLOR: rgb(1,1,253); OUTLINE-COLOR: ">if</SPAN> (ex <SPAN class=hljs-keyword style="COLOR: rgb(1,1,253); OUTLINE-COLOR: ">is</SPAN> OperationTransientException)
    <SPAN class=hljs-keyword style="COLOR: rgb(1,1,253); OUTLINE-COLOR: ">return</SPAN> <SPAN class=hljs-literal style="COLOR: rgb(7,112,74); OUTLINE-COLOR: ">true</SPAN>;

  <SPAN class=hljs-keyword style="COLOR: rgb(1,1,253); OUTLINE-COLOR: ">var</SPAN> webException = ex <SPAN class=hljs-keyword style="COLOR: rgb(1,1,253); OUTLINE-COLOR: ">as</SPAN> WebException;
  <SPAN class=hljs-keyword style="COLOR: rgb(1,1,253); OUTLINE-COLOR: ">if</SPAN> (webException != <SPAN class=hljs-literal style="COLOR: rgb(7,112,74); OUTLINE-COLOR: ">null</SPAN>)
  {
    <SPAN class=hljs-comment style="COLOR: green; OUTLINE-COLOR: ">// If the web exception contains one of the following status values</SPAN>
    <SPAN class=hljs-comment style="COLOR: green; OUTLINE-COLOR: ">// it might be transient.</SPAN>
    <SPAN class=hljs-keyword style="COLOR: rgb(1,1,253); OUTLINE-COLOR: ">return</SPAN> <SPAN class=hljs-keyword style="COLOR: rgb(1,1,253); OUTLINE-COLOR: ">new</SPAN>[] {WebExceptionStatus.ConnectionClosed,
                  WebExceptionStatus.Timeout,
                  WebExceptionStatus.RequestCanceled }.
            Contains(webException.Status);
  }

  <SPAN class=hljs-comment style="COLOR: green; OUTLINE-COLOR: ">// Additional exception checking logic goes here.</SPAN>
  <SPAN class=hljs-keyword style="COLOR: rgb(1,1,253); OUTLINE-COLOR: ">return</SPAN> <SPAN class=hljs-literal style="COLOR: rgb(7,112,74); OUTLINE-COLOR: ">false</SPAN>;
}</FONT></SPAN></CODE></PRE>