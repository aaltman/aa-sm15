<b> : </b><STRONG>1.2 Denormalization</STRONG></H3>
<P><SPAN style="FONT-WEIGHT: 400">When implementing a sharded database architecture, you need to take special consideration about how the relational model spans shards. Relational data models are optimized for data with many cross-table relationships. If shards aren&#8217;t isolated, the cluster will spend a lot of time on multi-shard queries and upholding multi-shard consistency.</SPAN></P>
<P><SPAN style="FONT-WEIGHT: 400">This process of making sure there aren&#8217;t relational constraints between different shards is called </SPAN><B>denormalization</B><SPAN style="FONT-WEIGHT: 400">. Denormalization is achieved by duplicating data (which adds write complexity) and grouping data so that it can be accessed in a single row. Notably, denormalized data is different from </SPAN><B>non-normalized</B><SPAN style="FONT-WEIGHT: 400"> data where relationships between data are unknown rather than located on a single table.</SPAN></P>
<P><SPAN style="FONT-WEIGHT: 400">As an example, let&#8217;s think about where to store data for messages between two friends. Both users want fast responses, but what if their user records are split up onto different shards? We can store the messages in both places. This increases write time slightly, because it means the data is written twice. But it also ensures the message data is fast to look up regardless which&nbsp; friend is checking their messages.</SPAN></P>
<P><SPAN style="FONT-WEIGHT: 400">If denormalization isn&#8217;t possible (multi-shard queries are necessary,) then the service needs to consider the tradeoffs between consistency and availability. You can read more about this tradeoff and the CAP theorem in </SPAN><A href="https://igotanoffer.com/blogs/tech/databases-system-design-interview"><SPAN style="FONT-WEIGHT: 400">our article on databases</SPAN></A><SPAN style="FONT-WEIGHT: 400">. </SPAN>