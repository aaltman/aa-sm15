<b> : </b><STRONG>2.3 Name Node</STRONG></H3>
<P><SPAN style="FONT-WEIGHT: 400">The last approach is any implementation that uses a central "name node" to coordinate the mapping of data to shard keys. What's nice about this approach is it makes the business logic very clear and easy to update based on usage patterns. </SPAN></P>
<P><SPAN style="FONT-WEIGHT: 400">For example, an important client might want to guarantee a precise location distribution of their data on your service. You can base the shard key on tennant it and have a clear mapping in the name node that assigns their tenant to shards in their desired geographic regions and is easy to update if their needs change. </SPAN></P>
<P><SPAN style="FONT-WEIGHT: 400">The main downside is a name node is a central point of failure, and additional care is needed to implement good replication and failovers for that node. This approach also adds an additional step of consulting the name node in the lookup process, which can slow down database operations.</SPAN>