<b> : </b><STRONG>2.2 Hash</STRONG></H3>
<P><SPAN style="FONT-WEIGHT: 400">To address the issue of imbalanced shards, data can be distributed based on a hash of part of the data. An effective hash function will randomize and distribute incoming data to prevent any access patterns that could overwhelm a node. For example, the profile pages of celebrities get substantially more traffic than the average user, so a hash function can be used to randomly distribute these celebrity users and prevent hotspots. </SPAN></P>
<P><SPAN style="FONT-WEIGHT: 400">One major advantage of a hash-based sharded architecture is the shard key can be computed by any server that knows the hash function, so there's no centralized point of failure.</SPAN></P>
<P><SPAN style="FONT-WEIGHT: 400">One big downside of hashing is adding shards can require a lot of overhead, depending on the implementation. </SPAN><B>Consistent hashing</B><SPAN style="FONT-WEIGHT: 400"> limits this by guaranteeing a minimum amount of data will have to be moved when a new node is added.</SPAN>