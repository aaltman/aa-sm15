<b> : </b><B>1. Sharding Basics</B></H2>
<P><SPAN style="FONT-WEIGHT: 400">Modern software services increasingly collect and use more data than can fit on a single machine. The capacity of the database server can be increased, but eventually runs into a physical limit. The alternative is splitting up data across a cluster of database servers.&nbsp; </SPAN></P>
<P><B>Database sharding</B><SPAN style="FONT-WEIGHT: 400"> splits up data in a particular way so that data access patterns can remain as efficient as possible. A</SPAN><B> shard</B><SPAN style="FONT-WEIGHT: 400"> is a </SPAN><B>horizontal partition</B><SPAN style="FONT-WEIGHT: 400">, meaning the database table is split up by drawing a horizontal line between rows. This is in contrast to a </SPAN><B>vertical partition</B><SPAN style="FONT-WEIGHT: 400">, where partitions are made between columns. </SPAN></P>
<P><SPAN style="FONT-WEIGHT: 400"><IMG alt="Horizontal and vertical partition for sharding" src="https://d3no4ktch0fdq4.cloudfront.net/public/CACHE/images/blog-articles/content-images/Diagram_13_2x_bced9a00-2ff9-45fa-a633-9602824da786_1024x1024/b266575031e75662c59602c6f40df0d5.webp" width=660 height=730 loading="lazy"></SPAN></P>
<P><SPAN style="FONT-WEIGHT: 400">The goal of sharding is to increase database capacity, but another effect is that the database can handle more traffic because any one server in the cluster only has to respond to a fraction of the total requests.</SPAN></P>
<P><SPAN style="FONT-WEIGHT: 400">There are a couple of key features a sharded architecture needs to be efficient. We&#8217;ll go over how it&#8217;s implemented with shard keys, and the importance of denormalizing data. Then we&#8217;ll cover when to use and when not to use sharding. Let&#8217;s jump in. </SPAN>