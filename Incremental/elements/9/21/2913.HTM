<b> : </b><STRONG>1.5 Cache performance</STRONG></H3>
<P>Cache performance is affected by the way data is mapped into the cache. Data is located the fastest in a cache if it&#8217;s mapped to a single cache entry, which is called a <STRONG>direct-mapped cache</STRONG>. But if too many pieces of data are mapped to the same location, the resulting <STRONG>contention</STRONG> increases the number of cache misses because relevant data is replaced too soon.&nbsp;</P>
<P><IMG alt="Direct mapped cache" src="https://d3no4ktch0fdq4.cloudfront.net/public/CACHE/images/blog-articles/content-images/Diagram_2_2x_1_1024x1024/b73efa1bc324a76948fd6ac980499f31.webp" width=660 height=495 loading="lazy"></P>
<P>The widely accepted solution is to use a <STRONG>set-associative cache</STRONG> design. Each piece of data is mapped to a set of cache entries, which are all checked to determine a cache hit or miss. This is slightly slower than only having to check a single entry, but gives flexibility around choosing what data to keep in the cache. Below, we&#8217;ll talk more about cache replacement algorithms and their design tradeoffs.&nbsp;</P>
<P><IMG alt="Set-associative cache" src="https://d3no4ktch0fdq4.cloudfront.net/public/CACHE/images/blog-articles/content-images/Diagram_3_2x_1_1024x1024/539982ead7ef0eb9e029853f86cdc0e9.webp" width=660 height=495 loading="lazy"></P>
<P>One final thing to note is the performance of a cache on startup. Since caching improves repeated data access, there&#8217;s no performance benefit on a <STRONG>cold start</STRONG>. A cache can be <STRONG>warmed up</STRONG> to make sure it doesn&#8217;t lag on startup by <STRONG>seeding</STRONG> it with the right data before any operations occur. This can be a set of static data that is known beforehand to be relevant, or predicted based on previous usage patterns.&nbsp;</P>
<P>Now that we&#8217;ve covered the basics of caching, let&#8217;s look more closely at different ways of implementing a cache. First, we&#8217;ll look at &#8220;policies&#8221; for writing to a cache.&nbsp;