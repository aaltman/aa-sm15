<H2><B><FONT class=extract>1. Messaging-oriented middleware</FONT></B></H2>
<H3><B><FONT class=extract>1.1 What is middleware</FONT></B></H3>
<P><FONT class=extract><SPAN style="FONT-WEIGHT: 400">We&#8217;re here to talk about message queues and pub-sub. But before we get into the details of those two patterns, we need some context on where they fit into a system. Central to this is the concept of </SPAN><B>middleware</B><SPAN style="FONT-WEIGHT: 400"> - a system layer that provides commonly-needed functionality as a service so that developers can focus on key functional or logical system components. </SPAN></FONT></P>
<P><FONT class=extract><SPAN style="FONT-WEIGHT: 400">Middleware can be just a portion of the code or an entire server cluster. The sorts of common intermediary functions middleware provide include translation, transaction processing, metrics monitoring, and </SPAN><I><SPAN style="FONT-WEIGHT: 400">message passing</SPAN></I><SPAN style="FONT-WEIGHT: 400">.&nbsp;</SPAN></FONT></P>
<H3><B><FONT class=extract>1.2 Messaging-oriented middleware</FONT></B></H3>
<P><FONT class=extract><SPAN style="FONT-WEIGHT: 400">Any complex system will have different components, possibly running entirely different hardware and software, that need to be able to communicate with each other.&nbsp; </SPAN><B>Messaging-oriented middleware (MOM)</B><SPAN style="FONT-WEIGHT: 400"> enables this communication, much like the post office enables people to send each other letters. </SPAN><B>Producers</B><SPAN style="FONT-WEIGHT: 400"> hand off packets of data called </SPAN><B>messages </B><SPAN style="FONT-WEIGHT: 400">to the MOM which makes sure it&#8217;s delivered to the correct </SPAN><B>consumers</B><SPAN style="FONT-WEIGHT: 400">.</SPAN></FONT></P>
<P><SPAN style="FONT-WEIGHT: 400"><FONT class=extract><IMG alt=delivery src="https://d3no4ktch0fdq4.cloudfront.net/public/CACHE/images/blog-articles/content-images/Diagram_16_2x_d20f53c0-f6e7-484f-a423-4ec6e0bd0ef3_1024x1024/8407b593861455bc7a6707d3026f5469.webp" width=660 height=370 loading="lazy"></FONT></SPAN></P>
<P><FONT class=extract><SPAN style="FONT-WEIGHT: 400">Message passing allows components to communicate </SPAN><I><SPAN style="FONT-WEIGHT: 400">asynchronously</SPAN></I><SPAN style="FONT-WEIGHT: 400">. In other words, a producer can send messages independently of the state of the consumer.</SPAN> <SPAN style="FONT-WEIGHT: 400">If the consumer is too busy or offline, a MOM will make sure the messages are delivered once the consumer becomes available again.</SPAN></FONT></P>
<P><SPAN style="FONT-WEIGHT: 400"><FONT class=extract>Asynchronicity enables system components to be decoupled from each other. This adds resilience because, when one component fails, the others can continue functioning normally. It also adds data integrity because successful message passing isn&#8217;t dependent on the producer and consumer being responsive at the same time. </FONT></SPAN></P>
<P><FONT class=extract><SPAN style="FONT-WEIGHT: 400">The software that implements a MOM can be called a </SPAN><B>message broker</B><SPAN style="FONT-WEIGHT: 400">. Message brokers may implement just one, or several different kinds of message passing including both queues and pub-sub. Let&#8217;s take a look at how queues and pub-sub work.&nbsp;</SPAN></FONT></P>
<H2><A name=queues></A><B><FONT class=extract>2. Message queues</FONT></B></H2>
<P><FONT class=extract><B>Message queues </B><SPAN style="FONT-WEIGHT: 400">are a kind of messaging-oriented middleware where producers push new messages to a named First-In, First-Out (FIFO) queue, which consumers can then pull from. </SPAN></FONT></P>
<P><FONT class=extract><SPAN style="FONT-WEIGHT: 400">Message queues are also called </SPAN><B>point-to-point</B><SPAN style="FONT-WEIGHT: 400"> messaging because there is a one-to-one relationship between a message&#8217;s producer and consumer. There can be many producers and consumers using the same queue, but any particular message will only have one producer and one consumer. </SPAN></FONT></P>
<P><SPAN style="FONT-WEIGHT: 400"><FONT class=extract>Different queue implementations will vary in how much space the queue has, whether or not messages are batched, and how long a message is kept for if it isn&#8217;t consumed.</FONT></SPAN></P>
<P><SPAN style="FONT-WEIGHT: 400"><FONT class=extract><IMG alt="Message queue" src="https://d3no4ktch0fdq4.cloudfront.net/public/CACHE/images/blog-articles/content-images/Diagram_17_2x_2be7da57-92cd-471c-bbcc-fe6ff726700b_1024x1024/710060ce83f19b253f562fc4e125cc6d.webp" width=660 height=410 loading="lazy"></FONT></SPAN></P>
<H3><B><FONT class=extract>2.1 Message queue example</FONT></B></H3>
<P><SPAN style="FONT-WEIGHT: 400"><FONT class=extract>Now let&#8217;s go over a simple example of a message queue. Imagine a website that sells a high volume of T-shirts. Customers make online orders for a T-shirt and the web server produces corresponding order requests and places them on a queue for processing in the backend. </FONT></SPAN></P>
<P><SPAN style="FONT-WEIGHT: 400"><FONT class=extract>Depending on demand and availability, there could be one or several computers working to fulfill the orders. More order fulfillment servers might be needed if it&#8217;s a peak demand time of year, or if the fulfillment process for some orders is more complex.</FONT></SPAN></P>
<P><SPAN style="FONT-WEIGHT: 400"><FONT class=extract>Each order only needs to be processed once, so only one of the order fulfillment servers needs to take the order request off the queue. If for some reason multiple fulfillment servers got a copy of an order, that order would be mistakenly fulfilled multiple times. </FONT></SPAN></P>
<P><SPAN style="FONT-WEIGHT: 400"><FONT class=extract>In summary, using a queue enables the order-taking and order-fulfilling logic to be separated, and ensures that each order will be fulfilled exactly once.&nbsp;&nbsp;</FONT></SPAN></P>
<H2><A name=pubsub></A><B><FONT class=extract>3. Pub-sub</FONT></B></H2>
<P><FONT class=extract><SPAN style="FONT-WEIGHT: 400">The publish-subscribe pattern, also called </SPAN><B>pub-sub, </B><SPAN style="FONT-WEIGHT: 400">is a kind of messaging-oriented middleware that pushes a producer&#8217;s newly &#8220;published&#8221; messages based on a &#8220;subscription&#8221; of the consumer&#8217;s preferences. </SPAN></FONT></P>
<P><SPAN style="FONT-WEIGHT: 400"><FONT class=extract>There is a one-to-many relationship between publishers and subscribers, meaning any number of subscribers can get a copy of a message, but there&#8217;s only one publisher of that message. Pub-sub doesn&#8217;t guarantee message order, just that consumers will only see messages that they&#8217;ve subscribed to. </FONT></SPAN></P>
<P><SPAN style="FONT-WEIGHT: 400"><FONT class=extract>Subscriptions can be filtered by both topic and content. Topics are any category defined by the publisher, and content is any category defined by a subscriber. It&#8217;s up to the message broker to accept and manage these filters properly.</FONT></SPAN></P>
<P><SPAN style="FONT-WEIGHT: 400"><FONT class=extract><IMG alt=Pub-sub src="https://d3no4ktch0fdq4.cloudfront.net/public/CACHE/images/blog-articles/content-images/Diagram_18_2x_fea74d6d-b00a-4767-a284-7c0ed8116efd_1024x1024/70c3f315acb112495c68eddf0c012541.webp" width=660 height=410 loading="lazy"></FONT></SPAN></P>
<H3><B><FONT class=extract>3.1 Pub-sub example&nbsp;</FONT></B></H3>
<P><SPAN style="FONT-WEIGHT: 400"><FONT class=extract>Many social networks already use parts of the pub-sub model and call it &#8220;following&#8221; users. Let&#8217;s look at an example to build a better intuition. Imagine a simple social network allows people to share recipes, follow their friends, and see a timeline of their friends' recipes. </FONT></SPAN></P>
<P><FONT class=extract><SPAN style="FONT-WEIGHT: 400">When a user shares a recipe, they can put it in a topic. One user might categorize by what meal it is, another user might categorize by the season of the ingredients. When a user follows another user, they are </SPAN><I><SPAN style="FONT-WEIGHT: 400">subscribing</SPAN></I><SPAN style="FONT-WEIGHT: 400"> to the recipes their friend </SPAN><I><SPAN style="FONT-WEIGHT: 400">publishes</SPAN></I><SPAN style="FONT-WEIGHT: 400">. </SPAN></FONT></P>
<P><FONT class=extract><SPAN style="FONT-WEIGHT: 400">Followers can choose to see everything that&#8217;s published, or only some</SPAN><I><SPAN style="FONT-WEIGHT: 400"> topics</SPAN></I><SPAN style="FONT-WEIGHT: 400"> that they&#8217;re interested in. Followers can also add their own </SPAN><I><SPAN style="FONT-WEIGHT: 400">content</SPAN></I><SPAN style="FONT-WEIGHT: 400"> filters, like excluding recipes that use certain ingredients. </SPAN></FONT></P>
<P><SPAN style="FONT-WEIGHT: 400"><FONT class=extract>Users can follow as many other users as they want, so their timeline will be full of recipes from many users, but each recipe only comes from one publishing user. Similarly, a user can be followed by many other users, and all of the followers will see a copy of the recipe on their timeline.&nbsp;</FONT></SPAN></P>
<H2><A name=which></A><B><FONT class=extract>4. Which to use</FONT></B></H2>
<P><SPAN style="FONT-WEIGHT: 400"><FONT class=extract>Whether to use queues or pub-sub depends mostly on how many message consumers the system has. If a message needs to have only one consumer, then the message queue is the right approach. If a message needs to have possibly many consumers that get a copy, the pub-sub approach is best. </FONT></SPAN></P>
<P><SPAN style="FONT-WEIGHT: 400"><FONT class=extract>Implementations also differ in the particular message-passing guarantees they provide. Some feature variations to note are:</FONT></SPAN></P>
<UL>
<LI style="FONT-WEIGHT: 400"><FONT class=extract><B>Persistence:</B><SPAN style="FONT-WEIGHT: 400"> the messages are saved to persistent storage so they can be recovered in case the message broker itself goes down.&nbsp;</SPAN> </FONT>
<LI style="FONT-WEIGHT: 400"><FONT class=extract><B>Replays:</B><SPAN style="FONT-WEIGHT: 400"> the messages are stored even after they are consumed so a service can &#8220;replay&#8221; the message stream in failure cases to recover properly.&nbsp;</SPAN> </FONT>
<LI style="FONT-WEIGHT: 400"><FONT class=extract><B>Ordering:</B><SPAN style="FONT-WEIGHT: 400"> the messages always arrive to the consumer in a particular order. </SPAN></FONT></LI></UL>
<H2><A name=example></A><B><FONT class=extract>5. Example queues and pub-sub questions</FONT></B></H2>
<P><SPAN style="FONT-WEIGHT: 400"><FONT class=extract>The questions asked in system design interviews tend to begin with a broad problem or goal, so it&#8217;s unlikely that you&#8217;ll get an interview question entirely about queues or pub-sub.</FONT></SPAN></P>
<P><SPAN style="FONT-WEIGHT: 400"><FONT class=extract>However, you may be asked to solve a problem where queues or pub-sub will be an important part of the solution. As a result, what you really need to know is WHEN (or IF) you should bring it up and how you should approach it.</FONT></SPAN></P>
<P><SPAN style="FONT-WEIGHT: 400"><FONT class=extract>To help you with this, we&#8217;ve compiled the below list of sample system design questions. Queues or pub-sub are relevant for all of the below questions.</FONT></SPAN></P>
<UL>
<LI style="FONT-WEIGHT: 400"><SPAN style="FONT-WEIGHT: 400"><FONT class=extract>Design Dropbox (</FONT></SPAN><A href="https://www.geeksforgeeks.org/design-dropbox-a-system-design-interview-question/?ref=rp"><SPAN style="FONT-WEIGHT: 400"><FONT class=extract>Read the answer</FONT></SPAN></A><FONT class=extract><SPAN style="FONT-WEIGHT: 400">)</SPAN> </FONT>
<LI style="FONT-WEIGHT: 400"><SPAN style="FONT-WEIGHT: 400"><FONT class=extract>Design a web crawler (</FONT></SPAN><A href="https://github.com/donnemartin/system-design-primer/blob/master/solutions/system_design/web_crawler/README.md"><SPAN style="FONT-WEIGHT: 400"><FONT class=extract>Read the answer</FONT></SPAN></A><FONT class=extract><SPAN style="FONT-WEIGHT: 400">)</SPAN> </FONT>
<LI style="FONT-WEIGHT: 400"><SPAN style="FONT-WEIGHT: 400"><FONT class=extract>Design Twitter (</FONT></SPAN><A href="https://www.geeksforgeeks.org/design-twitter-a-system-design-interview-question/?ref=rp"><SPAN style="FONT-WEIGHT: 400"><FONT class=extract>Read the answer</FONT></SPAN></A><SPAN style="FONT-WEIGHT: 400"><FONT class=extract>)&nbsp;</FONT></SPAN></LI></UL>