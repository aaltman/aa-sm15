<b> : </b><A name=websockets></A><B>4. WebSockets</B></H2>
<P><SPAN style="FONT-WEIGHT: 400">WebSockets is a two-way message passing protocol based on TCP (the protocol at Layer 4 of the OSI networking model). WebSockets are faster for data transmission than HTTP because it has less protocol overhead and operates at a lower level in the network stack. At a high level, the steps of a websocket connection are:</SPAN></P>
<UL>
<LI style="FONT-WEIGHT: 400"><SPAN style="FONT-WEIGHT: 400">Client and Server establish a connection over HTTP and then &#8220;upgraded&#8221; using the WebSockets handshake</SPAN></LI>
<LI style="FONT-WEIGHT: 400"><SPAN style="FONT-WEIGHT: 400">WebSockets TCP messages are transmitted in both directions over port 443 (or 80 if it&#8217;s not TLS encrypted)&nbsp;</SPAN></LI>
<LI style="FONT-WEIGHT: 400"><SPAN style="FONT-WEIGHT: 400">Either side closes the connection</SPAN></LI></UL>
<P><SPAN style="FONT-WEIGHT: 400"><IMG alt=WebSockets src="https://d3no4ktch0fdq4.cloudfront.net/public/CACHE/images/blog-articles/content-images/Diagram_21_2x_31d27e31-adb5-4471-a29e-db314d7a870d_1024x1024/ad4488834e1128fad2582db10c714181.webp" width=660 height=544 loading="lazy"></SPAN></P>
<P><SPAN style="FONT-WEIGHT: 400">The main advantage of WebSockets is speed: the client and server don&#8217;t have to find and reestablish their connection with each other </SPAN><I><SPAN style="FONT-WEIGHT: 400">every time</SPAN></I><SPAN style="FONT-WEIGHT: 400"> a message is sent. Once the WebSockets connection is established, data can flow immediately and securely in either direction. TCP ensures that the messages will always arrive in order. </SPAN></P>
<P><SPAN style="FONT-WEIGHT: 400">The main downside of WebSockets is it takes a good amount of initial developer work to implement. You&#8217;ll have to write your own code to support some things like automatically reconnecting. Also, since WebSockets functions over ports it can be blocked by firewalls in big institutions. </SPAN></P>
<P><SPAN style="FONT-WEIGHT: 400">An example where WebSockets is really useful is multiplayer online gaming, where the high-quality graphics of the world need to be transmitted to distributed users with real-time state updates and tight synchronization. </SPAN></P>
<P><SPAN style="FONT-WEIGHT: 400">Overall, WebSockets are a good choice if you know you need a fast, high-quality, bi-directional connection. But it should only be used if Polling or SSE don&#8217;t fit because it adds substantial complexity to the system and takes more upfront investment to implement.</SPAN>