<b> : </b><A name=SSEs></A><B>3. Server Sent Events</B></H2>
<P><SPAN style="FONT-WEIGHT: 400">Server Sent Events provide a one-way connection for a server to push new data to a client, without reestablishing a connection every time. For example a social media app could use SSE to push new posts to a user feed as soon as they&#8217;re available. SSE connections follow the </SPAN><A href="https://developer.mozilla.org/en-US/docs/Web/API/EventSource"><SPAN style="FONT-WEIGHT: 400">EventSource</SPAN></A><SPAN style="FONT-WEIGHT: 400"> interface, which uses HTTP to make the underlying communications.</SPAN></P>
<P><SPAN style="FONT-WEIGHT: 400">At a high level, the steps of SSE are:</SPAN></P>
<UL>
<LI style="FONT-WEIGHT: 400"><SPAN style="FONT-WEIGHT: 400">Client creates a new EventSource object targeting the server</SPAN></LI>
<LI style="FONT-WEIGHT: 400"><SPAN style="FONT-WEIGHT: 400">Server registers SSE connection</SPAN></LI>
<LI style="FONT-WEIGHT: 400"><SPAN style="FONT-WEIGHT: 400">Server sends new data to the client</SPAN></LI>
<LI style="FONT-WEIGHT: 400"><SPAN style="FONT-WEIGHT: 400">Client receives messages with EventSource handlers</SPAN></LI>
<LI style="FONT-WEIGHT: 400"><SPAN style="FONT-WEIGHT: 400">Either side closes the connection</SPAN></LI></UL>
<DIV><IMG alt="server sent events" src="https://d3no4ktch0fdq4.cloudfront.net/public/CACHE/images/blog-articles/content-images/Diagram_20_2x_0035a022-b7e7-41a0-93cf-8a2d90c4a5ab_1024x1024/7d877930655c33c7d6afd99a4ac2e08d.webp" width=660 height=544 loading="lazy"></DIV>
<P><SPAN style="FONT-WEIGHT: 400">The main benefit of SSEs is it provides an efficient one directional data stream where the client and server don&#8217;t need to constantly reestablish the connection. And SSE is fairly straightforward to implement, unlike websockets - EventSource is supported by all the browsers except IE. Luckly, IE support is a common issue so there are libraries for supporting it with polyfills. </SPAN></P>
<P><SPAN style="FONT-WEIGHT: 400">There are a couple of drawbacks to SSEs. If your service outgrows the one-way connection model you&#8217;ll just have to switch to a different protocol like WebSockets. SSEs over HTTP (instead of HTTP/2) are also limited to 6 connections per browser, so if a user opens multiple tabs of your website the SSE won&#8217;t work after the first 6 tabs. </SPAN></P>
<P><SPAN style="FONT-WEIGHT: 400">Overall, SSEs are great when you need a simple implementation for real-time data streams where the client doesn&#8217;t need to communicate much with the server, just receive updates. But if you expect your service to need more robust functionality like bi-directional communication, you should consider investing in an implementation of WebSockets.&nbsp;</SPAN>