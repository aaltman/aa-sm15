<DIV class=heading-wrapper style='FONT-SIZE: 16px; FONT-FAMILY: "Segoe UI", SegoeUI, "Helvetica Neue", Helvetica, Arial, sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; POSITION: relative; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(22,22,22); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; OUTLINE-COLOR: ; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial' data-heading-level="h2">
<H2 id=context-and-problem class=heading-anchor style="FONT-WEIGHT: 600; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 32px 0px 12px; OUTLINE-COLOR: ; LINE-HEIGHT: 1.3; PADDING-RIGHT: 0px; margin-inline-start: -1.875rem; padding-inline-start: 1.875rem"><FONT class=extract>Context and problem</FONT></H2></DIV>
<P style='FONT-SIZE: 16px; FONT-FAMILY: "Segoe UI", SegoeUI, "Helvetica Neue", Helvetica, Arial, sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; MARGIN-TOP: 1px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(22,22,22); PADDING-BOTTOM: 0px; FONT-STYLE: normal; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN-LEFT: 1px; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; OUTLINE-COLOR: ; PADDING-RIGHT: 0px; BACKGROUND-COLOR: rgb(255,255,255); MARGIN-RIGHT: 1px; TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial; overflow-wrap: break-word'><FONT class=extract>In a distributed environment, calls to remote resources and services can fail due to transient faults, such as slow network connections, timeouts, or the resources being overcommitted or temporarily unavailable. These faults typically correct themselves after a short period of time, and a robust cloud application should be prepared to handle them by using a strategy such as the<SPAN>&nbsp;</SPAN></FONT><A style="CURSOR: pointer; TEXT-DECORATION: none; COLOR: ; OUTLINE-WIDTH: 0px; OUTLINE-COLOR: ; overflow-wrap: break-word" href="https://learn.microsoft.com/en-us/azure/architecture/patterns/retry" data-linktype="absolute-path"><FONT class=extract>Retry pattern</FONT></A><FONT class=extract>.</FONT></P>
<P style='FONT-SIZE: 16px; FONT-FAMILY: "Segoe UI", SegoeUI, "Helvetica Neue", Helvetica, Arial, sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; MARGIN-TOP: 1px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(22,22,22); PADDING-BOTTOM: 0px; FONT-STYLE: normal; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN-LEFT: 1px; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; OUTLINE-COLOR: ; PADDING-RIGHT: 0px; BACKGROUND-COLOR: rgb(255,255,255); MARGIN-RIGHT: 1px; TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial; overflow-wrap: break-word'><FONT class=extract>However, there can also be situations where faults are due to unanticipated events, and that might take much longer to fix. These faults can range in severity from a partial loss of connectivity to the complete failure of a service. In these situations it might be pointless for an application to continually retry an operation that is unlikely to succeed, and instead the application should quickly accept that the operation has failed and handle this failure accordingly.</FONT></P>
<P style='FONT-SIZE: 16px; FONT-FAMILY: "Segoe UI", SegoeUI, "Helvetica Neue", Helvetica, Arial, sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; MARGIN-TOP: 1px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(22,22,22); PADDING-BOTTOM: 0px; FONT-STYLE: normal; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN-LEFT: 1px; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; OUTLINE-COLOR: ; PADDING-RIGHT: 0px; BACKGROUND-COLOR: rgb(255,255,255); MARGIN-RIGHT: 1px; TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial; overflow-wrap: break-word'><FONT class=extract>Additionally, if a service is very busy, failure in one part of the system might lead to cascading failures. For example, an operation that invokes a service could be configured to implement a timeout, and reply with a failure message if the service fails to respond within this period. However, this strategy could cause many concurrent requests to the same operation to be blocked until the timeout period expires. These blocked requests might hold critical system resources such as memory, threads, database connections, and so on. Consequently, these resources could become exhausted, causing failure of other possibly unrelated parts of the system that need to use the same resources. In these situations, it would be preferable for the operation to fail immediately, and only attempt to invoke the service if it's likely to succeed. Note that setting a shorter timeout might help to resolve this problem, but the timeout shouldn't be so short that the operation fails most of the time, even if the request to the service would eventually succeed.</FONT></P>
<DIV class=heading-wrapper style='FONT-SIZE: 16px; FONT-FAMILY: "Segoe UI", SegoeUI, "Helvetica Neue", Helvetica, Arial, sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; POSITION: relative; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(22,22,22); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; OUTLINE-COLOR: ; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial' data-heading-level="h2"><A aria-label="Section titled: Solution" class="anchor-link docon docon-link" style="OVERFLOW: hidden; CURSOR: pointer; TEXT-DECORATION: none; BORDER-TOP: 0px; CLIP: rect(1px 1px 1px 1px); HEIGHT: 1px; FONT-FAMILY: docons; BORDER-RIGHT: 0px; FONT-VARIANT: normal; WIDTH: 1px; BORDER-BOTTOM: 0px; POSITION: absolute; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: ; OUTLINE-WIDTH: 0px; PADDING-BOTTOM: 0px; DIRECTION: ltr; FONT-STYLE: normal; TEXT-ALIGN: center; PADDING-TOP: 0px; PADDING-LEFT: 0px; BORDER-LEFT: 0px; MARGIN: -1px; DISPLAY: inline-block; OUTLINE-COLOR: ; LINE-HEIGHT: 16px; PADDING-RIGHT: 0px; overflow-wrap: normal; speak: none; -webkit-font-smoothing: antialiased; transition: opacity 0.1s linear; inset-inline-start: -1.875rem; transform: translateY(-50%) scale(1); inset-block-start: 1.38125rem; clip-path: inset(50%); opacity: 0" href="https://learn.microsoft.com/en-us/azure/architecture/patterns/circuit-breaker#solution"><FONT class=extract></FONT></A>
<H2 id=solution class=heading-anchor style="FONT-WEIGHT: 600; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 32px 0px 12px; OUTLINE-COLOR: ; LINE-HEIGHT: 1.3; PADDING-RIGHT: 0px; margin-inline-start: -1.875rem; padding-inline-start: 1.875rem"><FONT class=extract>Solution</FONT></H2></DIV>
<P style='FONT-SIZE: 16px; FONT-FAMILY: "Segoe UI", SegoeUI, "Helvetica Neue", Helvetica, Arial, sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; MARGIN-TOP: 1px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(22,22,22); PADDING-BOTTOM: 0px; FONT-STYLE: normal; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN-LEFT: 1px; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; OUTLINE-COLOR: ; PADDING-RIGHT: 0px; BACKGROUND-COLOR: rgb(255,255,255); MARGIN-RIGHT: 1px; TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial; overflow-wrap: break-word'><FONT class=extract>The Circuit Breaker pattern, popularized by Michael Nygard in his book,<SPAN>&nbsp;</SPAN></FONT><A style="CURSOR: pointer; TEXT-DECORATION: none; COLOR: ; OUTLINE-WIDTH: 0px; OUTLINE-COLOR: ; overflow-wrap: break-word" href="https://pragprog.com/titles/mnee2/" data-linktype="external"><FONT class=extract>Release It!</FONT></A><FONT class=extract>, can prevent an application from repeatedly trying to execute an operation that's likely to fail. Allowing it to continue without waiting for the fault to be fixed or wasting CPU cycles while it determines that the fault is long lasting. The Circuit Breaker pattern also enables an application to detect whether the fault has been resolved. If the problem appears to have been fixed, the application can try to invoke the operation.</FONT></P>
<BLOCKQUOTE style='FONT-SIZE: 16px; BORDER-TOP: 0px solid; FONT-FAMILY: "Segoe UI", SegoeUI, "Helvetica Neue", Helvetica, Arial, sans-serif; BORDER-RIGHT: 0px solid; WHITE-SPACE: normal; WORD-SPACING: 0px; BORDER-BOTTOM: 0px solid; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(22,22,22); PADDING-BOTTOM: 0px; FONT-STYLE: normal; PADDING-TOP: 0px; PADDING-LEFT: 0.8em; BORDER-LEFT: 3px solid; ORPHANS: 2; WIDOWS: 2; MARGIN: 1.2em 0px 2em; DISPLAY: block; LETTER-SPACING: normal; OUTLINE-COLOR: ; PADDING-RIGHT: 0.8em; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial'>
<P style="MARGIN-TOP: 1px; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN-LEFT: 1px; OUTLINE-COLOR: ; PADDING-RIGHT: 0px; MARGIN-RIGHT: 1px; overflow-wrap: break-word"><FONT class=extract>The purpose of the Circuit Breaker pattern is different than the Retry pattern. The Retry pattern enables an application to retry an operation in the expectation that it'll succeed. The Circuit Breaker pattern prevents an application from performing an operation that is likely to fail. An application can combine these two patterns by using the Retry pattern to invoke an operation through a circuit breaker. However, the retry logic should be sensitive to any exceptions returned by the circuit breaker and abandon retry attempts if the circuit breaker indicates that a fault is not transient.</FONT></P></BLOCKQUOTE>
<P style='FONT-SIZE: 16px; FONT-FAMILY: "Segoe UI", SegoeUI, "Helvetica Neue", Helvetica, Arial, sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; MARGIN-TOP: 1px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(22,22,22); PADDING-BOTTOM: 0px; FONT-STYLE: normal; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN-LEFT: 1px; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; OUTLINE-COLOR: ; PADDING-RIGHT: 0px; BACKGROUND-COLOR: rgb(255,255,255); MARGIN-RIGHT: 1px; TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial; overflow-wrap: break-word'><FONT class=extract>A circuit breaker acts as a proxy for operations that might fail. The proxy should monitor the number of recent failures that have occurred, and use this information to decide whether to allow the operation to proceed, or simply return an exception immediately.</FONT></P>
<P style='FONT-SIZE: 16px; FONT-FAMILY: "Segoe UI", SegoeUI, "Helvetica Neue", Helvetica, Arial, sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; MARGIN-TOP: 1px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(22,22,22); PADDING-BOTTOM: 0px; FONT-STYLE: normal; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN-LEFT: 1px; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; OUTLINE-COLOR: ; PADDING-RIGHT: 0px; BACKGROUND-COLOR: rgb(255,255,255); MARGIN-RIGHT: 1px; TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial; overflow-wrap: break-word'><FONT class=extract>The proxy can be implemented as a state machine with the following states that mimic the functionality of an electrical circuit breaker:</FONT></P>
<UL style='LIST-STYLE-TYPE: none; FONT-SIZE: 16px; FONT-FAMILY: "Segoe UI", SegoeUI, "Helvetica Neue", Helvetica, Arial, sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(22,22,22); PADDING-BOTTOM: 0px; FONT-STYLE: normal; PADDING-TOP: 0px; PADDING-LEFT: 0px; ORPHANS: 2; WIDOWS: 2; MARGIN: 16px 0px 16px 38px; LETTER-SPACING: normal; OUTLINE-COLOR: ; PADDING-RIGHT: 0px; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial'>
<LI style="LIST-STYLE-TYPE: disc; OUTLINE-WIDTH: 0px; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 0px; OUTLINE-COLOR: ; PADDING-RIGHT: 0px">
<P style="MARGIN-TOP: 1px; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN-LEFT: 1px; OUTLINE-COLOR: ; PADDING-RIGHT: 0px; MARGIN-RIGHT: 1px; overflow-wrap: break-word"><FONT class=extract><STRONG style="FONT-WEIGHT: 600; OUTLINE-COLOR: ">Closed</STRONG>: The request from the application is routed to the operation. The proxy maintains a count of the number of recent failures, and if the call to the operation is unsuccessful the proxy increments this count. If the number of recent failures exceeds a specified threshold within a given time period, the proxy is placed into the<SPAN>&nbsp;</SPAN><STRONG style="FONT-WEIGHT: 600; OUTLINE-COLOR: ">Open</STRONG><SPAN>&nbsp;</SPAN>state. At this point the proxy starts a timeout timer, and when this timer expires the proxy is placed into the<SPAN>&nbsp;</SPAN><STRONG style="FONT-WEIGHT: 600; OUTLINE-COLOR: ">Half-Open</STRONG><SPAN>&nbsp;</SPAN>state.</FONT></P>
<BLOCKQUOTE style="BORDER-TOP: 0px solid; BORDER-RIGHT: 0px solid; BORDER-BOTTOM: 0px solid; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0.8em; BORDER-LEFT: 3px solid; MARGIN: 1.2em 0px 2em; DISPLAY: block; OUTLINE-COLOR: ; PADDING-RIGHT: 0.8em">
<P style="MARGIN-TOP: 1px; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN-LEFT: 1px; OUTLINE-COLOR: ; PADDING-RIGHT: 0px; MARGIN-RIGHT: 1px; overflow-wrap: break-word"><FONT class=extract>The purpose of the timeout timer is to give the system time to fix the problem that caused the failure before allowing the application to try to perform the operation again.</FONT></P></BLOCKQUOTE>
<LI style="LIST-STYLE-TYPE: disc; OUTLINE-WIDTH: 0px; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 0px; OUTLINE-COLOR: ; PADDING-RIGHT: 0px">
<P style="MARGIN-TOP: 1px; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN-LEFT: 1px; OUTLINE-COLOR: ; PADDING-RIGHT: 0px; MARGIN-RIGHT: 1px; overflow-wrap: break-word"><FONT class=extract><STRONG style="FONT-WEIGHT: 600; OUTLINE-COLOR: ">Open</STRONG>: The request from the application fails immediately and an exception is returned to the application.</FONT></P>
<LI style="LIST-STYLE-TYPE: disc; OUTLINE-WIDTH: 0px; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 0px; OUTLINE-COLOR: ; PADDING-RIGHT: 0px">
<P style="MARGIN-TOP: 1px; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN-LEFT: 1px; OUTLINE-COLOR: ; PADDING-RIGHT: 0px; MARGIN-RIGHT: 1px; overflow-wrap: break-word"><FONT class=extract><STRONG style="FONT-WEIGHT: 600; OUTLINE-COLOR: ">Half-Open</STRONG>: A limited number of requests from the application are allowed to pass through and invoke the operation. If these requests are successful, it's assumed that the fault that was previously causing the failure has been fixed and the circuit breaker switches to the<SPAN>&nbsp;</SPAN><STRONG style="FONT-WEIGHT: 600; OUTLINE-COLOR: ">Closed</STRONG><SPAN>&nbsp;</SPAN>state (the failure counter is reset). If any request fails, the circuit breaker assumes that the fault is still present so it reverts to the<SPAN>&nbsp;</SPAN><STRONG style="FONT-WEIGHT: 600; OUTLINE-COLOR: ">Open</STRONG><SPAN>&nbsp;</SPAN>state and restarts the timeout timer to give the system a further period of time to recover from the failure.</FONT></P>
<BLOCKQUOTE style="BORDER-TOP: 0px solid; BORDER-RIGHT: 0px solid; BORDER-BOTTOM: 0px solid; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0.8em; BORDER-LEFT: 3px solid; MARGIN: 1.2em 0px 2em; DISPLAY: block; OUTLINE-COLOR: ; PADDING-RIGHT: 0.8em">
<P style="MARGIN-TOP: 1px; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN-LEFT: 1px; OUTLINE-COLOR: ; PADDING-RIGHT: 0px; MARGIN-RIGHT: 1px; overflow-wrap: break-word"><FONT class=extract>The<SPAN>&nbsp;</SPAN><STRONG style="FONT-WEIGHT: 600; OUTLINE-COLOR: ">Half-Open</STRONG><SPAN>&nbsp;</SPAN>state is useful to prevent a recovering service from suddenly being flooded with requests. As a service recovers, it might be able to support a limited volume of requests until the recovery is complete, but while recovery is in progress a flood of work can cause the service to time out or fail again.</FONT></P></BLOCKQUOTE></LI></UL>
<P style='FONT-SIZE: 16px; FONT-FAMILY: "Segoe UI", SegoeUI, "Helvetica Neue", Helvetica, Arial, sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; MARGIN-TOP: 1px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(22,22,22); PADDING-BOTTOM: 0px; FONT-STYLE: normal; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN-LEFT: 1px; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; OUTLINE-COLOR: ; PADDING-RIGHT: 0px; BACKGROUND-COLOR: rgb(255,255,255); MARGIN-RIGHT: 1px; TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial; overflow-wrap: break-word'><FONT class=extract><IMG style="MAX-WIDTH: 100%; BORDER-TOP: 0px; HEIGHT: auto; BORDER-RIGHT: 0px; VERTICAL-ALIGN: baseline; BORDER-BOTTOM: 0px; BORDER-LEFT: 0px; DISPLAY: inline-block; OUTLINE-COLOR: " alt="Circuit Breaker states" src="https://learn.microsoft.com/en-us/azure/architecture/patterns/_images/circuit-breaker-diagram.png" data-linktype="absolute-path"></FONT></P>
<P style='FONT-SIZE: 16px; FONT-FAMILY: "Segoe UI", SegoeUI, "Helvetica Neue", Helvetica, Arial, sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; MARGIN-TOP: 1px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(22,22,22); PADDING-BOTTOM: 0px; FONT-STYLE: normal; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN-LEFT: 1px; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; OUTLINE-COLOR: ; PADDING-RIGHT: 0px; BACKGROUND-COLOR: rgb(255,255,255); MARGIN-RIGHT: 1px; TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial; overflow-wrap: break-word'><FONT class=extract>In the figure, the failure counter used by the<SPAN>&nbsp;</SPAN><STRONG style="FONT-WEIGHT: 600; OUTLINE-COLOR: ">Closed</STRONG><SPAN>&nbsp;</SPAN>state is time based. It's automatically reset at periodic intervals. This helps to prevent the circuit breaker from entering the<SPAN>&nbsp;</SPAN><STRONG style="FONT-WEIGHT: 600; OUTLINE-COLOR: ">Open</STRONG><SPAN>&nbsp;</SPAN>state if it experiences occasional failures. The failure threshold that trips the circuit breaker into the<SPAN>&nbsp;</SPAN><STRONG style="FONT-WEIGHT: 600; OUTLINE-COLOR: ">Open</STRONG><SPAN>&nbsp;</SPAN>state is only reached when a specified number of failures have occurred during a specified interval. The counter used by the<SPAN>&nbsp;</SPAN><STRONG style="FONT-WEIGHT: 600; OUTLINE-COLOR: ">Half-Open</STRONG><SPAN>&nbsp;</SPAN>state records the number of successful attempts to invoke the operation. The circuit breaker reverts to the<SPAN>&nbsp;</SPAN><STRONG style="FONT-WEIGHT: 600; OUTLINE-COLOR: ">Closed</STRONG><SPAN>&nbsp;</SPAN>state after a specified number of consecutive operation invocations have been successful. If any invocation fails, the circuit breaker enters the<SPAN>&nbsp;</SPAN><STRONG style="FONT-WEIGHT: 600; OUTLINE-COLOR: ">Open</STRONG><SPAN>&nbsp;</SPAN>state immediately and the success counter will be reset the next time it enters the<SPAN>&nbsp;</SPAN><STRONG style="FONT-WEIGHT: 600; OUTLINE-COLOR: ">Half-Open</STRONG><SPAN>&nbsp;</SPAN>state.</FONT></P>
<BLOCKQUOTE style='FONT-SIZE: 16px; BORDER-TOP: 0px solid; FONT-FAMILY: "Segoe UI", SegoeUI, "Helvetica Neue", Helvetica, Arial, sans-serif; BORDER-RIGHT: 0px solid; WHITE-SPACE: normal; WORD-SPACING: 0px; BORDER-BOTTOM: 0px solid; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(22,22,22); PADDING-BOTTOM: 0px; FONT-STYLE: normal; PADDING-TOP: 0px; PADDING-LEFT: 0.8em; BORDER-LEFT: 3px solid; ORPHANS: 2; WIDOWS: 2; MARGIN: 1.2em 0px 2em; DISPLAY: block; LETTER-SPACING: normal; OUTLINE-COLOR: ; PADDING-RIGHT: 0.8em; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial'>
<P style="MARGIN-TOP: 1px; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN-LEFT: 1px; OUTLINE-COLOR: ; PADDING-RIGHT: 0px; MARGIN-RIGHT: 1px; overflow-wrap: break-word"><FONT class=extract>How the system recovers is handled externally, possibly by restoring or restarting a failed component or repairing a network connection.</FONT></P></BLOCKQUOTE>
<P style='FONT-SIZE: 16px; FONT-FAMILY: "Segoe UI", SegoeUI, "Helvetica Neue", Helvetica, Arial, sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; MARGIN-TOP: 1px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(22,22,22); PADDING-BOTTOM: 0px; FONT-STYLE: normal; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN-LEFT: 1px; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; OUTLINE-COLOR: ; PADDING-RIGHT: 0px; BACKGROUND-COLOR: rgb(255,255,255); MARGIN-RIGHT: 1px; TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial; overflow-wrap: break-word'><FONT class=extract>The Circuit Breaker pattern provides stability while the system recovers from a failure and minimizes the impact on performance. It can help to maintain the response time of the system by quickly rejecting a request for an operation that's likely to fail, rather than waiting for the operation to time out, or never return. If the circuit breaker raises an event each time it changes state, this information can be used to monitor the health of the part of the system protected by the circuit breaker, or to alert an administrator when a circuit breaker trips to the<SPAN>&nbsp;</SPAN><STRONG style="FONT-WEIGHT: 600; OUTLINE-COLOR: ">Open</STRONG><SPAN>&nbsp;</SPAN>state.</FONT></P>
<P style='FONT-SIZE: 16px; FONT-FAMILY: "Segoe UI", SegoeUI, "Helvetica Neue", Helvetica, Arial, sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; MARGIN-TOP: 1px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(22,22,22); PADDING-BOTTOM: 0px; FONT-STYLE: normal; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN-LEFT: 1px; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; OUTLINE-COLOR: ; PADDING-RIGHT: 0px; BACKGROUND-COLOR: rgb(255,255,255); MARGIN-RIGHT: 1px; TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial; overflow-wrap: break-word'><FONT class=extract>The pattern is customizable and can be adapted according to the type of the possible failure. For example, you can apply an increasing timeout timer to a circuit breaker. You could place the circuit breaker in the<SPAN>&nbsp;</SPAN><STRONG style="FONT-WEIGHT: 600; OUTLINE-COLOR: ">Open</STRONG><SPAN>&nbsp;</SPAN>state for a few seconds initially, and then if the failure hasn't been resolved increase the timeout to a few minutes, and so on. In some cases, rather than the<SPAN>&nbsp;</SPAN><STRONG style="FONT-WEIGHT: 600; OUTLINE-COLOR: ">Open</STRONG><SPAN>&nbsp;</SPAN>state returning failure and raising an exception, it could be useful to return a default value that is meaningful to the application.</FONT></P>
<DIV class=heading-wrapper style='FONT-SIZE: 16px; FONT-FAMILY: "Segoe UI", SegoeUI, "Helvetica Neue", Helvetica, Arial, sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; POSITION: relative; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(22,22,22); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; OUTLINE-COLOR: ; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial' data-heading-level="h2"><A aria-label="Section titled: Issues and considerations" class="anchor-link docon docon-link" style="OVERFLOW: hidden; CURSOR: pointer; TEXT-DECORATION: none; BORDER-TOP: 0px; CLIP: rect(1px 1px 1px 1px); HEIGHT: 1px; FONT-FAMILY: docons; BORDER-RIGHT: 0px; FONT-VARIANT: normal; WIDTH: 1px; BORDER-BOTTOM: 0px; POSITION: absolute; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: ; OUTLINE-WIDTH: 0px; PADDING-BOTTOM: 0px; DIRECTION: ltr; FONT-STYLE: normal; TEXT-ALIGN: center; PADDING-TOP: 0px; PADDING-LEFT: 0px; BORDER-LEFT: 0px; MARGIN: -1px; DISPLAY: inline-block; OUTLINE-COLOR: ; LINE-HEIGHT: 16px; PADDING-RIGHT: 0px; overflow-wrap: normal; speak: none; -webkit-font-smoothing: antialiased; transition: opacity 0.1s linear; inset-inline-start: -1.875rem; transform: translateY(-50%) scale(1); inset-block-start: 1.38125rem; clip-path: inset(50%); opacity: 0" href="https://learn.microsoft.com/en-us/azure/architecture/patterns/circuit-breaker#issues-and-considerations"><FONT class=extract></FONT></A>
<H2 id=issues-and-considerations class=heading-anchor style="FONT-WEIGHT: 600; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 32px 0px 12px; OUTLINE-COLOR: ; LINE-HEIGHT: 1.3; PADDING-RIGHT: 0px; margin-inline-start: -1.875rem; padding-inline-start: 1.875rem"><FONT class=extract>Issues and considerations</FONT></H2></DIV>
<P style='FONT-SIZE: 16px; FONT-FAMILY: "Segoe UI", SegoeUI, "Helvetica Neue", Helvetica, Arial, sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; MARGIN-TOP: 1px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(22,22,22); PADDING-BOTTOM: 0px; FONT-STYLE: normal; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN-LEFT: 1px; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; OUTLINE-COLOR: ; PADDING-RIGHT: 0px; BACKGROUND-COLOR: rgb(255,255,255); MARGIN-RIGHT: 1px; TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial; overflow-wrap: break-word'><FONT class=extract>You should consider the following points when deciding how to implement this pattern:</FONT></P>
<P style='FONT-SIZE: 16px; FONT-FAMILY: "Segoe UI", SegoeUI, "Helvetica Neue", Helvetica, Arial, sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; MARGIN-TOP: 1px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(22,22,22); PADDING-BOTTOM: 0px; FONT-STYLE: normal; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN-LEFT: 1px; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; OUTLINE-COLOR: ; PADDING-RIGHT: 0px; BACKGROUND-COLOR: rgb(255,255,255); MARGIN-RIGHT: 1px; TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial; overflow-wrap: break-word'><FONT class=extract><STRONG style="FONT-WEIGHT: 600; OUTLINE-COLOR: ">Exception Handling</STRONG>. An application invoking an operation through a circuit breaker must be prepared to handle the exceptions raised if the operation is unavailable. The way exceptions are handled will be application specific. For example, an application could temporarily degrade its functionality, invoke an alternative operation to try to perform the same task or obtain the same data, or report the exception to the user and ask them to try again later.</FONT></P>
<P style='FONT-SIZE: 16px; FONT-FAMILY: "Segoe UI", SegoeUI, "Helvetica Neue", Helvetica, Arial, sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; MARGIN-TOP: 1px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(22,22,22); PADDING-BOTTOM: 0px; FONT-STYLE: normal; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN-LEFT: 1px; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; OUTLINE-COLOR: ; PADDING-RIGHT: 0px; BACKGROUND-COLOR: rgb(255,255,255); MARGIN-RIGHT: 1px; TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial; overflow-wrap: break-word'><FONT class=extract><STRONG style="FONT-WEIGHT: 600; OUTLINE-COLOR: ">Types of Exceptions</STRONG>. A request might fail for many reasons, some of which might indicate a more severe type of failure than others. For example, a request might fail because a remote service has crashed and will take several minutes to recover, or because of a timeout due to the service being temporarily overloaded. A circuit breaker might be able to examine the types of exceptions that occur and adjust its strategy depending on the nature of these exceptions. For example, it might require a larger number of timeout exceptions to trip the circuit breaker to the<SPAN>&nbsp;</SPAN><STRONG style="FONT-WEIGHT: 600; OUTLINE-COLOR: ">Open</STRONG><SPAN>&nbsp;</SPAN>state compared to the number of failures due to the service being completely unavailable.</FONT></P>
<P style='FONT-SIZE: 16px; FONT-FAMILY: "Segoe UI", SegoeUI, "Helvetica Neue", Helvetica, Arial, sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; MARGIN-TOP: 1px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(22,22,22); PADDING-BOTTOM: 0px; FONT-STYLE: normal; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN-LEFT: 1px; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; OUTLINE-COLOR: ; PADDING-RIGHT: 0px; BACKGROUND-COLOR: rgb(255,255,255); MARGIN-RIGHT: 1px; TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial; overflow-wrap: break-word'><FONT class=extract><STRONG style="FONT-WEIGHT: 600; OUTLINE-COLOR: ">Logging</STRONG>. A circuit breaker should log all failed requests (and possibly successful requests) to enable an administrator to monitor the health of the operation.</FONT></P>
<P style='FONT-SIZE: 16px; FONT-FAMILY: "Segoe UI", SegoeUI, "Helvetica Neue", Helvetica, Arial, sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; MARGIN-TOP: 1px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(22,22,22); PADDING-BOTTOM: 0px; FONT-STYLE: normal; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN-LEFT: 1px; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; OUTLINE-COLOR: ; PADDING-RIGHT: 0px; BACKGROUND-COLOR: rgb(255,255,255); MARGIN-RIGHT: 1px; TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial; overflow-wrap: break-word'><FONT class=extract><STRONG style="FONT-WEIGHT: 600; OUTLINE-COLOR: ">Recoverability</STRONG>. You should configure the circuit breaker to match the likely recovery pattern of the operation it's protecting. For example, if the circuit breaker remains in the<SPAN>&nbsp;</SPAN><STRONG style="FONT-WEIGHT: 600; OUTLINE-COLOR: ">Open</STRONG><SPAN>&nbsp;</SPAN>state for a long period, it could raise exceptions even if the reason for the failure has been resolved. Similarly, a circuit breaker could fluctuate and reduce the response times of applications if it switches from the<SPAN>&nbsp;</SPAN><STRONG style="FONT-WEIGHT: 600; OUTLINE-COLOR: ">Open</STRONG><SPAN>&nbsp;</SPAN>state to the<SPAN>&nbsp;</SPAN><STRONG style="FONT-WEIGHT: 600; OUTLINE-COLOR: ">Half-Open</STRONG><SPAN>&nbsp;</SPAN>state too quickly.</FONT></P>
<P style='FONT-SIZE: 16px; FONT-FAMILY: "Segoe UI", SegoeUI, "Helvetica Neue", Helvetica, Arial, sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; MARGIN-TOP: 1px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(22,22,22); PADDING-BOTTOM: 0px; FONT-STYLE: normal; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN-LEFT: 1px; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; OUTLINE-COLOR: ; PADDING-RIGHT: 0px; BACKGROUND-COLOR: rgb(255,255,255); MARGIN-RIGHT: 1px; TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial; overflow-wrap: break-word'><FONT class=extract><STRONG style="FONT-WEIGHT: 600; OUTLINE-COLOR: ">Testing Failed Operations</STRONG>. In the<SPAN>&nbsp;</SPAN><STRONG style="FONT-WEIGHT: 600; OUTLINE-COLOR: ">Open</STRONG><SPAN>&nbsp;</SPAN>state, rather than using a timer to determine when to switch to the<SPAN>&nbsp;</SPAN><STRONG style="FONT-WEIGHT: 600; OUTLINE-COLOR: ">Half-Open</STRONG><SPAN>&nbsp;</SPAN>state, a circuit breaker can instead periodically ping the remote service or resource to determine whether it's become available again. This ping could take the form of an attempt to invoke an operation that had previously failed, or it could use a special operation provided by the remote service specifically for testing the health of the service, as described by the<SPAN>&nbsp;</SPAN></FONT><A style="CURSOR: pointer; TEXT-DECORATION: none; COLOR: ; OUTLINE-WIDTH: 0px; OUTLINE-COLOR: ; overflow-wrap: break-word" href="https://learn.microsoft.com/en-us/azure/architecture/patterns/health-endpoint-monitoring" data-linktype="absolute-path"><FONT class=extract>Health Endpoint Monitoring pattern</FONT></A><FONT class=extract>.</FONT></P>
<P style='FONT-SIZE: 16px; FONT-FAMILY: "Segoe UI", SegoeUI, "Helvetica Neue", Helvetica, Arial, sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; MARGIN-TOP: 1px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(22,22,22); PADDING-BOTTOM: 0px; FONT-STYLE: normal; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN-LEFT: 1px; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; OUTLINE-COLOR: ; PADDING-RIGHT: 0px; BACKGROUND-COLOR: rgb(255,255,255); MARGIN-RIGHT: 1px; TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial; overflow-wrap: break-word'><FONT class=extract><STRONG style="FONT-WEIGHT: 600; OUTLINE-COLOR: ">Manual Override</STRONG>. In a system where the recovery time for a failing operation is extremely variable, it's beneficial to provide a manual reset option that enables an administrator to close a circuit breaker (and reset the failure counter). Similarly, an administrator could force a circuit breaker into the<SPAN>&nbsp;</SPAN><STRONG style="FONT-WEIGHT: 600; OUTLINE-COLOR: ">Open</STRONG><SPAN>&nbsp;</SPAN>state (and restart the timeout timer) if the operation protected by the circuit breaker is temporarily unavailable.</FONT></P>
<P style='FONT-SIZE: 16px; FONT-FAMILY: "Segoe UI", SegoeUI, "Helvetica Neue", Helvetica, Arial, sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; MARGIN-TOP: 1px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(22,22,22); PADDING-BOTTOM: 0px; FONT-STYLE: normal; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN-LEFT: 1px; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; OUTLINE-COLOR: ; PADDING-RIGHT: 0px; BACKGROUND-COLOR: rgb(255,255,255); MARGIN-RIGHT: 1px; TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial; overflow-wrap: break-word'><FONT class=extract><STRONG style="FONT-WEIGHT: 600; OUTLINE-COLOR: ">Concurrency</STRONG>. The same circuit breaker could be accessed by a large number of concurrent instances of an application. The implementation shouldn't block concurrent requests or add excessive overhead to each call to an operation.</FONT></P>
<P style='FONT-SIZE: 16px; FONT-FAMILY: "Segoe UI", SegoeUI, "Helvetica Neue", Helvetica, Arial, sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; MARGIN-TOP: 1px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(22,22,22); PADDING-BOTTOM: 0px; FONT-STYLE: normal; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN-LEFT: 1px; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; OUTLINE-COLOR: ; PADDING-RIGHT: 0px; BACKGROUND-COLOR: rgb(255,255,255); MARGIN-RIGHT: 1px; TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial; overflow-wrap: break-word'><FONT class=extract><STRONG style="FONT-WEIGHT: 600; OUTLINE-COLOR: ">Resource Differentiation</STRONG>. Be careful when using a single circuit breaker for one type of resource if there might be multiple underlying independent providers. For example, in a data store that contains multiple shards, one shard might be fully accessible while another is experiencing a temporary issue. If the error responses in these scenarios are merged, an application might try to access some shards even when failure is highly likely, while access to other shards might be blocked even though it's likely to succeed.</FONT></P>
<P style='FONT-SIZE: 16px; FONT-FAMILY: "Segoe UI", SegoeUI, "Helvetica Neue", Helvetica, Arial, sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; MARGIN-TOP: 1px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(22,22,22); PADDING-BOTTOM: 0px; FONT-STYLE: normal; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN-LEFT: 1px; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; OUTLINE-COLOR: ; PADDING-RIGHT: 0px; BACKGROUND-COLOR: rgb(255,255,255); MARGIN-RIGHT: 1px; TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial; overflow-wrap: break-word'><FONT class=extract><STRONG style="FONT-WEIGHT: 600; OUTLINE-COLOR: ">Accelerated Circuit Breaking</STRONG>. Sometimes a failure response can contain enough information for the circuit breaker to trip immediately and stay tripped for a minimum amount of time. For example, the error response from a shared resource that's overloaded could indicate that an immediate retry isn't recommended and that the application should instead try again in a few minutes.</FONT></P>
<DIV class="alert is-info" style='FONT-SIZE: 16px; BORDER-TOP: 1px solid; FONT-FAMILY: "Segoe UI", SegoeUI, "Helvetica Neue", Helvetica, Arial, sans-serif; BORDER-RIGHT: 1px solid; WHITE-SPACE: normal; WORD-SPACING: 0px; BORDER-BOTTOM: 1px solid; POSITION: relative; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(22,22,22); FONT-STYLE: normal; PADDING-TOP: 1px; PADDING-LEFT: 1px; BORDER-LEFT: 1px solid; ORPHANS: 2; WIDOWS: 2; DISPLAY: block; LETTER-SPACING: normal; OUTLINE-COLOR: ; PADDING-RIGHT: 1px; TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial; overflow-wrap: break-word; transition: height 0.5s ease-in, opacity 0.5s ease-in; border-radius: 0.375rem'>
<P class=alert-title style="MAX-WIDTH: 100%; FONT-WEIGHT: 600; COLOR: ; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 0px; OUTLINE-COLOR: ; PADDING-RIGHT: 0px; overflow-wrap: break-word"><SPAN aria-hidden=true class="docon docon-status-error-outline" style="FONT-FAMILY: docons; FONT-VARIANT: normal; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; DIRECTION: ltr; FONT-STYLE: normal; TEXT-ALIGN: center; DISPLAY: inline-block; OUTLINE-COLOR: ; LINE-HEIGHT: 16px; speak: none; -webkit-font-smoothing: antialiased"><FONT class=extract></FONT></SPAN><FONT class=extract><SPAN>&nbsp;</SPAN>Note</FONT></P>
<P style="MAX-WIDTH: 100%; MARGIN-TOP: 1px; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN-LEFT: 1px; OUTLINE-COLOR: ; PADDING-RIGHT: 0px; MARGIN-RIGHT: 1px; overflow-wrap: break-word"><FONT class=extract>A service can return HTTP 429 (Too Many Requests) if it is throttling the client, or HTTP 503 (Service Unavailable) if the service is not currently available. The response can include additional information, such as the anticipated duration of the delay.</FONT></P></DIV>
<P style='FONT-SIZE: 16px; FONT-FAMILY: "Segoe UI", SegoeUI, "Helvetica Neue", Helvetica, Arial, sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; MARGIN-TOP: 1px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(22,22,22); PADDING-BOTTOM: 0px; FONT-STYLE: normal; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN-LEFT: 1px; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; OUTLINE-COLOR: ; PADDING-RIGHT: 0px; BACKGROUND-COLOR: rgb(255,255,255); MARGIN-RIGHT: 1px; TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial; overflow-wrap: break-word'><FONT class=extract><STRONG style="FONT-WEIGHT: 600; OUTLINE-COLOR: ">Replaying Failed Requests</STRONG>. In the<SPAN>&nbsp;</SPAN><STRONG style="FONT-WEIGHT: 600; OUTLINE-COLOR: ">Open</STRONG><SPAN>&nbsp;</SPAN>state, rather than simply failing quickly, a circuit breaker could also record the details of each request to a journal and arrange for these requests to be replayed when the remote resource or service becomes available.</FONT></P>
<P style='FONT-SIZE: 16px; FONT-FAMILY: "Segoe UI", SegoeUI, "Helvetica Neue", Helvetica, Arial, sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; MARGIN-TOP: 1px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(22,22,22); PADDING-BOTTOM: 0px; FONT-STYLE: normal; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN-LEFT: 1px; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; OUTLINE-COLOR: ; PADDING-RIGHT: 0px; BACKGROUND-COLOR: rgb(255,255,255); MARGIN-RIGHT: 1px; TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial; overflow-wrap: break-word'><FONT class=extract><STRONG style="FONT-WEIGHT: 600; OUTLINE-COLOR: ">Inappropriate Timeouts on External Services</STRONG>. A circuit breaker might not be able to fully protect applications from operations that fail in external services that are configured with a lengthy timeout period. If the timeout is too long, a thread running a circuit breaker might be blocked for an extended period before the circuit breaker indicates that the operation has failed. In this time, many other application instances might also try to invoke the service through the circuit breaker and tie up a significant number of threads before they all fail.</FONT></P>
<DIV class=heading-wrapper style='FONT-SIZE: 16px; FONT-FAMILY: "Segoe UI", SegoeUI, "Helvetica Neue", Helvetica, Arial, sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; POSITION: relative; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(22,22,22); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; OUTLINE-COLOR: ; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial' data-heading-level="h2"><A aria-label="Section titled: When to use this pattern" class="anchor-link docon docon-link" style="OVERFLOW: hidden; CURSOR: pointer; TEXT-DECORATION: none; BORDER-TOP: 0px; CLIP: rect(1px 1px 1px 1px); HEIGHT: 1px; FONT-FAMILY: docons; BORDER-RIGHT: 0px; FONT-VARIANT: normal; WIDTH: 1px; BORDER-BOTTOM: 0px; POSITION: absolute; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: ; OUTLINE-WIDTH: 0px; PADDING-BOTTOM: 0px; DIRECTION: ltr; FONT-STYLE: normal; TEXT-ALIGN: center; PADDING-TOP: 0px; PADDING-LEFT: 0px; BORDER-LEFT: 0px; MARGIN: -1px; DISPLAY: inline-block; OUTLINE-COLOR: ; LINE-HEIGHT: 16px; PADDING-RIGHT: 0px; overflow-wrap: normal; speak: none; -webkit-font-smoothing: antialiased; transition: opacity 0.1s linear; inset-inline-start: -1.875rem; transform: translateY(-50%) scale(1); inset-block-start: 1.38125rem; clip-path: inset(50%); opacity: 0" href="https://learn.microsoft.com/en-us/azure/architecture/patterns/circuit-breaker#when-to-use-this-pattern"><FONT class=extract></FONT></A>
<H2 id=when-to-use-this-pattern class=heading-anchor style="FONT-WEIGHT: 600; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 32px 0px 12px; OUTLINE-COLOR: ; LINE-HEIGHT: 1.3; PADDING-RIGHT: 0px; margin-inline-start: -1.875rem; padding-inline-start: 1.875rem"><FONT class=extract>When to use this pattern</FONT></H2></DIV>
<P style='FONT-SIZE: 16px; FONT-FAMILY: "Segoe UI", SegoeUI, "Helvetica Neue", Helvetica, Arial, sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; MARGIN-TOP: 1px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(22,22,22); PADDING-BOTTOM: 0px; FONT-STYLE: normal; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN-LEFT: 1px; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; OUTLINE-COLOR: ; PADDING-RIGHT: 0px; BACKGROUND-COLOR: rgb(255,255,255); MARGIN-RIGHT: 1px; TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial; overflow-wrap: break-word'><FONT class=extract>Use this pattern:</FONT></P>
<UL style='LIST-STYLE-TYPE: none; FONT-SIZE: 16px; FONT-FAMILY: "Segoe UI", SegoeUI, "Helvetica Neue", Helvetica, Arial, sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(22,22,22); PADDING-BOTTOM: 0px; FONT-STYLE: normal; PADDING-TOP: 0px; PADDING-LEFT: 0px; ORPHANS: 2; WIDOWS: 2; MARGIN: 16px 0px 16px 38px; LETTER-SPACING: normal; OUTLINE-COLOR: ; PADDING-RIGHT: 0px; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial'>
<LI style="LIST-STYLE-TYPE: disc; OUTLINE-WIDTH: 0px; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 0px; OUTLINE-COLOR: ; PADDING-RIGHT: 0px"><FONT class=extract>To prevent an application from trying to invoke a remote service or access a shared resource if this operation is highly likely to fail.</FONT></LI></UL>
<P style='FONT-SIZE: 16px; FONT-FAMILY: "Segoe UI", SegoeUI, "Helvetica Neue", Helvetica, Arial, sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; MARGIN-TOP: 1px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(22,22,22); PADDING-BOTTOM: 0px; FONT-STYLE: normal; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN-LEFT: 1px; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; OUTLINE-COLOR: ; PADDING-RIGHT: 0px; BACKGROUND-COLOR: rgb(255,255,255); MARGIN-RIGHT: 1px; TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial; overflow-wrap: break-word'><FONT class=extract>This pattern isn't recommended:</FONT></P>
<UL style='LIST-STYLE-TYPE: none; FONT-SIZE: 16px; FONT-FAMILY: "Segoe UI", SegoeUI, "Helvetica Neue", Helvetica, Arial, sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(22,22,22); PADDING-BOTTOM: 0px; FONT-STYLE: normal; PADDING-TOP: 0px; PADDING-LEFT: 0px; ORPHANS: 2; WIDOWS: 2; MARGIN: 16px 0px 16px 38px; LETTER-SPACING: normal; OUTLINE-COLOR: ; PADDING-RIGHT: 0px; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial'>
<LI style="LIST-STYLE-TYPE: disc; OUTLINE-WIDTH: 0px; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 0px; OUTLINE-COLOR: ; PADDING-RIGHT: 0px"><FONT class=extract>For handling access to local private resources in an application, such as in-memory data structure. In this environment, using a circuit breaker would add overhead to your system. </FONT>
<LI style="LIST-STYLE-TYPE: disc; OUTLINE-WIDTH: 0px; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 0px; OUTLINE-COLOR: ; PADDING-RIGHT: 0px"><FONT class=extract>As a substitute for handling exceptions in the business logic of your applications.</FONT></LI></UL>
<DIV class=heading-wrapper style='FONT-SIZE: 16px; FONT-FAMILY: "Segoe UI", SegoeUI, "Helvetica Neue", Helvetica, Arial, sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; POSITION: relative; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(22,22,22); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; OUTLINE-COLOR: ; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial' data-heading-level="h2"><A aria-label="Section titled: Workload design" class="anchor-link docon docon-link" style="OVERFLOW: hidden; CURSOR: pointer; TEXT-DECORATION: none; BORDER-TOP: 0px; CLIP: rect(1px 1px 1px 1px); HEIGHT: 1px; FONT-FAMILY: docons; BORDER-RIGHT: 0px; FONT-VARIANT: normal; WIDTH: 1px; BORDER-BOTTOM: 0px; POSITION: absolute; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: ; OUTLINE-WIDTH: 0px; PADDING-BOTTOM: 0px; DIRECTION: ltr; FONT-STYLE: normal; TEXT-ALIGN: center; PADDING-TOP: 0px; PADDING-LEFT: 0px; BORDER-LEFT: 0px; MARGIN: -1px; DISPLAY: inline-block; OUTLINE-COLOR: ; LINE-HEIGHT: 16px; PADDING-RIGHT: 0px; overflow-wrap: normal; speak: none; -webkit-font-smoothing: antialiased; transition: opacity 0.1s linear; inset-inline-start: -1.875rem; transform: translateY(-50%) scale(1); inset-block-start: 1.38125rem; clip-path: inset(50%); opacity: 0" href="https://learn.microsoft.com/en-us/azure/architecture/patterns/circuit-breaker#workload-design"><FONT class=extract></FONT></A>
<H2 id=workload-design class=heading-anchor style="FONT-WEIGHT: 600; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 32px 0px 12px; OUTLINE-COLOR: ; LINE-HEIGHT: 1.3; PADDING-RIGHT: 0px; margin-inline-start: -1.875rem; padding-inline-start: 1.875rem"><FONT class=extract>Workload design</FONT></H2></DIV>
<P style='FONT-SIZE: 16px; FONT-FAMILY: "Segoe UI", SegoeUI, "Helvetica Neue", Helvetica, Arial, sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; MARGIN-TOP: 1px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(22,22,22); PADDING-BOTTOM: 0px; FONT-STYLE: normal; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN-LEFT: 1px; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; OUTLINE-COLOR: ; PADDING-RIGHT: 0px; BACKGROUND-COLOR: rgb(255,255,255); MARGIN-RIGHT: 1px; TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial; overflow-wrap: break-word'><FONT class=extract>An architect should evaluate how the Circuit Breaker pattern can be used in their workload's design to address the goals and principles covered in the<SPAN>&nbsp;</SPAN></FONT><A style="CURSOR: pointer; TEXT-DECORATION: none; COLOR: ; OUTLINE-WIDTH: 0px; OUTLINE-COLOR: ; overflow-wrap: break-word" href="https://learn.microsoft.com/en-us/azure/well-architected/pillars" data-linktype="absolute-path"><FONT class=extract>Azure Well-Architected Framework pillars</FONT></A><FONT class=extract>. For example:</FONT></P>
<DIV class="buttons buttons-right margin-bottom-none margin-top-sm" style='FONT-SIZE: 16px; FONT-FAMILY: "Segoe UI", SegoeUI, "Helvetica Neue", Helvetica, Arial, sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(22,22,22); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; DISPLAY: flex; LETTER-SPACING: normal; OUTLINE-COLOR: ; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial; margin-block-start: 1.5rem; margin-block-end: 1rem; flex-wrap: wrap; justify-content: flex-end; align-items: center'><FONT class=extract></FONT></DIV>
<DIV class=has-inner-focus style='FONT-SIZE: 16px; FONT-FAMILY: "Segoe UI", SegoeUI, "Helvetica Neue", Helvetica, Arial, sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(22,22,22); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; OUTLINE-COLOR: ; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial'>
<TABLE aria-label="Table 1" class=table style="BORDER-TOP: 1px solid; BORDER-RIGHT: 1px solid; WIDTH: 583px; BORDER-COLLAPSE: collapse; TABLE-LAYOUT: auto; BORDER-BOTTOM: 1px solid; BORDER-SPACING: 0px; BORDER-LEFT: 1px solid; OUTLINE-COLOR: ">
<THEAD style="OUTLINE-COLOR: ">
<TR style="OUTLINE-COLOR: ">
<TH style="VERTICAL-ALIGN: top; TEXT-ALIGN: left; PADDING-TOP: 1px; PADDING-LEFT: 1px; DISPLAY: table-cell; OUTLINE-COLOR: ; LINE-HEIGHT: 1.5; PADDING-RIGHT: 1px; overflow-wrap: break-word; border-block-start: 1px solid var(--theme-table-border-dark)"><FONT class=extract>Pillar</FONT></TH>
<TH style="VERTICAL-ALIGN: top; TEXT-ALIGN: left; PADDING-TOP: 1px; PADDING-LEFT: 1px; DISPLAY: table-cell; OUTLINE-COLOR: ; LINE-HEIGHT: 1.5; PADDING-RIGHT: 1px; overflow-wrap: break-word; border-block-start: 1px solid var(--theme-table-border-dark)"><FONT class=extract>How this pattern supports pillar goals</FONT></TH></TR></THEAD>
<TBODY style="OUTLINE-COLOR: ">
<TR style="OUTLINE-COLOR: ">
<TD style="VERTICAL-ALIGN: top; TEXT-ALIGN: left; PADDING-TOP: 1px; PADDING-LEFT: 1px; DISPLAY: table-cell; OUTLINE-COLOR: ; LINE-HEIGHT: 1.5; PADDING-RIGHT: 1px; overflow-wrap: break-word; border-block-start: 1px solid var(--theme-table-border-dark)"><A style="CURSOR: pointer; TEXT-DECORATION: none; COLOR: ; OUTLINE-WIDTH: 0px; OUTLINE-COLOR: ; overflow-wrap: break-word" href="https://learn.microsoft.com/en-us/azure/well-architected/reliability/checklist" data-linktype="absolute-path"><FONT class=extract>Reliability</FONT></A><FONT class=extract><SPAN>&nbsp;</SPAN>design decisions help your workload become<SPAN>&nbsp;</SPAN><STRONG style="FONT-WEIGHT: 600; OUTLINE-COLOR: ">resilient</STRONG><SPAN>&nbsp;</SPAN>to malfunction and to ensure that it<SPAN>&nbsp;</SPAN><STRONG style="FONT-WEIGHT: 600; OUTLINE-COLOR: ">recovers</STRONG><SPAN>&nbsp;</SPAN>to a fully functioning state after a failure occurs.</FONT></TD>
<TD style="VERTICAL-ALIGN: top; TEXT-ALIGN: left; PADDING-TOP: 1px; PADDING-LEFT: 1px; DISPLAY: table-cell; OUTLINE-COLOR: ; LINE-HEIGHT: 1.5; PADDING-RIGHT: 1px; overflow-wrap: break-word; border-block-start: 1px solid var(--theme-table-border-dark)"><FONT class=extract>This pattern prevents overloading a faulting dependency. You can also use this pattern to trigger graceful degradation in the workload. Circuit breakers are often coupled with automatic recovery to provide both self-preservation and self-healing.<BR style="OUTLINE-COLOR: "><BR style="OUTLINE-COLOR: ">-<SPAN>&nbsp;</SPAN></FONT><A style="CURSOR: pointer; TEXT-DECORATION: none; COLOR: ; OUTLINE-WIDTH: 0px; OUTLINE-COLOR: ; overflow-wrap: break-word" href="https://learn.microsoft.com/en-us/azure/well-architected/reliability/failure-mode-analysis" data-linktype="absolute-path"><FONT class=extract>RE:03 Failure mode analysis</FONT></A><BR style="OUTLINE-COLOR: "><FONT class=extract>-<SPAN>&nbsp;</SPAN></FONT><A style="CURSOR: pointer; TEXT-DECORATION: none; COLOR: ; OUTLINE-WIDTH: 0px; OUTLINE-COLOR: ; overflow-wrap: break-word" href="https://learn.microsoft.com/en-us/azure/well-architected/reliability/handle-transient-faults" data-linktype="absolute-path"><FONT class=extract>RE:07 Transient faults</FONT></A><BR style="OUTLINE-COLOR: "><FONT class=extract>-<SPAN>&nbsp;</SPAN></FONT><A style="CURSOR: pointer; TEXT-DECORATION: none; COLOR: ; OUTLINE-WIDTH: 0px; OUTLINE-COLOR: ; overflow-wrap: break-word" href="https://learn.microsoft.com/en-us/azure/well-architected/reliability/self-preservation" data-linktype="absolute-path"><FONT class=extract>RE:07 Self-preservation</FONT></A></TD></TR>
<TR style="OUTLINE-COLOR: ">
<TD style="VERTICAL-ALIGN: top; TEXT-ALIGN: left; PADDING-TOP: 1px; PADDING-LEFT: 1px; DISPLAY: table-cell; OUTLINE-COLOR: ; LINE-HEIGHT: 1.5; PADDING-RIGHT: 1px; overflow-wrap: break-word; border-block-start: 1px solid var(--theme-table-border-dark)"><A style="CURSOR: pointer; TEXT-DECORATION: none; COLOR: ; OUTLINE-WIDTH: 0px; OUTLINE-COLOR: ; overflow-wrap: break-word" href="https://learn.microsoft.com/en-us/azure/well-architected/performance-efficiency/checklist" data-linktype="absolute-path"><FONT class=extract>Performance Efficiency</FONT></A><FONT class=extract><SPAN>&nbsp;</SPAN>helps your workload<SPAN>&nbsp;</SPAN><STRONG style="FONT-WEIGHT: 600; OUTLINE-COLOR: ">efficiently meet demands</STRONG><SPAN>&nbsp;</SPAN>through optimizations in scaling, data, code.</FONT></TD>
<TD style="VERTICAL-ALIGN: top; TEXT-ALIGN: left; PADDING-TOP: 1px; PADDING-LEFT: 1px; DISPLAY: table-cell; OUTLINE-COLOR: ; LINE-HEIGHT: 1.5; PADDING-RIGHT: 1px; overflow-wrap: break-word; border-block-start: 1px solid var(--theme-table-border-dark)"><FONT class=extract>This pattern avoids the retry-on-error approach which can lead to excessive resource utilization during dependency recovery and can also overload performance on a dependency that's attempting recovery.<BR style="OUTLINE-COLOR: "><BR style="OUTLINE-COLOR: ">-<SPAN>&nbsp;</SPAN></FONT><A style="CURSOR: pointer; TEXT-DECORATION: none; COLOR: ; OUTLINE-WIDTH: 0px; OUTLINE-COLOR: ; overflow-wrap: break-word" href="https://learn.microsoft.com/en-us/azure/well-architected/performance-efficiency/optimize-code-infrastructure" data-linktype="absolute-path"><FONT class=extract>PE:07 Code and infrastructure</FONT></A><BR style="OUTLINE-COLOR: "><FONT class=extract>-<SPAN>&nbsp;</SPAN></FONT><A style="CURSOR: pointer; TEXT-DECORATION: none; COLOR: ; OUTLINE-WIDTH: 0px; OUTLINE-COLOR: ; overflow-wrap: break-word" href="https://learn.microsoft.com/en-us/azure/well-architected/performance-efficiency/respond-live-performance-issues" data-linktype="absolute-path"><FONT class=extract>PE:11 Live-issues responses</FONT></A></TD></TR></TBODY></TABLE></DIV>
<P style='FONT-SIZE: 16px; FONT-FAMILY: "Segoe UI", SegoeUI, "Helvetica Neue", Helvetica, Arial, sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; MARGIN-TOP: 1px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(22,22,22); PADDING-BOTTOM: 0px; FONT-STYLE: normal; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN-LEFT: 1px; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; OUTLINE-COLOR: ; PADDING-RIGHT: 0px; BACKGROUND-COLOR: rgb(255,255,255); MARGIN-RIGHT: 1px; TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial; overflow-wrap: break-word'><FONT class=extract>As with any design decision, consider any tradeoffs against the goals of the other pillars that might be introduced with this pattern.</FONT></P>
<DIV class=heading-wrapper style='FONT-SIZE: 16px; FONT-FAMILY: "Segoe UI", SegoeUI, "Helvetica Neue", Helvetica, Arial, sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; POSITION: relative; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(22,22,22); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; OUTLINE-COLOR: ; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial' data-heading-level="h2"><A aria-label="Section titled: Example" class="anchor-link docon docon-link" style="OVERFLOW: hidden; CURSOR: pointer; TEXT-DECORATION: none; BORDER-TOP: 0px; CLIP: rect(1px 1px 1px 1px); HEIGHT: 1px; FONT-FAMILY: docons; BORDER-RIGHT: 0px; FONT-VARIANT: normal; WIDTH: 1px; BORDER-BOTTOM: 0px; POSITION: absolute; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: ; OUTLINE-WIDTH: 0px; PADDING-BOTTOM: 0px; DIRECTION: ltr; FONT-STYLE: normal; TEXT-ALIGN: center; PADDING-TOP: 0px; PADDING-LEFT: 0px; BORDER-LEFT: 0px; MARGIN: -1px; DISPLAY: inline-block; OUTLINE-COLOR: ; LINE-HEIGHT: 16px; PADDING-RIGHT: 0px; overflow-wrap: normal; speak: none; -webkit-font-smoothing: antialiased; transition: opacity 0.1s linear; inset-inline-start: -1.875rem; transform: translateY(-50%) scale(1); inset-block-start: 1.38125rem; clip-path: inset(50%); opacity: 0" href="https://learn.microsoft.com/en-us/azure/architecture/patterns/circuit-breaker#example"><FONT class=extract></FONT></A>
<H2 id=example class=heading-anchor style="FONT-WEIGHT: 600; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 32px 0px 12px; OUTLINE-COLOR: ; LINE-HEIGHT: 1.3; PADDING-RIGHT: 0px; margin-inline-start: -1.875rem; padding-inline-start: 1.875rem"><FONT class=extract>Example</FONT></H2></DIV>
<P style='FONT-SIZE: 16px; FONT-FAMILY: "Segoe UI", SegoeUI, "Helvetica Neue", Helvetica, Arial, sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; MARGIN-TOP: 1px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(22,22,22); PADDING-BOTTOM: 0px; FONT-STYLE: normal; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN-LEFT: 1px; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; OUTLINE-COLOR: ; PADDING-RIGHT: 0px; BACKGROUND-COLOR: rgb(255,255,255); MARGIN-RIGHT: 1px; TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial; overflow-wrap: break-word'><FONT class=extract>In a web application, several of the pages are populated with data retrieved from an external service. If the system implements minimal caching, most hits to these pages will cause a round trip to the service. Connections from the web application to the service could be configured with a timeout period (typically 60 seconds), and if the service doesn't respond in this time the logic in each web page will assume that the service is unavailable and throw an exception.</FONT></P>
<P style='FONT-SIZE: 16px; FONT-FAMILY: "Segoe UI", SegoeUI, "Helvetica Neue", Helvetica, Arial, sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; MARGIN-TOP: 1px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(22,22,22); PADDING-BOTTOM: 0px; FONT-STYLE: normal; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN-LEFT: 1px; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; OUTLINE-COLOR: ; PADDING-RIGHT: 0px; BACKGROUND-COLOR: rgb(255,255,255); MARGIN-RIGHT: 1px; TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial; overflow-wrap: break-word'><FONT class=extract>However, if the service fails and the system is very busy, users could be forced to wait for up to 60 seconds before an exception occurs. Eventually resources such as memory, connections, and threads could be exhausted, preventing other users from connecting to the system, even if they aren't accessing pages that retrieve data from the service.</FONT></P>
<P style='FONT-SIZE: 16px; FONT-FAMILY: "Segoe UI", SegoeUI, "Helvetica Neue", Helvetica, Arial, sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; MARGIN-TOP: 1px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(22,22,22); PADDING-BOTTOM: 0px; FONT-STYLE: normal; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN-LEFT: 1px; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; OUTLINE-COLOR: ; PADDING-RIGHT: 0px; BACKGROUND-COLOR: rgb(255,255,255); MARGIN-RIGHT: 1px; TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial; overflow-wrap: break-word'><FONT class=extract>Scaling the system by adding further web servers and implementing load balancing might delay when resources become exhausted, but it won't resolve the issue because user requests will still be unresponsive and all web servers could still eventually run out of resources.</FONT></P>
<P style='FONT-SIZE: 16px; FONT-FAMILY: "Segoe UI", SegoeUI, "Helvetica Neue", Helvetica, Arial, sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; MARGIN-TOP: 1px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(22,22,22); PADDING-BOTTOM: 0px; FONT-STYLE: normal; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN-LEFT: 1px; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; OUTLINE-COLOR: ; PADDING-RIGHT: 0px; BACKGROUND-COLOR: rgb(255,255,255); MARGIN-RIGHT: 1px; TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial; overflow-wrap: break-word'><FONT class=extract>Wrapping the logic that connects to the service and retrieves the data in a circuit breaker could help to solve this problem and handle the service failure more elegantly. User requests will still fail, but they'll fail more quickly and the resources won't be blocked.</FONT></P>
<P style='FONT-SIZE: 16px; FONT-FAMILY: "Segoe UI", SegoeUI, "Helvetica Neue", Helvetica, Arial, sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; MARGIN-TOP: 1px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(22,22,22); PADDING-BOTTOM: 0px; FONT-STYLE: normal; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN-LEFT: 1px; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; OUTLINE-COLOR: ; PADDING-RIGHT: 0px; BACKGROUND-COLOR: rgb(255,255,255); MARGIN-RIGHT: 1px; TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial; overflow-wrap: break-word'><FONT class=extract>The<SPAN>&nbsp;</SPAN><CODE style='FONT-SIZE: 13px; FONT-FAMILY: SFMono-Regular, Consolas, "Liberation Mono", Menlo, Courier, monospace; PADDING-BOTTOM: 0.1em; DIRECTION: ltr; PADDING-TOP: 0.1em; PADDING-LEFT: 0.2em; OUTLINE-COLOR: ; PADDING-RIGHT: 0.2em; overflow-wrap: break-word; border-radius: 3px'>CircuitBreaker</CODE><SPAN>&nbsp;</SPAN>class maintains state information about a circuit breaker in an object that implements the<SPAN>&nbsp;</SPAN><CODE style='FONT-SIZE: 13px; FONT-FAMILY: SFMono-Regular, Consolas, "Liberation Mono", Menlo, Courier, monospace; PADDING-BOTTOM: 0.1em; DIRECTION: ltr; PADDING-TOP: 0.1em; PADDING-LEFT: 0.2em; OUTLINE-COLOR: ; PADDING-RIGHT: 0.2em; overflow-wrap: break-word; border-radius: 3px'>ICircuitBreakerStateStore</CODE><SPAN>&nbsp;</SPAN>interface shown in the following code.</FONT></P>
<DIV id=code-try-0 class=codeHeader style='BOX-SIZING: content-box; FONT-FAMILY: "Segoe UI", SegoeUI, "Helvetica Neue", Helvetica, Arial, sans-serif; BORDER-TOP-COLOR: ; WHITE-SPACE: normal; WORD-SPACING: 0px; MARGIN-TOP: 16px; BORDER-BOTTOM: 0px; TEXT-TRANSFORM: none; BORDER-LEFT-COLOR: ; FONT-WEIGHT: 400; COLOR: rgb(22,22,22); FONT-STYLE: normal; MIN-HEIGHT: 30px; ORPHANS: 2; WIDOWS: 2; DISPLAY: flex; BORDER-RIGHT-COLOR: ; LETTER-SPACING: normal; OUTLINE-COLOR: ; TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial; border-image-source: ; border-image-slice: ; border-image-width: ; border-image-outset: ; border-image-repeat: ; flex-direction: row' data-bi-name="code-header"><SPAN class=language style="PADDING-BOTTOM: 2px; PADDING-TOP: 2px; PADDING-LEFT: 16px; DISPLAY: flex; OUTLINE-COLOR: ; PADDING-RIGHT: 16px; align-items: center; flex-grow: 1"><FONT class=extract>C#</FONT></SPAN></DIV><PRE class=has-inner-focus style='OVERFLOW: auto; FONT-FAMILY: SFMono-Regular, Consolas, "Liberation Mono", Menlo, Courier, monospace !important; WHITE-SPACE: pre; WORD-SPACING: 0px; TEXT-TRANSFORM: none; WORD-BREAK: normal; FONT-WEIGHT: 400; COLOR: rgb(22,22,22); FONT-STYLE: normal; PADDING-TOP: 1px; PADDING-LEFT: 1px; ORPHANS: 2; WIDOWS: 2; MARGIN: 0px; LETTER-SPACING: normal; OUTLINE-COLOR: ; LINE-HEIGHT: 1.3571; PADDING-RIGHT: 1px; TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial; overflow-wrap: normal; -webkit-font-smoothing: auto; tab-size: 4; hyphens: none'><CODE class=lang-csharp style='FONT-SIZE: 1em; BORDER-TOP: 0px; FONT-FAMILY: SFMono-Regular, Consolas, "Liberation Mono", Menlo, Courier, monospace; BORDER-RIGHT: 0px; BORDER-BOTTOM: 0px; POSITION: relative; PADDING-BOTTOM: 0px; DIRECTION: ltr; PADDING-TOP: 0px; PADDING-LEFT: 0px; BORDER-LEFT: 0px; DISPLAY: block; OUTLINE-COLOR: ; LINE-HEIGHT: 1.3571; PADDING-RIGHT: 0px'><SPAN style="OUTLINE-COLOR: "><FONT class=extract><SPAN class=hljs-keyword style="COLOR: rgb(1,1,253); OUTLINE-COLOR: ">interface</SPAN> <SPAN class=hljs-title style="COLOR: rgb(0,104,129); OUTLINE-COLOR: ">ICircuitBreakerStateStore</SPAN>
{
  CircuitBreakerStateEnum State { <SPAN class=hljs-keyword style="COLOR: rgb(1,1,253); OUTLINE-COLOR: ">get</SPAN>; }

  Exception LastException { <SPAN class=hljs-keyword style="COLOR: rgb(1,1,253); OUTLINE-COLOR: ">get</SPAN>; }

  DateTime LastStateChangedDateUtc { <SPAN class=hljs-keyword style="COLOR: rgb(1,1,253); OUTLINE-COLOR: ">get</SPAN>; }

  <SPAN class=hljs-function style="OUTLINE-COLOR: "><SPAN class=hljs-keyword style="COLOR: rgb(1,1,253); OUTLINE-COLOR: ">void</SPAN> <SPAN class=hljs-title style="COLOR: rgb(0,104,129); OUTLINE-COLOR: ">Trip</SPAN>(<SPAN class=hljs-params style="OUTLINE-COLOR: ">Exception ex</SPAN>)</SPAN>;

  <SPAN class=hljs-function style="OUTLINE-COLOR: "><SPAN class=hljs-keyword style="COLOR: rgb(1,1,253); OUTLINE-COLOR: ">void</SPAN> <SPAN class=hljs-title style="COLOR: rgb(0,104,129); OUTLINE-COLOR: ">Reset</SPAN>(<SPAN class=hljs-params style="OUTLINE-COLOR: "></SPAN>)</SPAN>;

  <SPAN class=hljs-function style="OUTLINE-COLOR: "><SPAN class=hljs-keyword style="COLOR: rgb(1,1,253); OUTLINE-COLOR: ">void</SPAN> <SPAN class=hljs-title style="COLOR: rgb(0,104,129); OUTLINE-COLOR: ">HalfOpen</SPAN>(<SPAN class=hljs-params style="OUTLINE-COLOR: "></SPAN>)</SPAN>;

  <SPAN class=hljs-built_in style="COLOR: rgb(1,1,253); OUTLINE-COLOR: ">bool</SPAN> IsClosed { <SPAN class=hljs-keyword style="COLOR: rgb(1,1,253); OUTLINE-COLOR: ">get</SPAN>; }
}
</FONT></SPAN></CODE></PRE>
<P style='FONT-SIZE: 16px; FONT-FAMILY: "Segoe UI", SegoeUI, "Helvetica Neue", Helvetica, Arial, sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; MARGIN-TOP: 1px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(22,22,22); PADDING-BOTTOM: 0px; FONT-STYLE: normal; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN-LEFT: 1px; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; OUTLINE-COLOR: ; PADDING-RIGHT: 0px; BACKGROUND-COLOR: rgb(255,255,255); MARGIN-RIGHT: 1px; TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial; overflow-wrap: break-word'><FONT class=extract>The<SPAN>&nbsp;</SPAN><CODE style='FONT-SIZE: 13px; FONT-FAMILY: SFMono-Regular, Consolas, "Liberation Mono", Menlo, Courier, monospace; PADDING-BOTTOM: 0.1em; DIRECTION: ltr; PADDING-TOP: 0.1em; PADDING-LEFT: 0.2em; OUTLINE-COLOR: ; PADDING-RIGHT: 0.2em; overflow-wrap: break-word; border-radius: 3px'>State</CODE><SPAN>&nbsp;</SPAN>property indicates the current state of the circuit breaker, and will be either<SPAN>&nbsp;</SPAN><STRONG style="FONT-WEIGHT: 600; OUTLINE-COLOR: ">Open</STRONG>,<SPAN>&nbsp;</SPAN><STRONG style="FONT-WEIGHT: 600; OUTLINE-COLOR: ">HalfOpen</STRONG>, or<SPAN>&nbsp;</SPAN><STRONG style="FONT-WEIGHT: 600; OUTLINE-COLOR: ">Closed</STRONG><SPAN>&nbsp;</SPAN>as defined by the<SPAN>&nbsp;</SPAN><CODE style='FONT-SIZE: 13px; FONT-FAMILY: SFMono-Regular, Consolas, "Liberation Mono", Menlo, Courier, monospace; PADDING-BOTTOM: 0.1em; DIRECTION: ltr; PADDING-TOP: 0.1em; PADDING-LEFT: 0.2em; OUTLINE-COLOR: ; PADDING-RIGHT: 0.2em; overflow-wrap: break-word; border-radius: 3px'>CircuitBreakerStateEnum</CODE><SPAN>&nbsp;</SPAN>enumeration. The<SPAN>&nbsp;</SPAN><CODE style='FONT-SIZE: 13px; FONT-FAMILY: SFMono-Regular, Consolas, "Liberation Mono", Menlo, Courier, monospace; PADDING-BOTTOM: 0.1em; DIRECTION: ltr; PADDING-TOP: 0.1em; PADDING-LEFT: 0.2em; OUTLINE-COLOR: ; PADDING-RIGHT: 0.2em; overflow-wrap: break-word; border-radius: 3px'>IsClosed</CODE><SPAN>&nbsp;</SPAN>property should be true if the circuit breaker is closed, but false if it's open or half open. The<SPAN>&nbsp;</SPAN><CODE style='FONT-SIZE: 13px; FONT-FAMILY: SFMono-Regular, Consolas, "Liberation Mono", Menlo, Courier, monospace; PADDING-BOTTOM: 0.1em; DIRECTION: ltr; PADDING-TOP: 0.1em; PADDING-LEFT: 0.2em; OUTLINE-COLOR: ; PADDING-RIGHT: 0.2em; overflow-wrap: break-word; border-radius: 3px'>Trip</CODE><SPAN>&nbsp;</SPAN>method switches the state of the circuit breaker to the open state and records the exception that caused the change in state, together with the date and time that the exception occurred. The<SPAN>&nbsp;</SPAN><CODE style='FONT-SIZE: 13px; FONT-FAMILY: SFMono-Regular, Consolas, "Liberation Mono", Menlo, Courier, monospace; PADDING-BOTTOM: 0.1em; DIRECTION: ltr; PADDING-TOP: 0.1em; PADDING-LEFT: 0.2em; OUTLINE-COLOR: ; PADDING-RIGHT: 0.2em; overflow-wrap: break-word; border-radius: 3px'>LastException</CODE><SPAN>&nbsp;</SPAN>and the<SPAN>&nbsp;</SPAN><CODE style='FONT-SIZE: 13px; FONT-FAMILY: SFMono-Regular, Consolas, "Liberation Mono", Menlo, Courier, monospace; PADDING-BOTTOM: 0.1em; DIRECTION: ltr; PADDING-TOP: 0.1em; PADDING-LEFT: 0.2em; OUTLINE-COLOR: ; PADDING-RIGHT: 0.2em; overflow-wrap: break-word; border-radius: 3px'>LastStateChangedDateUtc</CODE><SPAN>&nbsp;</SPAN>properties return this information. The<SPAN>&nbsp;</SPAN><CODE style='FONT-SIZE: 13px; FONT-FAMILY: SFMono-Regular, Consolas, "Liberation Mono", Menlo, Courier, monospace; PADDING-BOTTOM: 0.1em; DIRECTION: ltr; PADDING-TOP: 0.1em; PADDING-LEFT: 0.2em; OUTLINE-COLOR: ; PADDING-RIGHT: 0.2em; overflow-wrap: break-word; border-radius: 3px'>Reset</CODE><SPAN>&nbsp;</SPAN>method closes the circuit breaker, and the<SPAN>&nbsp;</SPAN><CODE style='FONT-SIZE: 13px; FONT-FAMILY: SFMono-Regular, Consolas, "Liberation Mono", Menlo, Courier, monospace; PADDING-BOTTOM: 0.1em; DIRECTION: ltr; PADDING-TOP: 0.1em; PADDING-LEFT: 0.2em; OUTLINE-COLOR: ; PADDING-RIGHT: 0.2em; overflow-wrap: break-word; border-radius: 3px'>HalfOpen</CODE><SPAN>&nbsp;</SPAN>method sets the circuit breaker to half open.</FONT></P>
<P style='FONT-SIZE: 16px; FONT-FAMILY: "Segoe UI", SegoeUI, "Helvetica Neue", Helvetica, Arial, sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; MARGIN-TOP: 1px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(22,22,22); PADDING-BOTTOM: 0px; FONT-STYLE: normal; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN-LEFT: 1px; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; OUTLINE-COLOR: ; PADDING-RIGHT: 0px; BACKGROUND-COLOR: rgb(255,255,255); MARGIN-RIGHT: 1px; TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial; overflow-wrap: break-word'><FONT class=extract>The<SPAN>&nbsp;</SPAN><CODE style='FONT-SIZE: 13px; FONT-FAMILY: SFMono-Regular, Consolas, "Liberation Mono", Menlo, Courier, monospace; PADDING-BOTTOM: 0.1em; DIRECTION: ltr; PADDING-TOP: 0.1em; PADDING-LEFT: 0.2em; OUTLINE-COLOR: ; PADDING-RIGHT: 0.2em; overflow-wrap: break-word; border-radius: 3px'>InMemoryCircuitBreakerStateStore</CODE><SPAN>&nbsp;</SPAN>class in the example contains an implementation of the<SPAN>&nbsp;</SPAN><CODE style='FONT-SIZE: 13px; FONT-FAMILY: SFMono-Regular, Consolas, "Liberation Mono", Menlo, Courier, monospace; PADDING-BOTTOM: 0.1em; DIRECTION: ltr; PADDING-TOP: 0.1em; PADDING-LEFT: 0.2em; OUTLINE-COLOR: ; PADDING-RIGHT: 0.2em; overflow-wrap: break-word; border-radius: 3px'>ICircuitBreakerStateStore</CODE><SPAN>&nbsp;</SPAN>interface. The<SPAN>&nbsp;</SPAN><CODE style='FONT-SIZE: 13px; FONT-FAMILY: SFMono-Regular, Consolas, "Liberation Mono", Menlo, Courier, monospace; PADDING-BOTTOM: 0.1em; DIRECTION: ltr; PADDING-TOP: 0.1em; PADDING-LEFT: 0.2em; OUTLINE-COLOR: ; PADDING-RIGHT: 0.2em; overflow-wrap: break-word; border-radius: 3px'>CircuitBreaker</CODE><SPAN>&nbsp;</SPAN>class creates an instance of this class to hold the state of the circuit breaker.</FONT></P>
<P style='FONT-SIZE: 16px; FONT-FAMILY: "Segoe UI", SegoeUI, "Helvetica Neue", Helvetica, Arial, sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; MARGIN-TOP: 1px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(22,22,22); PADDING-BOTTOM: 0px; FONT-STYLE: normal; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN-LEFT: 1px; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; OUTLINE-COLOR: ; PADDING-RIGHT: 0px; BACKGROUND-COLOR: rgb(255,255,255); MARGIN-RIGHT: 1px; TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial; overflow-wrap: break-word'><FONT class=extract>The<SPAN>&nbsp;</SPAN><CODE style='FONT-SIZE: 13px; FONT-FAMILY: SFMono-Regular, Consolas, "Liberation Mono", Menlo, Courier, monospace; PADDING-BOTTOM: 0.1em; DIRECTION: ltr; PADDING-TOP: 0.1em; PADDING-LEFT: 0.2em; OUTLINE-COLOR: ; PADDING-RIGHT: 0.2em; overflow-wrap: break-word; border-radius: 3px'>ExecuteAction</CODE><SPAN>&nbsp;</SPAN>method in the<SPAN>&nbsp;</SPAN><CODE style='FONT-SIZE: 13px; FONT-FAMILY: SFMono-Regular, Consolas, "Liberation Mono", Menlo, Courier, monospace; PADDING-BOTTOM: 0.1em; DIRECTION: ltr; PADDING-TOP: 0.1em; PADDING-LEFT: 0.2em; OUTLINE-COLOR: ; PADDING-RIGHT: 0.2em; overflow-wrap: break-word; border-radius: 3px'>CircuitBreaker</CODE><SPAN>&nbsp;</SPAN>class wraps an operation, specified as an<SPAN>&nbsp;</SPAN><CODE style='FONT-SIZE: 13px; FONT-FAMILY: SFMono-Regular, Consolas, "Liberation Mono", Menlo, Courier, monospace; PADDING-BOTTOM: 0.1em; DIRECTION: ltr; PADDING-TOP: 0.1em; PADDING-LEFT: 0.2em; OUTLINE-COLOR: ; PADDING-RIGHT: 0.2em; overflow-wrap: break-word; border-radius: 3px'>Action</CODE><SPAN>&nbsp;</SPAN>delegate. If the circuit breaker is closed,<SPAN>&nbsp;</SPAN><CODE style='FONT-SIZE: 13px; FONT-FAMILY: SFMono-Regular, Consolas, "Liberation Mono", Menlo, Courier, monospace; PADDING-BOTTOM: 0.1em; DIRECTION: ltr; PADDING-TOP: 0.1em; PADDING-LEFT: 0.2em; OUTLINE-COLOR: ; PADDING-RIGHT: 0.2em; overflow-wrap: break-word; border-radius: 3px'>ExecuteAction</CODE><SPAN>&nbsp;</SPAN>invokes the<SPAN>&nbsp;</SPAN><CODE style='FONT-SIZE: 13px; FONT-FAMILY: SFMono-Regular, Consolas, "Liberation Mono", Menlo, Courier, monospace; PADDING-BOTTOM: 0.1em; DIRECTION: ltr; PADDING-TOP: 0.1em; PADDING-LEFT: 0.2em; OUTLINE-COLOR: ; PADDING-RIGHT: 0.2em; overflow-wrap: break-word; border-radius: 3px'>Action</CODE><SPAN>&nbsp;</SPAN>delegate. If the operation fails, an exception handler calls<SPAN>&nbsp;</SPAN><CODE style='FONT-SIZE: 13px; FONT-FAMILY: SFMono-Regular, Consolas, "Liberation Mono", Menlo, Courier, monospace; PADDING-BOTTOM: 0.1em; DIRECTION: ltr; PADDING-TOP: 0.1em; PADDING-LEFT: 0.2em; OUTLINE-COLOR: ; PADDING-RIGHT: 0.2em; overflow-wrap: break-word; border-radius: 3px'>TrackException</CODE>, which sets the circuit breaker state to open. The following code example highlights this flow.</FONT></P>
<DIV id=code-try-1 class=codeHeader style='BOX-SIZING: content-box; FONT-FAMILY: "Segoe UI", SegoeUI, "Helvetica Neue", Helvetica, Arial, sans-serif; BORDER-TOP-COLOR: ; WHITE-SPACE: normal; WORD-SPACING: 0px; MARGIN-TOP: 16px; BORDER-BOTTOM: 0px; TEXT-TRANSFORM: none; BORDER-LEFT-COLOR: ; FONT-WEIGHT: 400; COLOR: rgb(22,22,22); FONT-STYLE: normal; MIN-HEIGHT: 30px; ORPHANS: 2; WIDOWS: 2; DISPLAY: flex; BORDER-RIGHT-COLOR: ; LETTER-SPACING: normal; OUTLINE-COLOR: ; TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial; border-image-source: ; border-image-slice: ; border-image-width: ; border-image-outset: ; border-image-repeat: ; flex-direction: row' data-bi-name="code-header"><SPAN class=language style="PADDING-BOTTOM: 2px; PADDING-TOP: 2px; PADDING-LEFT: 16px; DISPLAY: flex; OUTLINE-COLOR: ; PADDING-RIGHT: 16px; align-items: center; flex-grow: 1"><FONT class=extract>C#</FONT></SPAN></DIV><PRE role=group tabIndex=0 aria-label="Horizontally scrollable code" class=has-inner-focus style='OVERFLOW: auto; FONT-FAMILY: SFMono-Regular, Consolas, "Liberation Mono", Menlo, Courier, monospace !important; WHITE-SPACE: pre; WORD-SPACING: 0px; TEXT-TRANSFORM: none; WORD-BREAK: normal; FONT-WEIGHT: 400; COLOR: rgb(22,22,22); FONT-STYLE: normal; PADDING-TOP: 1px; PADDING-LEFT: 1px; ORPHANS: 2; WIDOWS: 2; MARGIN: 0px; LETTER-SPACING: normal; OUTLINE-COLOR: ; LINE-HEIGHT: 1.3571; PADDING-RIGHT: 1px; TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial; overflow-wrap: normal; -webkit-font-smoothing: auto; tab-size: 4; hyphens: none'><CODE class=lang-csharp style='FONT-SIZE: 1em; BORDER-TOP: 0px; FONT-FAMILY: SFMono-Regular, Consolas, "Liberation Mono", Menlo, Courier, monospace; BORDER-RIGHT: 0px; BORDER-BOTTOM: 0px; POSITION: relative; PADDING-BOTTOM: 0px; DIRECTION: ltr; PADDING-TOP: 0px; PADDING-LEFT: 0px; BORDER-LEFT: 0px; DISPLAY: block; OUTLINE-COLOR: ; LINE-HEIGHT: 1.3571; PADDING-RIGHT: 0px'><SPAN style="OUTLINE-COLOR: "><FONT class=extract><SPAN class=hljs-keyword style="COLOR: rgb(1,1,253); OUTLINE-COLOR: ">public</SPAN> <SPAN class=hljs-keyword style="COLOR: rgb(1,1,253); OUTLINE-COLOR: ">class</SPAN> <SPAN class=hljs-title style="COLOR: rgb(0,104,129); OUTLINE-COLOR: ">CircuitBreaker</SPAN>
{
  <SPAN class=hljs-keyword style="COLOR: rgb(1,1,253); OUTLINE-COLOR: ">private</SPAN> <SPAN class=hljs-keyword style="COLOR: rgb(1,1,253); OUTLINE-COLOR: ">readonly</SPAN> ICircuitBreakerStateStore stateStore =
    CircuitBreakerStateStoreFactory.GetCircuitBreakerStateStore();

  <SPAN class=hljs-keyword style="COLOR: rgb(1,1,253); OUTLINE-COLOR: ">private</SPAN> <SPAN class=hljs-keyword style="COLOR: rgb(1,1,253); OUTLINE-COLOR: ">readonly</SPAN> <SPAN class=hljs-built_in style="COLOR: rgb(1,1,253); OUTLINE-COLOR: ">object</SPAN> halfOpenSyncObject = <SPAN class=hljs-keyword style="COLOR: rgb(1,1,253); OUTLINE-COLOR: ">new</SPAN> <SPAN class=hljs-built_in style="COLOR: rgb(1,1,253); OUTLINE-COLOR: ">object</SPAN> ();
  ...
  <SPAN class=hljs-keyword style="COLOR: rgb(1,1,253); OUTLINE-COLOR: ">public</SPAN> <SPAN class=hljs-built_in style="COLOR: rgb(1,1,253); OUTLINE-COLOR: ">bool</SPAN> IsClosed { <SPAN class=hljs-keyword style="COLOR: rgb(1,1,253); OUTLINE-COLOR: ">get</SPAN> { <SPAN class=hljs-keyword style="COLOR: rgb(1,1,253); OUTLINE-COLOR: ">return</SPAN> stateStore.IsClosed; } }

  <SPAN class=hljs-keyword style="COLOR: rgb(1,1,253); OUTLINE-COLOR: ">public</SPAN> <SPAN class=hljs-built_in style="COLOR: rgb(1,1,253); OUTLINE-COLOR: ">bool</SPAN> IsOpen { <SPAN class=hljs-keyword style="COLOR: rgb(1,1,253); OUTLINE-COLOR: ">get</SPAN> { <SPAN class=hljs-keyword style="COLOR: rgb(1,1,253); OUTLINE-COLOR: ">return</SPAN> !IsClosed; } }

  <SPAN class=hljs-function style="OUTLINE-COLOR: "><SPAN class=hljs-keyword style="COLOR: rgb(1,1,253); OUTLINE-COLOR: ">public</SPAN> <SPAN class=hljs-keyword style="COLOR: rgb(1,1,253); OUTLINE-COLOR: ">void</SPAN> <SPAN class=hljs-title style="COLOR: rgb(0,104,129); OUTLINE-COLOR: ">ExecuteAction</SPAN>(<SPAN class=hljs-params style="OUTLINE-COLOR: ">Action action</SPAN>)</SPAN>
  {
    ...
    <SPAN class=hljs-keyword style="COLOR: rgb(1,1,253); OUTLINE-COLOR: ">if</SPAN> (IsOpen)
    {
      <SPAN class=hljs-comment style="COLOR: green; OUTLINE-COLOR: ">// The circuit breaker is Open.</SPAN>
      ... (see code sample below <SPAN class=hljs-keyword style="COLOR: rgb(1,1,253); OUTLINE-COLOR: ">for</SPAN> details)
    }

    <SPAN class=hljs-comment style="COLOR: green; OUTLINE-COLOR: ">// The circuit breaker is Closed, execute the action.</SPAN>
    <SPAN class=hljs-keyword style="COLOR: rgb(1,1,253); OUTLINE-COLOR: ">try</SPAN>
    {
      action();
    }
    catch (Exception ex)
    {
      <SPAN class=hljs-comment style="COLOR: green; OUTLINE-COLOR: ">// If an exception still occurs here, simply</SPAN>
      <SPAN class=hljs-comment style="COLOR: green; OUTLINE-COLOR: ">// retrip the breaker immediately.</SPAN>
      <SPAN class=hljs-keyword style="COLOR: rgb(1,1,253); OUTLINE-COLOR: ">this</SPAN>.TrackException(ex);

      <SPAN class=hljs-comment style="COLOR: green; OUTLINE-COLOR: ">// Throw the exception so that the caller can tell</SPAN>
      <SPAN class=hljs-comment style="COLOR: green; OUTLINE-COLOR: ">// the type of exception that was thrown.</SPAN>
      <SPAN class=hljs-keyword style="COLOR: rgb(1,1,253); OUTLINE-COLOR: ">throw</SPAN>;
    }
  }

  <SPAN class=hljs-function style="OUTLINE-COLOR: "><SPAN class=hljs-keyword style="COLOR: rgb(1,1,253); OUTLINE-COLOR: ">private</SPAN> <SPAN class=hljs-keyword style="COLOR: rgb(1,1,253); OUTLINE-COLOR: ">void</SPAN> <SPAN class=hljs-title style="COLOR: rgb(0,104,129); OUTLINE-COLOR: ">TrackException</SPAN>(<SPAN class=hljs-params style="OUTLINE-COLOR: ">Exception ex</SPAN>)</SPAN>
  {
    <SPAN class=hljs-comment style="COLOR: green; OUTLINE-COLOR: ">// For simplicity in this example, open the circuit breaker on the first exception.</SPAN>
    <SPAN class=hljs-comment style="COLOR: green; OUTLINE-COLOR: ">// In reality this would be more complex. A certain type of exception, such as one</SPAN>
    <SPAN class=hljs-comment style="COLOR: green; OUTLINE-COLOR: ">// that indicates a service is offline, might trip the circuit breaker immediately.</SPAN>
    <SPAN class=hljs-comment style="COLOR: green; OUTLINE-COLOR: ">// Alternatively it might count exceptions locally or across multiple instances and</SPAN>
    <SPAN class=hljs-comment style="COLOR: green; OUTLINE-COLOR: ">// use this value over time, or the exception/success ratio based on the exception</SPAN>
    <SPAN class=hljs-comment style="COLOR: green; OUTLINE-COLOR: ">// types, to open the circuit breaker.</SPAN>
    <SPAN class=hljs-keyword style="COLOR: rgb(1,1,253); OUTLINE-COLOR: ">this</SPAN>.stateStore.Trip(ex);
  }
}
</FONT></SPAN></CODE></PRE>
<P style='FONT-SIZE: 16px; FONT-FAMILY: "Segoe UI", SegoeUI, "Helvetica Neue", Helvetica, Arial, sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; MARGIN-TOP: 1px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(22,22,22); PADDING-BOTTOM: 0px; FONT-STYLE: normal; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN-LEFT: 1px; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; OUTLINE-COLOR: ; PADDING-RIGHT: 0px; BACKGROUND-COLOR: rgb(255,255,255); MARGIN-RIGHT: 1px; TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial; overflow-wrap: break-word'><FONT class=extract>The following example shows the code (omitted from the previous example) that is executed if the circuit breaker isn't closed. It first checks if the circuit breaker has been open for a period longer than the time specified by the local<SPAN>&nbsp;</SPAN><CODE style='FONT-SIZE: 13px; FONT-FAMILY: SFMono-Regular, Consolas, "Liberation Mono", Menlo, Courier, monospace; PADDING-BOTTOM: 0.1em; DIRECTION: ltr; PADDING-TOP: 0.1em; PADDING-LEFT: 0.2em; OUTLINE-COLOR: ; PADDING-RIGHT: 0.2em; overflow-wrap: break-word; border-radius: 3px'>OpenToHalfOpenWaitTime</CODE><SPAN>&nbsp;</SPAN>field in the<SPAN>&nbsp;</SPAN><CODE style='FONT-SIZE: 13px; FONT-FAMILY: SFMono-Regular, Consolas, "Liberation Mono", Menlo, Courier, monospace; PADDING-BOTTOM: 0.1em; DIRECTION: ltr; PADDING-TOP: 0.1em; PADDING-LEFT: 0.2em; OUTLINE-COLOR: ; PADDING-RIGHT: 0.2em; overflow-wrap: break-word; border-radius: 3px'>CircuitBreaker</CODE><SPAN>&nbsp;</SPAN>class. If this is the case, the<SPAN>&nbsp;</SPAN><CODE style='FONT-SIZE: 13px; FONT-FAMILY: SFMono-Regular, Consolas, "Liberation Mono", Menlo, Courier, monospace; PADDING-BOTTOM: 0.1em; DIRECTION: ltr; PADDING-TOP: 0.1em; PADDING-LEFT: 0.2em; OUTLINE-COLOR: ; PADDING-RIGHT: 0.2em; overflow-wrap: break-word; border-radius: 3px'>ExecuteAction</CODE><SPAN>&nbsp;</SPAN>method sets the circuit breaker to half open, then tries to perform the operation specified by the<SPAN>&nbsp;</SPAN><CODE style='FONT-SIZE: 13px; FONT-FAMILY: SFMono-Regular, Consolas, "Liberation Mono", Menlo, Courier, monospace; PADDING-BOTTOM: 0.1em; DIRECTION: ltr; PADDING-TOP: 0.1em; PADDING-LEFT: 0.2em; OUTLINE-COLOR: ; PADDING-RIGHT: 0.2em; overflow-wrap: break-word; border-radius: 3px'>Action</CODE><SPAN>&nbsp;</SPAN>delegate.</FONT></P>
<P style='FONT-SIZE: 16px; FONT-FAMILY: "Segoe UI", SegoeUI, "Helvetica Neue", Helvetica, Arial, sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; MARGIN-TOP: 1px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(22,22,22); PADDING-BOTTOM: 0px; FONT-STYLE: normal; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN-LEFT: 1px; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; OUTLINE-COLOR: ; PADDING-RIGHT: 0px; BACKGROUND-COLOR: rgb(255,255,255); MARGIN-RIGHT: 1px; TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial; overflow-wrap: break-word'><FONT class=extract>If the operation is successful, the circuit breaker is reset to the closed state. If the operation fails, it is tripped back to the open state and the time the exception occurred is updated so that the circuit breaker will wait for a further period before trying to perform the operation again.</FONT></P>
<P style='FONT-SIZE: 16px; FONT-FAMILY: "Segoe UI", SegoeUI, "Helvetica Neue", Helvetica, Arial, sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; MARGIN-TOP: 1px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(22,22,22); PADDING-BOTTOM: 0px; FONT-STYLE: normal; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN-LEFT: 1px; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; OUTLINE-COLOR: ; PADDING-RIGHT: 0px; BACKGROUND-COLOR: rgb(255,255,255); MARGIN-RIGHT: 1px; TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial; overflow-wrap: break-word'><FONT class=extract>If the circuit breaker has only been open for a short time, less than the<SPAN>&nbsp;</SPAN><CODE style='FONT-SIZE: 13px; FONT-FAMILY: SFMono-Regular, Consolas, "Liberation Mono", Menlo, Courier, monospace; PADDING-BOTTOM: 0.1em; DIRECTION: ltr; PADDING-TOP: 0.1em; PADDING-LEFT: 0.2em; OUTLINE-COLOR: ; PADDING-RIGHT: 0.2em; overflow-wrap: break-word; border-radius: 3px'>OpenToHalfOpenWaitTime</CODE><SPAN>&nbsp;</SPAN>value, the<SPAN>&nbsp;</SPAN><CODE style='FONT-SIZE: 13px; FONT-FAMILY: SFMono-Regular, Consolas, "Liberation Mono", Menlo, Courier, monospace; PADDING-BOTTOM: 0.1em; DIRECTION: ltr; PADDING-TOP: 0.1em; PADDING-LEFT: 0.2em; OUTLINE-COLOR: ; PADDING-RIGHT: 0.2em; overflow-wrap: break-word; border-radius: 3px'>ExecuteAction</CODE><SPAN>&nbsp;</SPAN>method simply throws a<SPAN>&nbsp;</SPAN><CODE style='FONT-SIZE: 13px; FONT-FAMILY: SFMono-Regular, Consolas, "Liberation Mono", Menlo, Courier, monospace; PADDING-BOTTOM: 0.1em; DIRECTION: ltr; PADDING-TOP: 0.1em; PADDING-LEFT: 0.2em; OUTLINE-COLOR: ; PADDING-RIGHT: 0.2em; overflow-wrap: break-word; border-radius: 3px'>CircuitBreakerOpenException</CODE><SPAN>&nbsp;</SPAN>exception and returns the error that caused the circuit breaker to transition to the open state.</FONT></P>
<P style='FONT-SIZE: 16px; FONT-FAMILY: "Segoe UI", SegoeUI, "Helvetica Neue", Helvetica, Arial, sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; MARGIN-TOP: 1px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(22,22,22); PADDING-BOTTOM: 0px; FONT-STYLE: normal; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN-LEFT: 1px; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; OUTLINE-COLOR: ; PADDING-RIGHT: 0px; BACKGROUND-COLOR: rgb(255,255,255); MARGIN-RIGHT: 1px; TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial; overflow-wrap: break-word'><FONT class=extract>Additionally, it uses a lock to prevent the circuit breaker from trying to perform concurrent calls to the operation while it's half open. A concurrent attempt to invoke the operation will be handled as if the circuit breaker was open, and it'll fail with an exception as described later.</FONT></P>
<DIV id=code-try-2 class=codeHeader style='BOX-SIZING: content-box; FONT-FAMILY: "Segoe UI", SegoeUI, "Helvetica Neue", Helvetica, Arial, sans-serif; BORDER-TOP-COLOR: ; WHITE-SPACE: normal; WORD-SPACING: 0px; MARGIN-TOP: 16px; BORDER-BOTTOM: 0px; TEXT-TRANSFORM: none; BORDER-LEFT-COLOR: ; FONT-WEIGHT: 400; COLOR: rgb(22,22,22); FONT-STYLE: normal; MIN-HEIGHT: 30px; ORPHANS: 2; WIDOWS: 2; DISPLAY: flex; BORDER-RIGHT-COLOR: ; LETTER-SPACING: normal; OUTLINE-COLOR: ; TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial; border-image-source: ; border-image-slice: ; border-image-width: ; border-image-outset: ; border-image-repeat: ; flex-direction: row' data-bi-name="code-header"><SPAN class=language style="PADDING-BOTTOM: 2px; PADDING-TOP: 2px; PADDING-LEFT: 16px; DISPLAY: flex; OUTLINE-COLOR: ; PADDING-RIGHT: 16px; align-items: center; flex-grow: 1"><FONT class=extract>C#</FONT></SPAN></DIV><PRE role=group tabIndex=0 aria-label="Horizontally scrollable code" class=has-inner-focus style='OVERFLOW: auto; FONT-FAMILY: SFMono-Regular, Consolas, "Liberation Mono", Menlo, Courier, monospace !important; WHITE-SPACE: pre; WORD-SPACING: 0px; TEXT-TRANSFORM: none; WORD-BREAK: normal; FONT-WEIGHT: 400; COLOR: rgb(22,22,22); FONT-STYLE: normal; PADDING-TOP: 1px; PADDING-LEFT: 1px; ORPHANS: 2; WIDOWS: 2; MARGIN: 0px; LETTER-SPACING: normal; OUTLINE-COLOR: ; LINE-HEIGHT: 1.3571; PADDING-RIGHT: 1px; TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial; overflow-wrap: normal; -webkit-font-smoothing: auto; tab-size: 4; hyphens: none'><CODE class=lang-csharp style='FONT-SIZE: 1em; BORDER-TOP: 0px; FONT-FAMILY: SFMono-Regular, Consolas, "Liberation Mono", Menlo, Courier, monospace; BORDER-RIGHT: 0px; BORDER-BOTTOM: 0px; POSITION: relative; PADDING-BOTTOM: 0px; DIRECTION: ltr; PADDING-TOP: 0px; PADDING-LEFT: 0px; BORDER-LEFT: 0px; DISPLAY: block; OUTLINE-COLOR: ; LINE-HEIGHT: 1.3571; PADDING-RIGHT: 0px'><SPAN style="OUTLINE-COLOR: "><FONT class=extract>    ...
    <SPAN class=hljs-keyword style="COLOR: rgb(1,1,253); OUTLINE-COLOR: ">if</SPAN> (IsOpen)
    {
      <SPAN class=hljs-comment style="COLOR: green; OUTLINE-COLOR: ">// The circuit breaker is Open. Check if the Open timeout has expired.</SPAN>
      <SPAN class=hljs-comment style="COLOR: green; OUTLINE-COLOR: ">// If it has, set the state to HalfOpen. Another approach might be to</SPAN>
      <SPAN class=hljs-comment style="COLOR: green; OUTLINE-COLOR: ">// check for the HalfOpen state that had be set by some other operation.</SPAN>
      <SPAN class=hljs-keyword style="COLOR: rgb(1,1,253); OUTLINE-COLOR: ">if</SPAN> (stateStore.LastStateChangedDateUtc + OpenToHalfOpenWaitTime &lt; DateTime.UtcNow)
      {
        <SPAN class=hljs-comment style="COLOR: green; OUTLINE-COLOR: ">// The Open timeout has expired. Allow one operation to execute. Note that, in</SPAN>
        <SPAN class=hljs-comment style="COLOR: green; OUTLINE-COLOR: ">// this example, the circuit breaker is set to HalfOpen after being</SPAN>
        <SPAN class=hljs-comment style="COLOR: green; OUTLINE-COLOR: ">// in the Open state for some period of time. An alternative would be to set</SPAN>
        <SPAN class=hljs-comment style="COLOR: green; OUTLINE-COLOR: ">// this using some other approach such as a timer, test method, manually, and</SPAN>
        <SPAN class=hljs-comment style="COLOR: green; OUTLINE-COLOR: ">// so on, and check the state here to determine how to handle execution</SPAN>
        <SPAN class=hljs-comment style="COLOR: green; OUTLINE-COLOR: ">// of the action.</SPAN>
        <SPAN class=hljs-comment style="COLOR: green; OUTLINE-COLOR: ">// Limit the number of threads to be executed when the breaker is HalfOpen.</SPAN>
        <SPAN class=hljs-comment style="COLOR: green; OUTLINE-COLOR: ">// An alternative would be to use a more complex approach to determine which</SPAN>
        <SPAN class=hljs-comment style="COLOR: green; OUTLINE-COLOR: ">// threads or how many are allowed to execute, or to execute a simple test</SPAN>
        <SPAN class=hljs-comment style="COLOR: green; OUTLINE-COLOR: ">// method instead.</SPAN>
        <SPAN class=hljs-built_in style="COLOR: rgb(1,1,253); OUTLINE-COLOR: ">bool</SPAN> lockTaken = <SPAN class=hljs-literal style="COLOR: rgb(7,112,74); OUTLINE-COLOR: ">false</SPAN>;
        <SPAN class=hljs-keyword style="COLOR: rgb(1,1,253); OUTLINE-COLOR: ">try</SPAN>
        {
          Monitor.TryEnter(halfOpenSyncObject, <SPAN class=hljs-keyword style="COLOR: rgb(1,1,253); OUTLINE-COLOR: ">ref</SPAN> lockTaken);
          <SPAN class=hljs-keyword style="COLOR: rgb(1,1,253); OUTLINE-COLOR: ">if</SPAN> (lockTaken)
          {
            <SPAN class=hljs-comment style="COLOR: green; OUTLINE-COLOR: ">// Set the circuit breaker state to HalfOpen.</SPAN>
            stateStore.HalfOpen();

            <SPAN class=hljs-comment style="COLOR: green; OUTLINE-COLOR: ">// Attempt the operation.</SPAN>
            action();

            <SPAN class=hljs-comment style="COLOR: green; OUTLINE-COLOR: ">// If this action succeeds, reset the state and allow other operations.</SPAN>
            <SPAN class=hljs-comment style="COLOR: green; OUTLINE-COLOR: ">// In reality, instead of immediately returning to the Closed state, a counter</SPAN>
            <SPAN class=hljs-comment style="COLOR: green; OUTLINE-COLOR: ">// here would record the number of successful operations and return the</SPAN>
            <SPAN class=hljs-comment style="COLOR: green; OUTLINE-COLOR: ">// circuit breaker to the Closed state only after a specified number succeed.</SPAN>
            <SPAN class=hljs-keyword style="COLOR: rgb(1,1,253); OUTLINE-COLOR: ">this</SPAN>.stateStore.Reset();
            <SPAN class=hljs-keyword style="COLOR: rgb(1,1,253); OUTLINE-COLOR: ">return</SPAN>;
          }
        }
        catch (Exception ex)
        {
          <SPAN class=hljs-comment style="COLOR: green; OUTLINE-COLOR: ">// If there's still an exception, trip the breaker again immediately.</SPAN>
          <SPAN class=hljs-keyword style="COLOR: rgb(1,1,253); OUTLINE-COLOR: ">this</SPAN>.stateStore.Trip(ex);

          <SPAN class=hljs-comment style="COLOR: green; OUTLINE-COLOR: ">// Throw the exception so that the caller knows which exception occurred.</SPAN>
          <SPAN class=hljs-keyword style="COLOR: rgb(1,1,253); OUTLINE-COLOR: ">throw</SPAN>;
        }
        <SPAN class=hljs-keyword style="COLOR: rgb(1,1,253); OUTLINE-COLOR: ">finally</SPAN>
        {
          <SPAN class=hljs-keyword style="COLOR: rgb(1,1,253); OUTLINE-COLOR: ">if</SPAN> (lockTaken)
          {
            Monitor.Exit(halfOpenSyncObject);
          }
        }
      }
      <SPAN class=hljs-comment style="COLOR: green; OUTLINE-COLOR: ">// The Open timeout hasn't yet expired. Throw a CircuitBreakerOpen exception to</SPAN>
      <SPAN class=hljs-comment style="COLOR: green; OUTLINE-COLOR: ">// inform the caller that the call was not actually attempted,</SPAN>
      <SPAN class=hljs-comment style="COLOR: green; OUTLINE-COLOR: ">// and return the most recent exception received.</SPAN>
      <SPAN class=hljs-keyword style="COLOR: rgb(1,1,253); OUTLINE-COLOR: ">throw</SPAN> <SPAN class=hljs-keyword style="COLOR: rgb(1,1,253); OUTLINE-COLOR: ">new</SPAN> CircuitBreakerOpenException(stateStore.LastException);
    }
    ...
</FONT></SPAN></CODE></PRE>
<P style='FONT-SIZE: 16px; FONT-FAMILY: "Segoe UI", SegoeUI, "Helvetica Neue", Helvetica, Arial, sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; MARGIN-TOP: 1px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(22,22,22); PADDING-BOTTOM: 0px; FONT-STYLE: normal; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN-LEFT: 1px; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; OUTLINE-COLOR: ; PADDING-RIGHT: 0px; BACKGROUND-COLOR: rgb(255,255,255); MARGIN-RIGHT: 1px; TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial; overflow-wrap: break-word'><FONT class=extract>To use a<SPAN>&nbsp;</SPAN><CODE style='FONT-SIZE: 13px; FONT-FAMILY: SFMono-Regular, Consolas, "Liberation Mono", Menlo, Courier, monospace; PADDING-BOTTOM: 0.1em; DIRECTION: ltr; PADDING-TOP: 0.1em; PADDING-LEFT: 0.2em; OUTLINE-COLOR: ; PADDING-RIGHT: 0.2em; overflow-wrap: break-word; border-radius: 3px'>CircuitBreaker</CODE><SPAN>&nbsp;</SPAN>object to protect an operation, an application creates an instance of the<SPAN>&nbsp;</SPAN><CODE style='FONT-SIZE: 13px; FONT-FAMILY: SFMono-Regular, Consolas, "Liberation Mono", Menlo, Courier, monospace; PADDING-BOTTOM: 0.1em; DIRECTION: ltr; PADDING-TOP: 0.1em; PADDING-LEFT: 0.2em; OUTLINE-COLOR: ; PADDING-RIGHT: 0.2em; overflow-wrap: break-word; border-radius: 3px'>CircuitBreaker</CODE><SPAN>&nbsp;</SPAN>class and invokes the<SPAN>&nbsp;</SPAN><CODE style='FONT-SIZE: 13px; FONT-FAMILY: SFMono-Regular, Consolas, "Liberation Mono", Menlo, Courier, monospace; PADDING-BOTTOM: 0.1em; DIRECTION: ltr; PADDING-TOP: 0.1em; PADDING-LEFT: 0.2em; OUTLINE-COLOR: ; PADDING-RIGHT: 0.2em; overflow-wrap: break-word; border-radius: 3px'>ExecuteAction</CODE><SPAN>&nbsp;</SPAN>method, specifying the operation to be performed as the parameter. The application should be prepared to catch the<SPAN>&nbsp;</SPAN><CODE style='FONT-SIZE: 13px; FONT-FAMILY: SFMono-Regular, Consolas, "Liberation Mono", Menlo, Courier, monospace; PADDING-BOTTOM: 0.1em; DIRECTION: ltr; PADDING-TOP: 0.1em; PADDING-LEFT: 0.2em; OUTLINE-COLOR: ; PADDING-RIGHT: 0.2em; overflow-wrap: break-word; border-radius: 3px'>CircuitBreakerOpenException</CODE><SPAN>&nbsp;</SPAN>exception if the operation fails because the circuit breaker is open. The following code shows an example:</FONT></P>
<DIV id=code-try-3 class=codeHeader style='BOX-SIZING: content-box; FONT-FAMILY: "Segoe UI", SegoeUI, "Helvetica Neue", Helvetica, Arial, sans-serif; BORDER-TOP-COLOR: ; WHITE-SPACE: normal; WORD-SPACING: 0px; MARGIN-TOP: 16px; BORDER-BOTTOM: 0px; TEXT-TRANSFORM: none; BORDER-LEFT-COLOR: ; FONT-WEIGHT: 400; COLOR: rgb(22,22,22); FONT-STYLE: normal; MIN-HEIGHT: 30px; ORPHANS: 2; WIDOWS: 2; DISPLAY: flex; BORDER-RIGHT-COLOR: ; LETTER-SPACING: normal; OUTLINE-COLOR: ; TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial; border-image-source: ; border-image-slice: ; border-image-width: ; border-image-outset: ; border-image-repeat: ; flex-direction: row' data-bi-name="code-header"><SPAN class=language style="PADDING-BOTTOM: 2px; PADDING-TOP: 2px; PADDING-LEFT: 16px; DISPLAY: flex; OUTLINE-COLOR: ; PADDING-RIGHT: 16px; align-items: center; flex-grow: 1"><FONT class=extract>C#</FONT></SPAN></DIV><PRE class=has-inner-focus style='OVERFLOW: auto; FONT-FAMILY: SFMono-Regular, Consolas, "Liberation Mono", Menlo, Courier, monospace !important; WHITE-SPACE: pre; WORD-SPACING: 0px; TEXT-TRANSFORM: none; WORD-BREAK: normal; FONT-WEIGHT: 400; COLOR: rgb(22,22,22); FONT-STYLE: normal; PADDING-TOP: 1px; PADDING-LEFT: 1px; ORPHANS: 2; WIDOWS: 2; MARGIN: 0px; LETTER-SPACING: normal; OUTLINE-COLOR: ; LINE-HEIGHT: 1.3571; PADDING-RIGHT: 1px; TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial; overflow-wrap: normal; -webkit-font-smoothing: auto; tab-size: 4; hyphens: none'><CODE class=lang-csharp style='FONT-SIZE: 1em; BORDER-TOP: 0px; FONT-FAMILY: SFMono-Regular, Consolas, "Liberation Mono", Menlo, Courier, monospace; BORDER-RIGHT: 0px; BORDER-BOTTOM: 0px; POSITION: relative; PADDING-BOTTOM: 0px; DIRECTION: ltr; PADDING-TOP: 0px; PADDING-LEFT: 0px; BORDER-LEFT: 0px; DISPLAY: block; OUTLINE-COLOR: ; LINE-HEIGHT: 1.3571; PADDING-RIGHT: 0px'><SPAN style="OUTLINE-COLOR: "><FONT class=extract><SPAN class=hljs-keyword style="COLOR: rgb(1,1,253); OUTLINE-COLOR: ">var</SPAN> breaker = <SPAN class=hljs-keyword style="COLOR: rgb(1,1,253); OUTLINE-COLOR: ">new</SPAN> CircuitBreaker();

<SPAN class=hljs-keyword style="COLOR: rgb(1,1,253); OUTLINE-COLOR: ">try</SPAN>
{
  breaker.ExecuteAction(() =&gt;
  {
    <SPAN class=hljs-comment style="COLOR: green; OUTLINE-COLOR: ">// Operation protected by the circuit breaker.</SPAN>
    ...
  });
}
catch (CircuitBreakerOpenException ex)
{
  <SPAN class=hljs-comment style="COLOR: green; OUTLINE-COLOR: ">// Perform some different action when the breaker is open.</SPAN>
  <SPAN class=hljs-comment style="COLOR: green; OUTLINE-COLOR: ">// Last exception details are in the inner exception.</SPAN>
  ...
}
catch (Exception ex)
{
  ...
}</FONT></SPAN></CODE></PRE>