<b> : </b><B>1.3 Drawbacks</B></H3>
<P><SPAN style="FONT-WEIGHT: 400">The main downside to leader election is complexity: a bad implementation can end up with &#8220;split brain&#8221; where two leaders try to control at the same time, or no leader is elected and the cluster can&#8217;t coordinate. As such, leader election should only be used when there is a need for complex coordination or strong consistency, and none of the alternatives fit the situation.</SPAN></P>
<P><SPAN style="FONT-WEIGHT: 400">A leader is a single node, so it can become a bottleneck or temporary single point of failure. Additionally, if the leader starts making bad decisions (whatever that means in the context of directing work for the service), the followers will just do what they're assigned, possibly derailing the entire cluster.</SPAN></P>
<P><SPAN style="FONT-WEIGHT: 400">The leader / follower model generally makes the best practices of partial deployment and A/B testing harder by requiring the whole cluster to follow the same protocols or be able to respond uniformly to the same leader.</SPAN></P>
<P><SPAN style="FONT-WEIGHT: 400">Now that we've gone over the benefits and downsides of leader election, and you know when it's appropriate to use, let's jump into the algorithm approaches for implementing it!</SPAN>