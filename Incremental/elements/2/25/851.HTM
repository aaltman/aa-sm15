<b> : </b><A style="BOX-SIZING: border-box; TEXT-DECORATION: none; COLOR: ; text-decoration-skip-ink: auto" href="https://developer.mozilla.org/en-US/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/React_interactivity_events_state#adding_a_task">Adding a task</A></H3>
<DIV class=section-content style="BOX-SIZING: border-box">
<P style="BOX-SIZING: border-box; MARGIN-TOP: 1px; MARGIN-LEFT: 1px; MARGIN-RIGHT: 1px">We've now got a<SPAN>&nbsp;</SPAN><CODE style="BOX-SIZING: border-box; FONT-FAMILY: var(--font-code); BACKGROUND: none transparent scroll repeat 0% 0%; PADDING-TOP: 0px; PADDING-LEFT: 0px; PADDING-RIGHT: 0px; border-radius: var(--elem-radius)">setTasks</CODE><SPAN>&nbsp;</SPAN>hook that we can use in our<SPAN>&nbsp;</SPAN><CODE style="BOX-SIZING: border-box; FONT-FAMILY: var(--font-code); BACKGROUND: none transparent scroll repeat 0% 0%; PADDING-TOP: 0px; PADDING-LEFT: 0px; PADDING-RIGHT: 0px; border-radius: var(--elem-radius)">addTask()</CODE><SPAN>&nbsp;</SPAN>function to update our list of tasks. There's one problem however: we can't just pass the<SPAN>&nbsp;</SPAN><CODE style="BOX-SIZING: border-box; FONT-FAMILY: var(--font-code); BACKGROUND: none transparent scroll repeat 0% 0%; PADDING-TOP: 0px; PADDING-LEFT: 0px; PADDING-RIGHT: 0px; border-radius: var(--elem-radius)">name</CODE><SPAN>&nbsp;</SPAN>argument of<SPAN>&nbsp;</SPAN><CODE style="BOX-SIZING: border-box; FONT-FAMILY: var(--font-code); BACKGROUND: none transparent scroll repeat 0% 0%; PADDING-TOP: 0px; PADDING-LEFT: 0px; PADDING-RIGHT: 0px; border-radius: var(--elem-radius)">addTask()</CODE><SPAN>&nbsp;</SPAN>into<SPAN>&nbsp;</SPAN><CODE style="BOX-SIZING: border-box; FONT-FAMILY: var(--font-code); BACKGROUND: none transparent scroll repeat 0% 0%; PADDING-TOP: 0px; PADDING-LEFT: 0px; PADDING-RIGHT: 0px; border-radius: var(--elem-radius)">setTasks</CODE>, because<SPAN>&nbsp;</SPAN><CODE style="BOX-SIZING: border-box; FONT-FAMILY: var(--font-code); BACKGROUND: none transparent scroll repeat 0% 0%; PADDING-TOP: 0px; PADDING-LEFT: 0px; PADDING-RIGHT: 0px; border-radius: var(--elem-radius)">tasks</CODE><SPAN>&nbsp;</SPAN>is an array of objects and<SPAN>&nbsp;</SPAN><CODE style="BOX-SIZING: border-box; FONT-FAMILY: var(--font-code); BACKGROUND: none transparent scroll repeat 0% 0%; PADDING-TOP: 0px; PADDING-LEFT: 0px; PADDING-RIGHT: 0px; border-radius: var(--elem-radius)">name</CODE><SPAN>&nbsp;</SPAN>is a string. If we tried to do this, the array would be replaced with the string.</P>
<P style="BOX-SIZING: border-box; MARGIN-TOP: 1px; MARGIN-LEFT: 1px; MARGIN-RIGHT: 1px">First of all, we need to put<SPAN>&nbsp;</SPAN><CODE style="BOX-SIZING: border-box; FONT-FAMILY: var(--font-code); BACKGROUND: none transparent scroll repeat 0% 0%; PADDING-TOP: 0px; PADDING-LEFT: 0px; PADDING-RIGHT: 0px; border-radius: var(--elem-radius)">name</CODE><SPAN>&nbsp;</SPAN>into an object that has the same structure as our existing tasks. Inside of the<SPAN>&nbsp;</SPAN><CODE style="BOX-SIZING: border-box; FONT-FAMILY: var(--font-code); BACKGROUND: none transparent scroll repeat 0% 0%; PADDING-TOP: 0px; PADDING-LEFT: 0px; PADDING-RIGHT: 0px; border-radius: var(--elem-radius)">addTask()</CODE><SPAN>&nbsp;</SPAN>function, we will make a<SPAN>&nbsp;</SPAN><CODE style="BOX-SIZING: border-box; FONT-FAMILY: var(--font-code); BACKGROUND: none transparent scroll repeat 0% 0%; PADDING-TOP: 0px; PADDING-LEFT: 0px; PADDING-RIGHT: 0px; border-radius: var(--elem-radius)">newTask</CODE><SPAN>&nbsp;</SPAN>object to add to the array.</P>
<P style="BOX-SIZING: border-box; MARGIN-TOP: 1px; MARGIN-LEFT: 1px; MARGIN-RIGHT: 1px">We then need to make a new array with this new task added to it and then update the state of the tasks data to this new state. To do this, we can use spread syntax to<SPAN>&nbsp;</SPAN><A style="BOX-SIZING: border-box; TEXT-DECORATION: underline; COLOR: ; text-decoration-skip-ink: auto" href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax#copying_an_array">copy the existing array</A>, and add our object at the end. We then pass this array into<SPAN>&nbsp;</SPAN><CODE style="BOX-SIZING: border-box; FONT-FAMILY: var(--font-code); BACKGROUND: none transparent scroll repeat 0% 0%; PADDING-TOP: 0px; PADDING-LEFT: 0px; PADDING-RIGHT: 0px; border-radius: var(--elem-radius)">setTasks()</CODE><SPAN>&nbsp;</SPAN>to update the state.</P>
<P style="BOX-SIZING: border-box; MARGIN-TOP: 1px; MARGIN-LEFT: 1px; MARGIN-RIGHT: 1px">Putting that all together, your<SPAN>&nbsp;</SPAN><CODE style="BOX-SIZING: border-box; FONT-FAMILY: var(--font-code); BACKGROUND: none transparent scroll repeat 0% 0%; PADDING-TOP: 0px; PADDING-LEFT: 0px; PADDING-RIGHT: 0px; border-radius: var(--elem-radius)">addTask()</CODE><SPAN>&nbsp;</SPAN>function should read like so:</P>
<DIV class=code-example style="BOX-SIZING: border-box; FONT-FAMILY: var(--font-code); POSITION: relative; border-radius: var(--elem-radius); --code-action-color: var(--text-secondary)">
<DIV class=example-header style="BOX-SIZING: border-box; BORDER-BOTTOM: 1px solid; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 0px; DISPLAY: flex; PADDING-RIGHT: 0px; gap: 1rem; align-items: baseline; border-top-left-radius: var(--elem-radius); border-top-right-radius: var(--elem-radius); flex-wrap: wrap"><SPAN class=language-name style="BOX-SIZING: border-box; TEXT-TRANSFORM: uppercase; MARGIN-RIGHT: auto">jsx</SPAN><SPAN role=alert class="copy-icon-message visually-hidden" style="BOX-SIZING: border-box; OVERFLOW: hidden !important; BORDER-TOP: 0px; CLIP: rect(1px 1px 1px 1px); HEIGHT: 1px !important; BORDER-RIGHT: 0px; WIDTH: 1px !important; BACKGROUND: none transparent scroll repeat 0% 0%; WHITE-SPACE: nowrap !important; BORDER-BOTTOM: 0px; POSITION: absolute; COLOR: ; PADDING-TOP: 0px; PADDING-LEFT: 0px; BORDER-LEFT: 0px; MARGIN: -1px; PADDING-RIGHT: 0px; border-radius: var(--elem-radius); clip-path: inset(50%); opacity: 1"></SPAN></DIV><PRE class="brush: jsx notranslate" style="BOX-SIZING: border-box; BORDER-TOP: medium none; FONT-FAMILY: var(--font-code); BORDER-RIGHT: 1px solid; WHITE-SPACE: pre-wrap; BORDER-BOTTOM: 1px solid; PADDING-TOP: 1px; PADDING-LEFT: 1px; BORDER-LEFT: 1px solid; MARGIN: 0px 0px 2px; PADDING-RIGHT: 1px; border-top-left-radius: 0px; border-top-right-radius: 0px; overflow-wrap: break-word; border-bottom-right-radius: ; border-bottom-left-radius: ; border-image: initial" data-signature="8qCWOfkhaBvbYOjmQB1sblCyreRDB9E/XtaknA0eECA="><CODE style="BOX-SIZING: border-box; FONT-FAMILY: var(--font-code); BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: ; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; PADDING-RIGHT: 0px; border-radius: var(--elem-radius)"><SPAN class="token keyword" style="BOX-SIZING: border-box; COLOR: ">function</SPAN> <SPAN class="token function" style="BOX-SIZING: border-box; COLOR: ">addTask</SPAN><SPAN class="token punctuation" style="BOX-SIZING: border-box; COLOR: ">(</SPAN><SPAN class="token parameter" style="BOX-SIZING: border-box">name</SPAN><SPAN class="token punctuation" style="BOX-SIZING: border-box; COLOR: ">)</SPAN> <SPAN class="token punctuation" style="BOX-SIZING: border-box; COLOR: ">{</SPAN>
  <SPAN class="token keyword" style="BOX-SIZING: border-box; COLOR: ">const</SPAN> newTask <SPAN class="token operator" style="BOX-SIZING: border-box">=</SPAN> <SPAN class="token punctuation" style="BOX-SIZING: border-box; COLOR: ">{</SPAN> <SPAN class="token literal-property property" style="BOX-SIZING: border-box; COLOR: ">id</SPAN><SPAN class="token operator" style="BOX-SIZING: border-box">:</SPAN> <SPAN class="token string" style="BOX-SIZING: border-box; COLOR: ">"id"</SPAN><SPAN class="token punctuation" style="BOX-SIZING: border-box; COLOR: ">,</SPAN> name<SPAN class="token punctuation" style="BOX-SIZING: border-box; COLOR: ">,</SPAN> <SPAN class="token literal-property property" style="BOX-SIZING: border-box; COLOR: ">completed</SPAN><SPAN class="token operator" style="BOX-SIZING: border-box">:</SPAN> <SPAN class="token boolean" style="BOX-SIZING: border-box; COLOR: ">false</SPAN> <SPAN class="token punctuation" style="BOX-SIZING: border-box; COLOR: ">}</SPAN><SPAN class="token punctuation" style="BOX-SIZING: border-box; COLOR: ">;</SPAN>
  <SPAN class="token function" style="BOX-SIZING: border-box; COLOR: ">setTasks</SPAN><SPAN class="token punctuation" style="BOX-SIZING: border-box; COLOR: ">(</SPAN><SPAN class="token punctuation" style="BOX-SIZING: border-box; COLOR: ">[</SPAN><SPAN class="token operator" style="BOX-SIZING: border-box">...</SPAN>tasks<SPAN class="token punctuation" style="BOX-SIZING: border-box; COLOR: ">,</SPAN> newTask<SPAN class="token punctuation" style="BOX-SIZING: border-box; COLOR: ">]</SPAN><SPAN class="token punctuation" style="BOX-SIZING: border-box; COLOR: ">)</SPAN><SPAN class="token punctuation" style="BOX-SIZING: border-box; COLOR: ">;</SPAN>
<SPAN class="token punctuation" style="BOX-SIZING: border-box; COLOR: ">}</SPAN>
</CODE></PRE></DIV>
<P style="BOX-SIZING: border-box; MARGIN-TOP: 1px; MARGIN-LEFT: 1px; MARGIN-RIGHT: 1px">Now you can use the browser to add a task to our data! Type anything into the form and click "Add" (or press the<SPAN>&nbsp;</SPAN><KBD style="BOX-SIZING: border-box; BORDER-TOP: 2px solid; BORDER-RIGHT: 2px solid; BORDER-BOTTOM: 2px solid; COLOR: ; PADDING-TOP: 0px; PADDING-LEFT: 0px; BORDER-LEFT: 2px solid; PADDING-RIGHT: 0px; border-radius: var(--elem-radius); box-shadow: inset 0 -1px 0 0 var(--border-secondary)">Enter</KBD><SPAN>&nbsp;</SPAN>key) and you'll see your new todo item appear in the UI!</P>
<P style="BOX-SIZING: border-box; MARGIN-TOP: 1px; MARGIN-LEFT: 1px; MARGIN-RIGHT: 1px"><STRONG style="BOX-SIZING: border-box">However, we have another problem</STRONG>: our<SPAN>&nbsp;</SPAN><CODE style="BOX-SIZING: border-box; FONT-FAMILY: var(--font-code); BACKGROUND: none transparent scroll repeat 0% 0%; PADDING-TOP: 0px; PADDING-LEFT: 0px; PADDING-RIGHT: 0px; border-radius: var(--elem-radius)">addTask()</CODE><SPAN>&nbsp;</SPAN>function is giving each task the same<SPAN>&nbsp;</SPAN><CODE style="BOX-SIZING: border-box; FONT-FAMILY: var(--font-code); BACKGROUND: none transparent scroll repeat 0% 0%; PADDING-TOP: 0px; PADDING-LEFT: 0px; PADDING-RIGHT: 0px; border-radius: var(--elem-radius)">id</CODE>. This is bad for accessibility, and makes it impossible for React to tell future tasks apart with the<SPAN>&nbsp;</SPAN><CODE style="BOX-SIZING: border-box; FONT-FAMILY: var(--font-code); BACKGROUND: none transparent scroll repeat 0% 0%; PADDING-TOP: 0px; PADDING-LEFT: 0px; PADDING-RIGHT: 0px; border-radius: var(--elem-radius)">key</CODE><SPAN>&nbsp;</SPAN>prop. In fact, React will give you a warning in your DevTools console &#8212; "Warning: Encountered two children with the same key&#8230;"</P>
<P style="BOX-SIZING: border-box; MARGIN-TOP: 1px; MARGIN-LEFT: 1px; MARGIN-RIGHT: 1px">We need to fix this. Making unique identifiers is a hard problem &#8211; one for which the JavaScript community has written some helpful libraries. We'll use<SPAN>&nbsp;</SPAN><A class=external style="BOX-SIZING: border-box; TEXT-DECORATION: underline; COLOR: " href="https://github.com/ai/nanoid" target=_blank>nanoid</A><SPAN>&nbsp;</SPAN>because it's tiny and it works.</P>
<P style="BOX-SIZING: border-box; MARGIN-TOP: 1px; MARGIN-LEFT: 1px; MARGIN-RIGHT: 1px">Make sure you're in the root directory of your application and run the following terminal command:</P>
<DIV class=code-example style="BOX-SIZING: border-box; FONT-FAMILY: var(--font-code); POSITION: relative; border-radius: var(--elem-radius); --code-action-color: var(--text-secondary)">
<DIV class=example-header style="BOX-SIZING: border-box; BORDER-BOTTOM: 1px solid; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 0px; DISPLAY: flex; PADDING-RIGHT: 0px; gap: 1rem; align-items: baseline; border-top-left-radius: var(--elem-radius); border-top-right-radius: var(--elem-radius); flex-wrap: wrap"><SPAN class=language-name style="BOX-SIZING: border-box; TEXT-TRANSFORM: uppercase; MARGIN-RIGHT: auto">bash</SPAN><SPAN role=alert class="copy-icon-message visually-hidden" style="BOX-SIZING: border-box; OVERFLOW: hidden !important; BORDER-TOP: 0px; CLIP: rect(1px 1px 1px 1px); HEIGHT: 1px !important; BORDER-RIGHT: 0px; WIDTH: 1px !important; BACKGROUND: none transparent scroll repeat 0% 0%; WHITE-SPACE: nowrap !important; BORDER-BOTTOM: 0px; POSITION: absolute; COLOR: ; PADDING-TOP: 0px; PADDING-LEFT: 0px; BORDER-LEFT: 0px; MARGIN: -1px; PADDING-RIGHT: 0px; border-radius: var(--elem-radius); clip-path: inset(50%); opacity: 1"></SPAN></DIV><PRE class="brush: bash notranslate" style="BOX-SIZING: border-box; BORDER-TOP: medium none; FONT-FAMILY: var(--font-code); BORDER-RIGHT: 1px solid; WHITE-SPACE: pre-wrap; BORDER-BOTTOM: 1px solid; PADDING-TOP: 1px; PADDING-LEFT: 1px; BORDER-LEFT: 1px solid; MARGIN: 0px 0px 2px; PADDING-RIGHT: 1px; border-top-left-radius: 0px; border-top-right-radius: 0px; overflow-wrap: break-word; border-bottom-right-radius: ; border-bottom-left-radius: ; border-image: initial" data-signature="QTxOrlgu2HgDCv1k2T+a0Gvz3cFOpv6EHVk/1uV5tsg="><CODE style="BOX-SIZING: border-box; FONT-FAMILY: var(--font-code); BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: ; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; PADDING-RIGHT: 0px; border-radius: var(--elem-radius)"><SPAN class="token function" style="BOX-SIZING: border-box; COLOR: ">npm</SPAN> <SPAN class="token function" style="BOX-SIZING: border-box; COLOR: ">install</SPAN> nanoid
</CODE></PRE></DIV>
<DIV id=sect3 class="notecard note" style="BOX-SIZING: border-box; MARGIN-TOP: 1px; POSITION: relative; COLOR: ; PADDING-TOP: 1px; PADDING-LEFT: 1px; MARGIN-LEFT: 1px; BORDER-LEFT: 2px solid; PADDING-RIGHT: 1px; MARGIN-RIGHT: 1px; border-radius: var(--elem-radius); --note-background: var(--background-information); --note-theme: var(--icon-information); box-shadow: var(--shadow-01)">
<P style="BOX-SIZING: border-box; COLOR: ; PADDING-BOTTOM: 0px; MARGIN: 0px"><STRONG style="BOX-SIZING: border-box">Note:</STRONG><SPAN>&nbsp;</SPAN>If you're using yarn, you'll need the following instead:<SPAN>&nbsp;</SPAN><CODE style="BOX-SIZING: border-box; MARGIN-BOTTOM: 0px; FONT-FAMILY: var(--font-code); BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: ; PADDING-TOP: 0px; PADDING-LEFT: 0px; PADDING-RIGHT: 0px; border-radius: var(--elem-radius)">yarn add nanoid</CODE>.</P></DIV>
<P style="BOX-SIZING: border-box; MARGIN-TOP: 1px; MARGIN-LEFT: 1px; MARGIN-RIGHT: 1px">Now we can use<SPAN>&nbsp;</SPAN><CODE style="BOX-SIZING: border-box; FONT-FAMILY: var(--font-code); BACKGROUND: none transparent scroll repeat 0% 0%; PADDING-TOP: 0px; PADDING-LEFT: 0px; PADDING-RIGHT: 0px; border-radius: var(--elem-radius)">nanoid</CODE><SPAN>&nbsp;</SPAN>to create unique IDs for our new tasks. First of all, import it by including the following line at the top of<SPAN>&nbsp;</SPAN><CODE style="BOX-SIZING: border-box; FONT-FAMILY: var(--font-code); BACKGROUND: none transparent scroll repeat 0% 0%; PADDING-TOP: 0px; PADDING-LEFT: 0px; PADDING-RIGHT: 0px; border-radius: var(--elem-radius)">App.jsx</CODE>:</P>
<DIV class=code-example style="BOX-SIZING: border-box; FONT-FAMILY: var(--font-code); POSITION: relative; border-radius: var(--elem-radius); --code-action-color: var(--text-secondary)">
<DIV class=example-header style="BOX-SIZING: border-box; BORDER-BOTTOM: 1px solid; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 0px; DISPLAY: flex; PADDING-RIGHT: 0px; gap: 1rem; align-items: baseline; border-top-left-radius: var(--elem-radius); border-top-right-radius: var(--elem-radius); flex-wrap: wrap"><SPAN class=language-name style="BOX-SIZING: border-box; TEXT-TRANSFORM: uppercase; MARGIN-RIGHT: auto">jsx</SPAN><SPAN role=alert class="copy-icon-message visually-hidden" style="BOX-SIZING: border-box; OVERFLOW: hidden !important; BORDER-TOP: 0px; CLIP: rect(1px 1px 1px 1px); HEIGHT: 1px !important; BORDER-RIGHT: 0px; WIDTH: 1px !important; BACKGROUND: none transparent scroll repeat 0% 0%; WHITE-SPACE: nowrap !important; BORDER-BOTTOM: 0px; POSITION: absolute; COLOR: ; PADDING-TOP: 0px; PADDING-LEFT: 0px; BORDER-LEFT: 0px; MARGIN: -1px; PADDING-RIGHT: 0px; border-radius: var(--elem-radius); clip-path: inset(50%); opacity: 1"></SPAN></DIV><PRE class="brush: jsx notranslate" style="BOX-SIZING: border-box; BORDER-TOP: medium none; FONT-FAMILY: var(--font-code); BORDER-RIGHT: 1px solid; WHITE-SPACE: pre-wrap; BORDER-BOTTOM: 1px solid; PADDING-TOP: 1px; PADDING-LEFT: 1px; BORDER-LEFT: 1px solid; MARGIN: 0px 0px 2px; PADDING-RIGHT: 1px; border-top-left-radius: 0px; border-top-right-radius: 0px; overflow-wrap: break-word; border-bottom-right-radius: ; border-bottom-left-radius: ; border-image: initial" data-signature="xTDZmNyTtX3p1ZnCU40ZIszsC/+uW8a0cQbI0gDUy0g="><CODE style="BOX-SIZING: border-box; FONT-FAMILY: var(--font-code); BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: ; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; PADDING-RIGHT: 0px; border-radius: var(--elem-radius)"><SPAN class="token keyword" style="BOX-SIZING: border-box; COLOR: ">import</SPAN> <SPAN class="token punctuation" style="BOX-SIZING: border-box; COLOR: ">{</SPAN> nanoid <SPAN class="token punctuation" style="BOX-SIZING: border-box; COLOR: ">}</SPAN> <SPAN class="token keyword" style="BOX-SIZING: border-box; COLOR: ">from</SPAN> <SPAN class="token string" style="BOX-SIZING: border-box; COLOR: ">"nanoid"</SPAN><SPAN class="token punctuation" style="BOX-SIZING: border-box; COLOR: ">;</SPAN>
</CODE></PRE></DIV>
<P style="BOX-SIZING: border-box; MARGIN-TOP: 1px; MARGIN-LEFT: 1px; MARGIN-RIGHT: 1px">Now let's update<SPAN>&nbsp;</SPAN><CODE style="BOX-SIZING: border-box; FONT-FAMILY: var(--font-code); BACKGROUND: none transparent scroll repeat 0% 0%; PADDING-TOP: 0px; PADDING-LEFT: 0px; PADDING-RIGHT: 0px; border-radius: var(--elem-radius)">addTask()</CODE><SPAN>&nbsp;</SPAN>so that each task ID becomes a prefix<SPAN>&nbsp;</SPAN><CODE style="BOX-SIZING: border-box; FONT-FAMILY: var(--font-code); BACKGROUND: none transparent scroll repeat 0% 0%; PADDING-TOP: 0px; PADDING-LEFT: 0px; PADDING-RIGHT: 0px; border-radius: var(--elem-radius)">todo-</CODE><SPAN>&nbsp;</SPAN>plus a unique string generated by nanoid. Update your<SPAN>&nbsp;</SPAN><CODE style="BOX-SIZING: border-box; FONT-FAMILY: var(--font-code); BACKGROUND: none transparent scroll repeat 0% 0%; PADDING-TOP: 0px; PADDING-LEFT: 0px; PADDING-RIGHT: 0px; border-radius: var(--elem-radius)">newTask</CODE><SPAN>&nbsp;</SPAN>constant declaration to this:</P>
<DIV class=code-example style="BOX-SIZING: border-box; FONT-FAMILY: var(--font-code); POSITION: relative; border-radius: var(--elem-radius); --code-action-color: var(--text-secondary)">
<DIV class=example-header style="BOX-SIZING: border-box; BORDER-BOTTOM: 1px solid; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 0px; DISPLAY: flex; PADDING-RIGHT: 0px; gap: 1rem; align-items: baseline; border-top-left-radius: var(--elem-radius); border-top-right-radius: var(--elem-radius); flex-wrap: wrap"><SPAN class=language-name style="BOX-SIZING: border-box; TEXT-TRANSFORM: uppercase; MARGIN-RIGHT: auto">jsx</SPAN><SPAN role=alert class="copy-icon-message visually-hidden" style="BOX-SIZING: border-box; OVERFLOW: hidden !important; BORDER-TOP: 0px; CLIP: rect(1px 1px 1px 1px); HEIGHT: 1px !important; BORDER-RIGHT: 0px; WIDTH: 1px !important; BACKGROUND: none transparent scroll repeat 0% 0%; WHITE-SPACE: nowrap !important; BORDER-BOTTOM: 0px; POSITION: absolute; COLOR: ; PADDING-TOP: 0px; PADDING-LEFT: 0px; BORDER-LEFT: 0px; MARGIN: -1px; PADDING-RIGHT: 0px; border-radius: var(--elem-radius); clip-path: inset(50%); opacity: 1"></SPAN></DIV><PRE class="brush: jsx notranslate" style="BOX-SIZING: border-box; BORDER-TOP: medium none; FONT-FAMILY: var(--font-code); BORDER-RIGHT: 1px solid; WHITE-SPACE: pre-wrap; BORDER-BOTTOM: 1px solid; PADDING-TOP: 1px; PADDING-LEFT: 1px; BORDER-LEFT: 1px solid; MARGIN: 0px 0px 2px; PADDING-RIGHT: 1px; border-top-left-radius: 0px; border-top-right-radius: 0px; overflow-wrap: break-word; border-bottom-right-radius: ; border-bottom-left-radius: ; border-image: initial" data-signature="cPR7Vp/dpsPXt3otuafxEXvcc5/eT4s6SxcoEkLvUbk="><CODE style="BOX-SIZING: border-box; FONT-FAMILY: var(--font-code); BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: ; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; PADDING-RIGHT: 0px; border-radius: var(--elem-radius)"><SPAN class="token keyword" style="BOX-SIZING: border-box; COLOR: ">const</SPAN> newTask <SPAN class="token operator" style="BOX-SIZING: border-box">=</SPAN> <SPAN class="token punctuation" style="BOX-SIZING: border-box; COLOR: ">{</SPAN> <SPAN class="token literal-property property" style="BOX-SIZING: border-box; COLOR: ">id</SPAN><SPAN class="token operator" style="BOX-SIZING: border-box">:</SPAN> <SPAN class="token template-string" style="BOX-SIZING: border-box"><SPAN class="token template-punctuation string" style="BOX-SIZING: border-box; COLOR: ">`</SPAN><SPAN class="token string" style="BOX-SIZING: border-box; COLOR: ">todo-</SPAN><SPAN class="token interpolation" style="BOX-SIZING: border-box"><SPAN class="token interpolation-punctuation punctuation" style="BOX-SIZING: border-box; COLOR: ">${</SPAN><SPAN class="token function" style="BOX-SIZING: border-box; COLOR: ">nanoid</SPAN><SPAN class="token punctuation" style="BOX-SIZING: border-box; COLOR: ">(</SPAN><SPAN class="token punctuation" style="BOX-SIZING: border-box; COLOR: ">)</SPAN><SPAN class="token interpolation-punctuation punctuation" style="BOX-SIZING: border-box; COLOR: ">}</SPAN></SPAN><SPAN class="token template-punctuation string" style="BOX-SIZING: border-box; COLOR: ">`</SPAN></SPAN><SPAN class="token punctuation" style="BOX-SIZING: border-box; COLOR: ">,</SPAN> name<SPAN class="token punctuation" style="BOX-SIZING: border-box; COLOR: ">,</SPAN> <SPAN class="token literal-property property" style="BOX-SIZING: border-box; COLOR: ">completed</SPAN><SPAN class="token operator" style="BOX-SIZING: border-box">:</SPAN> <SPAN class="token boolean" style="BOX-SIZING: border-box; COLOR: ">false</SPAN> <SPAN class="token punctuation" style="BOX-SIZING: border-box; COLOR: ">}</SPAN><SPAN class="token punctuation" style="BOX-SIZING: border-box; COLOR: ">;</SPAN>
</CODE></PRE></DIV>
<P style="BOX-SIZING: border-box; MARGIN-TOP: 1px; MARGIN-LEFT: 1px; MARGIN-RIGHT: 1px">Save everything, and try your app again &#8212; now you can add tasks without getting that warning about duplicate IDs.</P></DIV></SECTION><SECTION style='BOX-SIZING: border-box; FONT-SIZE: 16px; FONT-FAMILY: Inter, BlinkMacSystemFont, "Segoe UI", Roboto, Oxygen, Ubuntu, Cantarell, "Fira Sans", "Droid Sans", "Helvetica Neue", sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(27,27,27); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial' aria-labelledby=detour_counting_tasks>