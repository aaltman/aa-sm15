From our detailed analysis, we make a number of observations regarding locking algorithms and application behaviors, several of which have not been previously discovered: (i) applications not only stress the lock/unlock interface, but also the full locking API (e.g., trylocks, condition variables), (ii) the memory footprint of a lock can directly affect the application performance, (iii) for many applications, the interaction between locks and scheduling is an important application performance factor, (iv) lock tail latencies may or may not affect application tail latency, (v) no single lock is systematically the best, (vi) choosing the best lock is difficult, and (vii) energy efficiency and throughput go hand in hand in the context of lock algorithms. These findings highlight that locking involves more considerations than the simple &#8220;lock &#8211; unlock&#8221; interface and call for further research on designing low-memory footprint adaptive locks that fully and efficiently support the full lock interface, and consider all performance metrics.</P>
<P>Lock &#8211; Unlock: Is That All? A Pragmatic Analysis of Locking in Software Systems RACHID GUERRAOUI, EPFL, 1015 Lausanne, Switzerland HUGO GUIROUX&#8727; , Univ. Grenoble Alpes, CNRS, Grenoble INP, LIG, 3800 Grenoble, France RENAUD LACHAIZE&#8727; , Univ. Grenoble Alpes, CNRS, Grenoble INP, LIG, 3800 Grenoble, France VIVIEN QU&#201;MA&#8727; , Univ. Grenoble Alpes, CNRS, Grenoble INP, LIG, 3800 Grenoble, France VASILEIOS TRIGONAKIS&#8224;&#8225; , Oracle Labs, 8005 Zurich, Switzerland</P>
<P><A href="https://hal.science/hal-02084060/file/journal.pdf">https://hal.science/hal-02084060/file/journal.pdf</A>