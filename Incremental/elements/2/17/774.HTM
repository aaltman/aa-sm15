<b> : </b><A style="BOX-SIZING: border-box; TEXT-DECORATION: none; COLOR: ; text-decoration-skip-ink: auto" href="https://developer.mozilla.org/en-US/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Introduction#another_way_to_build_uis">Another way to build UIs</A></H2>
<DIV class=section-content style="BOX-SIZING: border-box">
<P style="BOX-SIZING: border-box; MARGIN-TOP: 1px; MARGIN-LEFT: 1px; MARGIN-RIGHT: 1px">Every JavaScript framework offers a way to write user interfaces more<SPAN>&nbsp;</SPAN><EM style='BOX-SIZING: border-box; font-variation-settings: "slnt" -10'>declaratively</EM>. That is, they allow you to write code that describes how your UI should look, and the framework makes it happen in the DOM behind the scenes.</P>
<P style="BOX-SIZING: border-box; MARGIN-TOP: 1px; MARGIN-LEFT: 1px; MARGIN-RIGHT: 1px">The vanilla JavaScript approach to building out new DOM elements in repetition was difficult to understand at a glance. By contrast, the following block of code illustrates the way you might use Vue to describe our list of tasks:</P>
<DIV class=code-example style="BOX-SIZING: border-box; FONT-FAMILY: var(--font-code); POSITION: relative; border-radius: var(--elem-radius); --code-action-color: var(--text-secondary)">
<DIV class=example-header style="BOX-SIZING: border-box; BORDER-BOTTOM: 1px solid; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 0px; DISPLAY: flex; PADDING-RIGHT: 0px; align-items: baseline; border-top-left-radius: var(--elem-radius); border-top-right-radius: var(--elem-radius); flex-wrap: wrap; gap: 1rem"><SPAN class=language-name style="BOX-SIZING: border-box; TEXT-TRANSFORM: uppercase; MARGIN-RIGHT: auto">html</SPAN><SPAN role=alert class="copy-icon-message visually-hidden" style="BOX-SIZING: border-box; OVERFLOW: hidden !important; BORDER-TOP: 0px; CLIP: rect(1px 1px 1px 1px); HEIGHT: 1px !important; BORDER-RIGHT: 0px; WIDTH: 1px !important; BACKGROUND: none transparent scroll repeat 0% 0%; WHITE-SPACE: nowrap !important; BORDER-BOTTOM: 0px; POSITION: absolute; COLOR: ; PADDING-TOP: 0px; PADDING-LEFT: 0px; BORDER-LEFT: 0px; MARGIN: -1px; PADDING-RIGHT: 0px; border-radius: var(--elem-radius); clip-path: inset(50%); opacity: 1"></SPAN></DIV><PRE class="brush: html notranslate" style="BOX-SIZING: border-box; BORDER-TOP: medium none; FONT-FAMILY: var(--font-code); BORDER-RIGHT: 1px solid; WHITE-SPACE: pre-wrap; BORDER-BOTTOM: 1px solid; PADDING-TOP: 1px; PADDING-LEFT: 1px; BORDER-LEFT: 1px solid; MARGIN: 0px 0px 2px; PADDING-RIGHT: 1px; border-top-left-radius: 0px; border-top-right-radius: 0px; overflow-wrap: break-word; border-bottom-right-radius: ; border-bottom-left-radius: ; border-image: initial" data-signature="PzSShjV4qsqjw3au38YQiUc5kY3f780flbb+rz4nDJc="><CODE style="BOX-SIZING: border-box; FONT-FAMILY: var(--font-code); BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: ; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; PADDING-RIGHT: 0px; border-radius: var(--elem-radius)"><SPAN class="token tag" style="BOX-SIZING: border-box; COLOR: "><SPAN class="token tag" style="BOX-SIZING: border-box; COLOR: "><SPAN class="token punctuation" style="BOX-SIZING: border-box; COLOR: ">&lt;</SPAN>ul</SPAN><SPAN class="token punctuation" style="BOX-SIZING: border-box; COLOR: ">&gt;</SPAN></SPAN>
  <SPAN class="token tag" style="BOX-SIZING: border-box; COLOR: "><SPAN class="token tag" style="BOX-SIZING: border-box; COLOR: "><SPAN class="token punctuation" style="BOX-SIZING: border-box; COLOR: ">&lt;</SPAN>li</SPAN> <SPAN class="token attr-name" style="BOX-SIZING: border-box; COLOR: ">v-for</SPAN><SPAN class="token attr-value" style="BOX-SIZING: border-box; COLOR: "><SPAN class="token punctuation attr-equals" style="BOX-SIZING: border-box; COLOR: ">=</SPAN><SPAN class="token punctuation" style="BOX-SIZING: border-box; COLOR: ">"</SPAN>task in tasks<SPAN class="token punctuation" style="BOX-SIZING: border-box; COLOR: ">"</SPAN></SPAN> <SPAN class="token attr-name" style="BOX-SIZING: border-box; COLOR: "><SPAN class="token namespace" style="BOX-SIZING: border-box">v-bind:</SPAN>key</SPAN><SPAN class="token attr-value" style="BOX-SIZING: border-box; COLOR: "><SPAN class="token punctuation attr-equals" style="BOX-SIZING: border-box; COLOR: ">=</SPAN><SPAN class="token punctuation" style="BOX-SIZING: border-box; COLOR: ">"</SPAN>task.id<SPAN class="token punctuation" style="BOX-SIZING: border-box; COLOR: ">"</SPAN></SPAN><SPAN class="token punctuation" style="BOX-SIZING: border-box; COLOR: ">&gt;</SPAN></SPAN>
    <SPAN class="token tag" style="BOX-SIZING: border-box; COLOR: "><SPAN class="token tag" style="BOX-SIZING: border-box; COLOR: "><SPAN class="token punctuation" style="BOX-SIZING: border-box; COLOR: ">&lt;</SPAN>span</SPAN><SPAN class="token punctuation" style="BOX-SIZING: border-box; COLOR: ">&gt;</SPAN></SPAN>{{task.name}}<SPAN class="token tag" style="BOX-SIZING: border-box; COLOR: "><SPAN class="token tag" style="BOX-SIZING: border-box; COLOR: "><SPAN class="token punctuation" style="BOX-SIZING: border-box; COLOR: ">&lt;/</SPAN>span</SPAN><SPAN class="token punctuation" style="BOX-SIZING: border-box; COLOR: ">&gt;</SPAN></SPAN>
    <SPAN class="token tag" style="BOX-SIZING: border-box; COLOR: "><SPAN class="token tag" style="BOX-SIZING: border-box; COLOR: "><SPAN class="token punctuation" style="BOX-SIZING: border-box; COLOR: ">&lt;</SPAN>button</SPAN> <SPAN class="token attr-name" style="BOX-SIZING: border-box; COLOR: ">type</SPAN><SPAN class="token attr-value" style="BOX-SIZING: border-box; COLOR: "><SPAN class="token punctuation attr-equals" style="BOX-SIZING: border-box; COLOR: ">=</SPAN><SPAN class="token punctuation" style="BOX-SIZING: border-box; COLOR: ">"</SPAN>button<SPAN class="token punctuation" style="BOX-SIZING: border-box; COLOR: ">"</SPAN></SPAN><SPAN class="token punctuation" style="BOX-SIZING: border-box; COLOR: ">&gt;</SPAN></SPAN>Delete<SPAN class="token tag" style="BOX-SIZING: border-box; COLOR: "><SPAN class="token tag" style="BOX-SIZING: border-box; COLOR: "><SPAN class="token punctuation" style="BOX-SIZING: border-box; COLOR: ">&lt;/</SPAN>button</SPAN><SPAN class="token punctuation" style="BOX-SIZING: border-box; COLOR: ">&gt;</SPAN></SPAN>
  <SPAN class="token tag" style="BOX-SIZING: border-box; COLOR: "><SPAN class="token tag" style="BOX-SIZING: border-box; COLOR: "><SPAN class="token punctuation" style="BOX-SIZING: border-box; COLOR: ">&lt;/</SPAN>li</SPAN><SPAN class="token punctuation" style="BOX-SIZING: border-box; COLOR: ">&gt;</SPAN></SPAN>
<SPAN class="token tag" style="BOX-SIZING: border-box; COLOR: "><SPAN class="token tag" style="BOX-SIZING: border-box; COLOR: "><SPAN class="token punctuation" style="BOX-SIZING: border-box; COLOR: ">&lt;/</SPAN>ul</SPAN><SPAN class="token punctuation" style="BOX-SIZING: border-box; COLOR: ">&gt;</SPAN></SPAN>
</CODE></PRE></DIV>
<P style="BOX-SIZING: border-box; MARGIN-TOP: 1px; MARGIN-LEFT: 1px; MARGIN-RIGHT: 1px">That's it. This snippet reduces almost thirty lines of code down to six lines. If the curly braces and<SPAN>&nbsp;</SPAN><CODE style="BOX-SIZING: border-box; FONT-FAMILY: var(--font-code); BACKGROUND: none transparent scroll repeat 0% 0%; PADDING-TOP: 0px; PADDING-LEFT: 0px; PADDING-RIGHT: 0px; border-radius: var(--elem-radius)">v-</CODE><SPAN>&nbsp;</SPAN>attributes here are unfamiliar to you, that's okay; you'll learn about Vue-specific syntax later on in the module. The thing to take away here is that this code looks like the UI it represents, whereas the vanilla JavaScript code does not.</P>
<P style="BOX-SIZING: border-box; MARGIN-TOP: 1px; MARGIN-LEFT: 1px; MARGIN-RIGHT: 1px">Thanks to Vue, we didn't have to write our own functions for building the UI; the framework will handle that for us in an optimized, efficient way. Our only role here was to describe to Vue what each item should look like. Developers who are familiar with Vue can quickly work out what is going on when they join our project. Vue is not alone in this: using a framework improves team as well as individual efficiency.</P>
<P style="BOX-SIZING: border-box; MARGIN-TOP: 1px; MARGIN-LEFT: 1px; MARGIN-RIGHT: 1px">It's possible to do things<SPAN>&nbsp;</SPAN><EM style='BOX-SIZING: border-box; font-variation-settings: "slnt" -10'>similar</EM><SPAN>&nbsp;</SPAN>to this in vanilla JavaScript.<SPAN>&nbsp;</SPAN><A style="BOX-SIZING: border-box; TEXT-DECORATION: underline; COLOR: ; text-decoration-skip-ink: auto" href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals">Template literal strings</A><SPAN>&nbsp;</SPAN>make it easy to write strings of HTML that represent what the final element would look like. That might be a useful idea for something as simple as our to-do list application, but it's not maintainable for large applications that manage thousands of records of data, and could render just as many unique elements in a user interface.</P></DIV></SECTION><SECTION style='BOX-SIZING: border-box; FONT-SIZE: 16px; FONT-FAMILY: Inter, BlinkMacSystemFont, "Segoe UI", Roboto, Oxygen, Ubuntu, Cantarell, "Fira Sans", "Droid Sans", "Helvetica Neue", sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(27,27,27); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial' aria-labelledby=other_things_frameworks_give_us>