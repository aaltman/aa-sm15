My own notes on broader applications of sequential consistency.</P>
<P>Sequential consistency is a concern in both databases and in lock-free programming.&nbsp; In both cases, it has about the same meaning of executing operations (i.e. transactions) as if there was some serial total order to them.&nbsp; </P>
<P>Future learning: contrast this with linearizability, especially in terms of visibility of changes to the multiple reading or writing processes.&nbsp; </P>
<P>Sequentially consistent is the default mode of C++11 and later atomic variables, leading to many expensive memory barrier instructions, but the simplest possible programming model.&nbsp; </P>
<P>By contrast, it is an option but NOT the default in Postgres.&nbsp; A transaction in Postgres running at weaker isolation levels has the option to consume new updates for aggregate operations, or to simply take one snapshot at the start of the transaction and use that until commit or abort (as emphasized in a Bruce Momjian blog post describing Postgres' implementation of these different isolation levels).&nbsp; Sequential consistency, however, requires repeated checking to see if any rows relevant to predicates used within the transaction have changed.&nbsp; </P>
<P>A topic for future learning is exactly what kinds of predicates would trigger this, how to tell, and what exactly the implementation details are and their performance implications.