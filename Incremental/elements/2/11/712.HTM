The &#8220;wait in user space&#8221; step of unlock requires further explanation. MUTEXEE, after releasing the lock in user space, but before invoking futex, waits for a short period to detect whether the lock is acquired by another thread in user space. In such case, the unlock operation returns without invoking futex. The waiting duration must be proportional to the maximum coherence latency of the processor (e.g., 384 cycles on Xeon). </P>
<P>Moreover, MUTEXEE operates in one of two modes: (i) spin, with &#8764; 8000 cycles of spinning in the lock function and &#8764; 384 in unlock, and (ii) mutex, with &#8764; 256 cycles in lock and &#8764; 128 in unlock (used to avoid useless spinning). MUTEXEE keeps track of statistics regarding how many handovers occur with busy waiting and with futex. Based on those statistics, MUTEXEE periodically decides on which mode to operate in: If the futex-tobusy-waiting handovers ratio is high (&gt;30%), MUTEXEE uses mutex, otherwise it remains in spin mode.</P>
<P><A href="https://www.usenix.org/system/files/conference/atc16/atc16_paper-falsafi.pdf">https://www.usenix.org/system/files/conference/atc16/atc16_paper-falsafi.pdf</A>