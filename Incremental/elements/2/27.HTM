<b> : </b>Relation Among RCU Primitives</H3><SPAN style='FONT-SIZE: medium; FONT-FAMILY: "Times New Roman"; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FLOAT: none; FONT-WEIGHT: 400; COLOR: rgb(0,0,0); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; DISPLAY: inline !important; LETTER-SPACING: normal; TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial'>The following diagram shows how each API communicates among the reader, updater, and reclaimer.</SPAN>
<P style='FONT-SIZE: medium; FONT-FAMILY: "Times New Roman"; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(0,0,0); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial'><IMG src="http://www.rdrop.com/users/paulmck/RCU/readupdreclaim.jpg"></P>
<P style='FONT-SIZE: medium; FONT-FAMILY: "Times New Roman"; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(0,0,0); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial'>The RCU infrastructure observes the time sequence of<SPAN>&nbsp;</SPAN><TT>rcu_read_lock()</TT>,<SPAN>&nbsp;</SPAN><TT>rcu_read_unlock()</TT>,<SPAN>&nbsp;</SPAN><TT>synchronize_kernel()</TT>, and<SPAN>&nbsp;</SPAN><TT>call_rcu()</TT><SPAN>&nbsp;</SPAN>invocations in order to determine when (1)<SPAN>&nbsp;</SPAN><TT>synchronize_kernel()</TT><SPAN>&nbsp;</SPAN>invocations may return to their callers and (2)<SPAN>&nbsp;</SPAN><TT>call_rcu()</TT><SPAN>&nbsp;</SPAN>callbacks may be invoked. Efficient implementations of the RCU infrastructure make heavy use of batching in order to amortize their overhead over many uses of the corresponding APIs.</P>
<P style='FONT-SIZE: medium; FONT-FAMILY: "Times New Roman"; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(0,0,0); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial'>There are no fewer than three RCU mechanisms in the Linux kernel; the diagram above shows the first one, which is by far the most commonly used. The<SPAN>&nbsp;</SPAN><TT>rcu_dereference()</TT><SPAN>&nbsp;</SPAN>and<SPAN>&nbsp;</SPAN><TT>rcu_assign_pointer()</TT><SPAN>&nbsp;</SPAN>primitives are used for all four mechanisms, but different defer and protect primitives are used as follows:</P><PRE style="WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(0,0,0); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial">        Defer                   Protect

a.      synchronize_rcu()       rcu_read_lock() / rcu_read_unlock()
        call_rcu()

b.      call_rcu_bh()           rcu_read_lock_bh() / rcu_read_unlock_bh()

c.      synchronize_sched()     preempt_disable() / preempt_enable()
                                local_irq_save() / local_irq_restore()
                                hardirq enter / hardirq exit
                                NMI enter / NMI exit

d.      synchronize_srcu()      srcu_read_lock() / srcu_read_unlock()
</PRE><SPAN style='FONT-SIZE: medium; FONT-FAMILY: "Times New Roman"; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FLOAT: none; FONT-WEIGHT: 400; COLOR: rgb(0,0,0); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; DISPLAY: inline !important; LETTER-SPACING: normal; TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial'>These four mechanisms are used as follows:</SPAN>
<OL style='FONT-SIZE: medium; FONT-FAMILY: "Times New Roman"; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(0,0,0); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial' type=a>
<LI>RCU applied to normal data structures.</LI>
<LI>RCU applied to networking data structures that may be subjected to remote denial-of-service attacks.</LI>
<LI>RCU applied to scheduler and interrupt/NMI-handler tasks.</LI>
<LI>Variant of RCU that allows readers to block.</LI></OL><SPAN style='FONT-SIZE: medium; FONT-FAMILY: "Times New Roman"; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FLOAT: none; FONT-WEIGHT: 400; COLOR: rgb(0,0,0); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; DISPLAY: inline !important; LETTER-SPACING: normal; TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial'>Again, most uses will be of (a). The (b), (c), and (d) cases are important in some special cases, but are relatively uncommon.</SPAN>