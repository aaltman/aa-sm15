<b> : </b><A style="BOX-SIZING: border-box; TEXT-DECORATION: none; COLOR: ; text-decoration-skip-ink: auto" href="https://developer.mozilla.org/en-US/docs/Learn/Server-side/Django/Introduction#defining_data_models_models.py">Defining data models (models.py)</A></H3>
<DIV class=section-content style="BOX-SIZING: border-box">
<P style="BOX-SIZING: border-box; MARGIN-TOP: 1px; MARGIN-LEFT: 1px; MARGIN-RIGHT: 1px">Django web applications manage and query data through Python objects referred to as models. Models define the structure of stored data, including the field<SPAN>&nbsp;</SPAN><EM style='BOX-SIZING: border-box; font-variation-settings: "slnt" -10'>types</EM><SPAN>&nbsp;</SPAN>and possibly also their maximum size, default values, selection list options, help text for documentation, label text for forms, etc. The definition of the model is independent of the underlying database &#8212; you can choose one of several as part of your project settings. Once you've chosen what database you want to use, you don't need to talk to it directly at all &#8212; you just write your model structure and other code, and Django handles all the "dirty work" of communicating with the database for you.</P>
<P style="BOX-SIZING: border-box; MARGIN-TOP: 1px; MARGIN-LEFT: 1px; MARGIN-RIGHT: 1px">The code snippet below shows a very simple Django model for a<SPAN>&nbsp;</SPAN><CODE style="BOX-SIZING: border-box; FONT-FAMILY: var(--font-code); BACKGROUND: none transparent scroll repeat 0% 0%; PADDING-TOP: 0px; PADDING-LEFT: 0px; PADDING-RIGHT: 0px; border-radius: var(--elem-radius)">Team</CODE><SPAN>&nbsp;</SPAN>object. The<SPAN>&nbsp;</SPAN><CODE style="BOX-SIZING: border-box; FONT-FAMILY: var(--font-code); BACKGROUND: none transparent scroll repeat 0% 0%; PADDING-TOP: 0px; PADDING-LEFT: 0px; PADDING-RIGHT: 0px; border-radius: var(--elem-radius)">Team</CODE><SPAN>&nbsp;</SPAN>class is derived from the Django class<SPAN>&nbsp;</SPAN><CODE style="BOX-SIZING: border-box; FONT-FAMILY: var(--font-code); BACKGROUND: none transparent scroll repeat 0% 0%; PADDING-TOP: 0px; PADDING-LEFT: 0px; PADDING-RIGHT: 0px; border-radius: var(--elem-radius)">models.Model</CODE>. It defines the team name and team level as character fields and specifies a maximum number of characters to be stored for each record. The<SPAN>&nbsp;</SPAN><CODE style="BOX-SIZING: border-box; FONT-FAMILY: var(--font-code); BACKGROUND: none transparent scroll repeat 0% 0%; PADDING-TOP: 0px; PADDING-LEFT: 0px; PADDING-RIGHT: 0px; border-radius: var(--elem-radius)">team_level</CODE><SPAN>&nbsp;</SPAN>can be one of several values, so we define it as a choice field and provide a mapping between choices to be displayed and data to be stored, along with a default value.</P>
<DIV class=code-example style="BOX-SIZING: border-box; FONT-FAMILY: var(--font-code); POSITION: relative; border-radius: var(--elem-radius); --code-action-color: var(--text-secondary)">
<DIV class=example-header style="BOX-SIZING: border-box; BORDER-BOTTOM: 1px solid; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 0px; DISPLAY: flex; PADDING-RIGHT: 0px; align-items: baseline; border-top-left-radius: var(--elem-radius); border-top-right-radius: var(--elem-radius); flex-wrap: wrap; gap: 1rem"><SPAN class=language-name style="BOX-SIZING: border-box; TEXT-TRANSFORM: uppercase; MARGIN-RIGHT: auto">python</SPAN><SPAN role=alert class="copy-icon-message visually-hidden" style="BOX-SIZING: border-box; OVERFLOW: hidden !important; BORDER-TOP: 0px; CLIP: rect(1px 1px 1px 1px); HEIGHT: 1px !important; BORDER-RIGHT: 0px; WIDTH: 1px !important; BACKGROUND: none transparent scroll repeat 0% 0%; WHITE-SPACE: nowrap !important; BORDER-BOTTOM: 0px; POSITION: absolute; COLOR: ; PADDING-TOP: 0px; PADDING-LEFT: 0px; BORDER-LEFT: 0px; MARGIN: -1px; PADDING-RIGHT: 0px; border-radius: var(--elem-radius); clip-path: inset(50%); opacity: 1"></SPAN></DIV><PRE class="brush: python notranslate" style="BOX-SIZING: border-box; BORDER-TOP: medium none; FONT-FAMILY: var(--font-code); BORDER-RIGHT: 1px solid; WHITE-SPACE: pre-wrap; BORDER-BOTTOM: 1px solid; PADDING-TOP: 1px; PADDING-LEFT: 1px; BORDER-LEFT: 1px solid; MARGIN: 0px 0px 2px; PADDING-RIGHT: 1px; border-top-left-radius: 0px; border-top-right-radius: 0px; overflow-wrap: break-word; border-bottom-right-radius: ; border-bottom-left-radius: ; border-image: initial" data-signature="h0efIM2dm0MLZV/4uZ8KEDfzadxg2lC0GjQgf3Ko6O4="><CODE style="BOX-SIZING: border-box; FONT-FAMILY: var(--font-code); BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: ; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; PADDING-RIGHT: 0px; border-radius: var(--elem-radius)"><SPAN class="token comment" style="BOX-SIZING: border-box; COLOR: "># filename: models.py</SPAN>

<SPAN class="token keyword" style="BOX-SIZING: border-box; COLOR: ">from</SPAN> django<SPAN class="token punctuation" style="BOX-SIZING: border-box; COLOR: ">.</SPAN>db <SPAN class="token keyword" style="BOX-SIZING: border-box; COLOR: ">import</SPAN> models

<SPAN class="token keyword" style="BOX-SIZING: border-box; COLOR: ">class</SPAN> <SPAN class="token class-name" style="BOX-SIZING: border-box; COLOR: ">Team</SPAN><SPAN class="token punctuation" style="BOX-SIZING: border-box; COLOR: ">(</SPAN>models<SPAN class="token punctuation" style="BOX-SIZING: border-box; COLOR: ">.</SPAN>Model<SPAN class="token punctuation" style="BOX-SIZING: border-box; COLOR: ">)</SPAN><SPAN class="token punctuation" style="BOX-SIZING: border-box; COLOR: ">:</SPAN>
    team_name <SPAN class="token operator" style="BOX-SIZING: border-box">=</SPAN> models<SPAN class="token punctuation" style="BOX-SIZING: border-box; COLOR: ">.</SPAN>CharField<SPAN class="token punctuation" style="BOX-SIZING: border-box; COLOR: ">(</SPAN>max_length<SPAN class="token operator" style="BOX-SIZING: border-box">=</SPAN><SPAN class="token number" style="BOX-SIZING: border-box; COLOR: ">40</SPAN><SPAN class="token punctuation" style="BOX-SIZING: border-box; COLOR: ">)</SPAN>

    TEAM_LEVELS <SPAN class="token operator" style="BOX-SIZING: border-box">=</SPAN> <SPAN class="token punctuation" style="BOX-SIZING: border-box; COLOR: ">(</SPAN>
        <SPAN class="token punctuation" style="BOX-SIZING: border-box; COLOR: ">(</SPAN><SPAN class="token string" style="BOX-SIZING: border-box; COLOR: ">'U09'</SPAN><SPAN class="token punctuation" style="BOX-SIZING: border-box; COLOR: ">,</SPAN> <SPAN class="token string" style="BOX-SIZING: border-box; COLOR: ">'Under 09s'</SPAN><SPAN class="token punctuation" style="BOX-SIZING: border-box; COLOR: ">)</SPAN><SPAN class="token punctuation" style="BOX-SIZING: border-box; COLOR: ">,</SPAN>
        <SPAN class="token punctuation" style="BOX-SIZING: border-box; COLOR: ">(</SPAN><SPAN class="token string" style="BOX-SIZING: border-box; COLOR: ">'U10'</SPAN><SPAN class="token punctuation" style="BOX-SIZING: border-box; COLOR: ">,</SPAN> <SPAN class="token string" style="BOX-SIZING: border-box; COLOR: ">'Under 10s'</SPAN><SPAN class="token punctuation" style="BOX-SIZING: border-box; COLOR: ">)</SPAN><SPAN class="token punctuation" style="BOX-SIZING: border-box; COLOR: ">,</SPAN>
        <SPAN class="token punctuation" style="BOX-SIZING: border-box; COLOR: ">(</SPAN><SPAN class="token string" style="BOX-SIZING: border-box; COLOR: ">'U11'</SPAN><SPAN class="token punctuation" style="BOX-SIZING: border-box; COLOR: ">,</SPAN> <SPAN class="token string" style="BOX-SIZING: border-box; COLOR: ">'Under 11s'</SPAN><SPAN class="token punctuation" style="BOX-SIZING: border-box; COLOR: ">)</SPAN><SPAN class="token punctuation" style="BOX-SIZING: border-box; COLOR: ">,</SPAN>
        <SPAN class="token comment" style="BOX-SIZING: border-box; COLOR: "># &#8230;</SPAN>
        <SPAN class="token comment" style="BOX-SIZING: border-box; COLOR: "># list other team levels</SPAN>
    <SPAN class="token punctuation" style="BOX-SIZING: border-box; COLOR: ">)</SPAN>
    team_level <SPAN class="token operator" style="BOX-SIZING: border-box">=</SPAN> models<SPAN class="token punctuation" style="BOX-SIZING: border-box; COLOR: ">.</SPAN>CharField<SPAN class="token punctuation" style="BOX-SIZING: border-box; COLOR: ">(</SPAN>max_length<SPAN class="token operator" style="BOX-SIZING: border-box">=</SPAN><SPAN class="token number" style="BOX-SIZING: border-box; COLOR: ">3</SPAN><SPAN class="token punctuation" style="BOX-SIZING: border-box; COLOR: ">,</SPAN> choices<SPAN class="token operator" style="BOX-SIZING: border-box">=</SPAN>TEAM_LEVELS<SPAN class="token punctuation" style="BOX-SIZING: border-box; COLOR: ">,</SPAN> default<SPAN class="token operator" style="BOX-SIZING: border-box">=</SPAN><SPAN class="token string" style="BOX-SIZING: border-box; COLOR: ">'U11'</SPAN><SPAN class="token punctuation" style="BOX-SIZING: border-box; COLOR: ">)</SPAN>
</CODE></PRE></DIV>
<DIV id=sect4 class="notecard note" style="BOX-SIZING: border-box; MARGIN-TOP: 1px; POSITION: relative; COLOR: ; PADDING-TOP: 1px; PADDING-LEFT: 1px; MARGIN-LEFT: 1px; BORDER-LEFT: 2px solid; PADDING-RIGHT: 1px; MARGIN-RIGHT: 1px; --note-background: var(--background-information); --note-theme: var(--icon-information); border-radius: var(--elem-radius); box-shadow: var(--shadow-01)">
<P style="BOX-SIZING: border-box; COLOR: ; MARGIN: 0px"><STRONG style="BOX-SIZING: border-box">Note:</STRONG><SPAN>&nbsp;</SPAN>A little bit of Python:</P>
<P style="BOX-SIZING: border-box; COLOR: ; MARGIN: 0px">Python supports "object-oriented programming", a style of programming where we organize our code into objects, which include related data and functions for operating on that data. Objects can also inherit/extend/derive from other objects, allowing common behavior between related objects to be shared. In Python we use the keyword<SPAN>&nbsp;</SPAN><CODE style="BOX-SIZING: border-box; FONT-FAMILY: var(--font-code); BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: ; PADDING-TOP: 0px; PADDING-LEFT: 0px; PADDING-RIGHT: 0px; border-radius: var(--elem-radius)">class</CODE><SPAN>&nbsp;</SPAN>to define the "blueprint" for an object. We can create multiple specific<SPAN>&nbsp;</SPAN><EM style='BOX-SIZING: border-box; font-variation-settings: "slnt" -10'>instances</EM><SPAN>&nbsp;</SPAN>of the type of object based on the model in the class.</P>
<P style="BOX-SIZING: border-box; COLOR: ; PADDING-BOTTOM: 0px; MARGIN: 0px">So for example, here we have a<SPAN>&nbsp;</SPAN><CODE style="BOX-SIZING: border-box; FONT-FAMILY: var(--font-code); BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: ; PADDING-TOP: 0px; PADDING-LEFT: 0px; PADDING-RIGHT: 0px; border-radius: var(--elem-radius)">Team</CODE><SPAN>&nbsp;</SPAN>class, which derives from the<SPAN>&nbsp;</SPAN><CODE style="BOX-SIZING: border-box; MARGIN-BOTTOM: 0px; FONT-FAMILY: var(--font-code); BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: ; PADDING-TOP: 0px; PADDING-LEFT: 0px; PADDING-RIGHT: 0px; border-radius: var(--elem-radius)">Model</CODE><SPAN>&nbsp;</SPAN>class. This means it is a model, and will contain all the methods of a model, but we can also give it specialized features of its own too. In our model we define the fields our database will need to store our data, giving them specific names. Django uses these definitions, including the field names, to create the underlying database.</P></DIV></DIV></SECTION><SECTION style='BOX-SIZING: border-box; FONT-SIZE: 16px; FONT-FAMILY: Inter, BlinkMacSystemFont, "Segoe UI", Roboto, Oxygen, Ubuntu, Cantarell, "Fira Sans", "Droid Sans", "Helvetica Neue", sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(27,27,27); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial' aria-labelledby=querying_data_views.py>