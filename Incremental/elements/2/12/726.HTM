<b> : </b><A style="BOX-SIZING: border-box; TEXT-DECORATION: none; COLOR: ; text-decoration-skip-ink: auto" href="https://developer.mozilla.org/en-US/docs/Learn/Server-side/Django/Introduction#what_does_django_code_look_like">What does Django code look like?</A></H2>
<DIV class=section-content style="BOX-SIZING: border-box">
<P style="BOX-SIZING: border-box; MARGIN-TOP: 1px; MARGIN-LEFT: 1px; MARGIN-RIGHT: 1px">In a traditional data-driven website, a web application waits for HTTP requests from the web browser (or other client). When a request is received the application works out what is needed based on the URL and possibly information in<SPAN>&nbsp;</SPAN><CODE style="BOX-SIZING: border-box; FONT-FAMILY: var(--font-code); BACKGROUND: none transparent scroll repeat 0% 0%; PADDING-TOP: 0px; PADDING-LEFT: 0px; PADDING-RIGHT: 0px; border-radius: var(--elem-radius)">POST</CODE><SPAN>&nbsp;</SPAN>data or<SPAN>&nbsp;</SPAN><CODE style="BOX-SIZING: border-box; FONT-FAMILY: var(--font-code); BACKGROUND: none transparent scroll repeat 0% 0%; PADDING-TOP: 0px; PADDING-LEFT: 0px; PADDING-RIGHT: 0px; border-radius: var(--elem-radius)">GET</CODE><SPAN>&nbsp;</SPAN>data. Depending on what is required it may then read or write information from a database or perform other tasks required to satisfy the request. The application will then return a response to the web browser, often dynamically creating an HTML page for the browser to display by inserting the retrieved data into placeholders in an HTML template.</P>
<P style="BOX-SIZING: border-box; MARGIN-TOP: 1px; MARGIN-LEFT: 1px; MARGIN-RIGHT: 1px">Django web applications typically group the code that handles each of these steps into separate files:</P>
<P style="BOX-SIZING: border-box; MARGIN-TOP: 1px; MARGIN-LEFT: 1px; MARGIN-RIGHT: 1px"><IMG style="MAX-WIDTH: 100%; BORDER-TOP: 1px solid; HEIGHT: auto; BORDER-RIGHT: 1px solid; BACKGROUND: rgb(255,255,255); MARGIN-TOP: 2px; BORDER-BOTTOM: 1px solid; COLOR: rgb(27,27,27); MARGIN-LEFT: 2px; BORDER-LEFT: 1px solid; DISPLAY: flex; MARGIN-RIGHT: 2px; border-radius: var(--elem-radius)" alt="Django - files for views, model, URLs, template" src="https://developer.mozilla.org/en-US/docs/Learn/Server-side/Django/Introduction/basic-django.png" width=713 height=503 loading="lazy"></P>
<UL style="LIST-STYLE-TYPE: disc; BOX-SIZING: border-box; MARGIN-TOP: 1px; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 2px; MARGIN-LEFT: 1px; PADDING-RIGHT: 0px; MARGIN-RIGHT: 1px">
<LI style="BOX-SIZING: border-box; MARGIN-TOP: 0px; MARGIN-LEFT: 0px; MARGIN-RIGHT: 0px"><STRONG style="BOX-SIZING: border-box">URLs:</STRONG><SPAN>&nbsp;</SPAN>While it is possible to process requests from every single URL via a single function, it is much more maintainable to write a separate view function to handle each resource. A URL mapper is used to redirect HTTP requests to the appropriate view based on the request URL. The URL mapper can also match particular patterns of strings or digits that appear in a URL and pass these to a view function as data.</LI>
<LI style="BOX-SIZING: border-box; MARGIN-TOP: 0px; MARGIN-LEFT: 0px; MARGIN-RIGHT: 0px"><STRONG style="BOX-SIZING: border-box">View:</STRONG><SPAN>&nbsp;</SPAN>A view is a request handler function, which receives HTTP requests and returns HTTP responses. Views access the data needed to satisfy requests via<SPAN>&nbsp;</SPAN><EM style='BOX-SIZING: border-box; font-variation-settings: "slnt" -10'>models</EM>, and delegate the formatting of the response to<SPAN>&nbsp;</SPAN><EM style='BOX-SIZING: border-box; font-variation-settings: "slnt" -10'>templates</EM>.</LI>
<LI style="BOX-SIZING: border-box; MARGIN-TOP: 0px; MARGIN-LEFT: 0px; MARGIN-RIGHT: 0px"><STRONG style="BOX-SIZING: border-box">Models:</STRONG><SPAN>&nbsp;</SPAN>Models are Python objects that define the structure of an application's data, and provide mechanisms to manage (add, modify, delete) and query records in the database.</LI>
<LI style="BOX-SIZING: border-box; MARGIN-TOP: 0px; MARGIN-LEFT: 0px; MARGIN-RIGHT: 0px"><STRONG style="BOX-SIZING: border-box">Templates:</STRONG><SPAN>&nbsp;</SPAN>A template is a text file defining the structure or layout of a file (such as an HTML page), with placeholders used to represent actual content. A<SPAN>&nbsp;</SPAN><EM style='BOX-SIZING: border-box; font-variation-settings: "slnt" -10'>view</EM><SPAN>&nbsp;</SPAN>can dynamically create an HTML page using an HTML template, populating it with data from a<SPAN>&nbsp;</SPAN><EM style='BOX-SIZING: border-box; font-variation-settings: "slnt" -10'>model</EM>. A template can be used to define the structure of any type of file; it doesn't have to be HTML!</LI></UL>
<DIV id=sect2 class="notecard note" style="BOX-SIZING: border-box; MARGIN-TOP: 2px; POSITION: relative; COLOR: ; PADDING-TOP: 1px; PADDING-LEFT: 1px; MARGIN-LEFT: 2px; BORDER-LEFT: 2px solid; PADDING-RIGHT: 1px; MARGIN-RIGHT: 2px; --note-background: var(--background-information); --note-theme: var(--icon-information); border-radius: var(--elem-radius); box-shadow: var(--shadow-01)">
<P style="BOX-SIZING: border-box; COLOR: ; PADDING-BOTTOM: 0px; MARGIN: 0px"><STRONG style="BOX-SIZING: border-box">Note:</STRONG><SPAN>&nbsp;</SPAN>Django refers to this organization as the "Model View Template (MVT)" architecture. It has many similarities to the more familiar<SPAN>&nbsp;</SPAN><A style="BOX-SIZING: border-box; MARGIN-BOTTOM: 0px; TEXT-DECORATION: underline; COLOR: ; text-decoration-skip-ink: auto" href="https://developer.mozilla.org/en-US/docs/Glossary/MVC">Model View Controller</A><SPAN>&nbsp;</SPAN>architecture.</P></DIV>
<P style="BOX-SIZING: border-box; MARGIN-TOP: 1px; MARGIN-LEFT: 1px; MARGIN-RIGHT: 1px">The sections below will give you an idea of what these main parts of a Django app look like (we'll go into more detail later on in the course, once we've set up a development environment).</P></DIV></SECTION><SECTION style='BOX-SIZING: border-box; FONT-SIZE: 16px; FONT-FAMILY: Inter, BlinkMacSystemFont, "Segoe UI", Roboto, Oxygen, Ubuntu, Cantarell, "Fira Sans", "Droid Sans", "Helvetica Neue", sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(27,27,27); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial' aria-labelledby=sending_the_request_to_the_right_view_urls.py>