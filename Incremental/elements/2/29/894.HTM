<b> : </b>Weak ordering</H3><SPAN class=mw-editsection style="FONT-SIZE: small; FONT-FAMILY: sans-serif; VERTICAL-ALIGN: baseline; FONT-WEIGHT: normal; MARGIN-LEFT: 1em; LINE-HEIGHT: 0; MARGIN-RIGHT: 0px; user-select: none"><SPAN class=mw-editsection-bracket style="COLOR: ; MARGIN-RIGHT: 0.25em">[</SPAN><A title="Edit section: Weak ordering" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; WHITE-SPACE: nowrap; COLOR: ; border-radius: 2px; overflow-wrap: break-word" href="https://en.wikipedia.org/w/index.php?title=Consistency_model&amp;action=edit&amp;section=17"><SPAN>edit</SPAN></A><SPAN class=mw-editsection-bracket style="COLOR: ; MARGIN-LEFT: 0.25em">]</SPAN></SPAN></DIV>
<P style="FONT-SIZE: 16px; FONT-FAMILY: sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(32,33,34); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; MARGIN: 0.5em 0px 1em; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial">Weak ordering classifies memory operations into two categories:<SPAN>&nbsp;</SPAN><I>data operations</I><SPAN>&nbsp;</SPAN>and<SPAN>&nbsp;</SPAN><I>synchronization operations</I>. To enforce program order, a programmer needs to find at least one synchronisation operation in a program. Synchronization operations signal the processor to make sure it has completed and seen all previous operations done by all processors. Program order and atomicity is maintained only on synchronisation operations and not on all reads and writes. This was derived from the understanding that certain memory operations &#8211; such as those conducted in a critical section - need not be seen by all processors until after all operations in the critical section are completed. It assumes reordering memory operations to data regions between synchronisation operations does not affect the outcome of the program. This exploits the fact that programs written to be executed on a multi-processor system contain the required synchronization to make sure that data races do not occur and SC outcomes are produced always.<SUP id=cite_ref-16 class=reference style="FONT-SIZE: 12px; WHITE-SPACE: nowrap; FONT-WEIGHT: normal; FONT-STYLE: normal; LINE-HEIGHT: 1"><A style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: ; border-radius: 2px; overflow-wrap: break-word" href="https://en.wikipedia.org/wiki/Consistency_model#cite_note-16"><FONT style="BACKGROUND-COLOR: #ffffff" face=Arial>[16]</FONT></A></SUP></P>
<TABLE class=wikitable style="FONT-SIZE: 16px; BORDER-TOP: 1px solid; FONT-FAMILY: sans-serif; BORDER-RIGHT: 1px solid; WHITE-SPACE: normal; WORD-SPACING: 0px; BORDER-COLLAPSE: collapse; BORDER-BOTTOM: 1px solid; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(32,33,34); FONT-STYLE: normal; BORDER-LEFT: 1px solid; ORPHANS: 2; WIDOWS: 2; MARGIN: -0.5em 0px 1em; LETTER-SPACING: normal; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial">
<TBODY>
<TR>
<TH style="BORDER-TOP: 1px solid; BORDER-RIGHT: 1px solid; BORDER-BOTTOM: 1px solid; COLOR: ; PADDING-BOTTOM: 0.2em; TEXT-ALIGN: center; PADDING-TOP: 0.2em; PADDING-LEFT: 0.4em; BORDER-LEFT: 1px solid; PADDING-RIGHT: 0.4em"><ABBR title=Processor style="CURSOR: help; TEXT-DECORATION: underline; BORDER-BOTTOM: 0px">P</ABBR>1</TH>
<TH style="BORDER-TOP: 1px solid; BORDER-RIGHT: 1px solid; BORDER-BOTTOM: 1px solid; COLOR: ; PADDING-BOTTOM: 0.2em; TEXT-ALIGN: center; PADDING-TOP: 0.2em; PADDING-LEFT: 0.4em; BORDER-LEFT: 1px solid; PADDING-RIGHT: 0.4em"><ABBR title=Processor style="CURSOR: help; TEXT-DECORATION: underline; BORDER-BOTTOM: 0px">P</ABBR>2</TH></TR>
<TR style="VERTICAL-ALIGN: top">
<TD style="BORDER-TOP: 1px solid; BORDER-RIGHT: 1px solid; BORDER-BOTTOM: 1px solid; PADDING-BOTTOM: 0.2em; PADDING-TOP: 0.2em; PADDING-LEFT: 0.4em; BORDER-LEFT: 1px solid; PADDING-RIGHT: 0.4em"><PRE class=pre style="BORDER-TOP: 1px solid; FONT-FAMILY: monospace, monospace; BORDER-RIGHT: 1px solid; WHITE-SPACE: pre-wrap; OVERFLOW-X: hidden; BORDER-BOTTOM: 1px solid; COLOR: ; PADDING-BOTTOM: 1em; PADDING-TOP: 1em; PADDING-LEFT: 1em; BORDER-LEFT: 1px solid; LINE-HEIGHT: 1.3; PADDING-RIGHT: 1em; overflow-wrap: break-word">X = 1;
<I>fence</I>
 
xready = 1;</PRE></TD>
<TD style="BORDER-TOP: 1px solid; BORDER-RIGHT: 1px solid; BORDER-BOTTOM: 1px solid; PADDING-BOTTOM: 0.2em; PADDING-TOP: 0.2em; PADDING-LEFT: 0.4em; BORDER-LEFT: 1px solid; PADDING-RIGHT: 0.4em"><PRE class=pre style="BORDER-TOP: 1px solid; FONT-FAMILY: monospace, monospace; BORDER-RIGHT: 1px solid; WHITE-SPACE: pre-wrap; OVERFLOW-X: hidden; BORDER-BOTTOM: 1px solid; COLOR: ; PADDING-BOTTOM: 1em; PADDING-TOP: 1em; PADDING-LEFT: 1em; BORDER-LEFT: 1px solid; LINE-HEIGHT: 1.3; PADDING-RIGHT: 1em; overflow-wrap: break-word"><I>fence</I>
while (!xready) {}; 
 
<I>fence</I>
 
y = 2;</PRE></TD></TR></TBODY></TABLE>
<P style="FONT-SIZE: 16px; FONT-FAMILY: sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(32,33,34); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; MARGIN: 0.5em 0px 1em; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial">Coherence is not relaxed in this model. Once these requirements are met, all other "data" operations can be reordered. The way this works is that a counter tracks the number of data operations and until this counter becomes zero, the synchronisation operation isn't issued. Furthermore, no more data operations are issued unless all the previous synchronisations are completed. Memory operations in between two synchronisation variables can be overlapped and reordered without affecting the correctness of the program. This model ensures that write atomicity is always maintained, therefore no additional safety net is required for weak ordering.</P>
<P style="FONT-SIZE: 16px; FONT-FAMILY: sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(32,33,34); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; MARGIN: 0.5em 0px 1em; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial">In order to maintain weak ordering, write operations prior to a synchronization operation must be globally performed before the synchronization operation. Operations present after a synchronization operation should also be performed only after the synchronization operation completes. Therefore, accesses to synchronization variables is sequentially consistent and any read or write should be performed only after previous synchronization operations have completed.</P>
<P style="FONT-SIZE: 16px; FONT-FAMILY: sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(32,33,34); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; MARGIN: 0.5em 0px 1em; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial">There is high reliance on explicit synchronization in the program. For weak ordering models, the programmer must use atomic locking instructions such as test-and-set, fetch-and-op, store conditional, load linked or must label synchronization variables or use fences.</P>
<DIV class="mw-heading mw-heading3" style="FONT-SIZE: 1.2em; OVERFLOW: hidden; FONT-FAMILY: sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: bold; COLOR: ; PADDING-BOTTOM: 0px; FONT-STYLE: normal; PADDING-TOP: 0.5em; ORPHANS: 2; WIDOWS: 2; MARGIN: 0.25em 0px; LETTER-SPACING: normal; LINE-HEIGHT: 1.6; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial">