<b> : </b>compat_ptr()<A title="Permalink to this heading" class=headerlink style="TEXT-DECORATION: none; COLOR: rgb(221,221,221); PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 4px; PADDING-RIGHT: 4px; VISIBILITY: hidden" href="https://docs.kernel.org/driver-api/ioctl.html#compat-ptr"></A></H3>
<P style="LINE-HEIGHT: 1.4em; hyphens: auto">On the s390 architecture, 31-bit user space has ambiguous representations for data pointers, with the upper bit being ignored. When running such a process in compat mode, the compat_ptr() helper must be used to clear the upper bit of a compat_uptr_t and turn it into a valid 64-bit pointer. On other architectures, this macro only performs a cast to a<SPAN>&nbsp;</SPAN><CODE class="docutils literal notranslate" style='FONT-SIZE: 0.9em; FONT-FAMILY: Consolas, Menlo, "DejaVu Sans Mono", "Bitstream Vera Sans Mono", monospace; COLOR: rgb(34,34,34); BACKGROUND-COLOR: rgb(236,240,243)'><SPAN class=pre style="WHITE-SPACE: nowrap; hyphens: none">void</SPAN><SPAN>&nbsp;</SPAN><SPAN class=pre style="WHITE-SPACE: nowrap; hyphens: none">__user</SPAN><SPAN>&nbsp;</SPAN><SPAN class=pre style="WHITE-SPACE: nowrap; hyphens: none">*</SPAN></CODE><SPAN>&nbsp;</SPAN>pointer.</P>
<P style="LINE-HEIGHT: 1.4em; hyphens: auto">In an compat_ioctl() callback, the last argument is an unsigned long, which can be interpreted as either a pointer or a scalar depending on the command. If it is a scalar, then compat_ptr() must not be used, to ensure that the 64-bit kernel behaves the same way as a 32-bit kernel for arguments with the upper bit set.</P>
<P style="LINE-HEIGHT: 1.4em; hyphens: auto">The compat_ptr_ioctl() helper can be used in place of a custom compat_ioctl file operation for drivers that only take arguments that are pointers to compatible data structures.</P></SECTION><SECTION id=structure-layout>