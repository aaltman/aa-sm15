<H1 lang=en id=firstHeading class=firstHeading style="FONT-SIZE: 23px; OVERFLOW: visible; FONT-FAMILY: sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; BORDER-BOTTOM: rgb(162,169,177) 1px solid; TEXT-TRANSFORM: none; FONT-WEIGHT: normal; COLOR: rgb(0,0,0); PADDING-BOTTOM: 0.17em; FONT-STYLE: normal; PADDING-TOP: 0px; ORPHANS: 2; WIDOWS: 2; MARGIN: 0.4em 0px 0.1em; LETTER-SPACING: normal; TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial"><FONT class=extract>Built-in Sharding</FONT></H1>
<DIV id=bodyContent class=mw-body-content style="FONT-SIZE: 12px; FONT-FAMILY: sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(0,0,0); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial">
<DIV lang=en id=contentSub style="FONT-SIZE: 10px; WIDTH: auto; COLOR: rgb(84,89,93); MARGIN: 0px 0px 1.4em 1em; LINE-HEIGHT: 1.2em" dir=ltr><FONT class=extract></FONT></DIV>
<DIV id=jump-to-nav><FONT class=extract></FONT></DIV><A class=mw-jump-link style="OVERFLOW: hidden; TEXT-DECORATION: none; BORDER-TOP: 0px; CLIP: rect(1px 1px 1px 1px); HEIGHT: 1px; BORDER-RIGHT: 0px; WIDTH: 1px; BACKGROUND: none transparent scroll repeat 0% 0%; BORDER-BOTTOM: 0px; POSITION: absolute !important; COLOR: rgb(6,69,173); PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; BORDER-LEFT: 0px; MARGIN: -1px; DISPLAY: block; PADDING-RIGHT: 0px" href="https://wiki.postgresql.org/wiki/Built-in_Sharding#column-one"><FONT class=extract>Jump to navigation</FONT></A><A class=mw-jump-link style="OVERFLOW: hidden; TEXT-DECORATION: none; BORDER-TOP: 0px; CLIP: rect(1px 1px 1px 1px); HEIGHT: 1px; BORDER-RIGHT: 0px; WIDTH: 1px; BACKGROUND: none transparent scroll repeat 0% 0%; BORDER-BOTTOM: 0px; POSITION: absolute !important; COLOR: rgb(6,69,173); PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; BORDER-LEFT: 0px; MARGIN: -1px; DISPLAY: block; PADDING-RIGHT: 0px" href="https://wiki.postgresql.org/wiki/Built-in_Sharding#searchInput"><FONT class=extract>Jump to search</FONT></A><FONT class=extract> </FONT>
<DIV lang=en id=mw-content-text class=mw-content-ltr style="DIRECTION: ltr" dir=ltr>
<DIV class=mw-parser-output>
<DIV role=navigation id=toc class=toc style="FONT-SIZE: 12px; BORDER-TOP: rgb(162,169,177) 1px solid; BORDER-RIGHT: rgb(162,169,177) 1px solid; BORDER-BOTTOM: rgb(162,169,177) 1px solid; PADDING-BOTTOM: 7px; PADDING-TOP: 7px; PADDING-LEFT: 7px; BORDER-LEFT: rgb(162,169,177) 1px solid; DISPLAY: table; PADDING-RIGHT: 7px; BACKGROUND-COLOR: rgb(248,249,250)" aria-labelledby=mw-toc-heading>
<DIV lang=en class=toctitle style="DIRECTION: ltr; TEXT-ALIGN: center" dir=ltr><FONT class=extract>
<H2 id=mw-toc-heading style="FONT-SIZE: 12px; OVERFLOW: hidden; BORDER-TOP: 0px; BORDER-RIGHT: 0px; BORDER-BOTTOM: 0px; FONT-WEIGHT: bold; COLOR: rgb(0,0,0); PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; BORDER-LEFT: 0px; MARGIN: 0px 0px 0.6em; DISPLAY: inline; PADDING-RIGHT: 0px">Contents</H2><SPAN class=toctogglespan style="FONT-SIZE: 11px"><LABEL class=toctogglelabel style="CURSOR: pointer; COLOR: rgb(6,69,173)" for=toctogglecheckbox></LABEL></SPAN></FONT></DIV>
<UL style="LIST-STYLE-TYPE: none; PADDING-BOTTOM: 0px; TEXT-ALIGN: left; PADDING-TOP: 0px; PADDING-LEFT: 0px; LIST-STYLE-IMAGE: none; MARGIN: 0.3em 0px; PADDING-RIGHT: 0px">
<LI class="toclevel-1 tocsection-1" style="MARGIN-BOTTOM: 0.1em"><A style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(6,69,173)" href="https://wiki.postgresql.org/wiki/Built-in_Sharding#Introduction"><FONT class=extract><SPAN class=tocnumber style="TEXT-DECORATION: ; COLOR: rgb(32,33,34); PADDING-LEFT: 0px; DISPLAY: table-cell; PADDING-RIGHT: 0.5em">1</SPAN><SPAN class=toctext style="TEXT-DECORATION: ; DISPLAY: table-cell">Introduction</SPAN></FONT></A><FONT class=extract> </FONT>
<LI class="toclevel-1 tocsection-2" style="MARGIN-BOTTOM: 0.1em"><A style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(6,69,173)" href="https://wiki.postgresql.org/wiki/Built-in_Sharding#Enhance_Existing_Features"><FONT class=extract><SPAN class=tocnumber style="TEXT-DECORATION: ; COLOR: rgb(32,33,34); PADDING-LEFT: 0px; DISPLAY: table-cell; PADDING-RIGHT: 0.5em">2</SPAN><SPAN class=toctext style="TEXT-DECORATION: ; DISPLAY: table-cell">Enhance Existing Features</SPAN></FONT></A><FONT class=extract> </FONT>
<LI class="toclevel-1 tocsection-3" style="MARGIN-BOTTOM: 0.1em"><A style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(6,69,173)" href="https://wiki.postgresql.org/wiki/Built-in_Sharding#New_Subsystems"><FONT class=extract><SPAN class=tocnumber style="TEXT-DECORATION: ; COLOR: rgb(32,33,34); PADDING-LEFT: 0px; DISPLAY: table-cell; PADDING-RIGHT: 0.5em">3</SPAN><SPAN class=toctext style="TEXT-DECORATION: ; DISPLAY: table-cell">New Subsystems</SPAN></FONT></A><FONT class=extract> </FONT>
<LI class="toclevel-1 tocsection-4" style="MARGIN-BOTTOM: 0.1em"><A style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(6,69,173)" href="https://wiki.postgresql.org/wiki/Built-in_Sharding#Use_Cases"><FONT class=extract><SPAN class=tocnumber style="TEXT-DECORATION: ; COLOR: rgb(32,33,34); PADDING-LEFT: 0px; DISPLAY: table-cell; PADDING-RIGHT: 0.5em">4</SPAN><SPAN class=toctext style="TEXT-DECORATION: ; DISPLAY: table-cell">Use Cases</SPAN></FONT></A><FONT class=extract> </FONT>
<LI class="toclevel-1 tocsection-5" style="MARGIN-BOTTOM: 0.1em"><A style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(6,69,173)" href="https://wiki.postgresql.org/wiki/Built-in_Sharding#Previous_Documentation"><FONT class=extract><SPAN class=tocnumber style="TEXT-DECORATION: ; COLOR: rgb(32,33,34); PADDING-LEFT: 0px; DISPLAY: table-cell; PADDING-RIGHT: 0.5em">5</SPAN><SPAN class=toctext style="TEXT-DECORATION: ; DISPLAY: table-cell">Previous Documentation</SPAN></FONT></A></LI></UL></DIV>
<H2 style="FONT-SIZE: 19px; OVERFLOW: hidden; BORDER-BOTTOM: rgb(162,169,177) 1px solid; FONT-WEIGHT: normal; COLOR: rgb(0,0,0); PADDING-BOTTOM: 0.17em; PADDING-TOP: 0.5em; MARGIN: 0px 0px 0.6em"><SPAN id=Introduction class=mw-headline><FONT class=extract>Introduction</FONT></SPAN></H2>
<P style="MARGIN: 0.4em 0px 0.5em"><FONT class=extract>There are over a dozen forks of Postgres which implement sharding. While many of these forks have been successful, they often lag behind the community release of Postgres. By implementing sharding in community Postgres, this feature will be available to all users in current releases of Postgres. This should greatly increase the adoption of community Postgres in environments that need high write scaling or have very large databases.</FONT></P>
<P style="MARGIN: 0.4em 0px 0.5em"><FONT class=extract>One great challenge to implementing sharding in Postgres is achieving this goal with minimal code changes. Most of the sharding forks of Postgres require a volume of changes to the community code that would be unacceptable to the general Postgres community, many of whom don't need sharding. With the advent of Foreign Data Wrappers (FDW), it is now possible to consider a built-in sharding implementation which could be accomplished with an acceptable level of code changes.</FONT></P>
<P style="MARGIN: 0.4em 0px 0.5em"><FONT class=extract>The basic design of this possible FDW-based sharding solution is based on the work done by<SPAN>&nbsp;</SPAN></FONT><A class="external text" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(51,102,187); PADDING-RIGHT: 13px" href="http://postgresxc.wikia.com/wiki/Postgres-XC_Wiki" rel=nofollow><FONT class=extract>Postgres-XC,</FONT></A><FONT class=extract><SPAN>&nbsp;</SPAN>which was<SPAN>&nbsp;</SPAN></FONT><A class="external text" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(51,102,187); PADDING-RIGHT: 13px" href="http://alexalexander.blogspot.jp/2013/01/postgres-xc-explained.html" rel=nofollow><FONT class=extract>developed</FONT></A><FONT class=extract><SPAN>&nbsp;</SPAN>by<SPAN>&nbsp;</SPAN></FONT><A class="external text" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(51,102,187); PADDING-RIGHT: 13px" href="http://www.nttdata.com/global/en/" rel=nofollow><FONT class=extract>NTT</FONT></A><FONT class=extract><SPAN>&nbsp;</SPAN>for almost ten years.<SPAN>&nbsp;</SPAN></FONT><A class="external text" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(51,102,187); PADDING-RIGHT: 13px" href="http://www.postgres-xl.org/" rel=nofollow><FONT class=extract>Postgres-XL</FONT></A><FONT class=extract><SPAN>&nbsp;</SPAN>is a more flexible implementation of this design.<SPAN>&nbsp;</SPAN></FONT><A class="external text" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(51,102,187); PADDING-RIGHT: 13px" href="https://github.com/citusdata/citus" rel=nofollow><FONT class=extract>Citus</FONT></A><FONT class=extract><SPAN>&nbsp;</SPAN>incorporates ideas from both projects and provides sharding without forking from Postgres.</FONT></P>
<H2 style="FONT-SIZE: 19px; OVERFLOW: hidden; BORDER-BOTTOM: rgb(162,169,177) 1px solid; FONT-WEIGHT: normal; COLOR: rgb(0,0,0); PADDING-BOTTOM: 0.17em; PADDING-TOP: 0.5em; MARGIN: 0px 0px 0.6em"><SPAN id=Enhance_Existing_Features class=mw-headline><FONT class=extract>Enhance Existing Features</FONT></SPAN></H2>
<P style="MARGIN: 0.4em 0px 0.5em"><FONT class=extract>Implementing built-in sharing with minimal code changes requires improving several existing Postgres features:</FONT></P>
<UL style="LIST-STYLE-TYPE: square; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; LIST-STYLE-IMAGE: url(/skins/PostgreSQL/resources/images/bullet.svg?36e03); MARGIN: 0.3em 0px 0px 1.6em; PADDING-RIGHT: 0px">
<LI style="MARGIN-BOTTOM: 0.1em"><FONT class=extract><B>Done?</B><SPAN>&nbsp;</SPAN>Improve the<SPAN>&nbsp;</SPAN></FONT><A class="external text" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(51,102,187); PADDING-RIGHT: 13px" href="https://www.postgresql.org/docs/current/static/ddl-foreign-data.html" rel=nofollow><FONT class=extract>FDW</FONT></A><FONT class=extract><SPAN>&nbsp;</SPAN>infrastructure and<SPAN>&nbsp;</SPAN></FONT><A class="external text" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(51,102,187); PADDING-RIGHT: 13px" href="https://www.postgresql.org/docs/current/static/postgres-fdw.html" rel=nofollow><FONT class=extract>postgres_fdw.</FONT></A><FONT class=extract><SPAN>&nbsp;</SPAN>Specifically, good performance requires that all reasonable operations be pushed to the foreign shards. In Postgres 9.6, joins, sorts, updates, and deletes are pushed to foreign servers. Aggregate pushdown will be supported in Postgres 10. Foreign tables can already participate in inheritance.</FONT></LI></UL>
<UL style="LIST-STYLE-TYPE: square; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; LIST-STYLE-IMAGE: url(/skins/PostgreSQL/resources/images/bullet.svg?36e03); MARGIN: 0.3em 0px 0px 1.6em; PADDING-RIGHT: 0px">
<LI style="MARGIN-BOTTOM: 0.1em"><FONT class=extract><B>Done?</B><SPAN>&nbsp;</SPAN>Postgres 10 will include an overhaul of partitioning for single-node use to improve performance and enable more optimizations, e.g. executor-based partition pruning. This will be used for sharding too.</FONT></LI></UL>
<UL style="LIST-STYLE-TYPE: square; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; LIST-STYLE-IMAGE: url(/skins/PostgreSQL/resources/images/bullet.svg?36e03); MARGIN: 0.3em 0px 0px 1.6em; PADDING-RIGHT: 0px">
<LI style="MARGIN-BOTTOM: 0.1em"><FONT class=extract>Add parallelism so FDW requests can be issued in parallel. This would allow parallel shard execution. This perhaps could be done by making multiple asynchronous libpq connections.</FONT></LI></UL>
<P style="MARGIN: 0.4em 0px 0.5em"><FONT class=extract>Improving these features has value independent of sharding.</FONT></P>
<H2 style="FONT-SIZE: 19px; OVERFLOW: hidden; BORDER-BOTTOM: rgb(162,169,177) 1px solid; FONT-WEIGHT: normal; COLOR: rgb(0,0,0); PADDING-BOTTOM: 0.17em; PADDING-TOP: 0.5em; MARGIN: 0px 0px 0.6em"><SPAN id=New_Subsystems class=mw-headline><FONT class=extract>New Subsystems</FONT></SPAN></H2>
<P style="MARGIN: 0.4em 0px 0.5em"><FONT class=extract>Additional subsystems will need to be developed:</FONT></P>
<UL style="LIST-STYLE-TYPE: square; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; LIST-STYLE-IMAGE: url(/skins/PostgreSQL/resources/images/bullet.svg?36e03); MARGIN: 0.3em 0px 0px 1.6em; PADDING-RIGHT: 0px">
<LI style="MARGIN-BOTTOM: 0.1em"><FONT class=extract>Allow lookup tables to be replicated to all shards to allow more join pushdown. This can be accomplished with logical replication (<B>done</B>), but the optimizer must know the tables have been replicated to implement pushdown.</FONT></LI></UL>
<UL style="LIST-STYLE-TYPE: square; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; LIST-STYLE-IMAGE: url(/skins/PostgreSQL/resources/images/bullet.svg?36e03); MARGIN: 0.3em 0px 0px 1.6em; PADDING-RIGHT: 0px">
<LI style="MARGIN-BOTTOM: 0.1em"><FONT class=extract>Write submodule to use the new partitioning system tables to create and issue FDW queries which match submitted queries.</FONT></LI></UL>
<UL style="LIST-STYLE-TYPE: square; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; LIST-STYLE-IMAGE: url(/skins/PostgreSQL/resources/images/bullet.svg?36e03); MARGIN: 0.3em 0px 0px 1.6em; PADDING-RIGHT: 0px">
<LI style="MARGIN-BOTTOM: 0.1em"><FONT class=extract>Write submodule to collect the results of FDW queries and return them to the user.</FONT></LI></UL>
<UL style="LIST-STYLE-TYPE: square; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; LIST-STYLE-IMAGE: url(/skins/PostgreSQL/resources/images/bullet.svg?36e03); MARGIN: 0.3em 0px 0px 1.6em; PADDING-RIGHT: 0px">
<LI style="MARGIN-BOTTOM: 0.1em"><FONT class=extract>Write a<SPAN>&nbsp;</SPAN></FONT><A class="external text" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(51,102,187); PADDING-RIGHT: 13px" href="https://wiki.postgresql.org/wiki/2PC_on_FDW" rel=nofollow><FONT class=extract>global transaction manager</FONT></A><FONT class=extract><SPAN>&nbsp;</SPAN>to efficiently allow shards to atomically commit transactions. This could perhaps be built upon prepared transactions, with some type of transaction manager to clean up open prepared transactions after a crash, e.g. XA.</FONT></LI></UL>
<UL style="LIST-STYLE-TYPE: square; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; LIST-STYLE-IMAGE: url(/skins/PostgreSQL/resources/images/bullet.svg?36e03); MARGIN: 0.3em 0px 0px 1.6em; PADDING-RIGHT: 0px">
<LI style="MARGIN-BOTTOM: 0.1em"><FONT class=extract>Write a<SPAN>&nbsp;</SPAN></FONT><A class="external text" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(51,102,187); PADDING-RIGHT: 13px" href="https://www.postgresql.org/message-id/CAFjFpRfQaCTt1vD9E35J%2BXxfCnZC5HONqgJgGpUjfktJdoYZVw%40mail.gmail.com" rel=nofollow><FONT class=extract>global snapshot manager</FONT></A><FONT class=extract><SPAN>&nbsp;</SPAN>which allows shards to see a consistent snapshot. (Will SERIALIZABLE transaction mode avoid cross-node snapshot conflicts? Does pg_export_snapshot() or hot_standby_feedback help?) This is also needed for consistent multi-shard backups.</FONT></LI></UL>
<UL style="LIST-STYLE-TYPE: square; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; LIST-STYLE-IMAGE: url(/skins/PostgreSQL/resources/images/bullet.svg?36e03); MARGIN: 0.3em 0px 0px 1.6em; PADDING-RIGHT: 0px">
<LI style="MARGIN-BOTTOM: 0.1em"><FONT class=extract>Write user API to create, manage, and report on shards.</FONT></LI></UL>
<H2 style="FONT-SIZE: 19px; OVERFLOW: hidden; BORDER-BOTTOM: rgb(162,169,177) 1px solid; FONT-WEIGHT: normal; COLOR: rgb(0,0,0); PADDING-BOTTOM: 0.17em; PADDING-TOP: 0.5em; MARGIN: 0px 0px 0.6em"><SPAN id=Use_Cases class=mw-headline><FONT class=extract>Use Cases</FONT></SPAN></H2>
<P style="MARGIN: 0.4em 0px 0.5em"><FONT class=extract>There are four possible use cases with increasing requirements:</FONT></P>
<OL style="PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; LIST-STYLE-IMAGE: none; MARGIN: 0.3em 0px 0px 3.2em; PADDING-RIGHT: 0px">
<LI style="MARGIN-BOTTOM: 0.1em"><FONT class=extract>Cross-node read-only queries on read-only shards using aggregate queries, e.g. data warehouse: </FONT>
<P style="MARGIN: 0.4em 0px 0.5em"><FONT class=extract>This is the simplest to implement as it doesn't require a global transaction manager, global snapshot manager, and the number of rows returned from the shards is minimal because of the aggregates.</FONT></P>
<LI style="MARGIN-BOTTOM: 0.1em"><FONT class=extract>Cross-node read-only queries on read-only shards using non-aggregate queries: </FONT>
<P style="MARGIN: 0.4em 0px 0.5em"><FONT class=extract>This will stress the coordinator to collect and process many returned rows, and will show how well the FDW transfer mechanism scales.</FONT></P>
<LI style="MARGIN-BOTTOM: 0.1em"><FONT class=extract>Cross-node read-only queries on read/write shards: </FONT>
<P style="MARGIN: 0.4em 0px 0.5em"><FONT class=extract>This will require a global snapshot manager to make sure the shards return consistent data.</FONT></P>
<LI style="MARGIN-BOTTOM: 0.1em"><FONT class=extract>Cross-node read-write queries: </FONT>
<P style="MARGIN: 0.4em 0px 0.5em"><FONT class=extract>This will require a global snapshot manager and global transaction manager.</FONT></P></LI></OL></DIV></DIV></DIV>