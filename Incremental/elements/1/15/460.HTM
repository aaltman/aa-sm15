<b> : </b>Variants</H3><SPAN class=mw-editsection style="FONT-SIZE: small; FONT-FAMILY: sans-serif; VERTICAL-ALIGN: baseline; FONT-WEIGHT: normal; MARGIN-LEFT: 1em; LINE-HEIGHT: 0; MARGIN-RIGHT: 0px; user-select: none"><SPAN class=mw-editsection-bracket style="COLOR: ; MARGIN-RIGHT: 0.25em">[</SPAN><A title="Edit section: Variants" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; WHITE-SPACE: nowrap; COLOR: ; border-radius: 2px; overflow-wrap: break-word" href="https://en.wikipedia.org/w/index.php?title=B-tree&amp;action=edit&amp;section=8"><SPAN>edit</SPAN></A><SPAN class=mw-editsection-bracket style="COLOR: ; MARGIN-LEFT: 0.25em">]</SPAN></SPAN></DIV>
<P style="FONT-SIZE: 16px; FONT-FAMILY: sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(32,33,34); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; MARGIN: 0.5em 0px 1em; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial">The term<SPAN>&nbsp;</SPAN><B>B-tree</B><SPAN>&nbsp;</SPAN>may refer to a specific design or it may refer to a general class of designs. In the narrow sense, a B-tree stores keys in its internal nodes but need not store those keys in the records at the leaves. The general class includes variations such as the<SPAN>&nbsp;</SPAN><A title="B+ tree" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: ; border-radius: 2px; overflow-wrap: break-word" href="https://en.wikipedia.org/wiki/B%2B_tree">B+ tree</A>, the B<SUP style="FONT-SIZE: 12px; LINE-HEIGHT: 1">*</SUP><SPAN>&nbsp;</SPAN>tree and the B<SUP style="FONT-SIZE: 12px; LINE-HEIGHT: 1">*+</SUP><SPAN>&nbsp;</SPAN>tree.</P>
<UL style="LIST-STYLE-TYPE: disc; FONT-SIZE: 16px; FONT-FAMILY: sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(32,33,34); PADDING-BOTTOM: 0px; FONT-STYLE: normal; PADDING-TOP: 0px; PADDING-LEFT: 0px; ORPHANS: 2; WIDOWS: 2; MARGIN: -0.5em 0px 0px 1.6em; LETTER-SPACING: normal; PADDING-RIGHT: 0px; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial; margin-inline: 1.6em 0px">
<LI style="MARGIN-BOTTOM: 0.1em">In the<SPAN>&nbsp;</SPAN><A title="B+ tree" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: ; border-radius: 2px; overflow-wrap: break-word" href="https://en.wikipedia.org/wiki/B%2B_tree">B+ tree</A>, the internal nodes do not store any pointers to records, thus all pointers to records are stored in the leaf nodes. In addition, a leaf node may include a pointer to the next leaf node to speed sequential access.<SUP id=cite_ref-FOOTNOTEComer1979_2-2 class=reference style="FONT-SIZE: 12px; WHITE-SPACE: nowrap; FONT-WEIGHT: normal; FONT-STYLE: normal; LINE-HEIGHT: 1"><A style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: ; border-radius: 2px; overflow-wrap: break-word" href="https://en.wikipedia.org/wiki/B-tree#cite_note-FOOTNOTEComer1979-2"><FONT style="BACKGROUND-COLOR: #ffffff" face=Arial>[2]</FONT></A></SUP><SPAN>&nbsp;</SPAN>Because B+ tree internal nodes have fewer pointers, each node can hold more keys, causing the tree to be shallower, and thus, faster to search. 
<LI style="MARGIN-BOTTOM: 0.1em">The B<SUP style="FONT-SIZE: 12px; LINE-HEIGHT: 1">*</SUP><SPAN>&nbsp;</SPAN>tree balances more neighboring internal nodes to keep the internal nodes more densely packed.<SUP id=cite_ref-FOOTNOTEComer1979_2-3 class=reference style="FONT-SIZE: 12px; WHITE-SPACE: nowrap; FONT-WEIGHT: normal; FONT-STYLE: normal; LINE-HEIGHT: 1"><A style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: ; border-radius: 2px; overflow-wrap: break-word" href="https://en.wikipedia.org/wiki/B-tree#cite_note-FOOTNOTEComer1979-2"><FONT style="BACKGROUND-COLOR: #ffffff" face=Arial>[2]</FONT></A></SUP><SPAN>&nbsp;</SPAN>This variant ensures non-root nodes are at least 2/3 full instead of 1/2.<SUP id=cite_ref-FOOTNOTEKnuth1998488_13-0 class=reference style="FONT-SIZE: 12px; WHITE-SPACE: nowrap; FONT-WEIGHT: normal; FONT-STYLE: normal; LINE-HEIGHT: 1"><A style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: ; border-radius: 2px; overflow-wrap: break-word" href="https://en.wikipedia.org/wiki/B-tree#cite_note-FOOTNOTEKnuth1998488-13"><FONT style="BACKGROUND-COLOR: #ffffff" face=Arial>[13]</FONT></A></SUP><SPAN>&nbsp;</SPAN>As the most costly part of operation of inserting the node in B-tree is splitting the node, B<SUP style="FONT-SIZE: 12px; LINE-HEIGHT: 1">*</SUP>-trees are created to postpone splitting operation as long as they can.<SUP id=cite_ref-Milo_14-0 class=reference style="FONT-SIZE: 12px; WHITE-SPACE: nowrap; FONT-WEIGHT: normal; FONT-STYLE: normal; LINE-HEIGHT: 1"><A style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: ; border-radius: 2px; overflow-wrap: break-word" href="https://en.wikipedia.org/wiki/B-tree#cite_note-Milo-14"><FONT style="BACKGROUND-COLOR: #ffffff" face=Arial>[14]</FONT></A></SUP><SPAN>&nbsp;</SPAN>To maintain this, instead of immediately splitting up a node when it gets full, its keys are shared with a node next to it. This spill operation is less costly to do than split, because it requires only shifting the keys between existing nodes, not allocating memory for a new one.<SUP id=cite_ref-Milo_14-1 class=reference style="FONT-SIZE: 12px; WHITE-SPACE: nowrap; FONT-WEIGHT: normal; FONT-STYLE: normal; LINE-HEIGHT: 1"><A style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: ; border-radius: 2px; overflow-wrap: break-word" href="https://en.wikipedia.org/wiki/B-tree#cite_note-Milo-14"><FONT style="BACKGROUND-COLOR: #ffffff" face=Arial>[14]</FONT></A></SUP><SPAN>&nbsp;</SPAN>For inserting, first it is checked whether the node has some free space in it, and if so, the new key is just inserted in the node. However, if the node is full (it has<SPAN>&nbsp;</SPAN><SPAN class=texhtml style='FONT-SIZE: 18px; FONT-FAMILY: "Nimbus Roman No9 L", "Times New Roman", Times, serif; WHITE-SPACE: nowrap; LINE-HEIGHT: 1; font-kerning: none; font-variant-numeric: lining-nums tabular-nums'><I>m</I><SPAN>&nbsp;</SPAN>&#8722; 1</SPAN><SPAN>&nbsp;</SPAN>keys, where<SPAN>&nbsp;</SPAN><SPAN class="texhtml mvar" style='FONT-SIZE: 18px; FONT-FAMILY: "Nimbus Roman No9 L", "Times New Roman", Times, serif; WHITE-SPACE: nowrap; FONT-STYLE: italic; LINE-HEIGHT: 1; font-kerning: none; font-variant-numeric: lining-nums tabular-nums'>m</SPAN><SPAN>&nbsp;</SPAN>is the order of the tree as maximum number of pointers to subtrees from one node), it needs to be checked whether the right sibling exists and has some free space. If the right sibling has<SPAN>&nbsp;</SPAN><SPAN class=texhtml style='FONT-SIZE: 18px; FONT-FAMILY: "Nimbus Roman No9 L", "Times New Roman", Times, serif; WHITE-SPACE: nowrap; LINE-HEIGHT: 1; font-kerning: none; font-variant-numeric: lining-nums tabular-nums'><I>j</I><SPAN>&nbsp;</SPAN>&lt;<SPAN>&nbsp;</SPAN><I>m</I><SPAN>&nbsp;</SPAN>&#8722; 1</SPAN><SPAN>&nbsp;</SPAN>keys, then keys are redistributed between the two sibling nodes as evenly as possible. For this purpose,<SPAN>&nbsp;</SPAN><SPAN class="texhtml mvar" style='FONT-SIZE: 18px; FONT-FAMILY: "Nimbus Roman No9 L", "Times New Roman", Times, serif; WHITE-SPACE: nowrap; FONT-STYLE: italic; LINE-HEIGHT: 1; font-kerning: none; font-variant-numeric: lining-nums tabular-nums'><I>m</I><SPAN>&nbsp;</SPAN>- 1</SPAN><SPAN>&nbsp;</SPAN>keys from the current node, the new key inserted, one key from the parent node and<SPAN>&nbsp;</SPAN><SPAN class="texhtml mvar" style='FONT-SIZE: 18px; FONT-FAMILY: "Nimbus Roman No9 L", "Times New Roman", Times, serif; WHITE-SPACE: nowrap; FONT-STYLE: italic; LINE-HEIGHT: 1; font-kerning: none; font-variant-numeric: lining-nums tabular-nums'>j</SPAN><SPAN>&nbsp;</SPAN>keys from the sibling node are seen as an ordered array of<SPAN>&nbsp;</SPAN><SPAN class=texhtml style='FONT-SIZE: 18px; FONT-FAMILY: "Nimbus Roman No9 L", "Times New Roman", Times, serif; WHITE-SPACE: nowrap; LINE-HEIGHT: 1; font-kerning: none; font-variant-numeric: lining-nums tabular-nums'><I>m</I><SPAN>&nbsp;</SPAN>+<SPAN>&nbsp;</SPAN><I>j</I><SPAN>&nbsp;</SPAN>+ 1</SPAN><SPAN>&nbsp;</SPAN>keys. The array becomes split by half, so that<SPAN>&nbsp;</SPAN><SPAN class=texhtml style='FONT-SIZE: 18px; FONT-FAMILY: "Nimbus Roman No9 L", "Times New Roman", Times, serif; WHITE-SPACE: nowrap; LINE-HEIGHT: 1; font-kerning: none; font-variant-numeric: lining-nums tabular-nums'><SPAN style="FONT-SIZE: 1em">&#8970;</SPAN>(<I>m</I><SPAN>&nbsp;</SPAN>+<SPAN>&nbsp;</SPAN><I>j</I><SPAN>&nbsp;</SPAN>+ 1)/2<SPAN style="FONT-SIZE: 1em">&#8971;</SPAN></SPAN><SPAN>&nbsp;</SPAN>lowest keys stay in the current node, the next (middle) key is inserted in the parent and the rest go to the right sibling.<SUP id=cite_ref-Milo_14-2 class=reference style="FONT-SIZE: 12px; WHITE-SPACE: nowrap; FONT-WEIGHT: normal; FONT-STYLE: normal; LINE-HEIGHT: 1"><A style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: ; border-radius: 2px; overflow-wrap: break-word" href="https://en.wikipedia.org/wiki/B-tree#cite_note-Milo-14"><FONT style="BACKGROUND-COLOR: #ffffff" face=Arial>[14]</FONT></A></SUP><SPAN>&nbsp;</SPAN>(The newly inserted key might end up in any of the three places.) The situation when right sibling is full, and left isn't is analogous.<SUP id=cite_ref-Milo_14-3 class=reference style="FONT-SIZE: 12px; WHITE-SPACE: nowrap; FONT-WEIGHT: normal; FONT-STYLE: normal; LINE-HEIGHT: 1"><A style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: ; border-radius: 2px; overflow-wrap: break-word" href="https://en.wikipedia.org/wiki/B-tree#cite_note-Milo-14"><FONT style="BACKGROUND-COLOR: #ffffff" face=Arial>[14]</FONT></A></SUP><SPAN>&nbsp;</SPAN>When both the sibling nodes are full, then the two nodes (current node and a sibling) are split into three and one more key is shifted up the tree, to the parent node.<SUP id=cite_ref-Milo_14-4 class=reference style="FONT-SIZE: 12px; WHITE-SPACE: nowrap; FONT-WEIGHT: normal; FONT-STYLE: normal; LINE-HEIGHT: 1"><A style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: ; border-radius: 2px; overflow-wrap: break-word" href="https://en.wikipedia.org/wiki/B-tree#cite_note-Milo-14"><FONT style="BACKGROUND-COLOR: #ffffff" face=Arial>[14]</FONT></A></SUP><SPAN>&nbsp;</SPAN>If the parent is full, then spill/split operation propagates towards the root node.<SUP id=cite_ref-Milo_14-5 class=reference style="FONT-SIZE: 12px; WHITE-SPACE: nowrap; FONT-WEIGHT: normal; FONT-STYLE: normal; LINE-HEIGHT: 1"><A style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: ; border-radius: 2px; overflow-wrap: break-word" href="https://en.wikipedia.org/wiki/B-tree#cite_note-Milo-14"><FONT style="BACKGROUND-COLOR: #ffffff" face=Arial>[14]</FONT></A></SUP><SPAN>&nbsp;</SPAN>Deleting nodes is somewhat more complex than inserting however. 
<LI style="MARGIN-BOTTOM: 0.1em">The B<SUP style="FONT-SIZE: 12px; LINE-HEIGHT: 1">*+</SUP><SPAN>&nbsp;</SPAN>tree combines the main<SPAN>&nbsp;</SPAN><A title="B+ tree" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: ; border-radius: 2px; overflow-wrap: break-word" href="https://en.wikipedia.org/wiki/B%2B_tree">B+ tree</A><SPAN>&nbsp;</SPAN>and B<SUP style="FONT-SIZE: 12px; LINE-HEIGHT: 1">*</SUP><SPAN>&nbsp;</SPAN>tree features together.<SUP id=cite_ref-15 class=reference style="FONT-SIZE: 12px; WHITE-SPACE: nowrap; FONT-WEIGHT: normal; FONT-STYLE: normal; LINE-HEIGHT: 1"><A style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: ; border-radius: 2px; overflow-wrap: break-word" href="https://en.wikipedia.org/wiki/B-tree#cite_note-15"><FONT style="BACKGROUND-COLOR: #ffffff" face=Arial>[15]</FONT></A></SUP> 
<LI style="MARGIN-BOTTOM: 0.1em">B-trees can be turned into<SPAN>&nbsp;</SPAN><A title="Order statistic tree" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: ; border-radius: 2px; overflow-wrap: break-word" href="https://en.wikipedia.org/wiki/Order_statistic_tree">order statistic trees</A><SPAN>&nbsp;</SPAN>to allow rapid searches for the Nth record in key order, or counting the number of records between any two records, and various other related operations.<SUP id=cite_ref-16 class=reference style="FONT-SIZE: 12px; WHITE-SPACE: nowrap; FONT-WEIGHT: normal; FONT-STYLE: normal; LINE-HEIGHT: 1"><A style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: ; border-radius: 2px; overflow-wrap: break-word" href="https://en.wikipedia.org/wiki/B-tree#cite_note-16"><FONT style="BACKGROUND-COLOR: #ffffff" face=Arial>[16]</FONT></A></SUP></LI></UL>
<DIV class="mw-heading mw-heading2" style='FONT-SIZE: 1.5em; OVERFLOW: hidden; FONT-FAMILY: "Linux Libertine", Georgia, Times, "Source Serif Pro", serif; WHITE-SPACE: normal; WORD-SPACING: 0px; BORDER-BOTTOM: 1px solid; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: ; PADDING-BOTTOM: 0.17em; FONT-STYLE: normal; PADDING-TOP: 0.5em; ORPHANS: 2; WIDOWS: 2; MARGIN: 0.25em 0px; LETTER-SPACING: normal; LINE-HEIGHT: 1.375; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial'>