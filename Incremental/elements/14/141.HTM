<b> : </b>Testing More Inputs</H3>
<P style="LINE-HEIGHT: 1.5">We now have a basic implementation of our duplication checker. When we run it, though, we want to make sure it&#8217;s working properly for both unique and non-unique sequences. Right now we&#8217;ve only hardcoded a single sequence, so we can only check one of the two cases.</P>
<P style="LINE-HEIGHT: 1.5">To check both, we can use multiple starting states. TLA+ doesn&#8217;t just let us assign values to variables, it also lets us say a variable starts out as<SPAN>&nbsp;</SPAN><EM>some</EM><SPAN>&nbsp;</SPAN>element in a set. It looks like this:</P>
<DIV id=id13 class="literal-block-wrapper docutils container">
<DIV class="highlight-udiff notranslate" style="OVERFLOW-X: auto">
<DIV class=highlight style="BOX-SIZING: border-box; BACKGROUND: rgb(248,248,248); MARGIN-TOP: 0px; OVERFLOW-X: auto; COLOR: rgb(37,38,48); PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN-LEFT: 0px; PADDING-RIGHT: 0px; MARGIN-RIGHT: 0px; border-radius: 0.2rem"><PRE style='FONT-FAMILY: "Roboto Mono", monospace, Monaco, Consolas, "Andale Mono"; LINE-HEIGHT: 18px'><SPAN></SPAN><SPAN class=w style="COLOR: rgb(187,187,187)"> </SPAN>EXTENDS Integers, Sequences, TLC<SPAN class=w style="COLOR: rgb(187,187,187)"></SPAN>
<SPAN class=w style="COLOR: rgb(187,187,187)"> </SPAN>
<SPAN class=w style="COLOR: rgb(187,187,187)"> </SPAN>(*--algorithm dup<SPAN class=w style="COLOR: rgb(187,187,187)"></SPAN>
<SPAN class=gd style="COLOR: rgb(160,0,0)">-  variable seq = &lt;&lt;1, 2, 3, 2&gt;&gt;;</SPAN><SPAN class=w style="COLOR: rgb(187,187,187)"></SPAN>
<SPAN class=gi style="COLOR: rgb(0,132,0)">+  variable seq \in {&lt;&lt;1, 2, 3, 2&gt;&gt;, &lt;&lt;1, 2, 3, 4&gt;&gt;};</SPAN><SPAN class=w style="COLOR: rgb(187,187,187)"></SPAN>
<SPAN class=w style="COLOR: rgb(187,187,187)"> </SPAN>  index = 1;<SPAN class=w style="COLOR: rgb(187,187,187)"></SPAN>
<SPAN class=w style="COLOR: rgb(187,187,187)"> </SPAN>  seen = {};<SPAN class=w style="COLOR: rgb(187,187,187)"></SPAN>
<SPAN class=w style="COLOR: rgb(187,187,187)"> </SPAN>  is_unique = TRUE;<SPAN class=w style="COLOR: rgb(187,187,187)"></SPAN>
</PRE></DIV></DIV>
<DIV class=code-block-caption style="FONT-SIZE: 0.8em; TEXT-ALIGN: center"><SPAN class=caption-text><A class="reference download internal" style="TEXT-DECORATION: none; COLOR: " href="https://www.learntla.com/_downloads/5655c7a2c37c9d85f5107fd2f1e8c096/duplicates.tla" download=""><CODE class="xref download docutils literal notranslate" style='FONT-SIZE: 0.9em; FONT-FAMILY: "Roboto Mono", monospace, Monaco, Consolas, "Andale Mono"; PADDING-BOTTOM: 2px; PADDING-TOP: 2px; PADDING-LEFT: 4px; PADDING-RIGHT: 4px; border-radius: 0.2rem'><SPAN class=pre><FONT color=#0066cc size=2>spec</FONT></SPAN></CODE></A></SPAN></DIV></DIV>
<P style="LINE-HEIGHT: 1.5">The model checker will now check<SPAN>&nbsp;</SPAN><EM>both</EM><SPAN>&nbsp;</SPAN><CODE class="docutils literal notranslate" style='FONT-SIZE: 0.9em; FONT-FAMILY: "Roboto Mono", monospace, Monaco, Consolas, "Andale Mono"; PADDING-BOTTOM: 2px; PADDING-TOP: 2px; PADDING-LEFT: 4px; PADDING-RIGHT: 4px; border-radius: 0.2rem'><SPAN class=pre>&lt;&lt;1,</SPAN><SPAN>&nbsp;</SPAN><SPAN class=pre>2,</SPAN><SPAN>&nbsp;</SPAN><SPAN class=pre>3,</SPAN><SPAN>&nbsp;</SPAN><SPAN class=pre>2&gt;&gt;</SPAN></CODE><SPAN>&nbsp;</SPAN>and<SPAN>&nbsp;</SPAN><CODE class="docutils literal notranslate" style='FONT-SIZE: 0.9em; FONT-FAMILY: "Roboto Mono", monospace, Monaco, Consolas, "Andale Mono"; PADDING-BOTTOM: 2px; PADDING-TOP: 2px; PADDING-LEFT: 4px; PADDING-RIGHT: 4px; border-radius: 0.2rem'><SPAN class=pre>&lt;1,</SPAN><SPAN>&nbsp;</SPAN><SPAN class=pre>2,</SPAN><SPAN>&nbsp;</SPAN><SPAN class=pre>3,</SPAN><SPAN>&nbsp;</SPAN><SPAN class=pre>4&gt;&gt;</SPAN></CODE><SPAN>&nbsp;</SPAN>as the value of<SPAN>&nbsp;</SPAN><CODE class="docutils literal notranslate" style='FONT-SIZE: 0.9em; FONT-FAMILY: "Roboto Mono", monospace, Monaco, Consolas, "Andale Mono"; PADDING-BOTTOM: 2px; PADDING-TOP: 2px; PADDING-LEFT: 4px; PADDING-RIGHT: 4px; border-radius: 0.2rem'><SPAN class=pre>seq</SPAN></CODE>. More specifically, does two complete runs, one for each possible value. If either complete run, or<SPAN>&nbsp;</SPAN><EM class=dfn>behavior</EM>, would lead to an error, TLC will let us know.</P><FIGURE id=id14 class=align-default style="DISPLAY: flex; flex-wrap: wrap; justify-content: center"><IMG style="MAX-WIDTH: 100%; BORDER-TOP: 1px; BORDER-RIGHT: 1px; BORDER-BOTTOM: 1px; BORDER-LEFT: 1px" alt=../_images/duplicates_2.gv.png src="https://www.learntla.com/_images/duplicates_2.gv.png"><FIGCAPTION>
<P style="LINE-HEIGHT: 1.5"><SPAN class=caption-text style="FONT-SIZE: 0.8em; MARGIN-TOP: 8px; TEXT-ALIGN: center">There are two possible starting states, each with its own behavior.</SPAN></P></FIGCAPTION></FIGURE>
<P style="LINE-HEIGHT: 1.5">Adding multiple starting states increases the complexity of our model. If, in a spec, TLC will normally have to check 10 states, adding 100 initial states could increase the state space to a maximum of 1,000. In practice, it will often be lower, because sometimes initial states will converge:</P>
<DIV class="highlight-tla notranslate" style="OVERFLOW-X: auto">
<DIV class=highlight style="BOX-SIZING: border-box; BACKGROUND: rgb(248,248,248); MARGIN-TOP: 0px; OVERFLOW-X: auto; COLOR: rgb(37,38,48); PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN-LEFT: 0px; PADDING-RIGHT: 0px; MARGIN-RIGHT: 0px; border-radius: 0.2rem"><PRE style='FONT-FAMILY: "Roboto Mono", monospace, Monaco, Consolas, "Andale Mono"; LINE-HEIGHT: 18px'><SPAN></SPAN><SPAN class=n>variables</SPAN> <SPAN class=n>x</SPAN> <SPAN class=s style="COLOR: rgb(186,33,33)">\in</SPAN> <SPAN class=m style="COLOR: rgb(102,102,102)">1</SPAN><SPAN class=o style="COLOR: rgb(102,102,102)">..</SPAN><SPAN class=m style="COLOR: rgb(102,102,102)">1000</SPAN><SPAN class=p>;</SPAN>
<SPAN class=nf style="COLOR: rgb(0,0,255)">begin</SPAN>
<SPAN class=nt style="FONT-WEIGHT: bold; COLOR: rgb(0,128,0)">  A:</SPAN>
    <SPAN class=n>x</SPAN> <SPAN class=o style="COLOR: rgb(102,102,102)">:=</SPAN> <SPAN class=m style="COLOR: rgb(102,102,102)">0</SPAN><SPAN class=p>;</SPAN>
<SPAN class=nt style="FONT-WEIGHT: bold; COLOR: rgb(0,128,0)">  B:</SPAN>
    <SPAN class=n>x</SPAN> <SPAN class=o style="COLOR: rgb(102,102,102)">:=</SPAN> <SPAN class=n>x</SPAN><SPAN class=o style="COLOR: rgb(102,102,102)">+</SPAN><SPAN class=m style="COLOR: rgb(102,102,102)">1</SPAN><SPAN class=p>;</SPAN>
<SPAN class=nf style="COLOR: rgb(0,0,255)">end algorithm;</SPAN>
</PRE></DIV></DIV>
<P style="LINE-HEIGHT: 1.5">We might think, with 1000 initial states and 2 labels, there will be 3,000 total states. In practice, the first label &#8220;collapses&#8221; the state space. So the number of<SPAN>&nbsp;</SPAN><EM>distinct</EM><SPAN>&nbsp;</SPAN>states will be far smaller.</P></SECTION><SECTION id=starting-states style="MARGIN-TOP: 2px; MARGIN-LEFT: 2px; MARGIN-RIGHT: 2px">