<b> : </b>The Approach</H2>
<P style="FONT-SIZE: 16px; BORDER-TOP: 0px; FONT-FAMILY: inherit; BORDER-RIGHT: 0px; VERTICAL-ALIGN: baseline; BORDER-BOTTOM: 0px; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; BORDER-LEFT: 0px; MARGIN: 0px 0px 1.5em; PADDING-RIGHT: 0px; font-stretch: inherit; font-optical-sizing: inherit; font-size-adjust: inherit; font-kerning: inherit; font-feature-settings: inherit; font-variation-settings: inherit">There are many ways to implement a hash table. The approach I&#8217;ve chosen here is actually just a simple modification of the<SPAN>&nbsp;</SPAN><CODE style="FONT-SIZE: 0.9em; BORDER-TOP: rgb(238,238,238) 1px solid; FONT-FAMILY: cascadia_code, monospace; BORDER-RIGHT: rgb(238,238,238) 1px solid; VERTICAL-ALIGN: baseline; BACKGROUND: rgb(246,246,246); BORDER-BOTTOM: rgb(238,238,238) 1px solid; COLOR: rgb(70,70,70); PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0.3em; BORDER-LEFT: rgb(238,238,238) 1px solid; MARGIN: -1px 0px; DISPLAY: inline-block; LINE-HEIGHT: 1.5em; PADDING-RIGHT: 0.3em; font-stretch: inherit; font-optical-sizing: inherit; font-size-adjust: inherit; font-kerning: inherit; font-feature-settings: inherit; font-variation-settings: inherit; border-radius: 0.4em">ArrayOfItems</CODE><SPAN>&nbsp;</SPAN>class described in my previous post,<SPAN>&nbsp;</SPAN><A style="FONT-SIZE: 16px; TEXT-DECORATION: none; BORDER-TOP: 0px; FONT-FAMILY: inherit; BORDER-RIGHT: 0px; VERTICAL-ALIGN: baseline; BORDER-BOTTOM: 0px; COLOR: rgb(33,175,211); PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; BORDER-LEFT: 0px; MARGIN: 0px; PADDING-RIGHT: 0px; font-stretch: inherit; font-optical-sizing: inherit; font-size-adjust: inherit; font-kerning: inherit; font-feature-settings: inherit; font-variation-settings: inherit; transition: color 0.3s" href="http://preshing.com/20130529/a-lock-free-linear-search">A Lock-Free&#8230; Linear Search?</A><SPAN>&nbsp;</SPAN>I strongly recommend reviewing that post before continuing.</P>
<P style="FONT-SIZE: 16px; BORDER-TOP: 0px; FONT-FAMILY: inherit; BORDER-RIGHT: 0px; VERTICAL-ALIGN: baseline; BORDER-BOTTOM: 0px; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; BORDER-LEFT: 0px; MARGIN: 0px 0px 1.5em; PADDING-RIGHT: 0px; font-stretch: inherit; font-optical-sizing: inherit; font-size-adjust: inherit; font-kerning: inherit; font-feature-settings: inherit; font-variation-settings: inherit">Like<SPAN>&nbsp;</SPAN><CODE style="FONT-SIZE: 0.9em; BORDER-TOP: rgb(238,238,238) 1px solid; FONT-FAMILY: cascadia_code, monospace; BORDER-RIGHT: rgb(238,238,238) 1px solid; VERTICAL-ALIGN: baseline; BACKGROUND: rgb(246,246,246); BORDER-BOTTOM: rgb(238,238,238) 1px solid; COLOR: rgb(70,70,70); PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0.3em; BORDER-LEFT: rgb(238,238,238) 1px solid; MARGIN: -1px 0px; DISPLAY: inline-block; LINE-HEIGHT: 1.5em; PADDING-RIGHT: 0.3em; font-stretch: inherit; font-optical-sizing: inherit; font-size-adjust: inherit; font-kerning: inherit; font-feature-settings: inherit; font-variation-settings: inherit; border-radius: 0.4em">ArrayOfItems</CODE>, this hash table class, which I&#8217;ve named<SPAN>&nbsp;</SPAN><CODE style="FONT-SIZE: 0.9em; BORDER-TOP: rgb(238,238,238) 1px solid; FONT-FAMILY: cascadia_code, monospace; BORDER-RIGHT: rgb(238,238,238) 1px solid; VERTICAL-ALIGN: baseline; BACKGROUND: rgb(246,246,246); BORDER-BOTTOM: rgb(238,238,238) 1px solid; COLOR: rgb(70,70,70); PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0.3em; BORDER-LEFT: rgb(238,238,238) 1px solid; MARGIN: -1px 0px; DISPLAY: inline-block; LINE-HEIGHT: 1.5em; PADDING-RIGHT: 0.3em; font-stretch: inherit; font-optical-sizing: inherit; font-size-adjust: inherit; font-kerning: inherit; font-feature-settings: inherit; font-variation-settings: inherit; border-radius: 0.4em">HashTable1</CODE>, is implemented using a single, giant array of key/value pairs.</P>
<DIV style="FONT-SIZE: 16px; BORDER-TOP: 0px; FONT-FAMILY: inherit; BORDER-RIGHT: 0px; VERTICAL-ALIGN: baseline; BORDER-BOTTOM: 0px; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; BORDER-LEFT: 0px; MARGIN: 0px; PADDING-RIGHT: 0px; font-stretch: inherit; font-optical-sizing: inherit; font-size-adjust: inherit; font-kerning: inherit; font-feature-settings: inherit; font-variation-settings: inherit">
<DIV class=CodeRay style='FONT-SIZE: 16px; BORDER-TOP: 0px; FONT-FAMILY: Monaco, "Courier New", "DejaVu Sans Mono", "Bitstream Vera Sans Mono", monospace; BORDER-RIGHT: 0px; VERTICAL-ALIGN: baseline; BORDER-BOTTOM: 0px; COLOR: rgb(0,0,0); PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; BORDER-LEFT: 0px; MARGIN: 0px 0px 14px; PADDING-RIGHT: 0px; BACKGROUND-COLOR: rgb(239,239,239); font-stretch: inherit; font-optical-sizing: inherit; font-size-adjust: inherit; font-kerning: inherit; font-feature-settings: inherit; font-variation-settings: inherit'>
<DIV class=code style="FONT-SIZE: 16px; BORDER-TOP: 0px; FONT-FAMILY: inherit; BORDER-RIGHT: 0px; WIDTH: 889px; VERTICAL-ALIGN: baseline; BORDER-BOTTOM: 0px; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; BORDER-LEFT: 0px; MARGIN: 0px; PADDING-RIGHT: 0px; font-stretch: inherit; font-optical-sizing: inherit; font-size-adjust: inherit; font-kerning: inherit; font-feature-settings: inherit; font-variation-settings: inherit"><PRE style="FONT-SIZE: 13px; OVERFLOW: auto; BORDER-TOP: rgb(238,238,238) 1px solid; FONT-FAMILY: cascadia_code, monospace; BORDER-RIGHT: rgb(238,238,238) 1px solid; VERTICAL-ALIGN: baseline; BACKGROUND: rgb(246,246,246); BORDER-BOTTOM: rgb(238,238,238) 1px solid; COLOR: rgb(41,47,49); PADDING-BOTTOM: 1em; PADDING-TOP: 1em; PADDING-LEFT: 1em; BORDER-LEFT: rgb(238,238,238) 1px solid; MARGIN: 0px; LINE-HEIGHT: 1.38em; PADDING-RIGHT: 1em; font-stretch: inherit; font-optical-sizing: inherit; font-size-adjust: inherit; font-kerning: inherit; font-feature-settings: inherit; font-variation-settings: inherit; border-radius: 0.4em"><SPAN class=keyword style="FONT-SIZE: 13px; BORDER-TOP: 0px; FONT-FAMILY: inherit; BORDER-RIGHT: 0px; VERTICAL-ALIGN: baseline; BORDER-BOTTOM: 0px; FONT-WEIGHT: bold; COLOR: rgb(0,0,0); PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; BORDER-LEFT: 0px; MARGIN: 0px; PADDING-RIGHT: 0px; font-stretch: inherit; font-optical-sizing: inherit; font-size-adjust: inherit; font-kerning: inherit; font-feature-settings: inherit; font-variation-settings: inherit">struct</SPAN> Entry
{
    mint_atomic32_t key;
    mint_atomic32_t value;
};
Entry *m_entries;
</PRE></DIV></DIV></DIV>
<P style="FONT-SIZE: 16px; BORDER-TOP: 0px; FONT-FAMILY: inherit; BORDER-RIGHT: 0px; VERTICAL-ALIGN: baseline; BORDER-BOTTOM: 0px; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; BORDER-LEFT: 0px; MARGIN: 0px 0px 1.5em; PADDING-RIGHT: 0px; font-stretch: inherit; font-optical-sizing: inherit; font-size-adjust: inherit; font-kerning: inherit; font-feature-settings: inherit; font-variation-settings: inherit">In<SPAN>&nbsp;</SPAN><CODE style="FONT-SIZE: 0.9em; BORDER-TOP: rgb(238,238,238) 1px solid; FONT-FAMILY: cascadia_code, monospace; BORDER-RIGHT: rgb(238,238,238) 1px solid; VERTICAL-ALIGN: baseline; BACKGROUND: rgb(246,246,246); BORDER-BOTTOM: rgb(238,238,238) 1px solid; COLOR: rgb(70,70,70); PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0.3em; BORDER-LEFT: rgb(238,238,238) 1px solid; MARGIN: -1px 0px; DISPLAY: inline-block; LINE-HEIGHT: 1.5em; PADDING-RIGHT: 0.3em; font-stretch: inherit; font-optical-sizing: inherit; font-size-adjust: inherit; font-kerning: inherit; font-feature-settings: inherit; font-variation-settings: inherit; border-radius: 0.4em">HashTable1</CODE>, there are no linked lists to resolve hash collisions outside the table; there is only the array itself. A zero key in the array designates a free entry, and the array is initially all zeros. And just like<SPAN>&nbsp;</SPAN><CODE style="FONT-SIZE: 0.9em; BORDER-TOP: rgb(238,238,238) 1px solid; FONT-FAMILY: cascadia_code, monospace; BORDER-RIGHT: rgb(238,238,238) 1px solid; VERTICAL-ALIGN: baseline; BACKGROUND: rgb(246,246,246); BORDER-BOTTOM: rgb(238,238,238) 1px solid; COLOR: rgb(70,70,70); PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0.3em; BORDER-LEFT: rgb(238,238,238) 1px solid; MARGIN: -1px 0px; DISPLAY: inline-block; LINE-HEIGHT: 1.5em; PADDING-RIGHT: 0.3em; font-stretch: inherit; font-optical-sizing: inherit; font-size-adjust: inherit; font-kerning: inherit; font-feature-settings: inherit; font-variation-settings: inherit; border-radius: 0.4em">ArrayOfItems</CODE>, items in<SPAN>&nbsp;</SPAN><CODE style="FONT-SIZE: 0.9em; BORDER-TOP: rgb(238,238,238) 1px solid; FONT-FAMILY: cascadia_code, monospace; BORDER-RIGHT: rgb(238,238,238) 1px solid; VERTICAL-ALIGN: baseline; BACKGROUND: rgb(246,246,246); BORDER-BOTTOM: rgb(238,238,238) 1px solid; COLOR: rgb(70,70,70); PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0.3em; BORDER-LEFT: rgb(238,238,238) 1px solid; MARGIN: -1px 0px; DISPLAY: inline-block; LINE-HEIGHT: 1.5em; PADDING-RIGHT: 0.3em; font-stretch: inherit; font-optical-sizing: inherit; font-size-adjust: inherit; font-kerning: inherit; font-feature-settings: inherit; font-variation-settings: inherit; border-radius: 0.4em">HashTable1</CODE><SPAN>&nbsp;</SPAN>are inserted and located by performing a linear search.</P>
<P style="FONT-SIZE: 16px; BORDER-TOP: 0px; FONT-FAMILY: inherit; BORDER-RIGHT: 0px; VERTICAL-ALIGN: baseline; BORDER-BOTTOM: 0px; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; BORDER-LEFT: 0px; MARGIN: 0px 0px 1.5em; PADDING-RIGHT: 0px; font-stretch: inherit; font-optical-sizing: inherit; font-size-adjust: inherit; font-kerning: inherit; font-feature-settings: inherit; font-variation-settings: inherit">The only difference between<SPAN>&nbsp;</SPAN><CODE style="FONT-SIZE: 0.9em; BORDER-TOP: rgb(238,238,238) 1px solid; FONT-FAMILY: cascadia_code, monospace; BORDER-RIGHT: rgb(238,238,238) 1px solid; VERTICAL-ALIGN: baseline; BACKGROUND: rgb(246,246,246); BORDER-BOTTOM: rgb(238,238,238) 1px solid; COLOR: rgb(70,70,70); PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0.3em; BORDER-LEFT: rgb(238,238,238) 1px solid; MARGIN: -1px 0px; DISPLAY: inline-block; LINE-HEIGHT: 1.5em; PADDING-RIGHT: 0.3em; font-stretch: inherit; font-optical-sizing: inherit; font-size-adjust: inherit; font-kerning: inherit; font-feature-settings: inherit; font-variation-settings: inherit; border-radius: 0.4em">ArrayOfItems</CODE><SPAN>&nbsp;</SPAN>and<SPAN>&nbsp;</SPAN><CODE style="FONT-SIZE: 0.9em; BORDER-TOP: rgb(238,238,238) 1px solid; FONT-FAMILY: cascadia_code, monospace; BORDER-RIGHT: rgb(238,238,238) 1px solid; VERTICAL-ALIGN: baseline; BACKGROUND: rgb(246,246,246); BORDER-BOTTOM: rgb(238,238,238) 1px solid; COLOR: rgb(70,70,70); PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0.3em; BORDER-LEFT: rgb(238,238,238) 1px solid; MARGIN: -1px 0px; DISPLAY: inline-block; LINE-HEIGHT: 1.5em; PADDING-RIGHT: 0.3em; font-stretch: inherit; font-optical-sizing: inherit; font-size-adjust: inherit; font-kerning: inherit; font-feature-settings: inherit; font-variation-settings: inherit; border-radius: 0.4em">HashTable1</CODE><SPAN>&nbsp;</SPAN>is that, while<SPAN>&nbsp;</SPAN><CODE style="FONT-SIZE: 0.9em; BORDER-TOP: rgb(238,238,238) 1px solid; FONT-FAMILY: cascadia_code, monospace; BORDER-RIGHT: rgb(238,238,238) 1px solid; VERTICAL-ALIGN: baseline; BACKGROUND: rgb(246,246,246); BORDER-BOTTOM: rgb(238,238,238) 1px solid; COLOR: rgb(70,70,70); PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0.3em; BORDER-LEFT: rgb(238,238,238) 1px solid; MARGIN: -1px 0px; DISPLAY: inline-block; LINE-HEIGHT: 1.5em; PADDING-RIGHT: 0.3em; font-stretch: inherit; font-optical-sizing: inherit; font-size-adjust: inherit; font-kerning: inherit; font-feature-settings: inherit; font-variation-settings: inherit; border-radius: 0.4em">ArrayOfItems</CODE><SPAN>&nbsp;</SPAN>always begins its linear search at index 0,<SPAN>&nbsp;</SPAN><CODE style="FONT-SIZE: 0.9em; BORDER-TOP: rgb(238,238,238) 1px solid; FONT-FAMILY: cascadia_code, monospace; BORDER-RIGHT: rgb(238,238,238) 1px solid; VERTICAL-ALIGN: baseline; BACKGROUND: rgb(246,246,246); BORDER-BOTTOM: rgb(238,238,238) 1px solid; COLOR: rgb(70,70,70); PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0.3em; BORDER-LEFT: rgb(238,238,238) 1px solid; MARGIN: -1px 0px; DISPLAY: inline-block; LINE-HEIGHT: 1.5em; PADDING-RIGHT: 0.3em; font-stretch: inherit; font-optical-sizing: inherit; font-size-adjust: inherit; font-kerning: inherit; font-feature-settings: inherit; font-variation-settings: inherit; border-radius: 0.4em">HashTable1</CODE><SPAN>&nbsp;</SPAN>instead begins each linear search at an index determined by<SPAN>&nbsp;</SPAN><EM style="FONT-SIZE: 16px; BORDER-TOP: 0px; FONT-FAMILY: inherit; BORDER-RIGHT: 0px; VERTICAL-ALIGN: baseline; BORDER-BOTTOM: 0px; PADDING-BOTTOM: 0px; FONT-STYLE: italic; PADDING-TOP: 0px; PADDING-LEFT: 0px; BORDER-LEFT: 0px; MARGIN: 0px; PADDING-RIGHT: 0px; font-stretch: inherit; font-optical-sizing: inherit; font-size-adjust: inherit; font-kerning: inherit; font-feature-settings: inherit; font-variation-settings: inherit">hashing the key</EM>. The hash function I chose is<SPAN>&nbsp;</SPAN><A style="FONT-SIZE: 16px; TEXT-DECORATION: none; BORDER-TOP: 0px; FONT-FAMILY: inherit; BORDER-RIGHT: 0px; VERTICAL-ALIGN: baseline; BORDER-BOTTOM: 0px; COLOR: rgb(33,175,211); PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; BORDER-LEFT: 0px; MARGIN: 0px; PADDING-RIGHT: 0px; font-stretch: inherit; font-optical-sizing: inherit; font-size-adjust: inherit; font-kerning: inherit; font-feature-settings: inherit; font-variation-settings: inherit; transition: color 0.3s" href="https://code.google.com/p/smhasher/wiki/MurmurHash3">MurmurHash3&#8217;s integer finalizer</A>, since it&#8217;s fast and scrambles integer inputs quite nicely.</P>
<DIV style="FONT-SIZE: 16px; BORDER-TOP: 0px; FONT-FAMILY: inherit; BORDER-RIGHT: 0px; VERTICAL-ALIGN: baseline; BORDER-BOTTOM: 0px; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; BORDER-LEFT: 0px; MARGIN: 0px; PADDING-RIGHT: 0px; font-stretch: inherit; font-optical-sizing: inherit; font-size-adjust: inherit; font-kerning: inherit; font-feature-settings: inherit; font-variation-settings: inherit">
<DIV class=CodeRay style='FONT-SIZE: 16px; BORDER-TOP: 0px; FONT-FAMILY: Monaco, "Courier New", "DejaVu Sans Mono", "Bitstream Vera Sans Mono", monospace; BORDER-RIGHT: 0px; VERTICAL-ALIGN: baseline; BORDER-BOTTOM: 0px; COLOR: rgb(0,0,0); PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; BORDER-LEFT: 0px; MARGIN: 0px 0px 14px; PADDING-RIGHT: 0px; BACKGROUND-COLOR: rgb(239,239,239); font-stretch: inherit; font-optical-sizing: inherit; font-size-adjust: inherit; font-kerning: inherit; font-feature-settings: inherit; font-variation-settings: inherit'>
<DIV class=code style="FONT-SIZE: 16px; BORDER-TOP: 0px; FONT-FAMILY: inherit; BORDER-RIGHT: 0px; WIDTH: 889px; VERTICAL-ALIGN: baseline; BORDER-BOTTOM: 0px; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; BORDER-LEFT: 0px; MARGIN: 0px; PADDING-RIGHT: 0px; font-stretch: inherit; font-optical-sizing: inherit; font-size-adjust: inherit; font-kerning: inherit; font-feature-settings: inherit; font-variation-settings: inherit"><PRE style="FONT-SIZE: 13px; OVERFLOW: auto; BORDER-TOP: rgb(238,238,238) 1px solid; FONT-FAMILY: cascadia_code, monospace; BORDER-RIGHT: rgb(238,238,238) 1px solid; VERTICAL-ALIGN: baseline; BACKGROUND: rgb(246,246,246); BORDER-BOTTOM: rgb(238,238,238) 1px solid; COLOR: rgb(41,47,49); PADDING-BOTTOM: 1em; PADDING-TOP: 1em; PADDING-LEFT: 1em; BORDER-LEFT: rgb(238,238,238) 1px solid; MARGIN: 0px; LINE-HEIGHT: 1.38em; PADDING-RIGHT: 1em; font-stretch: inherit; font-optical-sizing: inherit; font-size-adjust: inherit; font-kerning: inherit; font-feature-settings: inherit; font-variation-settings: inherit; border-radius: 0.4em"><SPAN class=directive style="FONT-SIZE: 13px; BORDER-TOP: 0px; FONT-FAMILY: inherit; BORDER-RIGHT: 0px; VERTICAL-ALIGN: baseline; BORDER-BOTTOM: 0px; FONT-WEIGHT: bold; COLOR: rgb(0,136,136); PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; BORDER-LEFT: 0px; MARGIN: 0px; PADDING-RIGHT: 0px; font-stretch: inherit; font-optical-sizing: inherit; font-size-adjust: inherit; font-kerning: inherit; font-feature-settings: inherit; font-variation-settings: inherit">inline</SPAN> <SPAN class=directive style="FONT-SIZE: 13px; BORDER-TOP: 0px; FONT-FAMILY: inherit; BORDER-RIGHT: 0px; VERTICAL-ALIGN: baseline; BORDER-BOTTOM: 0px; FONT-WEIGHT: bold; COLOR: rgb(0,136,136); PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; BORDER-LEFT: 0px; MARGIN: 0px; PADDING-RIGHT: 0px; font-stretch: inherit; font-optical-sizing: inherit; font-size-adjust: inherit; font-kerning: inherit; font-feature-settings: inherit; font-variation-settings: inherit">static</SPAN> uint32_t integerHash(uint32_t h)
{
    h ^= h &gt;&gt; <SPAN class=integer style="FONT-SIZE: 13px; BORDER-TOP: 0px; FONT-FAMILY: inherit; BORDER-RIGHT: 0px; VERTICAL-ALIGN: baseline; BORDER-BOTTOM: 0px; COLOR: rgb(0,153,153); PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; BORDER-LEFT: 0px; MARGIN: 0px; PADDING-RIGHT: 0px; font-stretch: inherit; font-optical-sizing: inherit; font-size-adjust: inherit; font-kerning: inherit; font-feature-settings: inherit; font-variation-settings: inherit">16</SPAN>;
    h *= <SPAN class=hex style="FONT-SIZE: 13px; BORDER-TOP: 0px; FONT-FAMILY: inherit; BORDER-RIGHT: 0px; VERTICAL-ALIGN: baseline; BORDER-BOTTOM: 0px; FONT-WEIGHT: bold; COLOR: rgb(0,85,136); PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; BORDER-LEFT: 0px; MARGIN: 0px; PADDING-RIGHT: 0px; font-stretch: inherit; font-optical-sizing: inherit; font-size-adjust: inherit; font-kerning: inherit; font-feature-settings: inherit; font-variation-settings: inherit">0x85ebca6b</SPAN>;
    h ^= h &gt;&gt; <SPAN class=integer style="FONT-SIZE: 13px; BORDER-TOP: 0px; FONT-FAMILY: inherit; BORDER-RIGHT: 0px; VERTICAL-ALIGN: baseline; BORDER-BOTTOM: 0px; COLOR: rgb(0,153,153); PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; BORDER-LEFT: 0px; MARGIN: 0px; PADDING-RIGHT: 0px; font-stretch: inherit; font-optical-sizing: inherit; font-size-adjust: inherit; font-kerning: inherit; font-feature-settings: inherit; font-variation-settings: inherit">13</SPAN>;
    h *= <SPAN class=hex style="FONT-SIZE: 13px; BORDER-TOP: 0px; FONT-FAMILY: inherit; BORDER-RIGHT: 0px; VERTICAL-ALIGN: baseline; BORDER-BOTTOM: 0px; FONT-WEIGHT: bold; COLOR: rgb(0,85,136); PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; BORDER-LEFT: 0px; MARGIN: 0px; PADDING-RIGHT: 0px; font-stretch: inherit; font-optical-sizing: inherit; font-size-adjust: inherit; font-kerning: inherit; font-feature-settings: inherit; font-variation-settings: inherit">0xc2b2ae35</SPAN>;
    h ^= h &gt;&gt; <SPAN class=integer style="FONT-SIZE: 13px; BORDER-TOP: 0px; FONT-FAMILY: inherit; BORDER-RIGHT: 0px; VERTICAL-ALIGN: baseline; BORDER-BOTTOM: 0px; COLOR: rgb(0,153,153); PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; BORDER-LEFT: 0px; MARGIN: 0px; PADDING-RIGHT: 0px; font-stretch: inherit; font-optical-sizing: inherit; font-size-adjust: inherit; font-kerning: inherit; font-feature-settings: inherit; font-variation-settings: inherit">16</SPAN>;
    <SPAN class=keyword style="FONT-SIZE: 13px; BORDER-TOP: 0px; FONT-FAMILY: inherit; BORDER-RIGHT: 0px; VERTICAL-ALIGN: baseline; BORDER-BOTTOM: 0px; FONT-WEIGHT: bold; COLOR: rgb(0,0,0); PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; BORDER-LEFT: 0px; MARGIN: 0px; PADDING-RIGHT: 0px; font-stretch: inherit; font-optical-sizing: inherit; font-size-adjust: inherit; font-kerning: inherit; font-feature-settings: inherit; font-variation-settings: inherit">return</SPAN> h;
}
</PRE></DIV></DIV></DIV>
<P style="FONT-SIZE: 16px; BORDER-TOP: 0px; FONT-FAMILY: inherit; BORDER-RIGHT: 0px; VERTICAL-ALIGN: baseline; BORDER-BOTTOM: 0px; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; BORDER-LEFT: 0px; MARGIN: 0px 0px 1.5em; PADDING-RIGHT: 0px; font-stretch: inherit; font-optical-sizing: inherit; font-size-adjust: inherit; font-kerning: inherit; font-feature-settings: inherit; font-variation-settings: inherit">As a result, each time we call<SPAN>&nbsp;</SPAN><CODE style="FONT-SIZE: 0.9em; BORDER-TOP: rgb(238,238,238) 1px solid; FONT-FAMILY: cascadia_code, monospace; BORDER-RIGHT: rgb(238,238,238) 1px solid; VERTICAL-ALIGN: baseline; BACKGROUND: rgb(246,246,246); BORDER-BOTTOM: rgb(238,238,238) 1px solid; COLOR: rgb(70,70,70); PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0.3em; BORDER-LEFT: rgb(238,238,238) 1px solid; MARGIN: -1px 0px; DISPLAY: inline-block; LINE-HEIGHT: 1.5em; PADDING-RIGHT: 0.3em; font-stretch: inherit; font-optical-sizing: inherit; font-size-adjust: inherit; font-kerning: inherit; font-feature-settings: inherit; font-variation-settings: inherit; border-radius: 0.4em">SetItem</CODE><SPAN>&nbsp;</SPAN>or<SPAN>&nbsp;</SPAN><CODE style="FONT-SIZE: 0.9em; BORDER-TOP: rgb(238,238,238) 1px solid; FONT-FAMILY: cascadia_code, monospace; BORDER-RIGHT: rgb(238,238,238) 1px solid; VERTICAL-ALIGN: baseline; BACKGROUND: rgb(246,246,246); BORDER-BOTTOM: rgb(238,238,238) 1px solid; COLOR: rgb(70,70,70); PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0.3em; BORDER-LEFT: rgb(238,238,238) 1px solid; MARGIN: -1px 0px; DISPLAY: inline-block; LINE-HEIGHT: 1.5em; PADDING-RIGHT: 0.3em; font-stretch: inherit; font-optical-sizing: inherit; font-size-adjust: inherit; font-kerning: inherit; font-feature-settings: inherit; font-variation-settings: inherit; border-radius: 0.4em">GetItem</CODE><SPAN>&nbsp;</SPAN>using the same key, it will begin the linear search at the same index, but when different keys are passed in, it will tend to begin the search at a completely different index. In this way, the items end up much more &#8220;spread out&#8221; around the array than they are in<SPAN>&nbsp;</SPAN><CODE style="FONT-SIZE: 0.9em; BORDER-TOP: rgb(238,238,238) 1px solid; FONT-FAMILY: cascadia_code, monospace; BORDER-RIGHT: rgb(238,238,238) 1px solid; VERTICAL-ALIGN: baseline; BACKGROUND: rgb(246,246,246); BORDER-BOTTOM: rgb(238,238,238) 1px solid; COLOR: rgb(70,70,70); PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0.3em; BORDER-LEFT: rgb(238,238,238) 1px solid; MARGIN: -1px 0px; DISPLAY: inline-block; LINE-HEIGHT: 1.5em; PADDING-RIGHT: 0.3em; font-stretch: inherit; font-optical-sizing: inherit; font-size-adjust: inherit; font-kerning: inherit; font-feature-settings: inherit; font-variation-settings: inherit; border-radius: 0.4em">ArrayOfItems</CODE>, and it remains safe to call<SPAN>&nbsp;</SPAN><CODE style="FONT-SIZE: 0.9em; BORDER-TOP: rgb(238,238,238) 1px solid; FONT-FAMILY: cascadia_code, monospace; BORDER-RIGHT: rgb(238,238,238) 1px solid; VERTICAL-ALIGN: baseline; BACKGROUND: rgb(246,246,246); BORDER-BOTTOM: rgb(238,238,238) 1px solid; COLOR: rgb(70,70,70); PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0.3em; BORDER-LEFT: rgb(238,238,238) 1px solid; MARGIN: -1px 0px; DISPLAY: inline-block; LINE-HEIGHT: 1.5em; PADDING-RIGHT: 0.3em; font-stretch: inherit; font-optical-sizing: inherit; font-size-adjust: inherit; font-kerning: inherit; font-feature-settings: inherit; font-variation-settings: inherit; border-radius: 0.4em">SetItem</CODE><SPAN>&nbsp;</SPAN>and<SPAN>&nbsp;</SPAN><CODE style="FONT-SIZE: 0.9em; BORDER-TOP: rgb(238,238,238) 1px solid; FONT-FAMILY: cascadia_code, monospace; BORDER-RIGHT: rgb(238,238,238) 1px solid; VERTICAL-ALIGN: baseline; BACKGROUND: rgb(246,246,246); BORDER-BOTTOM: rgb(238,238,238) 1px solid; COLOR: rgb(70,70,70); PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0.3em; BORDER-LEFT: rgb(238,238,238) 1px solid; MARGIN: -1px 0px; DISPLAY: inline-block; LINE-HEIGHT: 1.5em; PADDING-RIGHT: 0.3em; font-stretch: inherit; font-optical-sizing: inherit; font-size-adjust: inherit; font-kerning: inherit; font-feature-settings: inherit; font-variation-settings: inherit; border-radius: 0.4em">GetItem</CODE><SPAN>&nbsp;</SPAN>from multiple threads in parallel.</P>
<P style="FONT-SIZE: 16px; BORDER-TOP: 0px; FONT-FAMILY: inherit; BORDER-RIGHT: 0px; VERTICAL-ALIGN: baseline; BORDER-BOTTOM: 0px; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; BORDER-LEFT: 0px; MARGIN: 0px 0px 1.5em; PADDING-RIGHT: 0px; font-stretch: inherit; font-optical-sizing: inherit; font-size-adjust: inherit; font-kerning: inherit; font-feature-settings: inherit; font-variation-settings: inherit"><IMG class=center style="FONT-SIZE: 16px; MAX-WIDTH: 100%; BORDER-TOP: 0px; HEIGHT: auto; FONT-FAMILY: inherit; BORDER-RIGHT: 0px; VERTICAL-ALIGN: baseline; BORDER-BOTTOM: 0px; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; BORDER-LEFT: 0px; MARGIN: 0px auto 1.5em; DISPLAY: block; PADDING-RIGHT: 0px; font-stretch: inherit; font-optical-sizing: inherit; font-size-adjust: inherit; font-kerning: inherit; font-feature-settings: inherit; font-variation-settings: inherit" src="https://preshing.com/images/hash-diagram.png"></P>
<P style="FONT-SIZE: 16px; BORDER-TOP: 0px; FONT-FAMILY: inherit; BORDER-RIGHT: 0px; VERTICAL-ALIGN: baseline; BORDER-BOTTOM: 0px; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; BORDER-LEFT: 0px; MARGIN: 0px 0px 1.5em; PADDING-RIGHT: 0px; font-stretch: inherit; font-optical-sizing: inherit; font-size-adjust: inherit; font-kerning: inherit; font-feature-settings: inherit; font-variation-settings: inherit"><CODE style="FONT-SIZE: 0.9em; BORDER-TOP: rgb(238,238,238) 1px solid; FONT-FAMILY: cascadia_code, monospace; BORDER-RIGHT: rgb(238,238,238) 1px solid; VERTICAL-ALIGN: baseline; BACKGROUND: rgb(246,246,246); BORDER-BOTTOM: rgb(238,238,238) 1px solid; COLOR: rgb(70,70,70); PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0.3em; BORDER-LEFT: rgb(238,238,238) 1px solid; MARGIN: -1px 0px; DISPLAY: inline-block; LINE-HEIGHT: 1.5em; PADDING-RIGHT: 0.3em; font-stretch: inherit; font-optical-sizing: inherit; font-size-adjust: inherit; font-kerning: inherit; font-feature-settings: inherit; font-variation-settings: inherit; border-radius: 0.4em">HashTable1</CODE><SPAN>&nbsp;</SPAN>uses a circular search, which means that if<SPAN>&nbsp;</SPAN><CODE style="FONT-SIZE: 0.9em; BORDER-TOP: rgb(238,238,238) 1px solid; FONT-FAMILY: cascadia_code, monospace; BORDER-RIGHT: rgb(238,238,238) 1px solid; VERTICAL-ALIGN: baseline; BACKGROUND: rgb(246,246,246); BORDER-BOTTOM: rgb(238,238,238) 1px solid; COLOR: rgb(70,70,70); PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0.3em; BORDER-LEFT: rgb(238,238,238) 1px solid; MARGIN: -1px 0px; DISPLAY: inline-block; LINE-HEIGHT: 1.5em; PADDING-RIGHT: 0.3em; font-stretch: inherit; font-optical-sizing: inherit; font-size-adjust: inherit; font-kerning: inherit; font-feature-settings: inherit; font-variation-settings: inherit; border-radius: 0.4em">SetItem</CODE><SPAN>&nbsp;</SPAN>or<SPAN>&nbsp;</SPAN><CODE style="FONT-SIZE: 0.9em; BORDER-TOP: rgb(238,238,238) 1px solid; FONT-FAMILY: cascadia_code, monospace; BORDER-RIGHT: rgb(238,238,238) 1px solid; VERTICAL-ALIGN: baseline; BACKGROUND: rgb(246,246,246); BORDER-BOTTOM: rgb(238,238,238) 1px solid; COLOR: rgb(70,70,70); PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0.3em; BORDER-LEFT: rgb(238,238,238) 1px solid; MARGIN: -1px 0px; DISPLAY: inline-block; LINE-HEIGHT: 1.5em; PADDING-RIGHT: 0.3em; font-stretch: inherit; font-optical-sizing: inherit; font-size-adjust: inherit; font-kerning: inherit; font-feature-settings: inherit; font-variation-settings: inherit; border-radius: 0.4em">GetItem</CODE><SPAN>&nbsp;</SPAN>reaches the end of the array, it simply wraps back around to index 0 and continues searching. As long as the array never fills completely, every search is guaranteed to finish either by locating the desired key, or by locating an entry whose key is zero, which means that the desired key does not exist in the hash table. This technique is referred to as<SPAN>&nbsp;</SPAN><A style="FONT-SIZE: 16px; TEXT-DECORATION: none; BORDER-TOP: 0px; FONT-FAMILY: inherit; BORDER-RIGHT: 0px; VERTICAL-ALIGN: baseline; BORDER-BOTTOM: 0px; COLOR: rgb(33,175,211); PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; BORDER-LEFT: 0px; MARGIN: 0px; PADDING-RIGHT: 0px; font-stretch: inherit; font-optical-sizing: inherit; font-size-adjust: inherit; font-kerning: inherit; font-feature-settings: inherit; font-variation-settings: inherit; transition: color 0.3s" href="http://en.wikipedia.org/wiki/Open_addressing">open addressing</A><SPAN>&nbsp;</SPAN>with<SPAN>&nbsp;</SPAN><A style="FONT-SIZE: 16px; TEXT-DECORATION: none; BORDER-TOP: 0px; FONT-FAMILY: inherit; BORDER-RIGHT: 0px; VERTICAL-ALIGN: baseline; BORDER-BOTTOM: 0px; COLOR: rgb(33,175,211); PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; BORDER-LEFT: 0px; MARGIN: 0px; PADDING-RIGHT: 0px; font-stretch: inherit; font-optical-sizing: inherit; font-size-adjust: inherit; font-kerning: inherit; font-feature-settings: inherit; font-variation-settings: inherit; transition: color 0.3s" href="http://en.wikipedia.org/wiki/Linear_probing">linear probing</A>, and in my opinion, it&#8217;s the most lock-free-friendly hash table technique there is. Indeed, this is the same technique Dr. Click uses in his Java-based lock-free hash table.