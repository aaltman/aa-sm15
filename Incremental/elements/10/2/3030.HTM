<DIV class=heading-anchor-wrapper>
<H2 id=what-is-a-reverse-proxy><SPAN class=heading-anchor-content><FONT class=extract>What is a reverse proxy?</FONT><A class=heading-anchor href="https://ngrok.com/blog-post/reverse-proxy-vs-api-gateway#what-is-a-reverse-proxy"></A></SPAN></H2></DIV>
<P><FONT class=extract>Before exploring <EM>reverse</EM> proxies, it helps to understand <EM>forwar</EM>d proxy servers - also known simply as proxy servers or web proxies.</FONT></P>
<DIV class=heading-anchor-wrapper>
<H3 id=forward-proxy-servers-explained><SPAN class=heading-anchor-content><FONT class=extract>Forward proxy servers explained</FONT><A class=heading-anchor href="https://ngrok.com/blog-post/reverse-proxy-vs-api-gateway#forward-proxy-servers-explained"></A></SPAN></H3></DIV>
<P><FONT class=extract>A forward proxy server is a software application that sits between a client&#8212;such as your computer or phone&#8212;and a server providing a resource&#8212;such as a website. You send requests to your forward proxy server, and the forward proxy server makes the request to the website on your behalf. When the website responds, it sends the response to the forward proxy server rather than directly to your device. When using a forward proxy server, all requests and responses flow through the forward proxy server&#8212;you never interact with the website directly. The forward proxy server may run on your local machine or somewhere else in your network.</FONT></P><FIGURE class="w-richtext-align-fullwidth w-richtext-figure-type-image">
<DIV><FONT class=extract><IMG alt="" src="https://cdn.prod.website-files.com/63ed707844acb1ccf1ccb700/66a2d1d22a3d49db25bc32cf_662017d046ab061bdc8e98de_Screenshot%25202024-04-17%2520at%25201.41.07%25E2%2580%25AFPM.png" loading="lazy"></FONT></DIV></FIGURE>
<P><FONT class=extract>You can use forward proxy servers for many things, but one common purpose is to make things safer and more private for clients. Forward proxy servers also offer benefits like caching, anonymity, and content filtering.&nbsp;</FONT></P>
<DIV class=heading-anchor-wrapper>
<H3 id=reverse-proxy-vs-forward-proxy><SPAN class=heading-anchor-content><FONT class=extract>Reverse proxy vs forward proxy&nbsp;</FONT><A class=heading-anchor href="https://ngrok.com/blog-post/reverse-proxy-vs-api-gateway#reverse-proxy-vs-forward-proxy"></A></SPAN></H3></DIV>
<P><FONT class=extract>A <EM>reverse</EM> <EM>proxy</EM> acts as an intermediary between clients and backend web services, just like forward proxies. However, reverse proxies operate on the server side, while forward proxies serve to protect clients.&nbsp;</FONT></P>
<P><FONT class=extract>Simply put, a forward proxy server resides in the client&#8217;s network, intercepts client requests, and applies policies to the requests before forwarding them to their destinations.</FONT></P>
<P><FONT class=extract>A reverse proxy server, on the other hand, sits in front of backend web services, intercepts client requests, and applies policies to the requests before forwarding them to the appropriate backend services.&nbsp;</FONT></P>
<P><FONT class=extract>A reverse proxy represents the server rather than the client. This configuration optimizes workload distribution, improves security, and uses caching to boost performance.&nbsp;</FONT></P><FIGURE class="w-richtext-align-fullwidth w-richtext-figure-type-image">
<DIV><FONT class=extract><IMG alt="" src="https://cdn.prod.website-files.com/63ed707844acb1ccf1ccb700/66a2d1d22a3d49db25bc32d9_66200ead52d44072bcfe8726_blog-reverse-proxy-vs_diagram-reverse-proxy%2520(1).png" loading="lazy"></FONT></DIV></FIGURE>
<DIV class=heading-anchor-wrapper>
<H3 id=why-would-you-use-a-reverse-proxy><SPAN class=heading-anchor-content><FONT class=extract>Why would you use a reverse proxy?</FONT><A class=heading-anchor href="https://ngrok.com/blog-post/reverse-proxy-vs-api-gateway#why-would-you-use-a-reverse-proxy"></A></SPAN></H3></DIV>
<P><FONT class=extract>A reverse proxy has an active role in safeguarding and optimizing website performance in the following ways:&nbsp;</FONT></P>
<UL role=list>
<LI><FONT class=extract>Improves website security by hiding the IP addresses of the backend servers, making it more difficult for potential attackers to launch targeted DDoS attacks. </FONT>
<LI><FONT class=extract>Performs load balancing by efficiently distributing incoming requests across a large number of web servers, ensuring that no single server becomes overloaded. </FONT>
<LI><FONT class=extract>Caches frequently requested static content for a set time, improving response times for subsequent requests for cached content. </FONT>
<LI><FONT class=extract>Performs computationally expensive TLS handshakes, which reduces stress on upstream servers and streamlines operations by limiting the number of reverse proxies to manage TLS handshakes.</FONT></LI></UL>
<DIV class=heading-anchor-wrapper>
<H2 id=what-is-an-api-gateway><SPAN class=heading-anchor-content><FONT class=extract>What is an API gateway?</FONT><A class=heading-anchor href="https://ngrok.com/blog-post/reverse-proxy-vs-api-gateway#what-is-an-api-gateway"></A></SPAN></H2></DIV>
<P><FONT class=extract>An API gateway is a crucial component of a well-structured software architecture. It sits between clients and a collection of backend application services and provides a central entry point for all incoming and outgoing API traffic in a software system.&nbsp;</FONT></P>
<P><FONT class=extract>An API gateway typically provides several vital functions, as outlined below.&nbsp;</FONT></P>
<DIV class=heading-anchor-wrapper>
<H3 id=routing-traffic><SPAN class=heading-anchor-content><FONT class=extract>Routing traffic</FONT><A class=heading-anchor href="https://ngrok.com/blog-post/reverse-proxy-vs-api-gateway#routing-traffic"></A></SPAN></H3></DIV>
<P><FONT class=extract>An API gateway excels at routing traffic and directing incoming requests from applications, devices, and other clients to the appropriate backend services or microservices. API gateways act as traffic controllers for incoming requests, appropriately examining and directing each request to its destination. An API gateway often routes based on criteria such as the requested resource's path, the HTTP method (e.g., GET, POST, PUT, DELETE), or custom headers. For instance, in a cloud-based storage service, an API gateway efficiently routes file upload requests to servers responsible for storage and file download requests to servers designed for retrieval, ensuring optimal performance.&nbsp;</FONT></P>
<DIV class=heading-anchor-wrapper>
<H3 id=rate-limiting><SPAN class=heading-anchor-content><FONT class=extract>Rate limiting</FONT><A class=heading-anchor href="https://ngrok.com/blog-post/reverse-proxy-vs-api-gateway#rate-limiting"></A></SPAN></H3></DIV>
<P><FONT class=extract>API gateways can employ strategies for controlling the number of requests a client can make to an API within a specific time frame, enforcing </FONT><A href="https://ngrok.com/blog-post/new-feature-rate-limiting"><FONT class=extract>rate limits</FONT></A><FONT class=extract> to prevent abuse, protecting backend resources, and ensuring fair usage.&nbsp;</FONT></P>
<P><FONT class=extract>Furthermore, an API gateway may delay responses to clients that have exceeded defined rate limits while prioritizing responses to clients that remain within the limits. Slower response times effectively reduce the number of requests from clients who have exceeded the rate limits. With rate limiting, increased traffic won&#8217;t disrupt the system&#8217;s overall performance.&nbsp;</FONT></P>
<DIV class=heading-anchor-wrapper>
<H3 id=authentication-and-authorization><SPAN class=heading-anchor-content><FONT class=extract>Authentication and authorization</FONT><A class=heading-anchor href="https://ngrok.com/blog-post/reverse-proxy-vs-api-gateway#authentication-and-authorization"></A></SPAN></H3></DIV>
<P><FONT class=extract>Moreover, an API gateway enhances security by handling </FONT><A href="https://ngrok.com/blog-post/add-auth0-authentication-and-authorization-to-ngrok-traffic"><FONT class=extract>authentication and authorization</FONT></A><FONT class=extract> and protecting against common web threats.&nbsp;</FONT></P>
<P><FONT class=extract>For example, API gateways handle authentication by validating credentials provided by the client, including API keys, </FONT><A href="https://ngrok.com/blog-post/new-feature-jwt-validation"><FONT class=extract>JWT tokens</FONT></A><FONT class=extract>, or other authentication mechanisms. When logging into an email account, the API gateway verifies the username and password before granting access. Incorrect credentials result in denied access.&nbsp;</FONT></P>
<P><FONT class=extract>Additionally, API gateways enforce authorization rules to ensure clients only access permitted resources and perform allowed actions. For example, in a content management system, only administrators may create, edit, or delete content, while regular users can only view and comment.&nbsp;</FONT></P><FIGURE class="w-richtext-align-fullwidth w-richtext-figure-type-image">
<DIV><FONT class=extract><IMG alt="" src="https://cdn.prod.website-files.com/63ed707844acb1ccf1ccb700/662002d6496cb839e4d2f6f0_HdniMQbZ4U6TT_kv7JUvWijwbmdI40vRcyrSottfZD3th1ntZCfeh7dd8FHrZkhXWWFYHRYaCfHeJ5hRRyYveJFvYfpev6WcIFQqEOS_d-mpO3VLOQFGF12ng5LaITI2Z10Ghy9Mde6SznMXRvyWPMY.png" loading="lazy"></FONT></DIV></FIGURE>
<DIV class=heading-anchor-wrapper>
<H3 id=load-balancing><SPAN class=heading-anchor-content><FONT class=extract>Load balancing</FONT><A class=heading-anchor href="https://ngrok.com/blog-post/reverse-proxy-vs-api-gateway#load-balancing"></A></SPAN></H3></DIV>
<P><FONT class=extract>Finally, API gateways manage scalability by load-balancing requests so backend servers don&#8217;t become overloaded. API gateways distribute incoming requests uniformly among several backend servers. This distribution prevents any single server from becoming a bottleneck, allowing the system to scale horizontally as traffic increases. This contribution ensures the scalability and optimal performance of your APIs.&nbsp;</FONT></P>
<DIV class=heading-anchor-wrapper>
<H3 id=protocol-translation><SPAN class=heading-anchor-content><FONT class=extract>Protocol translation</FONT><A class=heading-anchor href="https://ngrok.com/blog-post/reverse-proxy-vs-api-gateway#protocol-translation"></A></SPAN></H3></DIV>
<P><FONT class=extract>API gateways can translate between protocols such as REST and SOAP and convert between data formats like JSON and XML. For example, an API gateway can receive a request from a REST-based client and transform it to XML before sending it to a SOAP-based backend service and vice versa. This protocol translation facilitates integration and interoperability between heterogeneous systems, especially with legacy systems that use older formats and protocols.</FONT></P><FIGURE class="w-richtext-align-fullwidth w-richtext-figure-type-image">
<DIV><FONT class=extract><IMG alt="" src="https://cdn.prod.website-files.com/63ed707844acb1ccf1ccb700/66a2d1d22a3d49db25bc32e2_66200ebd3dfb9d7e644d895f_blog-reverse-proxy-vs_diagram-api-gw%2520(1).png" loading="lazy"></FONT></DIV></FIGURE>
<DIV class=heading-anchor-wrapper>
<H3 id=api-gateway-workflow><SPAN class=heading-anchor-content><FONT class=extract>API gateway workflow</FONT><A class=heading-anchor href="https://ngrok.com/blog-post/reverse-proxy-vs-api-gateway#api-gateway-workflow"></A></SPAN></H3></DIV>
<P><FONT class=extract>Let's break down the typical flow of a client request as it moves through an API gateway to reach a backend service. This process ensures a secure and efficient interaction between clients and backend services.&nbsp;</FONT></P>
<OL role=list>
<LI><FONT class=extract><STRONG>Client request initiation</STRONG>: The client sends a request to an API gateway, typically using HTTP-based methods like REST, GraphQL, etc. </FONT>
<LI><FONT class=extract><STRONG>HTTP request validation</STRONG>: The API gateway validates the client&#8217;s request. </FONT>
<LI><FONT class=extract><STRONG>Security checks</STRONG>: The API gateway examines the IP address and HTTP headers, cross-referencing them with <EM>allow</EM> and <EM>deny</EM> lists. </FONT>
<LI><FONT class=extract><STRONG>Authentication and authorization</STRONG>: The API gateway forwards the request to an identity provider (IdP) for authentication and authorization. This process involves receiving an authenticated session from the provider that outlines the scope of permissible actions for the request. </FONT>
<LI><FONT class=extract><STRONG>Rate limit verification</STRONG>: The API gateway applies rate limit checks and rejects the request if the client has exceeded a rate limit.&nbsp; </FONT>
<LI><FONT class=extract><STRONG>Backend service location</STRONG>: The API gateway uses a service discovery component to locate a suitable backend service by matching paths. </FONT>
<LI><FONT class=extract><STRONG>Request transformation</STRONG>: If necessary, the API gateway transforms the request into the appropriate protocol.&nbsp; </FONT>
<LI><FONT class=extract><STRONG>Request forwarding: </STRONG>The API gateway sends the request to the backend service if all previous checks are successful. </FONT>
<LI><FONT class=extract><STRONG>Response handling</STRONG>: The API gateway receives the response from the backend service.&nbsp; </FONT>
<LI><FONT class=extract><STRONG>Response translation: </STRONG>The API gateway converts the response to the public-facing protocol. </FONT>
<LI><FONT class=extract><STRONG>Response forwarding:</STRONG> The API gateway returns the response to the client.</FONT></LI></OL>
<DIV class=heading-anchor-wrapper>
<H2 id=whats-the-difference-between-a-reverse-proxy-and-an-api-gateway><SPAN class=heading-anchor-content><FONT class=extract>What&#8217;s the difference between a reverse proxy and an API gateway?</FONT><A class=heading-anchor href="https://ngrok.com/blog-post/reverse-proxy-vs-api-gateway#whats-the-difference-between-a-reverse-proxy-and-an-api-gateway"></A></SPAN></H2></DIV>
<P><FONT class=extract>Navigating between API gateways and reverse proxies can be confusing because there is some overlap in features. In fact, API gateways are technically a specialized type of reverse proxy. However, an API gateway is a distinct tool designed for different roles than a pure reverse proxy.&nbsp;</FONT></P>
<P><FONT class=extract>Let's investigate the difference between an API gateway and a reverse proxy.&nbsp;</FONT></P>
<P><FONT class=extract>An API gateway manages API requests and serves as an entry point for clients. It offers various API management functionalities&#8212;including routing, security, load balancing, authentication, authorization, rate limiting, and other API-specific tasks. It&#8217;s ideal for exposing and managing APIs to external clients, including third-party developers, mobile apps, and web applications.&nbsp;</FONT></P>
<P><FONT class=extract>A reverse proxy, on the other hand, acts as an intermediary between clients and servers, forwarding client requests to appropriate backend servers and returning responses to clients. It primarily focuses on load balancing, caching, TLS termination, and shielding backend servers from direct exposure to the internet. It&#8217;s commonly used for web applications, websites, and internal services, especially where the objective is to distribute client requests among multiple backend servers.&nbsp;</FONT></P>
<DIV class=heading-anchor-wrapper>
<H2 id=choosing-between-a-reverse-proxy-and-an-api-gateway><SPAN class=heading-anchor-content><FONT class=extract>Choosing between a reverse proxy and an API gateway</FONT><A class=heading-anchor href="https://ngrok.com/blog-post/reverse-proxy-vs-api-gateway#choosing-between-a-reverse-proxy-and-an-api-gateway"></A></SPAN></H2></DIV>
<P><FONT class=extract>Now, when to use each one? The choice depends on your specific use case and requirements. Go for an API gateway when you need to:&nbsp;</FONT></P>
<UL role=list>
<LI><FONT class=extract>Expose and manage APIs for external clients. </FONT>
<LI><FONT class=extract>Implement API-specific features such as authentication, authorization, rate limiting, and API documentation. </FONT>
<LI><FONT class=extract>Simplify communication between microservices and external clients in a microservices architecture. For instance, if you're developing a mobile banking app connecting to various financial services, an API gateway can efficiently manage requests to services like account balances, transactions, and payments, ensuring security and control.</FONT></LI></UL>
<P><FONT class=extract>Conversely, choose a reverse proxy to handle tasks like load balancing, TLS offloading, and caching in web applications and websites. For example, in a high-traffic e-commerce site, a reverse proxy can distribute user requests among multiple servers, enhancing load handling efficiency, improving performance, and simplifying server configurations.&nbsp;</FONT></P>
<P><FONT class=extract>Sometimes, the choice is not straightforward, and organizations often use API gateways and reverse proxies in tandem. For example, you might use a reverse proxy to terminate TLS before forwarding requests to an API gateway. On the other hand, an API gateway may forward requests to other reverse proxies that service the actual API endpoints.</FONT>