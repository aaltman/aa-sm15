<B>: </B><SPAN class=section-number style="BOX-SIZING: border-box">3.2.7.1.<SPAN>&nbsp;</SPAN></SPAN>Memory Fence Interference<A title="Permalink to this headline" class=headerlink style="BOX-SIZING: border-box; CURSOR: pointer; TEXT-DECORATION: none; COLOR: ; FONT: 14px/1 FontAwesome; MARGIN-LEFT: 0.5em; DISPLAY: inline-block; text-rendering: auto; -webkit-font-smoothing: antialiased; opacity: 0" href="https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#memory-fence-interference">&#61633;</A>
<H4></H4>
<P style="BOX-SIZING: border-box; COLOR: ; MARGIN: 15px 5px 15px 0px">Some CUDA applications may see degraded performance due to memory fence/flush operations waiting on more transactions than those necessitated by the CUDA memory consistency model.</P>
<DIV class=wy-table-responsive style="BOX-SIZING: border-box; OVERFLOW: auto; MARGIN-BOTTOM: 24px; MAX-WIDTH: 100%">
<TABLE class="table-no-stripes docutils align-default" style="BOX-SIZING: border-box; MARGIN-BOTTOM: 24px; BORDER-TOP: 1px solid; BORDER-RIGHT: 1px solid; BORDER-COLLAPSE: collapse; BORDER-BOTTOM: 1px solid; EMPTY-CELLS: show; BORDER-SPACING: 0px; BORDER-LEFT: 1px solid; border-image: initial">
<COLGROUP style="BOX-SIZING: border-box">
<COL style="BOX-SIZING: border-box; WIDTH: 509px">
<COL style="BOX-SIZING: border-box; WIDTH: 174px">
<COL style="BOX-SIZING: border-box; WIDTH: 174px"></COLGROUP>
<TBODY style="BOX-SIZING: border-box">
<TR class=row-odd style="BOX-SIZING: border-box">
<TD style="BOX-SIZING: border-box; OVERFLOW: visible; VERTICAL-ALIGN: top; WHITE-SPACE: normal !important; BORDER-BOTTOM: 1px solid; PADDING-BOTTOM: 8px; PADDING-TOP: 8px; PADDING-LEFT: 16px; BORDER-LEFT: 1px solid; MARGIN: 0px; PADDING-RIGHT: 16px">
<DIV class="highlight-c++ notranslate" style="BOX-SIZING: border-box; BORDER-TOP: rgb(225,228,229) 1px solid; BORDER-RIGHT: rgb(225,228,229) 1px solid; OVERFLOW-X: auto; BORDER-BOTTOM: rgb(225,228,229) 1px solid; BORDER-LEFT: rgb(225,228,229) 1px solid; MARGIN: 1px 0px 24px">
<DIV class=highlight style="BOX-SIZING: border-box; BORDER-TOP: medium none; BORDER-RIGHT: medium none; BACKGROUND: rgb(248,248,248); OVERFLOW-X: auto; BORDER-BOTTOM: medium none; POSITION: relative; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; BORDER-LEFT: medium none; MARGIN: 0px; PADDING-RIGHT: 0px"><PRE id=codecell19 style="BOX-SIZING: border-box; FONT-SIZE: 12px; OVERFLOW: auto; FONT-FAMILY: var(--nv-font-face-mono); WHITE-SPACE: pre; PADDING-BOTTOM: 12px; PADDING-TOP: 12px; PADDING-LEFT: 12px; MARGIN: 0px; DISPLAY: block; LINE-HEIGHT: 1.4; PADDING-RIGHT: 12px"><SPAN style="BOX-SIZING: border-box"></SPAN><SPAN class=n style="BOX-SIZING: border-box">__managed__</SPAN><SPAN class=w style="BOX-SIZING: border-box; COLOR: rgb(187,187,187)"> </SPAN><SPAN class=kt style="BOX-SIZING: border-box; COLOR: rgb(176,0,64)">int</SPAN><SPAN class=w style="BOX-SIZING: border-box; COLOR: rgb(187,187,187)"> </SPAN><SPAN class=n style="BOX-SIZING: border-box">x</SPAN><SPAN class=w style="BOX-SIZING: border-box; COLOR: rgb(187,187,187)"> </SPAN><SPAN class=o style="BOX-SIZING: border-box; COLOR: rgb(102,102,102)">=</SPAN><SPAN class=w style="BOX-SIZING: border-box; COLOR: rgb(187,187,187)"> </SPAN><SPAN class=mi style="BOX-SIZING: border-box; COLOR: rgb(102,102,102)">0</SPAN><SPAN class=p style="BOX-SIZING: border-box">;</SPAN><SPAN class=w style="BOX-SIZING: border-box; COLOR: rgb(187,187,187)"></SPAN>
<SPAN class=n style="BOX-SIZING: border-box">__device__</SPAN><SPAN class=w style="BOX-SIZING: border-box; COLOR: rgb(187,187,187)">  </SPAN><SPAN class=n style="BOX-SIZING: border-box">cuda</SPAN><SPAN class=o style="BOX-SIZING: border-box; COLOR: rgb(102,102,102)">::</SPAN><SPAN class=n style="BOX-SIZING: border-box">atomic</SPAN><SPAN class=o style="BOX-SIZING: border-box; COLOR: rgb(102,102,102)">&lt;</SPAN><SPAN class=kt style="BOX-SIZING: border-box; COLOR: rgb(176,0,64)">int</SPAN><SPAN class=p style="BOX-SIZING: border-box">,</SPAN><SPAN class=w style="BOX-SIZING: border-box; COLOR: rgb(187,187,187)"> </SPAN><SPAN class=n style="BOX-SIZING: border-box">cuda</SPAN><SPAN class=o style="BOX-SIZING: border-box; COLOR: rgb(102,102,102)">::</SPAN><SPAN class=n style="BOX-SIZING: border-box">thread_scope_device</SPAN><SPAN class=o style="BOX-SIZING: border-box; COLOR: rgb(102,102,102)">&gt;</SPAN><SPAN class=w style="BOX-SIZING: border-box; COLOR: rgb(187,187,187)"> </SPAN><SPAN class=n style="BOX-SIZING: border-box">a</SPAN><SPAN class=p style="BOX-SIZING: border-box">(</SPAN><SPAN class=mi style="BOX-SIZING: border-box; COLOR: rgb(102,102,102)">0</SPAN><SPAN class=p style="BOX-SIZING: border-box">);</SPAN><SPAN class=w style="BOX-SIZING: border-box; COLOR: rgb(187,187,187)"></SPAN>
<SPAN class=n style="BOX-SIZING: border-box">__managed__</SPAN><SPAN class=w style="BOX-SIZING: border-box; COLOR: rgb(187,187,187)"> </SPAN><SPAN class=n style="BOX-SIZING: border-box">cuda</SPAN><SPAN class=o style="BOX-SIZING: border-box; COLOR: rgb(102,102,102)">::</SPAN><SPAN class=n style="BOX-SIZING: border-box">atomic</SPAN><SPAN class=o style="BOX-SIZING: border-box; COLOR: rgb(102,102,102)">&lt;</SPAN><SPAN class=kt style="BOX-SIZING: border-box; COLOR: rgb(176,0,64)">int</SPAN><SPAN class=p style="BOX-SIZING: border-box">,</SPAN><SPAN class=w style="BOX-SIZING: border-box; COLOR: rgb(187,187,187)"> </SPAN><SPAN class=n style="BOX-SIZING: border-box">cuda</SPAN><SPAN class=o style="BOX-SIZING: border-box; COLOR: rgb(102,102,102)">::</SPAN><SPAN class=n style="BOX-SIZING: border-box">thread_scope_system</SPAN><SPAN class=o style="BOX-SIZING: border-box; COLOR: rgb(102,102,102)">&gt;</SPAN><SPAN class=w style="BOX-SIZING: border-box; COLOR: rgb(187,187,187)"> </SPAN><SPAN class=n style="BOX-SIZING: border-box">b</SPAN><SPAN class=p style="BOX-SIZING: border-box">(</SPAN><SPAN class=mi style="BOX-SIZING: border-box; COLOR: rgb(102,102,102)">0</SPAN><SPAN class=p style="BOX-SIZING: border-box">);</SPAN><SPAN class=w style="BOX-SIZING: border-box; COLOR: rgb(187,187,187)"></SPAN>
</PRE></DIV></DIV></TD>
<TD style="BOX-SIZING: border-box; OVERFLOW: visible; VERTICAL-ALIGN: top; WHITE-SPACE: normal !important; BORDER-BOTTOM: 1px solid; PADDING-BOTTOM: 8px; PADDING-TOP: 8px; PADDING-LEFT: 16px; BORDER-LEFT: 1px solid; MARGIN: 0px; PADDING-RIGHT: 16px"></TD>
<TD style="BOX-SIZING: border-box; OVERFLOW: visible; VERTICAL-ALIGN: top; WHITE-SPACE: normal !important; BORDER-BOTTOM: 1px solid; PADDING-BOTTOM: 8px; PADDING-TOP: 8px; PADDING-LEFT: 16px; BORDER-LEFT: 1px solid; MARGIN: 0px; PADDING-RIGHT: 16px"></TD></TR>
<TR class=row-even style="BOX-SIZING: border-box">
<TD style="BOX-SIZING: border-box; OVERFLOW: visible; VERTICAL-ALIGN: top; WHITE-SPACE: normal !important; BORDER-BOTTOM: 0px solid; PADDING-BOTTOM: 8px; PADDING-TOP: 8px; PADDING-LEFT: 16px; BORDER-LEFT: 1px solid; MARGIN: 0px; PADDING-RIGHT: 16px; BACKGROUND-COLOR: transparent">
<P style="BOX-SIZING: border-box; COLOR: ; MARGIN: 0px 5px 0px 0px">Thread 1 (SM)</P>
<DIV class="highlight-c++ notranslate" style="BOX-SIZING: border-box; BORDER-TOP: rgb(225,228,229) 1px solid; BORDER-RIGHT: rgb(225,228,229) 1px solid; OVERFLOW-X: auto; BORDER-BOTTOM: rgb(225,228,229) 1px solid; BORDER-LEFT: rgb(225,228,229) 1px solid; MARGIN: 1px 0px 24px">
<DIV class=highlight style="BOX-SIZING: border-box; BORDER-TOP: medium none; BORDER-RIGHT: medium none; BACKGROUND: rgb(248,248,248); OVERFLOW-X: auto; BORDER-BOTTOM: medium none; POSITION: relative; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; BORDER-LEFT: medium none; MARGIN: 0px; PADDING-RIGHT: 0px"><PRE id=codecell20 style="BOX-SIZING: border-box; FONT-SIZE: 12px; OVERFLOW: auto; FONT-FAMILY: var(--nv-font-face-mono); WHITE-SPACE: pre; PADDING-BOTTOM: 12px; PADDING-TOP: 12px; PADDING-LEFT: 12px; MARGIN: 0px; DISPLAY: block; LINE-HEIGHT: 1.4; PADDING-RIGHT: 12px"><SPAN style="BOX-SIZING: border-box"></SPAN><SPAN class=n style="BOX-SIZING: border-box">x</SPAN><SPAN class=w style="BOX-SIZING: border-box; COLOR: rgb(187,187,187)"> </SPAN><SPAN class=o style="BOX-SIZING: border-box; COLOR: rgb(102,102,102)">=</SPAN><SPAN class=w style="BOX-SIZING: border-box; COLOR: rgb(187,187,187)"> </SPAN><SPAN class=mi style="BOX-SIZING: border-box; COLOR: rgb(102,102,102)">1</SPAN><SPAN class=p style="BOX-SIZING: border-box">;</SPAN><SPAN class=w style="BOX-SIZING: border-box; COLOR: rgb(187,187,187)"></SPAN>
<SPAN class=n style="BOX-SIZING: border-box">a</SPAN><SPAN class=w style="BOX-SIZING: border-box; COLOR: rgb(187,187,187)"> </SPAN><SPAN class=o style="BOX-SIZING: border-box; COLOR: rgb(102,102,102)">=</SPAN><SPAN class=w style="BOX-SIZING: border-box; COLOR: rgb(187,187,187)"> </SPAN><SPAN class=mi style="BOX-SIZING: border-box; COLOR: rgb(102,102,102)">1</SPAN><SPAN class=p style="BOX-SIZING: border-box">;</SPAN><SPAN class=w style="BOX-SIZING: border-box; COLOR: rgb(187,187,187)"></SPAN>
</PRE></DIV></DIV></TD>
<TD style="BOX-SIZING: border-box; OVERFLOW: visible; VERTICAL-ALIGN: top; WHITE-SPACE: normal !important; BORDER-BOTTOM: 0px solid; PADDING-BOTTOM: 8px; PADDING-TOP: 8px; PADDING-LEFT: 16px; BORDER-LEFT: 1px solid; MARGIN: 0px; PADDING-RIGHT: 16px; BACKGROUND-COLOR: transparent">
<P style="BOX-SIZING: border-box; COLOR: ; MARGIN: 0px 5px 0px 0px">Thread 2 (SM)</P>
<DIV class="highlight-c++ notranslate" style="BOX-SIZING: border-box; BORDER-TOP: rgb(225,228,229) 1px solid; BORDER-RIGHT: rgb(225,228,229) 1px solid; OVERFLOW-X: auto; BORDER-BOTTOM: rgb(225,228,229) 1px solid; BORDER-LEFT: rgb(225,228,229) 1px solid; MARGIN: 1px 0px 24px">
<DIV class=highlight style="BOX-SIZING: border-box; BORDER-TOP: medium none; BORDER-RIGHT: medium none; BACKGROUND: rgb(248,248,248); OVERFLOW-X: auto; BORDER-BOTTOM: medium none; POSITION: relative; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; BORDER-LEFT: medium none; MARGIN: 0px; PADDING-RIGHT: 0px"><PRE id=codecell21 style="BOX-SIZING: border-box; FONT-SIZE: 12px; OVERFLOW: auto; FONT-FAMILY: var(--nv-font-face-mono); WHITE-SPACE: pre; PADDING-BOTTOM: 12px; PADDING-TOP: 12px; PADDING-LEFT: 12px; MARGIN: 0px; DISPLAY: block; LINE-HEIGHT: 1.4; PADDING-RIGHT: 12px"><SPAN style="BOX-SIZING: border-box"></SPAN><SPAN class=k style="BOX-SIZING: border-box; FONT-WEIGHT: bold; COLOR: rgb(0,128,0)">while</SPAN><SPAN class=w style="BOX-SIZING: border-box; COLOR: rgb(187,187,187)"> </SPAN><SPAN class=p style="BOX-SIZING: border-box">(</SPAN><SPAN class=n style="BOX-SIZING: border-box">a</SPAN><SPAN class=w style="BOX-SIZING: border-box; COLOR: rgb(187,187,187)"> </SPAN><SPAN class=o style="BOX-SIZING: border-box; COLOR: rgb(102,102,102)">!=</SPAN><SPAN class=w style="BOX-SIZING: border-box; COLOR: rgb(187,187,187)"> </SPAN><SPAN class=mi style="BOX-SIZING: border-box; COLOR: rgb(102,102,102)">1</SPAN><SPAN class=p style="BOX-SIZING: border-box">)</SPAN><SPAN class=w style="BOX-SIZING: border-box; COLOR: rgb(187,187,187)"> </SPAN><SPAN class=p style="BOX-SIZING: border-box">;</SPAN><SPAN class=w style="BOX-SIZING: border-box; COLOR: rgb(187,187,187)"></SPAN>
<SPAN class=n style="BOX-SIZING: border-box">assert</SPAN><SPAN class=p style="BOX-SIZING: border-box">(</SPAN><SPAN class=n style="BOX-SIZING: border-box">x</SPAN><SPAN class=w style="BOX-SIZING: border-box; COLOR: rgb(187,187,187)"> </SPAN><SPAN class=o style="BOX-SIZING: border-box; COLOR: rgb(102,102,102)">==</SPAN><SPAN class=w style="BOX-SIZING: border-box; COLOR: rgb(187,187,187)"> </SPAN><SPAN class=mi style="BOX-SIZING: border-box; COLOR: rgb(102,102,102)">1</SPAN><SPAN class=p style="BOX-SIZING: border-box">);</SPAN><SPAN class=w style="BOX-SIZING: border-box; COLOR: rgb(187,187,187)"></SPAN>
<SPAN class=n style="BOX-SIZING: border-box">b</SPAN><SPAN class=w style="BOX-SIZING: border-box; COLOR: rgb(187,187,187)"> </SPAN><SPAN class=o style="BOX-SIZING: border-box; COLOR: rgb(102,102,102)">=</SPAN><SPAN class=w style="BOX-SIZING: border-box; COLOR: rgb(187,187,187)"> </SPAN><SPAN class=mi style="BOX-SIZING: border-box; COLOR: rgb(102,102,102)">1</SPAN><SPAN class=p style="BOX-SIZING: border-box">;</SPAN><SPAN class=w style="BOX-SIZING: border-box; COLOR: rgb(187,187,187)"></SPAN>
</PRE></DIV></DIV></TD>
<TD style="BOX-SIZING: border-box; OVERFLOW: visible; VERTICAL-ALIGN: top; WHITE-SPACE: normal !important; BORDER-BOTTOM: 0px solid; PADDING-BOTTOM: 8px; PADDING-TOP: 8px; PADDING-LEFT: 16px; BORDER-LEFT: 1px solid; MARGIN: 0px; PADDING-RIGHT: 16px; BACKGROUND-COLOR: transparent">
<P style="BOX-SIZING: border-box; COLOR: ; MARGIN: 0px 5px 0px 0px">Thread 3 (CPU)</P>
<DIV class="highlight-c++ notranslate" style="BOX-SIZING: border-box; BORDER-TOP: rgb(225,228,229) 1px solid; BORDER-RIGHT: rgb(225,228,229) 1px solid; OVERFLOW-X: auto; BORDER-BOTTOM: rgb(225,228,229) 1px solid; BORDER-LEFT: rgb(225,228,229) 1px solid; MARGIN: 1px 0px 24px">
<DIV class=highlight style="BOX-SIZING: border-box; BORDER-TOP: medium none; BORDER-RIGHT: medium none; BACKGROUND: rgb(248,248,248); OVERFLOW-X: auto; BORDER-BOTTOM: medium none; POSITION: relative; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; BORDER-LEFT: medium none; MARGIN: 0px; PADDING-RIGHT: 0px"><PRE id=codecell22 style="BOX-SIZING: border-box; FONT-SIZE: 12px; OVERFLOW: auto; FONT-FAMILY: var(--nv-font-face-mono); WHITE-SPACE: pre; PADDING-BOTTOM: 12px; PADDING-TOP: 12px; PADDING-LEFT: 12px; MARGIN: 0px; DISPLAY: block; LINE-HEIGHT: 1.4; PADDING-RIGHT: 12px"><SPAN style="BOX-SIZING: border-box"></SPAN><SPAN class=k style="BOX-SIZING: border-box; FONT-WEIGHT: bold; COLOR: rgb(0,128,0)">while</SPAN><SPAN class=w style="BOX-SIZING: border-box; COLOR: rgb(187,187,187)"> </SPAN><SPAN class=p style="BOX-SIZING: border-box">(</SPAN><SPAN class=n style="BOX-SIZING: border-box">b</SPAN><SPAN class=w style="BOX-SIZING: border-box; COLOR: rgb(187,187,187)"> </SPAN><SPAN class=o style="BOX-SIZING: border-box; COLOR: rgb(102,102,102)">!=</SPAN><SPAN class=w style="BOX-SIZING: border-box; COLOR: rgb(187,187,187)"> </SPAN><SPAN class=mi style="BOX-SIZING: border-box; COLOR: rgb(102,102,102)">1</SPAN><SPAN class=p style="BOX-SIZING: border-box">)</SPAN><SPAN class=w style="BOX-SIZING: border-box; COLOR: rgb(187,187,187)"> </SPAN><SPAN class=p style="BOX-SIZING: border-box">;</SPAN><SPAN class=w style="BOX-SIZING: border-box; COLOR: rgb(187,187,187)"></SPAN>
<SPAN class=n style="BOX-SIZING: border-box">assert</SPAN><SPAN class=p style="BOX-SIZING: border-box">(</SPAN><SPAN class=n style="BOX-SIZING: border-box">x</SPAN><SPAN class=w style="BOX-SIZING: border-box; COLOR: rgb(187,187,187)"> </SPAN><SPAN class=o style="BOX-SIZING: border-box; COLOR: rgb(102,102,102)">==</SPAN><SPAN class=w style="BOX-SIZING: border-box; COLOR: rgb(187,187,187)"> </SPAN><SPAN class=mi style="BOX-SIZING: border-box; COLOR: rgb(102,102,102)">1</SPAN><SPAN class=p style="BOX-SIZING: border-box">);</SPAN><SPAN class=w style="BOX-SIZING: border-box; COLOR: rgb(187,187,187)"></SPAN>
</PRE></DIV></DIV></TD></TR></TBODY></TABLE></DIV>
<P style="BOX-SIZING: border-box; COLOR: ; MARGIN: 15px 5px 15px 0px">Consider the example above. The CUDA memory consistency model guarantees that the asserted condition will be true, so the write to<SPAN>&nbsp;</SPAN><CODE class="docutils literal notranslate" style="BOX-SIZING: border-box; FONT-SIZE: 12px; MAX-WIDTH: 100%; BORDER-TOP: rgb(225,228,229) 1px solid; FONT-FAMILY: var(--nv-font-face-mono); BORDER-RIGHT: rgb(225,228,229) 1px solid; BACKGROUND: rgb(255,255,255); WHITE-SPACE: normal; OVERFLOW-X: auto; BORDER-BOTTOM: rgb(225,228,229) 1px solid; COLOR: rgb(231,76,60); PADDING-BOTTOM: 2px; PADDING-TOP: 2px; PADDING-LEFT: 5px; BORDER-LEFT: rgb(225,228,229) 1px solid; PADDING-RIGHT: 5px"><SPAN class=pre style="BOX-SIZING: border-box">x</SPAN></CODE><SPAN>&nbsp;</SPAN>from thread 1 must be visible to thread 3, before the write to<SPAN>&nbsp;</SPAN><CODE class="docutils literal notranslate" style="BOX-SIZING: border-box; FONT-SIZE: 12px; MAX-WIDTH: 100%; BORDER-TOP: rgb(225,228,229) 1px solid; FONT-FAMILY: var(--nv-font-face-mono); BORDER-RIGHT: rgb(225,228,229) 1px solid; BACKGROUND: rgb(255,255,255); WHITE-SPACE: normal; OVERFLOW-X: auto; BORDER-BOTTOM: rgb(225,228,229) 1px solid; COLOR: rgb(231,76,60); PADDING-BOTTOM: 2px; PADDING-TOP: 2px; PADDING-LEFT: 5px; BORDER-LEFT: rgb(225,228,229) 1px solid; PADDING-RIGHT: 5px"><SPAN class=pre style="BOX-SIZING: border-box">b</SPAN></CODE><SPAN>&nbsp;</SPAN>from thread 2.</P>
<P style="BOX-SIZING: border-box; COLOR: ; MARGIN: 15px 5px 15px 0px">The memory ordering provided by the release and acquire of<SPAN>&nbsp;</SPAN><CODE class="docutils literal notranslate" style="BOX-SIZING: border-box; FONT-SIZE: 12px; MAX-WIDTH: 100%; BORDER-TOP: rgb(225,228,229) 1px solid; FONT-FAMILY: var(--nv-font-face-mono); BORDER-RIGHT: rgb(225,228,229) 1px solid; BACKGROUND: rgb(255,255,255); WHITE-SPACE: normal; OVERFLOW-X: auto; BORDER-BOTTOM: rgb(225,228,229) 1px solid; COLOR: rgb(231,76,60); PADDING-BOTTOM: 2px; PADDING-TOP: 2px; PADDING-LEFT: 5px; BORDER-LEFT: rgb(225,228,229) 1px solid; PADDING-RIGHT: 5px"><SPAN class=pre style="BOX-SIZING: border-box">a</SPAN></CODE><SPAN>&nbsp;</SPAN>is only sufficient to make<SPAN>&nbsp;</SPAN><CODE class="docutils literal notranslate" style="BOX-SIZING: border-box; FONT-SIZE: 12px; MAX-WIDTH: 100%; BORDER-TOP: rgb(225,228,229) 1px solid; FONT-FAMILY: var(--nv-font-face-mono); BORDER-RIGHT: rgb(225,228,229) 1px solid; BACKGROUND: rgb(255,255,255); WHITE-SPACE: normal; OVERFLOW-X: auto; BORDER-BOTTOM: rgb(225,228,229) 1px solid; COLOR: rgb(231,76,60); PADDING-BOTTOM: 2px; PADDING-TOP: 2px; PADDING-LEFT: 5px; BORDER-LEFT: rgb(225,228,229) 1px solid; PADDING-RIGHT: 5px"><SPAN class=pre style="BOX-SIZING: border-box">x</SPAN></CODE><SPAN>&nbsp;</SPAN>visible to thread 2, not thread 3, as it is a device-scope operation. The system-scope ordering provided by release and acquire of<SPAN>&nbsp;</SPAN><CODE class="docutils literal notranslate" style="BOX-SIZING: border-box; FONT-SIZE: 12px; MAX-WIDTH: 100%; BORDER-TOP: rgb(225,228,229) 1px solid; FONT-FAMILY: var(--nv-font-face-mono); BORDER-RIGHT: rgb(225,228,229) 1px solid; BACKGROUND: rgb(255,255,255); WHITE-SPACE: normal; OVERFLOW-X: auto; BORDER-BOTTOM: rgb(225,228,229) 1px solid; COLOR: rgb(231,76,60); PADDING-BOTTOM: 2px; PADDING-TOP: 2px; PADDING-LEFT: 5px; BORDER-LEFT: rgb(225,228,229) 1px solid; PADDING-RIGHT: 5px"><SPAN class=pre style="BOX-SIZING: border-box">b</SPAN></CODE>, therefore, needs to ensure not only writes issued from thread 2 itself are visible to thread 3, but also writes from other threads that are visible to thread 2. This is known as cumulativity. As the GPU cannot know at the time of execution which writes have been guaranteed at the source level to be visible and which are visible only by chance timing, it must cast a conservatively wide net for in-flight memory operations.</P>
<P style="BOX-SIZING: border-box; COLOR: ; MARGIN: 15px 5px 15px 0px">This sometimes leads to interference: because the GPU is waiting on memory operations it is not required to at the source level, the fence/flush may take longer than necessary.</P>
<P style="BOX-SIZING: border-box; COLOR: ; MARGIN: 15px 5px 15px 0px">Note that fences may occur explicitly as intrinsics or atomics in code, like in the example, or implicitly to implement<SPAN>&nbsp;</SPAN><EM style="BOX-SIZING: border-box">synchronizes-with</EM><SPAN>&nbsp;</SPAN>relationships at task boundaries.</P>
<P style="BOX-SIZING: border-box; COLOR: ; MARGIN: 15px 5px 15px 0px">A common example is when a kernel is performing computation in local GPU memory, and a parallel kernel (e.g. from NCCL) is performing communications with a peer. Upon completion, the local kernel will implicitly flush its writes to satisfy any<SPAN>&nbsp;</SPAN><EM style="BOX-SIZING: border-box">synchronizes-with</EM><SPAN>&nbsp;</SPAN>relationships to downstream work. This may unnecessarily wait, fully or partially, on slower nvlink or PCIe writes from the communication kernel.</P></SECTION><SECTION id=isolating-traffic-with-domains style="BOX-SIZING: border-box; DISPLAY: block">