<b> : </b><SPAN><SPAN>The Killer Health Check</SPAN></SPAN></H3>
<P><SPAN><SPAN>It is possible to set up automation based on a health check that causes unhealthy instances of your service to be replaced. This makes perfect sense under normal conditions &#8212; where only an occasional instance becomes unhealthy because of some problem with the underlying hardware, perhaps. If an entire service is unhealthy, then replacing instances with new broken instances is not productive. The issue here is not necessarily that the health check signal is wrong &#8212; it&#8217;s that the signal does not unequivocally mean that the issue is an instance-specific fault and that replacement is an appropriate action.</SPAN></SPAN></P>
<P><SPAN><SPAN>In the chaos of a major outage, this kind of automation can increase confusion. Operators may not remember that the &#8216;killer health check&#8217; automation exists &#8212; and then figuring out why the instances they are trying to troubleshoot keep being turned down creates another problem for them.&nbsp;&nbsp;</SPAN></SPAN></P>
<P><SPAN><SPAN>Another unfortunate effect of this kind of automation is that it can replace warmed-up hosts, which have successfully fetched dependencies and configuration and cached useful data, created connection pools, and so on, with brand-new hosts. These new hosts may take some time to be capable of serving at the same rate as the previous hosts. Bringing up new instances can create load on other services, which might have effects elsewhere (for example, in systems that serve configurations to new hosts or are otherwise involved in provisioning).&nbsp;</SPAN></SPAN></P>
<P><SPAN><SPAN>If the destroyed instances were irrecoverably unhealthy, then this may be reasonable. However, if the destroyed instances were reporting themselves unhealthy because one of their dependencies was unavailable, then it is probably not useful: and could cause problems elsewhere, particularly if the work involved in constantly recreating instances causes saturation in systems that might be required in order to upsize other services. This is an example of why it is important to think holistically about health checking and orchestration; and why what makes sense when a small number of instances become unhealthy can be be harmful when many or most instances are unhealthy.</SPAN></SPAN></P>
<DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV>
<DIV class="field-item even">
<DIV class="entity entity-paragraphs-item paragraphs-item-single-column-text view-mode-full view-mode-full--paragraphs_item view-mode-full--paragraphs_item--single_column_text" style="PADDING-BOTTOM: 20px; PADDING-TOP: 20px">
<DIV class=content>
<DIV class="field field-name-field-single-column-text field-type-text-long field-label-hidden">
<DIV class=field-items>
<DIV class="field-item odd">