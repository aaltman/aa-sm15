<b> : </b><SPAN><SPAN>Scaling to Serve Health Checks</SPAN></SPAN></H3>
<P><SPAN>Health checks can often become very<SPAN>&nbsp;</SPAN></SPAN><A style="TEXT-DECORATION: none; COLOR: rgb(3,57,216); BACKGROUND-COLOR: transparent" href="https://lethain.com/healthchecks/" rel=nofollow><SPAN>expensive at scale</SPAN></A><SPAN><SPAN>&nbsp;</SPAN>[4]. This is particularly when the number of clients and servers grows over time - health checking, in its simplest form, scales as a<SPAN>&nbsp;</SPAN></SPAN><SPAN>M</SPAN><SPAN><SPAN>&nbsp;</SPAN>clients x<SPAN>&nbsp;</SPAN></SPAN><SPAN>N</SPAN><SPAN><SPAN>&nbsp;</SPAN>servers problem. It is not unheard of for a double-digit percentage of resource usage for a service to be related to health checking. There are a number of techniques that can be used to mitigate this effect, such as centralizing health checking, caching health checks for a short period, or breaking large systems into smaller subsets.&nbsp;</SPAN></P>
<P>This means that the resource cost of health checking can sometimes distort signals used to determine utilization of a system, and thus, lead to an incorrect decision about whether scaling out is required. This is particularly dangerous as scaling a serving system will not reduce the load imposed by health checking, because this is determined solely by the number of clients performing health checks. In pathological cases, where a majority of load is a result of heath checking, scaling out will not reduce utilization much at all. It is essential to track the percentage of load that is a result of health checking and to maintain this at a reasonable level.</P></DIV></DIV></DIV></DIV></DIV></DIV>
<DIV class="field-item odd">
<DIV class="entity entity-paragraphs-item paragraphs-item-single-column-text view-mode-full view-mode-full--paragraphs_item view-mode-full--paragraphs_item--single_column_text" style="PADDING-BOTTOM: 20px; PADDING-TOP: 20px">
<DIV class=content>
<DIV class="field field-name-field-single-column-sub field-type-text field-label-hidden" style="FONT-SIZE: 40px; FONT-FAMILY: Klavika, sans-serif; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; PADDING-TOP: 20px; MARGIN: 0px; LINE-HEIGHT: 50px">
<DIV class=field-items>
<DIV class="field-item odd">Health checks for bad times as well as good times</DIV></DIV></DIV>
<DIV class="field field-name-field-single-column-text field-type-text-long field-label-hidden">
<DIV class=field-items>
<DIV class="field-item odd">
<P><SPAN>Health checks seem simple, but the systems that make decisions based on health checks have all sorts of subtle properties. Just as town planners need to think about the second-order consequences of street layout in order to build safe and vital urban areas, distributed systems operators need to think about the second-order consequences of health check-driven orchestration behaviors.&nbsp;</SPAN></P>
<P><SPAN>A common theme with orchestration systems that use health checks is that they work well when things are generally stable and you are dealing only with the normal background noise of occasional failures and instance replacement. In these contexts, health checks are very helpful and increase system reliability. However, in larger-scale disturbances, where many instances are unreachable or unhealthy, health checks &#8212; and the behaviors that they trigger in our orchestration systems &#8212; can make things worse.&nbsp;</SPAN></P>
<P>So remember: your orchestration isn&#8217;t just for dealing with errant unhealthy instances. It also needs to work for you in the worst outage you can imagine. At a minimum, you should consider having ready-to-go processes for quickly disabling your health checking, as counterintuitive as that seems.&nbsp;</P>
<P>Just as safety and vibrant local politics are emergent properties of vital city districts, arising from how the components of those districts interact with each other, reliability in a distributed system is an emergent property that is a function of how the entire system works together. When it comes to health checks and orchestration, think about the whole system, not just disconnected parts of it.&nbsp;</P>
<P>&nbsp;</P></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV>