<DIV id=content-header class=column style="BOX-SIZING: border-box; FONT-SIZE: 18px; FONT-FAMILY: Muli, sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(0,0,0); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; MARGIN: 0px 150px; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial">
<DIV class=section>
<H1 id=page-title class=title style="FONT-SIZE: 50px; FONT-FAMILY: Klavika, sans-serif; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; TEXT-ALIGN: center; MARGIN: 30px 0px; LINE-HEIGHT: 60px"><FONT class=extract>Why Health Checks are Like Sidewalks</FONT></H1></DIV></DIV>
<DIV id=content class=column style="FONT-SIZE: 18px; FONT-FAMILY: Muli, sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(0,0,0); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial">
<DIV class=section>
<DIV class="region region-content">
<DIV id=block-system-main class="block block-system main">
<DIV class=content>
<DIV id=node-285703 class="node node-login-online view-mode-full view-mode-full--node view-mode-full--node--login_online clearfix">
<DIV class=content>
<DIV class="group-article-body-wrapper field-group-div" style="BOX-SIZING: border-box; MAX-WIDTH: 1200px; POSITION: relative; PADDING-LEFT: 0px; MARGIN: 0px auto; PADDING-RIGHT: 0px; box-shadow: rgba(0, 0, 0, 0.15) 0px 11px 10px 0px">
<DIV class="field field-name-field-lv2-subtitle field-type-text field-label-hidden" style="BOX-SIZING: border-box; FONT-SIZE: 20px; FONT-FAMILY: Klavika, sans-serif; TEXT-ALIGN: center; MARGIN: 0px 150px">
<DIV class=field-items>
<DIV class="field-item odd"><FONT class=extract>Systems thinking applied to common orchestration pitfalls</FONT></DIV></DIV></DIV>
<DIV class="field field-name-field-lv2-publication-date field-type-datetime field-label-hidden" style="FONT-SIZE: 14px; PADDING-BOTTOM: 10px; TEXT-ALIGN: center; PADDING-TOP: 10px">
<DIV class=field-items>
<DIV class="field-item odd"><SPAN class=date-display-single><FONT class=extract>December 7, 2022</FONT></SPAN></DIV></DIV></DIV>
<DIV class="field field-name-field-lv2-article-type field-type-taxonomy-term-reference field-label-hidden" style="BOX-SIZING: border-box; FONT-SIZE: 14px; TEXT-TRANSFORM: uppercase; FONT-WEIGHT: 800; MARGIN: 0px 150px; DISPLAY: flex; align-items: center; justify-content: center">
<DIV class=field-items>
<DIV class="field-item odd" style="PADDING-LEFT: 10px; PADDING-RIGHT: 10px; flex-shrink: 0"><FONT class=extract>Column</FONT></DIV></DIV></DIV>
<DIV class="field field-label-inline clearfix field-type-text-long field-pseudo-field field-pseudo-field--author-list" style="BOX-SIZING: border-box; FONT-SIZE: 16px; PADDING-BOTTOM: 10px; TEXT-ALIGN: justify; MARGIN: 0px 150px; DISPLAY: flex; justify-content: center; flex-direction: row">
<DIV class=field-label style="FLOAT: left; FONT-WEIGHT: 400"><FONT class=extract>Authors:&nbsp;</FONT></DIV>
<DIV class=field-items style="FLOAT: left"><A title="Laura Nolan" style="TEXT-DECORATION: none; COLOR: rgb(3,57,216); BACKGROUND-COLOR: transparent" href="https://www.usenix.org/publications/loginonline/why-health-check-sidewalk#Laura%20Nolan"><FONT class=extract>Laura Nolan</FONT></A></DIV></DIV>
<DIV class="field field-name-field-lv2-shepherds field-type-user-reference field-label-inline clearfix" style="BOX-SIZING: border-box; FONT-SIZE: 16px; PADDING-BOTTOM: 10px; TEXT-ALIGN: justify; MARGIN: 0px 150px; DISPLAY: flex; justify-content: center; flex-direction: row">
<DIV class=field-label style="FLOAT: left; FONT-WEIGHT: 400"><FONT class=extract>Article shepherded by:&nbsp;</FONT></DIV>
<DIV class=field-items style="FLOAT: left">
<DIV class="field-item odd"><SPAN class=usenix-user-reference-names><FONT class=extract>Rik Farrow</FONT></SPAN></DIV></DIV></DIV>
<DIV class="paragraphs-items paragraphs-items-field-lv2-body paragraphs-items-field-lv2-body-full paragraphs-items-full" style="BOX-SIZING: border-box; BORDER-TOP: rgb(143,143,143) 2px solid; PADDING-BOTTOM: 20px; PADDING-TOP: 20px; MARGIN: 0px 150px">
<DIV class="field field-name-field-lv2-body field-type-paragraphs field-label-hidden">
<DIV class=field-items>
<DIV class="field-item odd">
<DIV class="entity entity-paragraphs-item paragraphs-item-single-column-text view-mode-full view-mode-full--paragraphs_item view-mode-full--paragraphs_item--single_column_text paragraphs-first-text" style="PADDING-BOTTOM: 20px; PADDING-TOP: 20px">
<DIV class=content>
<DIV class="field field-name-field-single-column-text field-type-text-long field-label-hidden">
<DIV class=field-items>
<DIV class="field-item odd">
<P><SPAN><SPAN><FONT class=extract>What could be simpler than a health check endpoint that just returns a HTTP 200 when called? But health checks aren&#8217;t simple at all. Health checks are a critical signal in orchestration systems, and when things go wrong, they can cause havoc. There are systemic patterns that can happen when we use health checking in certain ways, and systems thinking can help us understand some of the pitfalls of health check-driven orchestration.</FONT></SPAN></SPAN></P></DIV></DIV></DIV></DIV></DIV></DIV>
<DIV class="field-item even">
<DIV class="entity entity-paragraphs-item paragraphs-item-single-column-text view-mode-full view-mode-full--paragraphs_item view-mode-full--paragraphs_item--single_column_text" style="PADDING-BOTTOM: 20px; PADDING-TOP: 20px">
<DIV class=content>
<DIV class="field field-name-field-single-column-sub field-type-text field-label-hidden" style="FONT-SIZE: 40px; FONT-FAMILY: Klavika, sans-serif; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; PADDING-TOP: 20px; MARGIN: 0px; LINE-HEIGHT: 50px">
<DIV class=field-items>
<DIV class="field-item odd"><FONT class=extract>A Digression: The City as a System</FONT></DIV></DIV></DIV>
<DIV class="field field-name-field-single-column-text field-type-text-long field-label-hidden">
<DIV class=field-items>
<DIV class="field-item odd">
<P><SPAN><SPAN><FONT class=extract>Consider the humble sidewalk (or, for my fellow European readers, the footpath). Streets that feature local businesses see foot traffic throughout the day &#8212; and well into the evening, if some of those businesses are restaurants or bars. This creates a critical mass of &#8216;eyes on the street&#8217;, which means that those streets are likely to be safer. Residential windows overlooking the street also help to promote safer streets. Conversely, residential-only areas, particularly those that feature sidewalks and spaces that are publicly-accessible but not well-trafficked or overlooked, tend to become unsafe. These are reinforcing phenomena (vicious and virtuous cycles): people are happy to walk around what they feel are safe streets, or to sit on their porches, but not to walk through areas that feel dangerous. The perception of danger thus reduces &#8216;eyes on the street&#8217;, which further increases danger.</FONT></SPAN></SPAN></P></DIV></DIV></DIV></DIV></DIV></DIV>
<DIV class="field-item odd">
<DIV class="entity entity-paragraphs-item paragraphs-item-article-image view-mode-full view-mode-full--paragraphs_item view-mode-full--paragraphs_item--article_image" style="BORDER-BOTTOM: rgb(20,53,147) 3px solid; PADDING-BOTTOM: 20px; PADDING-TOP: 20px">
<DIV class=content>
<DIV class="field field-name-field-article-image field-type-image field-label-hidden">
<DIV class=field-items>
<DIV class="field-item odd"><FONT class=extract><IMG style="MAX-WIDTH: 100%; BORDER-TOP: 0px; HEIGHT: auto; BORDER-RIGHT: 0px; BORDER-BOTTOM: 0px; BORDER-LEFT: 0px" alt="" src="https://www.usenix.org/sites/default/files/styles/article_embedded/public/city_0.png?itok=7SrtCrOA" width=1440 height=873></FONT></DIV></DIV></DIV>
<DIV class="field field-name-field-article-image-caption field-type-text field-label-hidden" style="FONT-SIZE: 14px; FONT-WEIGHT: 600; COLOR: rgb(0,0,0); FONT-STYLE: normal">
<DIV class=field-items>
<DIV class="field-item odd"><FONT class=extract>Figure 1: Factors that influence the perception of safety in urban areas.</FONT></DIV></DIV></DIV></DIV></DIV></DIV>
<DIV class="field-item even">
<DIV class="entity entity-paragraphs-item paragraphs-item-single-column-text view-mode-full view-mode-full--paragraphs_item view-mode-full--paragraphs_item--single_column_text" style="PADDING-BOTTOM: 20px; PADDING-TOP: 20px">
<DIV class=content>
<DIV class="field field-name-field-single-column-text field-type-text-long field-label-hidden">
<DIV class=field-items>
<DIV class="field-item odd">
<P><SPAN><FONT class=extract>Another reinforcing phenomenon: in areas with streets that feel safe to walk on, with a good density of residences mixed with other uses that bring people to the area, you tend to get a lot of small businesses catering to the people using the sidewalks. In areas with local businesses, residents can form a loose web of casual acquaintanceships: talking to the shopkeeper, greeting their neighbor at the coffee kiosk in the local park. In areas that are residential-only, without the intricate web of local businesses, acquaintanceships are harder to form and people are far less likely to know other people who live nearby. As a consequence, older urban areas tend to have robust local politics &#8212; and thus, to be able to effect positive change in their neighborhoods, which can reinforce their status as vibrant districts &#8212; while modern planned districts lack engagement with local politics.&nbsp;</FONT></SPAN></P>
<P><SPAN><FONT class=extract>The physical layout of streets and sidewalks creates public safety and functioning local political organizing. Lose your overlooked sidewalks and your local small businesses and you seriously impair the ability of residents to organize effectively. Nobody planned traditional urban areas to work this way: effective local politics is an emergent property of the system that arises from all these overlapping interactions, as are safe streets. Change the street layout to remove the &#8220;eyes on the street&#8221;, lose the small businesses &#8212; or replace them with a busy, anonymous centralized store &#8212; and the system won&#8217;t work the same way.&nbsp;</FONT></SPAN></P>
<P><SPAN><FONT class=extract>On the surface, it may seem that people can still get from place to place and buy goods; these primary purposes will still be fulfilled, but the secondary effects of street surveillance and forming human networks will be gone. It won&#8217;t be immediately obvious that something has been lost. The city is a complex system, and these emergent properties depend on the structure of that system.&nbsp;</FONT></SPAN></P>
<P><SPAN><FONT class=extract>These examples of systems thinking &#8212; understanding how the structure of the city affects outcomes &#8212; come from Jane Jacobs&#8217;<SPAN>&nbsp;</SPAN></FONT></SPAN><A style="TEXT-DECORATION: none; COLOR: rgb(3,57,216); BACKGROUND-COLOR: transparent" href="https://en.wikipedia.org/wiki/The_Death_and_Life_of_Great_American_Cities" rel=nofollow target=_blank><SPAN><FONT class=extract>The Death and Life of Great American Cities</FONT></SPAN></A><SPAN><FONT class=extract><SPAN>&nbsp;</SPAN>[1]. Jacobs&#8217; book is about urban planning &#8212; in particular, critiquing the tendency of mid-twentieth-century high modernist urban planners to raze functional urban areas and replace them with inward-looking closed &#8216;garden city&#8217; areas. Jacobs&#8217; relentlessly focuses on showing how functional neighborhoods in a city work as systems, with each component of the neighborhood&#8217;s built environment and its people interacting with other components to create areas that work well &#8212; or that do not. Jacobs then contrasts these functional urban systems with recently-built dysfunctional neighborhoods to identify what these newer zones lack. The overall message is that neighborhoods don&#8217;t work because of any single element: they work because of the interactions between the elements.</FONT></SPAN></P></DIV></DIV></DIV></DIV></DIV></DIV>
<DIV class="field-item odd">
<DIV class="entity entity-paragraphs-item paragraphs-item-single-column-text view-mode-full view-mode-full--paragraphs_item view-mode-full--paragraphs_item--single_column_text" style="PADDING-BOTTOM: 20px; PADDING-TOP: 20px">
<DIV class=content>
<DIV class="field field-name-field-single-column-sub field-type-text field-label-hidden" style="FONT-SIZE: 40px; FONT-FAMILY: Klavika, sans-serif; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; PADDING-TOP: 20px; MARGIN: 0px; LINE-HEIGHT: 50px">
<DIV class=field-items>
<DIV class="field-item odd"><FONT class=extract>Health checks: The Foundation of Orchestration</FONT></DIV></DIV></DIV>
<DIV class="field field-name-field-single-column-text field-type-text-long field-label-hidden">
<DIV class=field-items>
<DIV class="field-item odd">
<P><SPAN><FONT class=extract>Like an urban neighborhood, our distributed software systems are complex systems: they consist of many subsystems, each with state, and each able to affect other subsystems in various ways. In distributed systems &#8212; as in a city &#8212; the structure of the system influences outcomes, in ways that can be difficult to predict.&nbsp;</FONT></SPAN></P>
<P><SPAN><FONT class=extract>Distributed computing systems are all unique, just as street layouts are, but they have certain common properties that influence outcomes in ways that we do understand: because we&#8217;ve seen it in other systems that share some of those characteristics. So, while it is a tenet of systems theory that we can&#8217;t fully predict the behavior of a complex system, we can transfer some experiences from system to system, just as planners can from district to district</FONT></SPAN></P>
<P><FONT class=extract>The production systems equivalent of Jacobs&#8217; sidewalk &#8212; the foundation of a well-functioning urban system &#8212; may be the<SPAN>&nbsp;</SPAN></FONT><A style="TEXT-DECORATION: none; COLOR: rgb(3,57,216); BACKGROUND-COLOR: transparent" href="https://john-millikin.com/sre-school/health-checking" rel=nofollow target=_blank><FONT class=extract>health check</FONT></A><FONT class=extract>: sending a request to verify whether a particular target instance is functioning and capable of serving traffic (this might be as simple as an endpoint that always returns a HTTP 200 status code to indicate that the process is running, or a more sophisticated check that takes into account the status of a variety of dependencies or performs an expensive end-to-end computation). There are multiple kinds of health check. Kubernetes defines<SPAN>&nbsp;</SPAN></FONT><A style="TEXT-DECORATION: none; COLOR: rgb(3,57,216); BACKGROUND-COLOR: transparent" href="https://medium.com/devops-mojo/kubernetes-probes-liveness-readiness-startup-overview-introduction-to-probes-types-configure-health-checks-206ff7c24487" rel=nofollow target=_blank><FONT class=extract>three types of health check</FONT></A><FONT class=extract>: startup checks indicate that a container has started successfully; liveness probes indicate that a container is running and not in an irrecoverable state (such as a deadlock); readiness probes indicate that a container can receive traffic.&nbsp;</FONT></P>
<P><FONT class=extract>Just as the sidewalk is the linchpin of a web of uses that have a major influence on safety and political outcomes, the health check operates as the nexus of a set of processes that have a major bearing on system reliability. Health checking is a fundamental part of a broader orchestration problem that includes load balancing, service discovery, alerting, and change management: a very broad swathe of what system operators manage on a daily basis.</FONT></P>
<DIV><FONT class=extract></FONT></DIV></DIV></DIV></DIV></DIV></DIV></DIV>
<DIV class="field-item even">
<DIV class="entity entity-paragraphs-item paragraphs-item-article-image view-mode-full view-mode-full--paragraphs_item view-mode-full--paragraphs_item--article_image" style="BORDER-BOTTOM: rgb(20,53,147) 3px solid; PADDING-BOTTOM: 20px; PADDING-TOP: 20px">
<DIV class=content>
<DIV class="field field-name-field-article-image field-type-image field-label-hidden">
<DIV class=field-items>
<DIV class="field-item odd"><FONT class=extract><IMG style="MAX-WIDTH: 100%; BORDER-TOP: 0px; HEIGHT: auto; BORDER-RIGHT: 0px; BORDER-BOTTOM: 0px; BORDER-LEFT: 0px" alt="" src="https://www.usenix.org/sites/default/files/styles/article_embedded/public/orchestration.png?itok=QGWKuJob" width=1415 height=1370></FONT></DIV></DIV></DIV>
<DIV class="field field-name-field-article-image-caption field-type-text field-label-hidden" style="FONT-SIZE: 14px; FONT-WEIGHT: 600; COLOR: rgb(0,0,0); FONT-STYLE: normal">
<DIV class=field-items>
<DIV class="field-item odd"><FONT class=extract>Figure 2: Service orchestration components.</FONT></DIV></DIV></DIV></DIV></DIV></DIV>
<DIV class="field-item odd">
<DIV class="entity entity-paragraphs-item paragraphs-item-single-column-text view-mode-full view-mode-full--paragraphs_item view-mode-full--paragraphs_item--single_column_text" style="PADDING-BOTTOM: 20px; PADDING-TOP: 20px">
<DIV class=content>
<DIV class="field field-name-field-single-column-text field-type-text-long field-label-hidden">
<DIV class=field-items>
<DIV class="field-item odd">
<P><FONT class=extract>In load balancing, we use health checks to determine which of a set of potential targets are capable of serving a request (we might do this directly, or indirectly via a service discovery tool). Service discovery tools (such as<SPAN>&nbsp;</SPAN></FONT><A style="TEXT-DECORATION: none; COLOR: rgb(3,57,216); BACKGROUND-COLOR: transparent" href="https://www.consul.io/" rel=nofollow target=_blank><FONT class=extract>Consul</FONT></A><FONT class=extract><SPAN>&nbsp;</SPAN>or<SPAN>&nbsp;</SPAN></FONT><A style="TEXT-DECORATION: none; COLOR: rgb(3,57,216); BACKGROUND-COLOR: transparent" href="https://aws.amazon.com/cloud-map/" rel=nofollow target=_blank><FONT class=extract>AWS Cloud Map</FONT></A><FONT class=extract>) use health checks to keep their endpoint lists current. It is common (and good practice) to alert if a significant proportion of a service&#8217;s instances become unhealthy. Finally, rollouts and scaleup processes often use health checks to ensure that newly created (or modified) instances of a service are capable of serving - often only a few instances will be modified or replaced concurrently, limiting the damage to a service in the case that new (or modified) instances are not able to serve traffic. One of the things that makes Kubernetes popular is that it can do most of this kind of orchestration for you out of the box.&nbsp;</FONT></P>
<P><SPAN><FONT class=extract>Health checking has become much more important than it used to be because in modern distributed system, failure is normal. In the good old days of the 2000s and before, it wasn&#8217;t the norm for backends to become unhealthy or to disappear. Things tended to stay stable, unless you were doing a rollout (which didn&#8217;t happen very often) or some other kind of maintenance. These days, we do frequent rollouts, and we constantly create and destroy infrastructure. This means that health checking is vital now, as otherwise we would constantly send requests to instances that no longer exist.&nbsp;</FONT></SPAN></P>
<DIV><FONT class=extract></FONT></DIV></DIV></DIV></DIV></DIV></DIV></DIV>
<DIV class="field-item even">
<DIV class="entity entity-paragraphs-item paragraphs-item-single-column-text view-mode-full view-mode-full--paragraphs_item view-mode-full--paragraphs_item--single_column_text" style="PADDING-BOTTOM: 20px; PADDING-TOP: 20px">
<DIV class=content>
<DIV class="field field-name-field-single-column-sub field-type-text field-label-hidden" style="FONT-SIZE: 40px; FONT-FAMILY: Klavika, sans-serif; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; PADDING-TOP: 20px; MARGIN: 0px; LINE-HEIGHT: 50px">
<DIV class=field-items>
<DIV class="field-item odd"><FONT class=extract>Emergent Properties of Health Checked Systems</FONT></DIV></DIV></DIV>
<DIV class="field field-name-field-single-column-text field-type-text-long field-label-hidden">
<DIV class=field-items>
<DIV class="field-item odd">
<P><FONT class=extract><SPAN>A sidewalk is not just a slab of concrete, and health checking is not just an endpoint that tells you whether an instance of your service is able to serve or not. From a systems point of view, health checks are a mechanism that transmits signals to different parts of the system &#8212;&nbsp;</SPAN>signals which may influence how requests are distributed to clusters and backends, whether rollouts continue or are paused, and perhaps whether instances should be replaced. A useful systems analysis technique is to think about what happens when these sorts of signals in distributed systems become unavailable, or give incorrect information, or when all of them change state unexpectedly. The nature of health checks as a critical orchestration signal, used in all kinds of ways in our automation, makes them a particularly important kind of signal to analyze.</FONT></P>
<P><SPAN><FONT class=extract>Think about what would happen if we rolled out a change that broke our health checks for a critical service? This might be a result of a code or configuration change to the service &#8212; in which case, we would hopefully automatically halt the rollout &#8212; or it could happen as a result of a configuration change applied to the service that performs the health checking, such as a load balancer. If such a change was rolled out to a significant proportion of our systems, it could well cause an outage &#8212; even if the service was actually capable of serving. Health checking then creates new ways that our systems can fail &#8212; and fail catastrophically. Let&#8217;s examine some more examples.</FONT></SPAN></P>
<DIV><FONT class=extract></FONT></DIV></DIV></DIV></DIV></DIV></DIV></DIV>
<DIV class="field-item odd">
<DIV class="entity entity-paragraphs-item paragraphs-item-single-column-text view-mode-full view-mode-full--paragraphs_item view-mode-full--paragraphs_item--single_column_text" style="PADDING-BOTTOM: 20px; PADDING-TOP: 20px">
<DIV class=content>
<DIV class="field field-name-field-single-column-text field-type-text-long field-label-hidden">
<DIV class=field-items>
<DIV class="field-item odd">
<H3 style="FONT-SIZE: 35px; FONT-FAMILY: Klavika, sans-serif; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; PADDING-TOP: 20px; MARGIN: 0px; LINE-HEIGHT: 43px"><SPAN><SPAN><FONT class=extract>The Laser of Death</FONT></SPAN></SPAN></H3>
<P><SPAN><FONT class=extract>In load balanced systems, we often use health checks to determine which backends can serve requests. This works well most of the time &#8212; we avoid sending requests to instances that are temporarily overloaded or have just been turned down. However, health checks can sometimes make an overload situation worse by causing a phenomenon affectionately called the &#8216;Laser of Death&#8217;.&nbsp;</FONT></SPAN></P>
<P><SPAN><FONT class=extract>In a system that is under significant but manageable load, a subset of instances become unhealthy for some reason. Load balancers stop sending requests to those instances, and instead, send slightly more load to other instances. Load balancing is never quite perfect, and a couple of these instances now become overloaded, and fail their health checks, resulting in more load to the remaining healthy instances, some of which in turn become overloaded. The load balancers can start to act as a &#8216;laser of death&#8217;, overloading whichever subset of hosts is currently passing health checks. This is an example of a case where the health checking signal has become unhelpful because the load balancing (driven by health checking) is actually causing the health check signals to change state, because of overload.&nbsp;</FONT></SPAN></P>
<P><SPAN><FONT class=extract>There are mechanisms to avoid this kind of failure: various kinds of circuit-breaking or loadshedding approaches are possible. Envoy Proxy has a mechanism called &#8216;panic routing&#8217; which sets a threshold percentage of healthy hosts. If the percentage of healthy hosts in a particular cluster drops below the threshold, Envoy will begin to ignore health check status and load balance equally across all hosts in the cluster.&nbsp;</FONT></SPAN></P>
<DIV><FONT class=extract></FONT></DIV>
<P><SPAN><SPAN><FONT class=extract>&nbsp;</FONT></SPAN></SPAN></P></DIV></DIV></DIV></DIV></DIV></DIV>
<DIV class="field-item even">
<DIV class="entity entity-paragraphs-item paragraphs-item-article-image view-mode-full view-mode-full--paragraphs_item view-mode-full--paragraphs_item--article_image" style="BORDER-BOTTOM: rgb(20,53,147) 3px solid; PADDING-BOTTOM: 20px; PADDING-TOP: 20px">
<DIV class=content>
<DIV class="field field-name-field-article-image field-type-image field-label-hidden">
<DIV class=field-items>
<DIV class="field-item odd"><FONT class=extract><IMG style="MAX-WIDTH: 100%; BORDER-TOP: 0px; HEIGHT: auto; BORDER-RIGHT: 0px; BORDER-BOTTOM: 0px; BORDER-LEFT: 0px" alt="" src="https://www.usenix.org/sites/default/files/styles/article_embedded/public/laser.png?itok=EIK_E2Yk" width=1440 height=956></FONT></DIV></DIV></DIV>
<DIV class="field field-name-field-article-image-caption field-type-text field-label-hidden" style="FONT-SIZE: 14px; FONT-WEIGHT: 600; COLOR: rgb(0,0,0); FONT-STYLE: normal">
<DIV class=field-items>
<DIV class="field-item odd"><FONT class=extract>Figure 3: The Laser of Death phenomenon.</FONT></DIV></DIV></DIV></DIV></DIV></DIV>
<DIV class="field-item odd">
<DIV class="entity entity-paragraphs-item paragraphs-item-single-column-text view-mode-full view-mode-full--paragraphs_item view-mode-full--paragraphs_item--single_column_text" style="PADDING-BOTTOM: 20px; PADDING-TOP: 20px">
<DIV class=content>
<DIV class="field field-name-field-single-column-text field-type-text-long field-label-hidden">
<DIV class=field-items>
<DIV class="field-item odd">
<H3 style="FONT-SIZE: 35px; FONT-FAMILY: Klavika, sans-serif; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; PADDING-TOP: 20px; MARGIN: 0px; LINE-HEIGHT: 43px"><SPAN><SPAN><FONT class=extract>The Killer Health Check</FONT></SPAN></SPAN></H3>
<P><SPAN><SPAN><FONT class=extract>It is possible to set up automation based on a health check that causes unhealthy instances of your service to be replaced. This makes perfect sense under normal conditions &#8212; where only an occasional instance becomes unhealthy because of some problem with the underlying hardware, perhaps. If an entire service is unhealthy, then replacing instances with new broken instances is not productive. The issue here is not necessarily that the health check signal is wrong &#8212; it&#8217;s that the signal does not unequivocally mean that the issue is an instance-specific fault and that replacement is an appropriate action.</FONT></SPAN></SPAN></P>
<P><SPAN><SPAN><FONT class=extract>In the chaos of a major outage, this kind of automation can increase confusion. Operators may not remember that the &#8216;killer health check&#8217; automation exists &#8212; and then figuring out why the instances they are trying to troubleshoot keep being turned down creates another problem for them.&nbsp;&nbsp;</FONT></SPAN></SPAN></P>
<P><SPAN><SPAN><FONT class=extract>Another unfortunate effect of this kind of automation is that it can replace warmed-up hosts, which have successfully fetched dependencies and configuration and cached useful data, created connection pools, and so on, with brand-new hosts. These new hosts may take some time to be capable of serving at the same rate as the previous hosts. Bringing up new instances can create load on other services, which might have effects elsewhere (for example, in systems that serve configurations to new hosts or are otherwise involved in provisioning).&nbsp;</FONT></SPAN></SPAN></P>
<P><SPAN><SPAN><FONT class=extract>If the destroyed instances were irrecoverably unhealthy, then this may be reasonable. However, if the destroyed instances were reporting themselves unhealthy because one of their dependencies was unavailable, then it is probably not useful: and could cause problems elsewhere, particularly if the work involved in constantly recreating instances causes saturation in systems that might be required in order to upsize other services. This is an example of why it is important to think holistically about health checking and orchestration; and why what makes sense when a small number of instances become unhealthy can be be harmful when many or most instances are unhealthy.</FONT></SPAN></SPAN></P>
<DIV><FONT class=extract></FONT></DIV></DIV></DIV></DIV></DIV></DIV></DIV>
<DIV class="field-item even">
<DIV class="entity entity-paragraphs-item paragraphs-item-single-column-text view-mode-full view-mode-full--paragraphs_item view-mode-full--paragraphs_item--single_column_text" style="PADDING-BOTTOM: 20px; PADDING-TOP: 20px">
<DIV class=content>
<DIV class="field field-name-field-single-column-text field-type-text-long field-label-hidden">
<DIV class=field-items>
<DIV class="field-item odd">
<H3 style="FONT-SIZE: 35px; FONT-FAMILY: Klavika, sans-serif; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; PADDING-TOP: 20px; MARGIN: 0px; LINE-HEIGHT: 43px"><SPAN><SPAN><FONT class=extract>Recovery from Metastable Failures</FONT></SPAN></SPAN></H3>
<P><FONT class=extract><SPAN>&nbsp;</SPAN>Sometimes systems can get into a state where overload becomes self-sustaining (for example, if database load is excessive because a cache that fronts that database is empty, this can cause a high rate of database lookup failures and means that the cache cannot fill up enough to sustain a useful hit-rate). This kind of failure is known as a<SPAN>&nbsp;</SPAN></FONT><A style="TEXT-DECORATION: none; COLOR: rgb(3,57,216); BACKGROUND-COLOR: transparent" href="https://www.usenix.org/publications/loginonline/metastable-failures-wild" target=_blank><FONT class=extract>metastable failure</FONT></A><FONT class=extract><SPAN>&nbsp;</SPAN>(or cascading failure) [2].</FONT></P></DIV></DIV></DIV></DIV></DIV></DIV>
<DIV class="field-item odd">
<DIV class="entity entity-paragraphs-item paragraphs-item-article-image view-mode-full view-mode-full--paragraphs_item view-mode-full--paragraphs_item--article_image" style="BORDER-BOTTOM: rgb(20,53,147) 3px solid; PADDING-BOTTOM: 20px; PADDING-TOP: 20px">
<DIV class=content>
<DIV class="field field-name-field-article-image field-type-image field-label-hidden">
<DIV class=field-items>
<DIV class="field-item odd"><FONT class=extract><IMG style="MAX-WIDTH: 100%; BORDER-TOP: 0px; HEIGHT: auto; BORDER-RIGHT: 0px; BORDER-BOTTOM: 0px; BORDER-LEFT: 0px" alt="" src="https://www.usenix.org/sites/default/files/styles/article_embedded/public/meta.png?itok=fiqjZ1w1" width=1440 height=1085></FONT></DIV></DIV></DIV>
<DIV class="field field-name-field-article-image-caption field-type-text field-label-hidden" style="FONT-SIZE: 14px; FONT-WEIGHT: 600; COLOR: rgb(0,0,0); FONT-STYLE: normal">
<DIV class=field-items>
<DIV class="field-item odd"><FONT class=extract>Figure 4: The metastable state pattern.</FONT></DIV></DIV></DIV></DIV></DIV></DIV>
<DIV class="field-item even">
<DIV class="entity entity-paragraphs-item paragraphs-item-single-column-text view-mode-full view-mode-full--paragraphs_item view-mode-full--paragraphs_item--single_column_text" style="PADDING-BOTTOM: 20px; PADDING-TOP: 20px">
<DIV class=content>
<DIV class="field field-name-field-single-column-text field-type-text-long field-label-hidden">
<DIV class=field-items>
<DIV class="field-item odd">
<P><SPAN><FONT class=extract>In these cases, we usually need to significantly reduce traffic to the system somehow, and gradually increase the load until the system returns to a normal state. Health checking can make recovery harder in two ways: firstly, by concentrating load on small subsets of hosts that are responding to readiness checks, causing them to become unhealthy; and secondly, if automation is in place to replace unhealthy instances, by causing overloaded hosts to be replaced with new hosts that aren&#8217;t &#8216;warmed up&#8217; and thus can likely serve less traffic. This is a combination of the Laser of Death and the Killer Health Check failure modes.&nbsp;</FONT></SPAN></P>
<P><SPAN><FONT class=extract>If health checking is contributing to a metastable failure situation, disabling health checking entirely is often useful during recovery. It can be re-enabled when the system becomes stable again.</FONT></SPAN></P></DIV></DIV></DIV></DIV></DIV></DIV>
<DIV class="field-item odd">
<DIV class="entity entity-paragraphs-item paragraphs-item-single-column-text view-mode-full view-mode-full--paragraphs_item view-mode-full--paragraphs_item--single_column_text" style="PADDING-BOTTOM: 20px; PADDING-TOP: 20px">
<DIV class=content>
<DIV class="field field-name-field-single-column-text field-type-text-long field-label-hidden">
<DIV class=field-items>
<DIV class="field-item odd">
<H3 style="FONT-SIZE: 35px; FONT-FAMILY: Klavika, sans-serif; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; PADDING-TOP: 20px; MARGIN: 0px; LINE-HEIGHT: 43px"><SPAN><SPAN><FONT class=extract>Staleness, Correctness, and Speed</FONT></SPAN></SPAN></H3>
<P><FONT class=extract>Rollouts are an example of the need to think about orchestration, service discovery and load balancing in a holistic way. If we have a service with N instances, and we turn down and replace all of them with N other instances in a very short period of time &#8212; of the order of seconds, rather than minutes &#8212;&nbsp; then in many cases, our systems will have problems, even if the new instances are ready and able to serve traffic.&nbsp;</FONT></P>
<P><SPAN><FONT class=extract>Each new instance of the service needs to be registered with whatever service is managing service discovery. Service discovery is a problem that is best considered an<SPAN>&nbsp;</SPAN></FONT></SPAN><A style="TEXT-DECORATION: none; COLOR: rgb(3,57,216); BACKGROUND-COLOR: transparent" href="https://blog.envoyproxy.io/embracing-eventual-consistency-in-soa-networking-32a5ee5d443d" rel=nofollow target=_blank><SPAN><FONT class=extract>eventually-consistent</FONT></SPAN></A><SPAN><FONT class=extract><SPAN>&nbsp;</SPAN>problem. Slightly-stale results (a few seconds old) should normally be usable, but if an entire service can be replaced in seconds, then slightly-stale results may now become entirely incorrect and clients may not be able to locate any healthy instance of the service (here is another example of how signals may break &#8212; through simply becoming stale). Rollout speed cannot be considered in isolation from the rest of the orchestration, including configuration such as DNS TTLs and any other caching layers.</FONT></SPAN></P>
<P><FONT class=extract>Another staleness problem that can arise is that health checks are typically done periodically. If an instance becomes unhealthy between health checks, then it may still receive requests for some period of time, potentially creating user impact. Implicit health checking (such as Envoy Proxy&#8217;s<SPAN>&nbsp;</SPAN></FONT><A style="TEXT-DECORATION: none; COLOR: rgb(3,57,216); BACKGROUND-COLOR: transparent" href="https://www.envoyproxy.io/docs/envoy/latest/intro/arch_overview/upstream/outlier#arch-overview-outlier-detection" rel=nofollow><SPAN><FONT class=extract>outlier detection</FONT></SPAN></A><FONT class=extract>) can help to create a higher-fidelity signal.</FONT></P></DIV></DIV></DIV></DIV></DIV></DIV>
<DIV class="field-item even">
<DIV class="entity entity-paragraphs-item paragraphs-item-single-column-text view-mode-full view-mode-full--paragraphs_item view-mode-full--paragraphs_item--single_column_text" style="PADDING-BOTTOM: 20px; PADDING-TOP: 20px">
<DIV class=content>
<DIV class="field field-name-field-single-column-text field-type-text-long field-label-hidden">
<DIV class=field-items>
<DIV class="field-item odd">
<H3 style="FONT-SIZE: 35px; FONT-FAMILY: Klavika, sans-serif; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; PADDING-TOP: 20px; MARGIN: 0px; LINE-HEIGHT: 43px"><SPAN><SPAN><FONT class=extract>Scaling to Serve Health Checks</FONT></SPAN></SPAN></H3>
<P><SPAN><FONT class=extract>Health checks can often become very<SPAN>&nbsp;</SPAN></FONT></SPAN><A style="TEXT-DECORATION: none; COLOR: rgb(3,57,216); BACKGROUND-COLOR: transparent" href="https://lethain.com/healthchecks/" rel=nofollow><SPAN><FONT class=extract>expensive at scale</FONT></SPAN></A><FONT class=extract><SPAN><SPAN>&nbsp;</SPAN>[4]. This is particularly when the number of clients and servers grows over time - health checking, in its simplest form, scales as a<SPAN>&nbsp;</SPAN></SPAN><SPAN>M</SPAN><SPAN><SPAN>&nbsp;</SPAN>clients x<SPAN>&nbsp;</SPAN></SPAN><SPAN>N</SPAN><SPAN><SPAN>&nbsp;</SPAN>servers problem. It is not unheard of for a double-digit percentage of resource usage for a service to be related to health checking. There are a number of techniques that can be used to mitigate this effect, such as centralizing health checking, caching health checks for a short period, or breaking large systems into smaller subsets.&nbsp;</SPAN></FONT></P>
<P><FONT class=extract>This means that the resource cost of health checking can sometimes distort signals used to determine utilization of a system, and thus, lead to an incorrect decision about whether scaling out is required. This is particularly dangerous as scaling a serving system will not reduce the load imposed by health checking, because this is determined solely by the number of clients performing health checks. In pathological cases, where a majority of load is a result of heath checking, scaling out will not reduce utilization much at all. It is essential to track the percentage of load that is a result of health checking and to maintain this at a reasonable level.</FONT></P></DIV></DIV></DIV></DIV></DIV></DIV>
<DIV class="field-item odd">
<DIV class="entity entity-paragraphs-item paragraphs-item-single-column-text view-mode-full view-mode-full--paragraphs_item view-mode-full--paragraphs_item--single_column_text" style="PADDING-BOTTOM: 20px; PADDING-TOP: 20px">
<DIV class=content>
<DIV class="field field-name-field-single-column-sub field-type-text field-label-hidden" style="FONT-SIZE: 40px; FONT-FAMILY: Klavika, sans-serif; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; PADDING-TOP: 20px; MARGIN: 0px; LINE-HEIGHT: 50px">
<DIV class=field-items>
<DIV class="field-item odd"><FONT class=extract>Health checks for bad times as well as good times</FONT></DIV></DIV></DIV>
<DIV class="field field-name-field-single-column-text field-type-text-long field-label-hidden">
<DIV class=field-items>
<DIV class="field-item odd">
<P><SPAN><FONT class=extract>Health checks seem simple, but the systems that make decisions based on health checks have all sorts of subtle properties. Just as town planners need to think about the second-order consequences of street layout in order to build safe and vital urban areas, distributed systems operators need to think about the second-order consequences of health check-driven orchestration behaviors.&nbsp;</FONT></SPAN></P>
<P><SPAN><FONT class=extract>A common theme with orchestration systems that use health checks is that they work well when things are generally stable and you are dealing only with the normal background noise of occasional failures and instance replacement. In these contexts, health checks are very helpful and increase system reliability. However, in larger-scale disturbances, where many instances are unreachable or unhealthy, health checks &#8212; and the behaviors that they trigger in our orchestration systems &#8212; can make things worse.&nbsp;</FONT></SPAN></P>
<P><FONT class=extract>So remember: your orchestration isn&#8217;t just for dealing with errant unhealthy instances. It also needs to work for you in the worst outage you can imagine. At a minimum, you should consider having ready-to-go processes for quickly disabling your health checking, as counterintuitive as that seems.&nbsp;</FONT></P>
<P><FONT class=extract>Just as safety and vibrant local politics are emergent properties of vital city districts, arising from how the components of those districts interact with each other, reliability in a distributed system is an emergent property that is a function of how the entire system works together. When it comes to health checks and orchestration, think about the whole system, not just disconnected parts of it.&nbsp;</FONT></P>
<P><FONT class=extract>&nbsp;</FONT></P></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV>