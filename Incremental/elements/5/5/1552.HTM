Abstract&#8212;Microservices are fast becoming the predominant architectural style for orchestrating online services due to the advantages they can bestow over monolithic systems. However, as microservice architectures grow in size they quickly become complicated to understand and manage. Their characteristics raise the question as to whether they may behave like complex systems. In this paper, we use tools from graph theory to analyse the static and temporal dependency structure of a large-scale microservice architecture. We find that the dependency structure can fluctuate significantly at run time and further, that it can be clustered into distinct and persistent states with recognisable characteristics. Importantly, we show that these states can have functional implications for the performance of the microservice architecture. These early findings suggest that microservices may indeed behave like complex systems and, as such, would benefit from complex systems thinking when approaching their management and development.<BR>Index Terms&#8212;Microservices, complex systems, graph theory, temporal networks</P>
<P>&nbsp;&nbsp;&nbsp; I. INTRODUCTION<BR>Microservices are an architectural approach in which a large application is built as a suite of small, independent services that communicate with each other over well-defined APIs. Microservice deployments are designed to be highly modular, with each microservice providing a specific function. It is the synthesis of microservices, enabled through these open interfaces that provides the higher-level functionality to end users or other systems. This architectural style can bestow many advantages over traditional monolithic architectures. For example, as each microservice is independent, changes can be made to individual microservices without disrupting the whole service. Additionally, the modular nature and relatively simple codebases of microservices means that software de- velopment teams can be structured around the development of a small number of distinct microservices. These factors enable the agile development of new features, allowing more rapid changes to the needs of the company and customers. Furthermore, as each microservice is traditionally deployed within individual distributed containers, the approach provides a fine-grained means for horizontal scaling, in which the instances for each individual microservice can be increased or decreased based on ongoing load. Owing to some of<BR>This research was funded by Moogsoft Ltd.</P>
<P>these distinct benefits, microservices are becoming the leading method for orchestrating online services [1] and have already been successfully integrated into many large service providers such as Netflix [2], Spotify [3], eBay [4], and Uber [5].<BR>One potential drawback of the microservice architectural approach is that as a microservice system grows in scale through the addition of new microservices and dependencies, the resultant dependency structure can quickly become hard to understand on a system-wide scale [2]. In fact, not only has it been recognised that microservices can be very com- plicated, it has also been suggested that they might qualify as complex systems, see [6]. Indeed, microservices do seem to feature at least some of the common characteristics of complex systems: (i) microservices involve the interaction and inter-dependencies between a large number of simple components; (ii) they can show sensitivity to initial conditions, for example, the calls made based on an identical request could vary significantly depending on whether a specific cache holds a piece of required information. Indeed, recent research has demonstrated that the calls generated from the same service can display differing topologies dependent on just the state of the user [7]; (iii) by design, microservices are both adaptive and resilient. For example, horizontal scaling provides redundancy to the system in the face of instance failures, and developers continuously strive to design microservices that are robust and adaptive to constantly changing environments, including fluctuations in demand [8]; (iv) it was found that major outages are often caused by non-linear interactions and feedback loops resulting in emergent faults that cannot be traced back to a single faulty component [9], [10]. Yet, despite the potential implications for their development, evolution and management, there has been little by way of a systematic ex- ploration into the potential complex behaviour of microservice architectures.<BR>In this paper, we explore the temporal behaviour of a large- scale microservice architecture with respect to its run time dependency structure. Using graph metrics, we show that this dependency structure can vary significantly from that observed when taking a static view of the system. Furthermore, we show that this temporal structure can be classified into recognisable states, with identifiable persistent characteristics, a hallmark of complex systems [11]. We also establish that some states