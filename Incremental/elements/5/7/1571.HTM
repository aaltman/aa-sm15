In recent years, Raft has surpassed Paxos to become the more pop- ular consensus protocol in the industry. While many researchers have observed the similarities between the two protocols, no one has shown how Raft and Paxos are formally related to each other. In this paper, we present a formal mapping between Raft and Paxos, and use this knowledge to port a certain class of optimizations from Paxos to Raft. In particular, our porting method can automatically generate an optimized protocol specification with guaranteed cor- rectness. As case studies, we port and evaluate two optimizations, Mencius and Paxos Quorum Lease to Raft.<BR>KEYWORDS<BR>Paxos, Raft, optimization porting<BR>ACM Reference Format:<BR>Zhaoguo Wang, Changgeng Zhao, Shuai Mu, Haibo Chen, Jinyang Li. 2019. On the Parallels between Paxos and Raft, and how to Port Optimizations. In 2019 ACM Symposium on Principles of Distributed Computing (PODC&#8217;19), July 29&#8211;August 2, 2019, Toronto, ON, Canada. ACM, New York, NY, USA, 10 pages. <A href="https://doi.org/10.1145/3293611.3331595">https://doi.org/10.1145/3293611.3331595</A><BR>&nbsp;&nbsp;&nbsp; 1 INTRODUCTION<BR>Consensus protocols enable servers to reach agreement on the sequence of operations to execute despite the failure of some servers and arbitrary network delays. Classic Paxos [18] is one of the oldest and most well-studied consensus protocols. However, in recent years, Raft [31] has gradually overtaken Paxos as the consensus protocol of choice, esp. in the industry. Many researchers have observed that Raft and Paxos bear certain similarities. However, no one has shown how the two protocols are related in the formal sense. In fact, does such a formal relationship exist?<BR>While it may seem like a pedantic endeavor, investigating a for- mal mapping between Raft and Paxos is meaningful for two reasons. First, making the connection between Raft and Paxos helps deepen our understanding of both protocols. In particular, it allows us to<BR>Permission to make digital or hard copies of all or part of this work for personal or classroom use is granted without fee provided that copies are not made or distributed for profit or commercial advantage and that copies bear this notice and the full citation on the first page. Copyrights for components of this work owned by others than ACM must be honored. Abstracting with credit is permitted. To copy otherwise, or republish, to post on servers or to redistribute to lists, requires prior specific permission and/or a fee. Request permissions from <A href="mailto:permissions@acm.org">permissions@acm.org</A>.<BR>PODC &#8217;19, July 29-August 2, 2019, Toronto, ON, Canada<BR>&#169; 2019 Association for Computing Machinery. ACM ISBN 978-1-4503-6217-7/19/07. . . $15.00<BR><A href="https://doi.org/10.1145/3293611.3331595">https://doi.org/10.1145/3293611.3331595</A><BR>able or more efficient than Paxos. Second, Paxos is not an isolated protocol but consists of a large family of variants and optimizations as a result of almost two decades of research [16, 7, 25, 22, 29, 28]. These Paxos variants range from reducing latency for wide-area operation, balancing replica load, optimizing for mostly-conflict- free workload, to tolerating Byzantine faults. Knowing how Raft relates to Paxos allows one to port some of these optimizations to Raft without having to reinvent the wheel.<BR>In this paper, we attempt to make a formal connection between Raft and Paxos using refinement mapping. We show that, beyond the broad stroke similarities between the two protocols, Raft differs from Paxos in several subtle details, such as allowing a follower to erase extra entries if its log is longer than the leader. Unfortu- nately, these differences between the two protocols prevent a direct refinement mapping between them. Therefore, we craft a variant of Raft, called Raft*, which is a refinement of Paxos by removing these superficial differences.<BR>We use the refinement mapping between Raft* and Paxos to port existing ideas in the Paxos literature to the world of Raft. Specifically, we develop an automatic porting method which is able to port a certain class of Paxos optimizations to Raft*. The specific class of optimizations that can be ported automatically are those that do not mutate the original state in Paxos. For these optimizations, we derive the set of rules for applying them to Raft*, such that the resulting protocol automatically refines Raft* and the Paxos optimization, thus guaranteeing correctness. As Raft* is very similar to Raft, the derived protocol contains all Raft properties and is improved by the Paxos optimization. As case studies, we choose two published Paxos optimization, Mencius [25] and Paxos Quorum Lease [28], each of which improves one or more aspects of Paxos in terms of load-balancing and latency. We have ported these two protocols to Raft*.<BR>We evaluate the performance benefits of our Raft* optimizations on Amazon AWS in a setup where data is replicated across sev- eral geographically separated data centers. For each optimization, we show that the Raft variant has similar benefits as its Paxos counterparts in the literature.<BR>To summarize, we make the following contributions:</P>
<P>We reveal the formal relationship between Raft and Paxos by showing a refinement mapping between Paxos and Raft*, a close variant of Raft (Section 3).<BR>We define the problem of porting optimizations across proto- cols and develop a methodology for automatically porting a