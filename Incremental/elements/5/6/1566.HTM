ABSTRACT<BR>The Paxos algorithm is famously difficult to reason about and even more so to implement, despite having been synonymous with dis- tributed consensus for over a decade. The recently proposed Raft protocol lays claim to being a new, understandable consensus algo- rithm, improving on Paxos without making compromises in perfor- mance or correctness.<BR>In this study, we repeat the Raft authors&#8217; performance analysis. We developed a clean-slate implementation of the Raft protocol and built an event-driven simulation framework for prototyping it on experimental topologies. We propose several optimizations to the Raft protocol and demonstrate their effectiveness under contention. Finally, we empirically validate the correctness of the Raft protocol invariants and evaluate Raft&#8217;s understandability claims.
<P></P>
<P>&nbsp;&nbsp;&nbsp; 1. INTRODUCTION<BR>Much contemporary systems research is notoriously difficult to reproduce [7], despite taking place in an era of open data, open ac- cess and open source. In addition to obstacles common across all areas of Computer Science, reproducing systems research also faces the challenge of having to replicate experimental setups. How- ever, replication of research&#8212;or indeed its transfer to production environments&#8212;can also be hampered by another factor: the under- standability of the research described.<BR>A prime example of an area in which reproduction of research suffers from this problem is distributed consensus&#8212;i.e. protocols that allow nodes in an unreliable distributed system to agree on an ordering of events. The inherent complexity of such protocols hampers their understandability, and complex configuration makes it challenging to replicate experimental setups exactly.<BR>The &#8220;gold standard&#8221; algorithm in distributed consensus is the Paxos protocol. Lamport&#8217;s original description of it [14], although highly cited, is notoriously difficult to understand. Moreover, while Lamport went on to sketch approaches to Multi-Paxos based on consecutive runs of Paxos, its under-specification has led to diver- gent interpretations and implementations. This has led to much work that frames the protocol in simpler terms [15, 28] or opti- mized it for practical systems [16, 17, 21]. A few implementations of Paxos exist [2, 3] and are used in industry systems, but hardly any implementations are publicly available.<BR>Raft [26] is a new distributed consensus protocol that was de- signed to address these problems. Its authors argue that Raft is superior to Lamport&#8217;s Multi-Paxos protocol as it enhances under- standability while maintaining performance and correctness. If this is true, practical reproduction of Raft and its performance evaluation ought to be far easier than with Multi-Paxos. Our study in this paper evaluates the claims about Raft made by its designers. Is it indeed easily understandable, and can the encouraging perfor- mance and correctness results presented by Ongaro and Ousterhout be independently confirmed?<BR>In the endeavour to answer this question, we re-implemented Raft in a functional programming language (OCaml) and repeat the performance evaluation from the original Raft paper [26] using our independent implementation. Disparity between the original and replicated setups, in combination with lack of detailed descriptions of experimental setups in academic publications, can hamper un- dertakings like ours. We indeed encountered this problem in our efforts, and document our use of a flexibly configurable simulation environment in response to this challenge.<BR>Finally, we also review our experience of independently reproducing the results of a recent research project that used modern tools and techniques to disseminate its research artifacts. We comment on the impact that the choices of tools and support by the original authors can have on the success of a reproduction effort.<BR>In summary, in this paper we make the following contributions:<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 1. We build a clean slate implementation of the Raft consensus algorithm (&#167;2), to test the understandability of the protocol (&#167;4.5).<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 2. We use our experience to describe the protocol in detail in our own words, explicitly dealing with the protocol&#8217;s subtleties (&#167;3.1).<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 3. We develop an event-driven distributed systems simulator and test it using our Raft consensus implementation (&#167;3.2; simulator architecture is shown in Figure 1).<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 4. To calibrate our analysis, we simulate the experiment behind Figure 14 in the original paper and extend the authors&#8217; analysis to suggest optimizations to the protocol (&#167;4).<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 5. To test our implementation&#8217;s correctness, we model Raft nodes as non-deterministic finite state automata in Statecall Policy Language (SPL) [19, 20] and validate over 100,000 simula- tions traces against this model (&#167;4.4).<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 6. We extend this analysis to our trace checker, which uses the simulator&#8217;s holistic view of the cluster to validate the protocol&#8217;s safety guarantees (&#167;4.4).<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 7. We close with a recapitulation of our experience of practically reproducing a recent piece of systems research and con- trast our findings with those of previous endeavours (&#167;6).