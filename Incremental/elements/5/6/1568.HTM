We describe metastable failures&#8212;a failure pattern in dis- tributed systems. Currently, metastable failures manifest themselves as black swan events; they are outliers because nothing in the past points to their possibility, have a severe impact, and are much easier to explain in hindsight than to predict. Although instances of metastable failures can look different at the surface, deeper analysis shows that they can be understood within the same framework.<BR>We introduce a framework for thinking about metasta- ble failures, apply it to examples observed during years of operating distributed systems at scale, and survey ad-hoc techniques developed post-factum for making systems re- silient to known metastable failures. A systematic approach for building systems that are robust against unknown meta- stable failures remains an open problem.<BR>ACM Reference Format:<BR>Nathan Bronson, Abutalib Aghayev, Aleksey Charapko, and Timo- thy Zhu. 2021. Metastable Failures in Distributed Systems. In Work- shop on Hot Topics in Operating Systems (HotOS &#8217;21), May 31-June 2, 2021, Ann Arbor, MI, USA. ACM, New York, NY, USA, 7 pages. <A href="https://doi.org/10.1145/3458336.3465286">https://doi.org/10.1145/3458336.3465286</A></P>
<P>&nbsp;&nbsp;&nbsp; 1 Introduction<BR>Robustness is a fundamental goal of distributed systems re- search. Yet despite years of advances, there are still many system outages in the wild. By reviewing experiences from a decade of operating hyperscale distributed systems, we identify a class of failures that can disrupt them, even when there are no hardware failures, configuration errors,<BR>&#8727;Formerly at Facebook, Inc.</P>
<P>Permission to make digital or hard copies of all or part of this work for personal or classroom use is granted without fee provided that copies are not made or distributed for profit or commercial advantage and that copies bear this notice and the full citation on the first page. Copyrights for components of this work owned by others than ACM must be honored. Abstracting with credit is permitted. To copy otherwise, or republish, to post on servers or to redistribute to lists, requires prior specific permission and/or a fee. Request permissions from <A href="mailto:permissions@acm.org">permissions@acm.org</A>.<BR>HotOS &#8217;21, May 31-June 2, 2021, Ann Arbor, MI, USA<BR>&#169; 2021 Association for Computing Machinery. ACM ISBN 978-1-4503-8438-4/21/05. . . $15.00<BR><A href="https://doi.org/10.1145/3458336.3465286">https://doi.org/10.1145/3458336.3465286</A></P>
<P>&nbsp;</P>
<P><BR>Sustaining E&#64256;ect</P>
<P>Figure 1: States and transitions of a system experienc- ing a metastable failure.</P>
<P>or software bugs. These metastable failures have caused widespread outages at large internet companies, lasting from minutes to hours. Paradoxically, the root cause of these fail- ures is often features that improve the efficiency or reliability of the system.<BR>In this work, we define the metastable failure pattern, describe real-world examples and the common traits among them, survey ad-hoc industry practices developed for dealing with metastability, and propose new research directions for systematically addressing these failures.<BR>Metastable failures occur in open systems with an uncon- trolled source of load where a trigger causes the system to enter a bad state that persists even when the trigger is removed. In this state the goodput (i.e., throughput of useful work) is unusably low, and there is a sustaining effect&#8212;often involving work amplification or decreased overall efficiency&#8212; that prevents the system from leaving the bad state. Drawing from the definition of metastability in physics [19], we call this bad state a metastable failure state. Failures that resolve when the trigger is removed, such as a denial-of-service attack [8], limplock [9], or livelock [2], are not metastable. Leaving a metastable failure state requires a strong corrective push, such as rebooting the system or dramatically reducing the load.<BR>The lifecycle of a metastable failure involves three phases, as shown in Figure 1. A system starts in a stable state. Once the load rises above a certain threshold&#8212;implicit and invisible&#8212; the system enters a vulnerable state. The vulnerable system is healthy, but may fall into an unrecoverable metastable state due to a trigger. The vulnerable state is not an overloaded