ABSTRACT<BR>Paxos, the de facto standard approach to solving distributed consen- sus, operates in two phases, each of which requires an intersecting quorum of nodes. Multi-Paxos reduces this to one phase by elect- ing a leader but this leader is also a performance bottleneck. Fast Paxos bypasses the leader but has stronger quorum intersection requirements.<BR>In this paper we observe that Fast Paxos&#8217; intersection require- ments can be safely relaxed, reducing to just one additional in- tersection requirement between phase-1 quorums and any pair of fast round phase-2 quorums. We thus find that the quorums used with Fast Paxos are larger than necessary, allowing alternative quo- rum systems to obtain new tradeoffs between performance and fault-tolerance.<BR>CCS CONCEPTS<BR>&nbsp;&nbsp;&nbsp; &#8226; Theory of computation &#8594; Distributed algorithms.<BR>KEYWORDS<BR>Distributed computing, Distributed consensus, Paxos<BR>ACM Reference Format:<BR>Heidi Howard, Aleksey Charapko, and Richard Mortier. 2021. Fast Flexi- ble Paxos: Relaxing Quorum Intersection for Fast Paxos. In International Conference on Distributed Computing and Networking 2021 (ICDCN &#8217;21), January 5&#8211;8, 2021, Nara, Japan. ACM, New York, NY, USA, 5 pages. https:<BR>//doi.org/10.1145/3427796.3427815<BR>1&nbsp;INTRODUCTION<BR>Paxos [18, 19] and its variants [7, 23, 25, 26, 29, 32] provide reliable solutions to the problem of distributed consensus [10]. Thanks to their excellent fault-tolerance properties and proven consistency guarantees, these algorithms often underpin the replicated state machines [31] at the heart of many industrial distributed systems, e.g., Chubby [6], CockroachDB [33], and PaxosStore [36].<BR>Traditionally, the Paxos family of algorithms uses majority quo- rums, guaranteeing that any two sets containing the majority of nodes intersect, ensuring that previously decided values are not lost. Flexible Paxos [14] relaxes the requirement for intersecting quo- rums in Paxos, proving that quorum intersection is only required between phases, permitting disjoint quorums to be used within each phase. This result enabled subsequent algorithms to improve<BR>Permission to make digital or hard copies of all or part of this work for personal or classroom use is granted without fee provided that copies are not made or distributed for profit or commercial advantage and that copies bear this notice and the full citation on the first page. Copyrights for components of this work owned by others than the author(s) must be honored. Abstracting with credit is permitted. To copy otherwise, or republish, to post on servers or to redistribute to lists, requires prior specific permission and/or a fee. Request permissions from <A href="mailto:permissions@acm.org">permissions@acm.org</A>.<BR>ICDCN &#8217;21, January 5&#8211;8, 2021, Nara, Japan<BR>&#169; 2021 Copyright held by the owner/author(s). Publication rights licensed to ACM. ACM ISBN 978-1-4503-8933-4/21/01. . . $15.00<BR><A href="https://doi.org/10.1145/3427796.3427815">https://doi.org/10.1145/3427796.3427815</A><BR>performance by adjusting quorums depending on the phase of the algorithm [1, 4, 8, 9, 28, 35].<BR>Paxos is usually implemented using Multi-Paxos [18, 19], an optimization that elects one node to be a leader. This single leader can then achieve distributed consensus in just one phase, but un- fortunately also becomes a performance bottleneck.<BR>Seeking to improve performance, a new family of leaderless con- sensus algorithms emerged, starting with Fast Paxos [23], which forms the basis for subsequent algorithms including Generalized Paxos [22] and Egalitarian Paxos [26]. Paxos uses the idea of rounds in which at most one value can be proposed. Fast Paxos intro- duced the notion of fast rounds where multiple values can be safely proposed in the same round. However, such fast rounds require stronger quorum intersection than classical rounds. Specifically, Paxos only requires that any two quorums intersect whereas Fast Paxos also requires that any quorum intersects with any two fast round quorums. Fast Paxos&#8217; quorum intersection requirements can be satisfied by requiring fast round quorums to contain at least three-quarters of nodes. Due to this additional quorum intersection requirement, Fast Paxos and its variants cannot directly benefit from Flexible Paxos.<BR>In this paper, we show that the approach of Flexible Paxos can be safely applied to consensus algorithms that rely on stronger quorum intersection by extending Flexible Paxos to Fast Paxos. The resulting algorithm, which we refer to as Fast Flexible Paxos, relaxes the quorum intersection requirements of Fast Paxos. Specifically, Fast Flexible Paxos proves that the only additional quorum intersection requirement is between phase-1 quorums and any pair of fast round phase-2 quorums.<BR>Relaxed quorum intersection in Fast Flexible Paxos permits new performance tradeoffs by manipulation of the quorum systems. For example, reducing the size of fast round quorums reduces the contention in the algorithm. This may further improve overall per- formance on top of an improvement attained by a smaller quorum alone. For instance, we illustrate that the Fast Flexible Paxos with smaller fast quorums achieves up to 10% better latency than Fast Paxos in low conflict scenarios.</P>
<P>&nbsp;&nbsp;&nbsp; 2 BACKGROUND<BR>We begin by recapping how distributed consensus is currently solved by Paxos, Flexible Paxos, and Fast Paxos. The relation be- tween these algorithms is shown in Figure 1.</P>
<P>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 2.1 Paxos<BR>The Paxos algorithm distinguishes between two roles a node can take: a proposer and an acceptor. A proposer initiates a decision by executing Paxos using a round. Rounds are integers allocated to proposers, and each proposer must propose only one value in each round. A proposal is a pair of a round and a value. The algorithm