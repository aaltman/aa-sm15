Abstract<BR>Get/Put Key-Value Stores (KVSes) rely on replication proto- cols to enforce consistency and guarantee availability. To- day&#8217;s modern hardware, with manycore servers and RDMA- capable networks, challenges the conventional wisdom on protocol design. In this paper, we investigate the impact of modern hardware on the performance of strongly-consistent replication protocols.<BR>First, we create an informal taxonomy of replication pro- tocols, based on which we carefully select 10 protocols for analysis. Secondly, we present Odyssey, a framework tai- lored towards protocol implementation for multi-threaded, RDMA-enabled, in-memory, replicated KVSes. We imple- ment all 10 protocols over Odyssey, and perform the first apples-to-apples comparison of replication protocols over modern hardware.<BR>Our comparison characterizes the protocol design space, revealing the performance capabilities of different classes of protocols on modern hardware. Among other things, our results demonstrate that some of the protocols that were efficient in yesterday&#8217;s hardware are not so today because they cannot take advantage of the abundant parallelism and fast networking present in modern hardware. Conversely, some protocols that were inefficient in yesterday&#8217;s hardware are very attractive today. We distill our findings in a concise set of general guidelines and recommendations for protocol selection and design in the era of modern hardware.<BR>CCS Concepts: &#8226; Computer systems organization &#8594; Cloud computing; Reliability; Availability; &#8226; Software and its en- gineering &#8594; Consistency.<BR>Keywords: Fault-tolerant; Replication; Consistency; Avail- ability; Throughput; Latency; Linearizability; RDMA</P>
<P>Permission to make digital or hard copies of all or part of this work for personal or classroom use is granted without fee provided that copies are not made or distributed for profit or commercial advantage and that copies bear this notice and the full citation on the first page. Copyrights for components of this work owned by others than ACM must be honored. Abstracting with credit is permitted. To copy otherwise, or republish, to post on servers or to redistribute to lists, requires prior specific permission and/or a fee. Request permissions from <A href="mailto:permissions@acm.org">permissions@acm.org</A>.<BR>EuroSys &#8217;21, April 26&#8211;28, 2021, Online, United Kingdom<BR>&#169; 2021 Association for Computing Machinery. ACM ISBN 978-1-4503-8334-9/21/04. . . $15.00<BR>hNps://doi.org/10.1145/3447786.3456240<BR>ACM Reference Format:<BR>Vasilis Gavrielatos, Antonios Katsarakis, Vijay Nagarajan. 2021. Odyssey: The Impact of Modern Hardware on Strongly-Consistent Replication Protocols. In Sixteenth European Conference on Com- puter Systems (EuroSys &#8217;21), April 26&#8211;28, 2021, Online, United King- dom. ACM, New York, NY, USA, 16 pages. hNps://doi.org/10.1145/ 3447786.3456240</P>
<P>&nbsp;&nbsp;&nbsp; 1 Introduction<BR>Online services and cloud applications replicate their datasets to remain available in the face of faults. Reliable replication protocols are deployed to maintain consistency among the replicas. This work focuses on the performance of strongly- consistent, fault-tolerant replication protocols for Get/Put Key-Value Stores deployed within the datacenter.<BR>The performance of replication protocols has been repeat- edly evaluated on various deployments over the years [1]. However traditional protocol design and evaluation has not taken into account modern hardware. What do we mean by modern hardware, and why is it important when comparing the performance of protocols?<BR>Over the last 10-15 years, the server-grade hardware land- scape has changed drastically [8]. Servers with two or four cores per chip have given way to many-core chips with tens of cores, kernel-based 1 Gbps networking has given way to user-level networking with 10s or 100s of Gbps and finally, main memory has been scaled to 100s of GBs with 10s of Gbps worth of bandwidth. These advances challenge the conventional wisdom on protocol design in two ways.<BR>Firstly, to benefit from the significant increase in hardware- level parallelism across compute, network, and memory, pro- tocols must be multi-threaded. Indeed, a single-threaded pro- tocol not only fails to utilize the available cores in a many- core system, but also the available network and memory bandwidth [30, 44].<BR>Problematically, traditional protocol design has seldom considered threading; rather it has typically assumed that each node consists of a single serial process. For instance, a leader-based protocol specification typically assumes and often relies on the fact that the leader executes serially. Unsur- prisingly, designing protocols without considering threading often results in non-scalable protocols.<BR>The second aspect of protocol design challenged by mod- ern hardware is the need (or the lack thereof) for optimizing