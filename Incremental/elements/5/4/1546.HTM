Quorum systems are a powerful mechanism for ensuring the consistency of replicated data. Production systems usu- ally opt for majority quorums due to their simplicity and fault tolerance, but majority quorum systems provide poor throughput and scalability. Alternatively, researchers have invented a number of theoretically &#8220;optimal&#8221; quorum sys- tems, but the underlying theory ignores many practical com- plexities such as machine heterogeneity and workload skew. In this paper, we conduct a pragmatic re-examination of quorum systems. We enrich the current theory on quorum systems with a number of practical renements to nd quo- rum systems that provide higher throughput, lower latency, and lower network load. We also develop a library Quo- racle that precisely quanties the available trade-os be- tween quorum systems to empower engineers to nd opti- mal quorum systems, given a set of objectives for specic deployments and workloads. Our tool is available online at:<BR>Ensuring the consistency of replicated data is a fundamental challenge in distributed computing. One widely utilized so- lution is to require that any operation over replicated data involve a quorum of machines. A read-write quorum sys- tem consists of a set of read quorums and a set of write quorums such that every read quorum and every write quo- rum intersect. Data is read from a read quorum of machines, and data is written to a write quorum of machines. This ensures that all previous writes are observed by subsequent reads. In addition to data replication [10], quorum systems have been applied to consensus algorithms [5, 8, 12, 17], distributed databases [26], abstract data types [11], mutual exclusion [2, 19] and shared memory [3] to name but a few. Majority quorum systems&#8212;quorum systems where ev- ery read and write quorum consists of a strict majority of machines&#8212;are widely used in practice. Their simplicity<BR>makes them well-undehrstooid, and they also tolerate an opti-