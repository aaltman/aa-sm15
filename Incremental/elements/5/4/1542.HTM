ABSTRACT<BR>State machine replication protocols, like MultiPaxos and Raft, are a critical component of many distributed systems and databases. However, these protocols offer relatively low throughput due to several bottlenecked components. Numerous existing protocols fix different bottlenecks in isolation but fall short of a complete solu- tion. When you fix one bottleneck, another arises. In this paper, we introduce compartmentalization, the first comprehensive technique to eliminate state machine replication bottlenecks. Compartmen- talization involves decoupling individual bottlenecks into distinct components and scaling these components independently. Compart- mentalization has two key strengths. First, compartmentalization leads to strong performance. In this paper, we demonstrate how to compartmentalize MultiPaxos to increase its throughput by 6&nbsp;&nbsp;&nbsp; on a write-only workload and 16 on a mixed read-write workload. Unlike other approaches, we achieve this performance without the need for specialized hardware. Second, compartmentalization is a technique, not a protocol. Industry practitioners can apply com- partmentalization to their protocols incrementally without having to adopt a completely new protocol.</P>
<P>PVLDB Reference Format:<BR>Michael Whittaker, Ailidani Ailijiang, Aleksey Charapko, Murat Demirbas, Neil Giridharan, Joseph M. Hellerstein, Heidi Howard, Ion Stoica,<BR>and Adriana Szekeres. Scaling Replicated State Machines with Compartmentalization. PVLDB, 14(11): 2203 - 2215, 2021. doi:10.14778/3476249.3476273<BR>PVLDB Artifact Availability:<BR>The source code, data, and/or other artifacts have been made available at <A href="https://github.com/mwhittaker/frankenpaxos">https://github.com/mwhittaker/frankenpaxos</A>.<BR>&nbsp;&nbsp;&nbsp; 1 INTRODUCTION<BR>State machine replication protocols are a crucial component of many distributed systems and databases [1&#8211;4, 10, 14, 35, 38]. In</P>
<P>This work is licensed under the Creative Commons BY-NC-ND 4.0 International License. Visit <A href="https://creativecommons.org/licenses/by-nc-nd/4.0/">https://creativecommons.org/licenses/by-nc-nd/4.0/</A> to view a copy of this license. For any use beyond those covered by this license, obtain permission by emailing <A href="mailto:info@vldb.org">info@vldb.org</A>. Copyright is held by the owner/author(s). Publication rights licensed to the VLDB Endowment.<BR>Proceedings of the VLDB Endowment, Vol. 14, No. 11 ISSN 2150-8097. doi:10.14778/3476249.3476273<BR>many state machine replication protocols, a single node has multi- ple responsibilities. For example, a Raft [29] leader acts as a batcher, a sequencer, a broadcaster, and a state machine replica. These over- loaded nodes are often a throughput bottleneck, which can be disastrous for systems that rely on state machine replication.<BR>Many databases, for example, rely on state machine replication to replicate large data partitions of tens of gigabytes [2, 34]. These databases require high-throughput state machine replication to handle all the requests in a partition. However, in such systems, it is not uncommon to exceed the throughput budget of a partition. For example, Cosmos DB will split a partition if it experiences high throughput despite being under the storage limit. The split, aside from costing resources, may have additional adverse effects on ap- plications, as Cosmos DB provides strongly consistent transactions only within the partition. Eliminating state machine replication bottlenecks can help avoid such unnecessary partition splits and improve performance, consistency, and resource utilization.<BR>Researchers have studied how to eliminate throughput bottle- necks, often by inventing new state machine replication protocols that eliminate a single throughput bottleneck [5, 6, 9, 12, 17, 22,<BR>23, 25, 26, 37, 44]. However, eliminating a single bottleneck is not enough to achieve the best possible throughput. When you elim- inate one bottleneck, another arises. To achieve the best possible throughput, we have to eliminate all of the bottlenecks.<BR>The key to eliminating these throughput bottlenecks is scaling, but it is widely believed that state machine replication protocols don&#8217;t scale [6, 19, 25, 26, 43]. In this paper, we show that this is not true. State machine replication protocols can indeed scale. As a concrete illustration, we analyze the throughput bottlenecks of Mul- tiPaxos [21] and systematically eliminate them using a combination of decoupling and scaling, a technique we call compartmental- ization. For example, consider the MultiPaxos leader, a notorious throughput bottleneck. The leader has two distinct responsibilities. First, it sequences state machine commands into a log. It puts the first command it receives into the first log entry, the next com- mand into the second log entry, and so on. Second, it broadcasts the commands to the set of MultiPaxos acceptors, receives their responses, and then broadcasts the commands again to a set of state machine replicas. To compartmentalize the MultiPaxos leader, we first decouple these two responsibilities. There&#8217;s no fundamental reason that the leader has to sequence commands and broadcast