Abstract&#8212;Coordination and consensus play an important role in datacenter and cloud computing, particularly in leader election, group membership, cluster management, service dis- covery, resource/access management, and consistent replication of the master nodes in services. Paxos protocols and systems provide a fault-tolerant solution to the distributed consensus problem and have attracted significant attention as well as generating substantial confusion. In order to elucidate the correct use of distributed coordination systems, we compare and contrast popular Paxos protocols and Paxos systems and present advantages and disadvantages for each. We also cat- egorize the coordination use-patterns in cloud, and examine Google and Facebook infrastructures, as well as Apache top- level projects to investigate how they use Paxos protocols and systems. Finally, we analyze tradeoffs in the distributed coordination domain and identify promising future directions for achieving more scalable distributed coordination systems.</P>
<P>&nbsp;&nbsp;&nbsp; 1. Introduction<BR>Cloud computing deals mainly with big data storage, processing, and serving. While these are mostly embarrass- ingly parallel tasks, coordination still plays a major role in cloud computing systems. Coordination is needed for leader election, group membership, cluster management, service discovery, resource/access management, consistent replication of the master nodes in services, and finally for barrier-orchestration when running large analytic tasks.<BR>The coordination problem has been studied by the theory of distributed systems extensively under the name &#8220;dis- tributed consensus&#8221;. This problem has been the subject of several impossibility results: while consensus is easy in the absence of faults, it becomes prone to intricate failure- scenarios in the presence of lossy channels, crashed par- ticipants, and violation of synchrony/timing assumptions. Several algorithms have been proposed to tackle the prob- lem, however, Paxos introduced in 1989 [1] stood out from the pack as it provided a simple formally-proven algo- rithm to deal with the challenges of asynchrony, process crash/recovery, and message loss in an elegant and uniform manner.<BR>Paxos&#8217;s rise to fame had to wait until after the large-scale web services and datacenter computing took off in 2000s.<BR>Around that time Google was already running into the fault- induced corner cases that cause service downtimes. A fault- tolerant coordination service was needed for the Google File System (GFS), and Google adopted Paxos for implementing the GFS lock service, namely the Google Chubby [2]. The Google Chubby project boosted interest in the industry about using Paxos protocols and Paxos systems for fault-tolerant coordination.<BR>An open-source implementation of the Google Chubby lock service was provided by the Apache ZooKeeper project [3]. ZooKeeper generalized the Chubby interface slightly and provided a general ready-to-use system for &#8220;coordination as a service&#8221;. ZooKeeper used a Paxos-variant protocol Zab [4] for solving the distributed consensus prob- lem. Since Zab is embedded in the ZooKeeper implemen- tation, it remained obscure and did not get adopted as a generic Paxos consensus component. Instead of the Zab component, which required a lot of work for integrating to the application, ZooKeeper&#8217;s ready-to-use file-system ab- straction interface got popular and became the de facto coordination service for cloud computing applications. How- ever, since the bar on using the ZooKeeper interface was so low, it has been abused/misused by many applications. When ZooKeeper is improperly used, it often constituted the bottleneck in performance of these applications and caused scalability problems.<BR>Recently Paxos protocols and Paxos systems quickly grew in number adding further options to the choice of which consensus/coordination protocols/systems to use. Leveraging ZooKeeper, the BookKeeper [5] and Kafka [6] projects introduced log/stream replication services. The Raft protocol [7] went back to fundamentals and provided and open-source implementation of Paxos protocol as a reusable component. Despite the increased choices and specializa- tion of Paxos protocols and Paxos systems, the confusion remains about the proper use cases of these systems and about which systems are more suitable for which tasks. A common pitfall has been to confuse the Paxos protocols with Paxos systems build on top of these protocols (see Figure 1). Paxos protocols (such as Zab and Raft) are useful for low-level components for server replication, whereas Paxos systems (such as ZooKeeper) have been often shoehorned to that task. The proper use case for Paxos systems is in highly-available/durable metadata management, under the