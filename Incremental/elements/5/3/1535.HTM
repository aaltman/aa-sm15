<b> : </b><A name="Related Work"></A>Related<SPAN style="LETTER-SPACING: 1.2pt"> </SPAN><SPAN style="LETTER-SPACING: -0.2pt">Work</SPAN></H1></LI></OL>
<P class=western style="MARGIN-TOP: 0.1in; MARGIN-LEFT: 0.22in; LINE-HEIGHT: 98%; MARGIN-RIGHT: 0.56in" align=justify><FONT face="Georgia, serif">Data Partitioning. </FONT>Data partitioning has been an important technique in database systems. With it, queries can skip partitions based on their partition key ranges or achieve high data cache performance with good spatial locality. Partitioning a relation is NP-hard [<A href="file:///C:/SuperMemo/systems/Incremental/temp/HTMLFile.htm#_bookmark45"><FONT color=#0000ff>29</FONT></A>]. Many research efforts have been devoted to optimal partitioning schemes.<SPAN style="LETTER-SPACING: 1pt"> </SPAN>Some<SPAN style="LETTER-SPACING: 1pt"> </SPAN>approaches<SPAN style="LETTER-SPACING: 1pt"> </SPAN>partition<SPAN style="LETTER-SPACING: 1pt"> </SPAN>data<SPAN style="LETTER-SPACING: 1pt"> </SPAN>across<SPAN style="LETTER-SPACING: 1pt"> </SPAN>both<SPAN style="LETTER-SPACING: 1pt"> </SPAN>rows<SPAN style="LETTER-SPACING: 1pt"> </SPAN>and<SPAN style="LETTER-SPACING: 1pt"> </SPAN>columns<SPAN style="LETTER-SPACING: 1pt"> </SPAN>to<SPAN style="LETTER-SPACING: 1pt"> </SPAN><SPAN style="LETTER-SPACING: -0.1pt">account</SPAN></P>
<P class=western style="MARGIN-TOP: 0.12in"><BR></P>
<P class=western style="MARGIN-RIGHT: 0.34in" align=center><SPAN style="LETTER-SPACING: -0.3pt">21</SPAN></P>
<P class=western style="PAGE-BREAK-BEFORE: always; MARGIN-LEFT: 0.74in; LINE-HEIGHT: 100%"><IMG border=0 name="Image 660" src="file:///C:/Users/aaron/AppData/Local/Temp/lu21164a2h8qi.tmp/lu21164a2h8vc_tmp_dd69129761d5b43d.png" width=330 align=bottom height=146> <FONT style="FONT-SIZE: 11pt" size=2><FONT style="FONT-SIZE: 10pt" size=2></FONT><IMG border=0 name="Image 661" src="file:///C:/Users/aaron/AppData/Local/Temp/lu21164a2h8qi.tmp/lu21164a2h8vc_tmp_dc6a31b82de6b8a6.png" width=330 align=bottom height=146> </FONT></P>
<P class=western style="MARGIN-TOP: 0.1in; MARGIN-LEFT: 0.56in; LINE-HEIGHT: 96%; MARGIN-RIGHT: 0.22in" align=justify><A name=_bookmark21></A><FONT style="FONT-SIZE: 11pt" size=2><FONT face="Georgia, serif"><FONT style="FONT-SIZE: 8pt" size=1>Fig. 20</FONT></FONT><FONT face="Georgia, serif"><FONT style="FONT-SIZE: 8pt" size=1><SPAN style="LETTER-SPACING: 2pt"> </SPAN></FONT></FONT><FONT style="FONT-SIZE: 8pt" size=1>The throughput performance under </FONT><FONT style="FONT-SIZE: 8pt" size=1>YCSB </FONT><FONT style="FONT-SIZE: 8pt" size=1>heterogeneous workloads. 0.01 million tuples (left), 0.1 million tuples (right), 20 </FONT><FONT style="FONT-SIZE: 8pt" size=1>YCSB-A </FONT><FONT style="FONT-SIZE: 8pt" size=1>threads and 1 </FONT><FONT style="FONT-SIZE: 8pt" size=1>YCSB-</FONT><FONT style="FONT-SIZE: 8pt" size=1>C thread, 1 million transactions, 2 operations per </FONT><FONT style="FONT-SIZE: 8pt" size=1>YCSB-</FONT><FONT style="FONT-SIZE: 8pt" size=1>A, 1000 operations per </FONT><FONT style="FONT-SIZE: 8pt" size=1>YCSB-</FONT><FONT style="FONT-SIZE: 8pt" size=1>C, zipfian theta=0.99.</FONT></FONT></P>
<P class=western style="MARGIN-TOP: 0.07in"><BR></P>
<P class=western style="MARGIN-LEFT: 0.56in; LINE-HEIGHT: 98%; MARGIN-RIGHT: 0.22in" align=justify>for different read access patterns. Other approaches partition data based on features or representative filters extracted from the workload. In the past decade, researchers have developed a number of data partitioning techniques, such as: data skipping [<A href="file:///C:/SuperMemo/systems/Incremental/temp/HTMLFile.htm#_bookmark46"><FONT color=#0000ff>30</FONT></A>&#8211; <A href="file:///C:/SuperMemo/systems/Incremental/temp/HTMLFile.htm#_bookmark47"><FONT color=#0000ff>36</FONT></A>],<SPAN style="LETTER-SPACING: -0.1pt"> </SPAN>workload-driven<SPAN style="LETTER-SPACING: -0.1pt"> </SPAN>partitioning<SPAN style="LETTER-SPACING: -0.1pt"> </SPAN>[<A href="file:///C:/SuperMemo/systems/Incremental/temp/HTMLFile.htm#_bookmark48"><FONT color=#0000ff>37</FONT></A>&#8211;<A href="file:///C:/SuperMemo/systems/Incremental/temp/HTMLFile.htm#_bookmark49"><FONT color=#0000ff>47</FONT></A>],<SPAN style="LETTER-SPACING: -0.1pt"> </SPAN>column-oriented<SPAN style="LETTER-SPACING: -0.1pt"> </SPAN>partitioning<SPAN style="LETTER-SPACING: -0.1pt"> </SPAN>[<A href="file:///C:/SuperMemo/systems/Incremental/temp/HTMLFile.htm#_bookmark24"><FONT color=#0000ff>3</FONT></A>,<SPAN style="LETTER-SPACING: -0.1pt"> </SPAN><A href="file:///C:/SuperMemo/systems/Incremental/temp/HTMLFile.htm#_bookmark36"><FONT color=#0000ff>20</FONT></A>,<SPAN style="LETTER-SPACING: -0.1pt"> </SPAN><A href="file:///C:/SuperMemo/systems/Incremental/temp/HTMLFile.htm#_bookmark50"><FONT color=#0000ff>48</FONT></A>&#8211;<A href="file:///C:/SuperMemo/systems/Incremental/temp/HTMLFile.htm#_bookmark51"><FONT color=#0000ff>56</FONT></A>], learning data partitioning [<A href="file:///C:/SuperMemo/systems/Incremental/temp/HTMLFile.htm#_bookmark52"><FONT color=#0000ff>57</FONT></A>&#8211;<A href="file:///C:/SuperMemo/systems/Incremental/temp/HTMLFile.htm#_bookmark53"><FONT color=#0000ff>63</FONT></A>].</P>
<P class=western style="MARGIN-TOP: 0in; MARGIN-LEFT: 0.56in; LINE-HEIGHT: 98%; MARGIN-RIGHT: 0.22in; TEXT-INDENT: 0.21in" align=justify><FONT face="Georgia, serif">Transaction Timestamp. </FONT>In the strictest serializable transaction scheme, the execution schedule must be equivalent to a schedule where all the transactions are executed sequentially. In a timestamp ordering-based concurrency control algorithm, this serial order is expressed using timestamps. Each transaction is assigned a unique and<SPAN style="LETTER-SPACING: 2pt"> </SPAN>monotonically<SPAN style="LETTER-SPACING: 2pt"> </SPAN>increasing<SPAN style="LETTER-SPACING: 2pt"> </SPAN>timestamp<SPAN style="LETTER-SPACING: 2pt"> </SPAN>as<SPAN style="LETTER-SPACING: 2pt"> </SPAN>the<SPAN style="LETTER-SPACING: 2pt"> </SPAN>serial<SPAN style="LETTER-SPACING: 2pt"> </SPAN>order<SPAN style="LETTER-SPACING: 2pt"> </SPAN>that<SPAN style="LETTER-SPACING: 2pt"> </SPAN>is<SPAN style="LETTER-SPACING: 2pt"> </SPAN>used<SPAN style="LETTER-SPACING: 2pt"> </SPAN>for<SPAN style="LETTER-SPACING: 2pt"> </SPAN>con- flict detection. Multi-version and optimistic concurrency control algorithms are both timestamp-based. In modern multi-core systems, a centralized timestamp allocation would incur significant performance overhead. Most recent studies have focused on addressing such contention [<A href="file:///C:/SuperMemo/systems/Incremental/temp/HTMLFile.htm#_bookmark29"><FONT color=#0000ff>12</FONT></A>, <A href="file:///C:/SuperMemo/systems/Incremental/temp/HTMLFile.htm#_bookmark31"><FONT color=#0000ff>15</FONT></A>, <A href="file:///C:/SuperMemo/systems/Incremental/temp/HTMLFile.htm#_bookmark54"><FONT color=#0000ff>64</FONT></A>&#8211;<A href="file:///C:/SuperMemo/systems/Incremental/temp/HTMLFile.htm#_bookmark55"><FONT color=#0000ff>68</FONT></A>]. Hence, all the prior arts above differ from our approach as to motivation and exhibit the limitation that the legacy linear search algorithm over multiple versions still needs to be addressed.</P>
<P class=western style="MARGIN-TOP: 0.01in; MARGIN-LEFT: 0.56in; LINE-HEIGHT: 98%; MARGIN-RIGHT: 0.22in; TEXT-INDENT: 0.21in" align=justify><FONT face="Georgia, serif">Version Searching. </FONT>Multi-version concurrency Control (MVCC) is the most com- mon concurrency control mechanism in database systems. Although multi-versioning itself is non-blocking and scalable, it produces long version chains and causes massive read amplifies for heterogeneous workloads. However, for the past decades, we have seen<SPAN style="LETTER-SPACING: 1.3pt"> </SPAN>remarkable<SPAN style="LETTER-SPACING: 1.3pt"> </SPAN>progress<SPAN style="LETTER-SPACING: 1.3pt"> </SPAN>in<SPAN style="LETTER-SPACING: 1.3pt"> </SPAN>query<SPAN style="LETTER-SPACING: 1.3pt"> </SPAN>optimizations<SPAN style="LETTER-SPACING: 1.3pt"> </SPAN>and<SPAN style="LETTER-SPACING: 1.3pt"> </SPAN>access<SPAN style="LETTER-SPACING: 1.3pt"> </SPAN>methods,<SPAN style="LETTER-SPACING: 1.3pt"> </SPAN>all<SPAN style="LETTER-SPACING: 1.3pt"> </SPAN>the<SPAN style="LETTER-SPACING: 1.3pt"> </SPAN>effort to expedite the search for the most recently updated tuples, taking no heed of ver- sioned<SPAN style="LETTER-SPACING: -0.1pt"> </SPAN>data<SPAN style="LETTER-SPACING: -0.1pt"> </SPAN>[<A href="file:///C:/SuperMemo/systems/Incremental/temp/HTMLFile.htm#_bookmark32"><FONT color=#0000ff>16</FONT></A>].<SPAN style="LETTER-SPACING: -0.1pt"> </SPAN>Existing<SPAN style="LETTER-SPACING: -0.1pt"> </SPAN>approaches<SPAN style="LETTER-SPACING: -0.1pt"> </SPAN>amend<SPAN style="LETTER-SPACING: -0.1pt"> </SPAN>multi-versioning<SPAN style="LETTER-SPACING: -0.1pt"> </SPAN>overheads<SPAN style="LETTER-SPACING: -0.1pt"> </SPAN>by<SPAN style="LETTER-SPACING: -0.1pt"> </SPAN>frequently collecting<SPAN style="LETTER-SPACING: 2pt"> </SPAN>unreachable<SPAN style="LETTER-SPACING: 2pt"> </SPAN>versions<SPAN style="LETTER-SPACING: 2pt"> </SPAN>through<SPAN style="LETTER-SPACING: 2pt"> </SPAN>active<SPAN style="LETTER-SPACING: 2pt"> </SPAN>or<SPAN style="LETTER-SPACING: 2pt"> </SPAN>passive<SPAN style="LETTER-SPACING: 2pt"> </SPAN>garbage<SPAN style="LETTER-SPACING: 2pt"> </SPAN>collection<SPAN style="LETTER-SPACING: 2pt"> </SPAN>(GC) [<A href="file:///C:/SuperMemo/systems/Incremental/temp/HTMLFile.htm#_bookmark27"><FONT color=#0000ff>10</FONT></A>,<SPAN style="LETTER-SPACING: -0.2pt"> </SPAN><A href="file:///C:/SuperMemo/systems/Incremental/temp/HTMLFile.htm#_bookmark28"><FONT color=#0000ff>11</FONT></A>,<SPAN style="LETTER-SPACING: -0.2pt"> </SPAN><A href="file:///C:/SuperMemo/systems/Incremental/temp/HTMLFile.htm#_bookmark56"><FONT color=#0000ff>69</FONT></A>,<SPAN style="LETTER-SPACING: -0.2pt"> </SPAN><A href="file:///C:/SuperMemo/systems/Incremental/temp/HTMLFile.htm#_bookmark57"><FONT color=#0000ff>70</FONT></A>].<SPAN style="LETTER-SPACING: -0.2pt"> </SPAN>There<SPAN style="LETTER-SPACING: -0.2pt"> </SPAN>are<SPAN style="LETTER-SPACING: -0.2pt"> </SPAN>researches<SPAN style="LETTER-SPACING: -0.2pt"> </SPAN>on<SPAN style="LETTER-SPACING: -0.2pt"> </SPAN>multi-version<SPAN style="LETTER-SPACING: -0.2pt"> </SPAN>B-trees<SPAN style="LETTER-SPACING: -0.2pt"> </SPAN>whose<SPAN style="LETTER-SPACING: -0.2pt"> </SPAN>index<SPAN style="LETTER-SPACING: -0.2pt"> </SPAN>would<SPAN style="LETTER-SPACING: -0.2pt"> </SPAN>span an index record and its versions to overcome the linear version traversal through nest- ing a version search structure [<A href="file:///C:/SuperMemo/systems/Incremental/temp/HTMLFile.htm#_bookmark35"><FONT color=#0000ff>19</FONT></A>, <A href="file:///C:/SuperMemo/systems/Incremental/temp/HTMLFile.htm#_bookmark58"><FONT color=#0000ff>71</FONT></A>, <A href="file:///C:/SuperMemo/systems/Incremental/temp/HTMLFile.htm#_bookmark59"><FONT color=#0000ff>72</FONT></A>]. Another research focuses on a lightweight access method for multi-versioned data that is constructed by weaving per record fru- gal skip lists [<A href="file:///C:/SuperMemo/systems/Incremental/temp/HTMLFile.htm#_bookmark32"><FONT color=#0000ff>16</FONT></A>]. Despite its merits, this approach should be used carefully due to the cost of reorganizing version search structures and increased memory space overhead.</P>
<P class=western><BR></P>
<P class=western><BR></P>
<P class=western><BR></P>
<P class=western><BR></P>
<P class=western><BR></P>
<P class=western style="MARGIN-TOP: 0.1in"><BR></P>
<P class=western style="MARGIN-LEFT: 0.34in" align=center><SPAN style="LETTER-SPACING: -0.3pt">22</SPAN></P>
<OL start=8>
<LI>