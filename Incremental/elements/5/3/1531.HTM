<b> : </b><A name="Update-Intensive Workloads"></A><FONT face="Palatino Linotype, serif">Update-Intensive</FONT><FONT face="Palatino Linotype, serif"><SPAN style="LETTER-SPACING: -0.3pt"> </SPAN></FONT><FONT face="Palatino Linotype, serif"><SPAN style="LETTER-SPACING: -0.1pt">Workloads</SPAN></FONT></H2></LI></OL></OL>
<P class=western style="MARGIN-TOP: 0.07in; MARGIN-LEFT: 0.22in; LINE-HEIGHT: 96%; MARGIN-RIGHT: 0.56in; TEXT-INDENT: 0in" align=justify>On the write-intensive workload in Figure <FONT color=#0000ff><A href="file:///C:/SuperMemo/systems/Incremental/temp/HTMLFile.htm#_bookmark15"><FONT color=#000080>14</FONT></A> </FONT>(a), scalable version-aware data place- ment&#8217;s<SPAN style="LETTER-SPACING: -0.1pt"> </SPAN>throughput is 1.6<FONT face="SimSun-ExtB, serif">&#215;</FONT>-2<FONT face="SimSun-ExtB, serif">&#215;</FONT><FONT face="SimSun-ExtB, serif"><SPAN style="LETTER-SPACING: -1.4pt"> </SPAN></FONT>higher than that of traditional data placement. Since many more update operations and increased worker threads, the version chain length would grow quickly. As the version chain length increases, index-only visibility checks and version partitioning gain importance because unnecessary access to versions can <SPAN style="LETTER-SPACING: -0.1pt">be reduced. In the scalable version-aware data placement, index-only access is sufficient </SPAN>for<SPAN style="LETTER-SPACING: 1pt"> </SPAN>updates,<SPAN style="LETTER-SPACING: 1.1pt"> </SPAN>and<SPAN style="LETTER-SPACING: 1.1pt"> </SPAN>version<SPAN style="LETTER-SPACING: 1pt"> </SPAN>partitioning<SPAN style="LETTER-SPACING: 1pt"> </SPAN>accelerates<SPAN style="LETTER-SPACING: 1pt"> </SPAN>version<SPAN style="LETTER-SPACING: 1.1pt"> </SPAN>searches.<SPAN style="LETTER-SPACING: 1.1pt"> </SPAN>In<SPAN style="LETTER-SPACING: 1pt"> </SPAN>the<SPAN style="LETTER-SPACING: 1pt"> </SPAN><SPAN style="LETTER-SPACING: -0.1pt">traditional</SPAN></P>
<P class=western><BR></P>
<P class=western style="MARGIN-TOP: 0.02in"><BR></P>
<P class=western style="MARGIN-RIGHT: 0.34in" align=center><SPAN style="LETTER-SPACING: -0.3pt">17</SPAN></P>
<P class=western style="PAGE-BREAK-BEFORE: always; MARGIN-LEFT: 1.08in"><IMG border=0 name="Image 654" src="file:///C:/Users/aaron/AppData/Local/Temp/lu21164a2h8qi.tmp/lu21164a2h8vc_tmp_a651fbc08e02b5dc.jpg" width=588 align=bottom height=240> </P>
<P class=western style="MARGIN-TOP: 0.09in; MARGIN-LEFT: 0.56in; LINE-HEIGHT: 96%; MARGIN-RIGHT: 0.22in" align=justify><A name=_bookmark15></A><FONT style="FONT-SIZE: 11pt" size=2><FONT face="Georgia, serif"><FONT style="FONT-SIZE: 8pt" size=1>Fig. 14</FONT></FONT><FONT face="Georgia, serif"><FONT style="FONT-SIZE: 8pt" size=1><SPAN style="LETTER-SPACING: 2pt"> </SPAN></FONT></FONT><FONT style="FONT-SIZE: 8pt" size=1>The throughput of scalable version-aware and traditional data placements for the YCSB-A workload (1 million tuples, 1 million transaction, 2 operations per transaction.).</FONT></FONT></P>
<P class=western style="MARGIN-TOP: 0.08in"><BR></P>
<P class=western style="MARGIN-LEFT: 0.56in; LINE-HEIGHT: 98%; MARGIN-RIGHT: 0.22in" align=justify>data<SPAN style="LETTER-SPACING: -0.6pt"> </SPAN>placement,<SPAN style="LETTER-SPACING: -0.6pt"> </SPAN>either<SPAN style="LETTER-SPACING: -0.6pt"> </SPAN>update<SPAN style="LETTER-SPACING: -0.6pt"> </SPAN>or<SPAN style="LETTER-SPACING: -0.6pt"> </SPAN>search<SPAN style="LETTER-SPACING: -0.6pt"> </SPAN>must<SPAN style="LETTER-SPACING: -0.6pt"> </SPAN>process<SPAN style="LETTER-SPACING: -0.6pt"> </SPAN>every<SPAN style="LETTER-SPACING: -0.6pt"> </SPAN>tuple<SPAN style="LETTER-SPACING: -0.6pt"> </SPAN>version<SPAN style="LETTER-SPACING: -0.6pt"> </SPAN>of<SPAN style="LETTER-SPACING: -0.6pt"> </SPAN>the<SPAN style="LETTER-SPACING: -0.6pt"> </SPAN>version chain, leading to many latencies.</P>
<P class=western style="MARGIN-TOP: 0in; MARGIN-LEFT: 0.56in; LINE-HEIGHT: 98%; MARGIN-RIGHT: 0.22in; TEXT-INDENT: 0.21in" align=justify>To measure the effectiveness of the scalable version-aware data placement in skewed scenarios,<SPAN style="LETTER-SPACING: -0.7pt"> </SPAN>we<SPAN style="LETTER-SPACING: -0.6pt"> </SPAN>use<SPAN style="LETTER-SPACING: -0.7pt"> </SPAN>20<SPAN style="LETTER-SPACING: -0.6pt"> </SPAN>worker<SPAN style="LETTER-SPACING: -0.7pt"> </SPAN>threads<SPAN style="LETTER-SPACING: -0.6pt"> </SPAN>to<SPAN style="LETTER-SPACING: -0.7pt"> </SPAN>run<SPAN style="LETTER-SPACING: -0.6pt"> </SPAN>the<SPAN style="LETTER-SPACING: -0.6pt"> </SPAN>same<SPAN style="LETTER-SPACING: -0.7pt"> </SPAN>workload<SPAN style="LETTER-SPACING: -0.6pt"> </SPAN>with<SPAN style="LETTER-SPACING: -0.7pt"> </SPAN>different<SPAN style="LETTER-SPACING: -0.6pt"> </SPAN>Zipfian distributions. Figure <FONT color=#0000ff><A href="file:///C:/SuperMemo/systems/Incremental/temp/HTMLFile.htm#_bookmark15"><FONT color=#000080>14</FONT></A> </FONT>(b) shows the throughput for theta values from 0.0 to 0.99 (significant<SPAN style="LETTER-SPACING: -0.1pt"> </SPAN>skew).<SPAN style="LETTER-SPACING: -0.1pt"> </SPAN>The<SPAN style="LETTER-SPACING: -0.1pt"> </SPAN>version<SPAN style="LETTER-SPACING: -0.1pt"> </SPAN>chain<SPAN style="LETTER-SPACING: -0.1pt"> </SPAN>length<SPAN style="LETTER-SPACING: -0.1pt"> </SPAN>would<SPAN style="LETTER-SPACING: -0.1pt"> </SPAN>become<SPAN style="LETTER-SPACING: -0.1pt"> </SPAN>very<SPAN style="LETTER-SPACING: -0.1pt"> </SPAN>long<SPAN style="LETTER-SPACING: -0.1pt"> </SPAN>under<SPAN style="LETTER-SPACING: -0.1pt"> </SPAN>skewed update-intensive<SPAN style="LETTER-SPACING: -0.7pt"> </SPAN>workloads,<SPAN style="LETTER-SPACING: -0.6pt"> </SPAN>but<SPAN style="LETTER-SPACING: -0.7pt"> </SPAN>the<SPAN style="LETTER-SPACING: -0.6pt"> </SPAN>scalable<SPAN style="LETTER-SPACING: -0.7pt"> </SPAN>version-aware<SPAN style="LETTER-SPACING: -0.6pt"> </SPAN>data<SPAN style="LETTER-SPACING: -0.7pt"> </SPAN>placement<SPAN style="LETTER-SPACING: -0.6pt"> </SPAN>outper- <SPAN style="LETTER-SPACING: -0.1pt">forms traditional placements. Two reasons contribute to its good performance: first, </SPAN>version partitioning offers a short read path, and second, the thread-local partitioning optimization<SPAN style="LETTER-SPACING: -0.4pt"> </SPAN>avoids<SPAN style="LETTER-SPACING: -0.4pt"> </SPAN>using<SPAN style="LETTER-SPACING: -0.4pt"> </SPAN>a<SPAN style="LETTER-SPACING: -0.4pt"> </SPAN>global<SPAN style="LETTER-SPACING: -0.4pt"> </SPAN>lock<SPAN style="LETTER-SPACING: -0.4pt"> </SPAN>by<SPAN style="LETTER-SPACING: -0.4pt"> </SPAN>letting<SPAN style="LETTER-SPACING: -0.4pt"> </SPAN>each<SPAN style="LETTER-SPACING: -0.4pt"> </SPAN>thread<SPAN style="LETTER-SPACING: -0.4pt"> </SPAN>manage<SPAN style="LETTER-SPACING: -0.4pt"> </SPAN>a<SPAN style="LETTER-SPACING: -0.4pt"> </SPAN>private-free data structure.</P>
<P class=western style="MARGIN-TOP: 0.05in"><SPAN class=sd-abs-pos style="WIDTH: 599px; POSITION: absolute; LEFT: 2.24in; TOP: 0.24in">&nbsp;</SPAN><BR></P>
<P class=western style="MARGIN-TOP: 0.06in; MARGIN-LEFT: 0.56in; LINE-HEIGHT: 96%; MARGIN-RIGHT: 0.22in" align=justify><A name=_bookmark16></A><FONT style="FONT-SIZE: 11pt" size=2><FONT face="Georgia, serif"><FONT style="FONT-SIZE: 8pt" size=1>Fig.</FONT></FONT><FONT face="Georgia, serif"><FONT style="FONT-SIZE: 8pt" size=1><SPAN style="LETTER-SPACING: -0.4pt"> </SPAN></FONT></FONT><FONT face="Georgia, serif"><FONT style="FONT-SIZE: 8pt" size=1>15</FONT></FONT><FONT face="Georgia, serif"><FONT style="FONT-SIZE: 8pt" size=1><SPAN style="LETTER-SPACING: 1pt"> </SPAN></FONT></FONT><FONT style="FONT-SIZE: 8pt" size=1>The</FONT><FONT style="FONT-SIZE: 8pt" size=1><SPAN style="LETTER-SPACING: -0.5pt"> </SPAN></FONT><FONT style="FONT-SIZE: 8pt" size=1>throughput</FONT><FONT style="FONT-SIZE: 8pt" size=1><SPAN style="LETTER-SPACING: -0.5pt"> </SPAN></FONT><FONT style="FONT-SIZE: 8pt" size=1>of</FONT><FONT style="FONT-SIZE: 8pt" size=1><SPAN style="LETTER-SPACING: -0.5pt"> </SPAN></FONT><FONT style="FONT-SIZE: 8pt" size=1>scalable</FONT><FONT style="FONT-SIZE: 8pt" size=1><SPAN style="LETTER-SPACING: -0.5pt"> </SPAN></FONT><FONT style="FONT-SIZE: 8pt" size=1>version-aware</FONT><FONT style="FONT-SIZE: 8pt" size=1><SPAN style="LETTER-SPACING: -0.5pt"> </SPAN></FONT><FONT style="FONT-SIZE: 8pt" size=1>and</FONT><FONT style="FONT-SIZE: 8pt" size=1><SPAN style="LETTER-SPACING: -0.5pt"> </SPAN></FONT><FONT style="FONT-SIZE: 8pt" size=1>traditional</FONT><FONT style="FONT-SIZE: 8pt" size=1><SPAN style="LETTER-SPACING: -0.5pt"> </SPAN></FONT><FONT style="FONT-SIZE: 8pt" size=1>data</FONT><FONT style="FONT-SIZE: 8pt" size=1><SPAN style="LETTER-SPACING: -0.5pt"> </SPAN></FONT><FONT style="FONT-SIZE: 8pt" size=1>placements</FONT><FONT style="FONT-SIZE: 8pt" size=1><SPAN style="LETTER-SPACING: -0.5pt"> </SPAN></FONT><FONT style="FONT-SIZE: 8pt" size=1>for</FONT><FONT style="FONT-SIZE: 8pt" size=1><SPAN style="LETTER-SPACING: -0.5pt"> </SPAN></FONT><FONT style="FONT-SIZE: 8pt" size=1>the</FONT><FONT style="FONT-SIZE: 8pt" size=1><SPAN style="LETTER-SPACING: -0.5pt"> </SPAN></FONT><FONT style="FONT-SIZE: 8pt" size=1>TPC-C </FONT><FONT style="FONT-SIZE: 8pt" size=1><SPAN style="LETTER-SPACING: -0.1pt">workload. (10 warehouses, 0.1 million transactions. )</SPAN></FONT></FONT></P>
<P class=western><BR></P>
<P class=western style="MARGIN-TOP: 0.01in"><BR></P>
<P class=western style="MARGIN-LEFT: 0.56in; LINE-HEIGHT: 98%; MARGIN-RIGHT: 0.22in; TEXT-INDENT: 0.21in" align=justify>Figure <FONT color=#0000ff><A href="file:///C:/SuperMemo/systems/Incremental/temp/HTMLFile.htm#_bookmark16"><FONT color=#000080>15</FONT></A> </FONT>(a) evaluates throughput performance with TPC-C workload, having <SPAN style="LETTER-SPACING: -0.1pt">only</SPAN><SPAN style="LETTER-SPACING: -0.3pt"> </SPAN><SPAN style="LETTER-SPACING: -0.1pt">NewOrder</SPAN><SPAN style="LETTER-SPACING: -0.3pt"> </SPAN><SPAN style="LETTER-SPACING: -0.1pt">transactions.</SPAN><SPAN style="LETTER-SPACING: -0.3pt"> </SPAN><SPAN style="LETTER-SPACING: -0.1pt">We</SPAN><SPAN style="LETTER-SPACING: -0.3pt"> </SPAN><SPAN style="LETTER-SPACING: -0.1pt">see</SPAN><SPAN style="LETTER-SPACING: -0.3pt"> </SPAN><SPAN style="LETTER-SPACING: -0.1pt">that</SPAN><SPAN style="LETTER-SPACING: -0.3pt"> </SPAN><SPAN style="LETTER-SPACING: -0.1pt">all</SPAN><SPAN style="LETTER-SPACING: -0.3pt"> </SPAN><SPAN style="LETTER-SPACING: -0.1pt">schemes</SPAN><SPAN style="LETTER-SPACING: -0.3pt"> </SPAN><SPAN style="LETTER-SPACING: -0.1pt">scale</SPAN><SPAN style="LETTER-SPACING: -0.3pt"> </SPAN><SPAN style="LETTER-SPACING: -0.1pt">well,</SPAN><SPAN style="LETTER-SPACING: -0.3pt"> </SPAN><SPAN style="LETTER-SPACING: -0.1pt">and</SPAN><SPAN style="LETTER-SPACING: -0.3pt"> </SPAN><SPAN style="LETTER-SPACING: -0.1pt">both</SPAN><SPAN style="LETTER-SPACING: -0.3pt"> </SPAN><SPAN style="LETTER-SPACING: -0.1pt">range</SPAN><SPAN style="LETTER-SPACING: -0.3pt"> </SPAN><SPAN style="LETTER-SPACING: -0.1pt">par- </SPAN>titioning<SPAN style="LETTER-SPACING: -0.6pt"> </SPAN>and<SPAN style="LETTER-SPACING: -0.6pt"> </SPAN>epoch<SPAN style="LETTER-SPACING: -0.6pt"> </SPAN>partitioning<SPAN style="LETTER-SPACING: -0.6pt"> </SPAN>achieve<SPAN style="LETTER-SPACING: -0.6pt"> </SPAN>higher<SPAN style="LETTER-SPACING: -0.6pt"> </SPAN>throughput<SPAN style="LETTER-SPACING: -0.6pt"> </SPAN>than<SPAN style="LETTER-SPACING: -0.6pt"> </SPAN>the<SPAN style="LETTER-SPACING: -0.6pt"> </SPAN>traditional<SPAN style="LETTER-SPACING: -0.6pt"> </SPAN>data placements.<SPAN style="LETTER-SPACING: -0.3pt"> </SPAN>It<SPAN style="LETTER-SPACING: -0.3pt"> </SPAN>is<SPAN style="LETTER-SPACING: -0.3pt"> </SPAN>crucial<SPAN style="LETTER-SPACING: -0.3pt"> </SPAN>to<SPAN style="LETTER-SPACING: -0.3pt"> </SPAN>highlight<SPAN style="LETTER-SPACING: -0.3pt"> </SPAN>that<SPAN style="LETTER-SPACING: -0.3pt"> </SPAN>update<SPAN style="LETTER-SPACING: -0.3pt"> </SPAN>and<SPAN style="LETTER-SPACING: -0.3pt"> </SPAN>insert<SPAN style="LETTER-SPACING: -0.3pt"> </SPAN>operations<SPAN style="LETTER-SPACING: -0.3pt"> </SPAN>play<SPAN style="LETTER-SPACING: -0.3pt"> </SPAN>a<SPAN style="LETTER-SPACING: -0.3pt"> </SPAN>crucial role<SPAN style="LETTER-SPACING: 0.2pt"> </SPAN>in<SPAN style="LETTER-SPACING: 0.2pt"> </SPAN>the<SPAN style="LETTER-SPACING: 0.2pt"> </SPAN>NewOrder<SPAN style="LETTER-SPACING: 0.2pt"> </SPAN>transaction,<SPAN style="LETTER-SPACING: 0.2pt"> </SPAN>constituting<SPAN style="LETTER-SPACING: 0.2pt"> </SPAN>a<SPAN style="LETTER-SPACING: 0.2pt"> </SPAN>substantial<SPAN style="LETTER-SPACING: 0.2pt"> </SPAN>portion<SPAN style="LETTER-SPACING: 0.2pt"> </SPAN>(up<SPAN style="LETTER-SPACING: 0.2pt"> </SPAN>to<SPAN style="LETTER-SPACING: 0.2pt"> </SPAN>60%)<SPAN style="LETTER-SPACING: 0.2pt"> </SPAN><SPAN style="LETTER-SPACING: -0.3pt">of</SPAN></P>
<P class=western><BR></P>
<P class=western style="MARGIN-TOP: 0.04in"><BR></P>
<P class=western style="MARGIN-LEFT: 0.34in" align=center><SPAN style="LETTER-SPACING: -0.3pt">18</SPAN></P>
<P class=western style="MARGIN-TOP: 0.03in; PAGE-BREAK-BEFORE: always; MARGIN-LEFT: 0.22in; LINE-HEIGHT: 98%; MARGIN-RIGHT: 0.56in" align=justify>its execution. Therefore, Peloton&#8217;s overall throughput is higher than that of Hekaton, and the performance improvements are mainly due to index-only visibility checks.</P>
<P class=western style="MARGIN-TOP: 0in; MARGIN-LEFT: 0.22in; LINE-HEIGHT: 98%; MARGIN-RIGHT: 0.56in; TEXT-INDENT: 0.21in" align=justify>Figure <FONT color=#0000ff><A href="file:///C:/SuperMemo/systems/Incremental/temp/HTMLFile.htm#_bookmark16"><FONT color=#000080>15</FONT></A> </FONT>(b) shows the throughput performance when we include all five transac-<SPAN style="LETTER-SPACING: 4pt"> </SPAN>tion<SPAN style="LETTER-SPACING: -0.5pt"> </SPAN>types<SPAN style="LETTER-SPACING: -0.5pt"> </SPAN>of<SPAN style="LETTER-SPACING: -0.5pt"> </SPAN>the<SPAN style="LETTER-SPACING: -0.5pt"> </SPAN>TPC-C<SPAN style="LETTER-SPACING: -0.5pt"> </SPAN>workloads.<SPAN style="LETTER-SPACING: -0.5pt"> </SPAN>Specifically,<SPAN style="LETTER-SPACING: -0.5pt"> </SPAN>we<SPAN style="LETTER-SPACING: -0.5pt"> </SPAN>repeat<SPAN style="LETTER-SPACING: -0.5pt"> </SPAN>the<SPAN style="LETTER-SPACING: -0.5pt"> </SPAN>experiment<SPAN style="LETTER-SPACING: -0.5pt"> </SPAN>described in<SPAN style="LETTER-SPACING: -0.1pt"> </SPAN>the<SPAN style="LETTER-SPACING: -0.1pt"> </SPAN>previous<SPAN style="LETTER-SPACING: -0.1pt"> </SPAN>paragraph,<SPAN style="LETTER-SPACING: -0.1pt"> </SPAN>but<SPAN style="LETTER-SPACING: -0.1pt"> </SPAN>this<SPAN style="LETTER-SPACING: -0.1pt"> </SPAN>time,<SPAN style="LETTER-SPACING: -0.1pt"> </SPAN>we<SPAN style="LETTER-SPACING: -0.1pt"> </SPAN>include<SPAN style="LETTER-SPACING: -0.1pt"> </SPAN>all<SPAN style="LETTER-SPACING: -0.1pt"> </SPAN>the<SPAN style="LETTER-SPACING: -0.1pt"> </SPAN>transaction<SPAN style="LETTER-SPACING: -0.1pt"> </SPAN>types<SPAN style="LETTER-SPACING: -0.1pt"> </SPAN>of<SPAN style="LETTER-SPACING: -0.1pt"> </SPAN>the workload. We observe a similar behavior as with (a), and version partitioning becomes more important as the version chains grow and long-running operations increase. How- ever, both approaches pay a centralized timestamp allocation penalty after 15 worker threads. Under the Hekaton transaction scheme, a transaction needs to be assigned a global timestamp at both its beginning and committing.</P>
<OL>
<OL start=3>
<LI>