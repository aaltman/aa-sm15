<b> : </b><A name="Latency Analysis"></A><FONT face="Palatino Linotype, serif">Latency</FONT><FONT face="Palatino Linotype, serif"><SPAN style="LETTER-SPACING: 1.4pt"> </SPAN></FONT><FONT face="Palatino Linotype, serif"><SPAN style="LETTER-SPACING: -0.1pt">Analysis</SPAN></FONT></H2></LI></OL></OL>
<P class=western style="MARGIN-TOP: 0.07in; MARGIN-LEFT: 0.56in; LINE-HEIGHT: 98%; MARGIN-RIGHT: 0.22in" align=justify>In this experiment, we perform latency analysis. We run the different number of NewOrder transaction threads and one TPC-CH-Q2 transaction thread simultane- ously<SPAN style="LETTER-SPACING: 1.4pt"> </SPAN>to<SPAN style="LETTER-SPACING: 1.4pt"> </SPAN>emulate<SPAN style="LETTER-SPACING: 1.4pt"> </SPAN>a<SPAN style="LETTER-SPACING: 1.4pt"> </SPAN>long-running,<SPAN style="LETTER-SPACING: 1.4pt"> </SPAN>complex<SPAN style="LETTER-SPACING: 1.4pt"> </SPAN>query.<SPAN style="LETTER-SPACING: 1.4pt"> </SPAN>Because<SPAN style="LETTER-SPACING: 1.4pt"> </SPAN>the<SPAN style="LETTER-SPACING: 1.4pt"> </SPAN>majority<SPAN style="LETTER-SPACING: 1.4pt"> </SPAN>of<SPAN style="LETTER-SPACING: 1.4pt"> </SPAN>CH-Q2<SPAN style="LETTER-SPACING: 1.4pt"> </SPAN>access is<SPAN style="LETTER-SPACING: -0.1pt"> </SPAN>in<SPAN style="LETTER-SPACING: -0.1pt"> </SPAN>the<SPAN style="LETTER-SPACING: -0.1pt"> </SPAN>item<SPAN style="LETTER-SPACING: -0.1pt"> </SPAN>and<SPAN style="LETTER-SPACING: -0.1pt"> </SPAN>stock<SPAN style="LETTER-SPACING: -0.1pt"> </SPAN>tables,<SPAN style="LETTER-SPACING: -0.1pt"> </SPAN>a<SPAN style="LETTER-SPACING: -0.1pt"> </SPAN>CH-Q2<SPAN style="LETTER-SPACING: -0.2pt"> </SPAN>transaction<SPAN style="LETTER-SPACING: -0.1pt"> </SPAN>will<SPAN style="LETTER-SPACING: -0.1pt"> </SPAN>frequently<SPAN style="LETTER-SPACING: -0.1pt"> </SPAN>conflict<SPAN style="LETTER-SPACING: -0.1pt"> </SPAN>with<SPAN style="LETTER-SPACING: -0.1pt"> </SPAN>the NewOrder transaction.</P>
<P class=western style="MARGIN-TOP: 0in; MARGIN-LEFT: 0.56in; LINE-HEIGHT: 98%; MARGIN-RIGHT: 0.22in; TEXT-INDENT: 0.21in" align=justify>Figure<SPAN style="LETTER-SPACING: -0.3pt"> </SPAN><A href="file:///C:/SuperMemo/systems/Incremental/temp/HTMLFile.htm#_bookmark20"><FONT color=#0000ff>19</FONT></A><FONT color=#0000ff><SPAN style="LETTER-SPACING: -0.3pt"> </SPAN></FONT>shows<SPAN style="LETTER-SPACING: -0.3pt"> </SPAN>the<SPAN style="LETTER-SPACING: -0.3pt"> </SPAN>latency<SPAN style="LETTER-SPACING: -0.3pt"> </SPAN>of<SPAN style="LETTER-SPACING: -0.3pt"> </SPAN>the<SPAN style="LETTER-SPACING: -0.3pt"> </SPAN>CH-Q2<SPAN style="LETTER-SPACING: -0.3pt"> </SPAN>query<SPAN style="LETTER-SPACING: -0.3pt"> </SPAN>over<SPAN style="LETTER-SPACING: -0.3pt"> </SPAN>varying<SPAN style="LETTER-SPACING: -0.3pt"> </SPAN>numbers<SPAN style="LETTER-SPACING: -0.3pt"> </SPAN>of<SPAN style="LETTER-SPACING: -0.3pt"> </SPAN>NewOrder threads. Note that the latency of the CH-Q2 transaction is proportional to the number of threads in the NewOrder workload. The Stock table, which is heavily accessed by NewOrder transactions, grows proportionally to the scale factor, leading to long ver- sion<SPAN style="LETTER-SPACING: -0.5pt"> </SPAN>chains.<SPAN style="LETTER-SPACING: -0.5pt"> </SPAN>The<SPAN style="LETTER-SPACING: -0.5pt"> </SPAN>scalable<SPAN style="LETTER-SPACING: -0.5pt"> </SPAN>version-aware<SPAN style="LETTER-SPACING: -0.5pt"> </SPAN>data<SPAN style="LETTER-SPACING: -0.6pt"> </SPAN>placement<SPAN style="LETTER-SPACING: -0.5pt"> </SPAN>accelerates<SPAN style="LETTER-SPACING: -0.5pt"> </SPAN>the<SPAN style="LETTER-SPACING: -0.5pt"> </SPAN>scan<SPAN style="LETTER-SPACING: -0.5pt"> </SPAN>operations of<SPAN style="LETTER-SPACING: 1.7pt"> </SPAN>the<SPAN style="LETTER-SPACING: 1.7pt"> </SPAN>CH-Q2<SPAN style="LETTER-SPACING: 1.7pt"> </SPAN>query<SPAN style="LETTER-SPACING: 1.7pt"> </SPAN>to<SPAN style="LETTER-SPACING: 1.7pt"> </SPAN>shorten<SPAN style="LETTER-SPACING: 1.7pt"> </SPAN>the<SPAN style="LETTER-SPACING: 1.7pt"> </SPAN>latency,<SPAN style="LETTER-SPACING: 1.7pt"> </SPAN>thus<SPAN style="LETTER-SPACING: 1.7pt"> </SPAN>improving<SPAN style="LETTER-SPACING: 1.7pt"> </SPAN>query<SPAN style="LETTER-SPACING: 1.7pt"> </SPAN>throughput.</P>
<P class=western style="MARGIN-TOP: 0in; MARGIN-LEFT: 0.56in; LINE-HEIGHT: 98%; MARGIN-RIGHT: 0.22in; TEXT-INDENT: 0.21in" align=justify>Since the update operations within the NewOrder transaction often access the current versions, they rarely suffer from the extended version chains. The scalable version-aware data placement stores the current versions in the tree index, saving<SPAN style="LETTER-SPACING: 4pt"> </SPAN>one<SPAN style="LETTER-SPACING: 0.9pt"> </SPAN>cache<SPAN style="LETTER-SPACING: 0.9pt"> </SPAN>miss<SPAN style="LETTER-SPACING: 0.9pt"> </SPAN>for<SPAN style="LETTER-SPACING: 0.9pt"> </SPAN>transactions<SPAN style="LETTER-SPACING: 0.9pt"> </SPAN>accessing<SPAN style="LETTER-SPACING: 0.9pt"> </SPAN>the<SPAN style="LETTER-SPACING: 0.9pt"> </SPAN>current<SPAN style="LETTER-SPACING: 0.9pt"> </SPAN>versions.<SPAN style="LETTER-SPACING: 0.9pt"> </SPAN>We<SPAN style="LETTER-SPACING: 0.9pt"> </SPAN>observe<SPAN style="LETTER-SPACING: 0.9pt"> </SPAN>that<SPAN style="LETTER-SPACING: 0.9pt"> </SPAN><SPAN style="LETTER-SPACING: -0.3pt">the</SPAN></P>
<P class=western><BR></P>
<P class=western style="MARGIN-TOP: 0in"><BR></P>
<P class=western style="MARGIN-LEFT: 0.34in" align=center><SPAN style="LETTER-SPACING: -0.3pt">20</SPAN></P>
<P class=western style="PAGE-BREAK-BEFORE: always; MARGIN-LEFT: 0.74in"><IMG border=0 name="Image 659" src="file:///C:/Users/aaron/AppData/Local/Temp/lu21164a2h8qi.tmp/lu21164a2h8vc_tmp_26bd205d198cb7a3.jpg" width=599 align=bottom height=256> </P>
<P class=western style="MARGIN-TOP: 0.06in; MARGIN-LEFT: 0.22in; LINE-HEIGHT: 96%; MARGIN-RIGHT: 0.56in" align=justify><A name=_bookmark20></A><FONT style="FONT-SIZE: 11pt" size=2><FONT face="Georgia, serif"><FONT style="FONT-SIZE: 8pt" size=1>Fig. 19</FONT></FONT><FONT face="Georgia, serif"><FONT style="FONT-SIZE: 8pt" size=1><SPAN style="LETTER-SPACING: 2pt"> </SPAN></FONT></FONT><FONT style="FONT-SIZE: 8pt" size=1>The throughput performance under </FONT><FONT style="FONT-SIZE: 8pt" size=1>TPC-</FONT><FONT style="FONT-SIZE: 8pt" size=1>C heterogeneous workloads. </FONT><FONT style="FONT-SIZE: 8pt" size=1>TPCC </FONT><FONT style="FONT-SIZE: 8pt" size=1>NewOrder throughput (left); </FONT><FONT style="FONT-SIZE: 8pt" size=1>CH-</FONT><FONT style="FONT-SIZE: 8pt" size=1>Q2 throughput (right); 10 warehouses, 0.1 million transactions.</FONT></FONT></P>
<P class=western style="MARGIN-TOP: 0.08in"><BR></P>
<P class=western style="MARGIN-LEFT: 0.22in; LINE-HEIGHT: 98%; MARGIN-RIGHT: 0.56in" align=justify>NewOrder transaction throughput cannot significantly benefit from scalable version- aware data placement. However, long-running query transactions would access older versions, and they generally suffer severe latency problems. If these update-intensive transaction throughputs become much higher, then performance collapse may arise due<SPAN style="LETTER-SPACING: 2pt"> </SPAN>to long version chains. Thus, the scalable version-aware data placement gains impor- tance because version partitioning can reduce unnecessary version accesses, saving more cache misses.</P>
<OL>
<OL start=5>
<LI>