<b> : </b><A name="Partition Size"></A><FONT face="Palatino Linotype, serif">Partition</FONT><FONT face="Palatino Linotype, serif"><SPAN style="LETTER-SPACING: 2.7pt"> </SPAN></FONT><FONT face="Palatino Linotype, serif"><SPAN style="LETTER-SPACING: -0.2pt">Size</SPAN></FONT></H2></LI></OL></OL>
<P class=western style="MARGIN-TOP: 0.07in; MARGIN-LEFT: 0.22in; LINE-HEIGHT: 98%; MARGIN-RIGHT: 0.56in" align=justify>The<SPAN style="LETTER-SPACING: 0.8pt"> </SPAN>optimal<SPAN style="LETTER-SPACING: 0.8pt"> </SPAN>partition<SPAN style="LETTER-SPACING: 0.8pt"> </SPAN>size<SPAN style="LETTER-SPACING: 0.8pt"> </SPAN>depends<SPAN style="LETTER-SPACING: 0.8pt"> </SPAN>on<SPAN style="LETTER-SPACING: 0.8pt"> </SPAN>the<SPAN style="LETTER-SPACING: 0.8pt"> </SPAN>workload<SPAN style="LETTER-SPACING: 0.8pt"> </SPAN>and<SPAN style="LETTER-SPACING: 0.8pt"> </SPAN>the<SPAN style="LETTER-SPACING: 0.8pt"> </SPAN>performance<SPAN style="LETTER-SPACING: 0.8pt"> </SPAN>of<SPAN style="LETTER-SPACING: 0.8pt"> </SPAN>the<SPAN style="LETTER-SPACING: 0.8pt"> </SPAN>system. A<SPAN style="LETTER-SPACING: -0.5pt"> </SPAN>faster<SPAN style="LETTER-SPACING: -0.4pt"> </SPAN>system<SPAN style="LETTER-SPACING: -0.5pt"> </SPAN>with<SPAN style="LETTER-SPACING: -0.4pt"> </SPAN>high<SPAN style="LETTER-SPACING: -0.4pt"> </SPAN>update<SPAN style="LETTER-SPACING: -0.5pt"> </SPAN>rates<SPAN style="LETTER-SPACING: -0.4pt"> </SPAN>generates<SPAN style="LETTER-SPACING: -0.5pt"> </SPAN>more<SPAN style="LETTER-SPACING: -0.4pt"> </SPAN>versions<SPAN style="LETTER-SPACING: -0.5pt"> </SPAN>and<SPAN style="LETTER-SPACING: -0.4pt"> </SPAN>has<SPAN style="LETTER-SPACING: -0.4pt"> </SPAN>to<SPAN style="LETTER-SPACING: -0.5pt"> </SPAN>tune<SPAN style="LETTER-SPACING: -0.5pt"> </SPAN>the partition size. We run a heterogeneous workload by combining 20 YCSB-A worker threads and 1 YCSB-C worker thread with significant skew access. Figure <FONT color=#0000ff><A href="file:///C:/SuperMemo/systems/Incremental/temp/HTMLFile.htm#_bookmark21"><FONT color=#000080>20</FONT></A> </FONT>shows the throughput when varying the partition size.</P>
<P class=western style="MARGIN-TOP: 0in; MARGIN-LEFT: 0.22in; LINE-HEIGHT: 98%; MARGIN-RIGHT: 0.56in; TEXT-INDENT: 0.21in" align=justify>For<SPAN style="LETTER-SPACING: 2pt"> </SPAN>the<SPAN style="LETTER-SPACING: 2pt"> </SPAN>range<SPAN style="LETTER-SPACING: 2pt"> </SPAN>partition<SPAN style="LETTER-SPACING: 2pt"> </SPAN>data<SPAN style="LETTER-SPACING: 2pt"> </SPAN>placement,<SPAN style="LETTER-SPACING: 2pt"> </SPAN>we<SPAN style="LETTER-SPACING: 2pt"> </SPAN>see<SPAN style="LETTER-SPACING: 2pt"> </SPAN>the<SPAN style="LETTER-SPACING: 2pt"> </SPAN>best<SPAN style="LETTER-SPACING: 2pt"> </SPAN>results<SPAN style="LETTER-SPACING: 2pt"> </SPAN>when<SPAN style="LETTER-SPACING: 2pt"> </SPAN>we<SPAN style="LETTER-SPACING: 2pt"> </SPAN>tune the<SPAN style="LETTER-SPACING: 2pt"> </SPAN>range<SPAN style="LETTER-SPACING: 2pt"> </SPAN>to<SPAN style="LETTER-SPACING: 2pt"> </SPAN>be<SPAN style="LETTER-SPACING: 2pt"> </SPAN>as<SPAN style="LETTER-SPACING: 2pt"> </SPAN>large<SPAN style="LETTER-SPACING: 2pt"> </SPAN>as<SPAN style="LETTER-SPACING: 2pt"> </SPAN>possible.<SPAN style="LETTER-SPACING: 2pt"> </SPAN>While<SPAN style="LETTER-SPACING: 2pt"> </SPAN>a<SPAN style="LETTER-SPACING: 2pt"> </SPAN>large<SPAN style="LETTER-SPACING: 2pt"> </SPAN>range<SPAN style="LETTER-SPACING: 2pt"> </SPAN>partition<SPAN style="LETTER-SPACING: 2pt"> </SPAN>enables<SPAN style="LETTER-SPACING: 2pt"> </SPAN>skipping more unnecessary version accesses, it increases the overhead of maintaining the range partition<SPAN style="LETTER-SPACING: 2pt"> </SPAN>and<SPAN style="LETTER-SPACING: 2pt"> </SPAN>traversing<SPAN style="LETTER-SPACING: 2pt"> </SPAN>in<SPAN style="LETTER-SPACING: 2pt"> </SPAN>the<SPAN style="LETTER-SPACING: 2pt"> </SPAN>target<SPAN style="LETTER-SPACING: 2pt"> </SPAN>range<SPAN style="LETTER-SPACING: 2pt"> </SPAN>partition.</P>
<P class=western style="MARGIN-TOP: 0in; MARGIN-LEFT: 0.22in; LINE-HEIGHT: 98%; MARGIN-RIGHT: 0.56in; TEXT-INDENT: 0.21in" align=justify>For the epoch partition data placement, it is best to set the epoch threshold as<SPAN style="LETTER-SPACING: 4pt"> </SPAN>high as possible. However, a large epoch threshold would incur more hash conflicts under a significant skew. We achieved the best results by setting the threshold to 100 ms. This gives the best tradeoff between fast version searching and the maintenance overhead for the thread-local partitioning.</P>
<OL start=7>
<LI>