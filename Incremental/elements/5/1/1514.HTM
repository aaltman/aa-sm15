<b> : </b><A name="Version Timestamp"></A><FONT face="Palatino Linotype, serif"><SPAN style="LETTER-SPACING: -0.1pt">Version</SPAN></FONT><FONT face="Palatino Linotype, serif"><SPAN style="LETTER-SPACING: 0.1pt"> </SPAN></FONT><FONT face="Palatino Linotype, serif"><SPAN style="LETTER-SPACING: -0.1pt">Timestamp</SPAN></FONT></H2></LI></OL></OL>
<P class=western style="MARGIN-TOP: 0.07in; MARGIN-LEFT: 0.22in; LINE-HEIGHT: 98%; MARGIN-RIGHT: 0.56in" align=justify>Most of the recently proposed transaction concurrency control schemes are based on <I>timestamp ordering </I>[<A href="file:///C:/SuperMemo/systems/Incremental/temp/HTMLFile.htm#_bookmark31"><FONT color=#0000ff>15</FONT></A>]. In-memory database systems assign a transaction a times- tamp at its beginning. The timestamp is used to decide which version of tuples to use in the transaction. Every transaction that modifies tuple content commits at a distinct point in time, called the commit timestamp. The version timestamps (begin-ts and<SPAN style="LETTER-SPACING: 2pt"> </SPAN>end-ts) of versions use the transaction&#8217;s initial timestamp or a commit timestamp.</P>
<P class=western style="MARGIN-TOP: 0.09in"><BR></P>
<P class=western style="MARGIN-RIGHT: 0.34in" align=center><SPAN style="LETTER-SPACING: -0.5pt">5</SPAN></P>
<P class=western style="MARGIN-TOP: 0.03in; PAGE-BREAK-BEFORE: always; MARGIN-LEFT: 0.56in; LINE-HEIGHT: 98%; MARGIN-RIGHT: 0.22in; TEXT-INDENT: 0.21in" align=justify>There are two major types of version timestamps. First, timestamps are produced by a monotonically increasing counter, e.g., 64-bit integers [<A href="file:///C:/SuperMemo/systems/Incremental/temp/HTMLFile.htm#_bookmark30"><FONT color=#0000ff>13</FONT></A>, <A href="file:///C:/SuperMemo/systems/Incremental/temp/HTMLFile.htm#_bookmark31"><FONT color=#0000ff>15</FONT></A>, <A href="file:///C:/SuperMemo/systems/Incremental/temp/HTMLFile.htm#_bookmark38"><FONT color=#0000ff>22</FONT></A>]. While this approach uses a shared-memory counter for the timestamp allocation, causing cen- tralized contention points during transaction execution, it minimizes the timestamp management overhead and is also easier to implement. A common way to implement the allocator is through an atomic add instruction that increments the global counter for each timestamp allocation request. Prior work has proposed hardware techniques to<SPAN style="LETTER-SPACING: -0.4pt"> </SPAN>alleviate<SPAN style="LETTER-SPACING: -0.4pt"> </SPAN>this<SPAN style="LETTER-SPACING: -0.4pt"> </SPAN>timestamp<SPAN style="LETTER-SPACING: -0.4pt"> </SPAN>allocation<SPAN style="LETTER-SPACING: -0.4pt"> </SPAN>bottleneck<SPAN style="LETTER-SPACING: -0.4pt"> </SPAN>[<A href="file:///C:/SuperMemo/systems/Incremental/temp/HTMLFile.htm#_bookmark29"><FONT color=#0000ff>12</FONT></A>],<SPAN style="LETTER-SPACING: -0.4pt"> </SPAN>such<SPAN style="LETTER-SPACING: -0.4pt"> </SPAN>as<SPAN style="LETTER-SPACING: -0.4pt"> </SPAN>centralized<SPAN style="LETTER-SPACING: -0.4pt"> </SPAN>asynchronous counters, remote atomic memory operations, and fully synchronized clocks.</P>
<P class=western style="MARGIN-TOP: 0in; MARGIN-LEFT: 0.56in; LINE-HEIGHT: 98%; MARGIN-RIGHT: 0.22in; TEXT-INDENT: 0.21in" align=justify>Second, decentralized timestamps are generated by combining two factors: an epoch and<SPAN style="LETTER-SPACING: -0.6pt"> </SPAN>a<SPAN style="LETTER-SPACING: -0.6pt"> </SPAN>transaction<SPAN style="LETTER-SPACING: -0.6pt"> </SPAN>ID<SPAN style="LETTER-SPACING: -0.6pt"> </SPAN>[<A href="file:///C:/SuperMemo/systems/Incremental/temp/HTMLFile.htm#_bookmark22"><FONT color=#0000ff>1</FONT></A>,<SPAN style="LETTER-SPACING: -0.6pt"> </SPAN><A href="file:///C:/SuperMemo/systems/Incremental/temp/HTMLFile.htm#_bookmark25"><FONT color=#0000ff>6</FONT></A>,<SPAN style="LETTER-SPACING: -0.6pt"> </SPAN><A href="file:///C:/SuperMemo/systems/Incremental/temp/HTMLFile.htm#_bookmark26"><FONT color=#0000ff>8</FONT></A>,<SPAN style="LETTER-SPACING: -0.6pt"> </SPAN><A href="file:///C:/SuperMemo/systems/Incremental/temp/HTMLFile.htm#_bookmark39"><FONT color=#0000ff>23</FONT></A>].<SPAN style="LETTER-SPACING: -0.6pt"> </SPAN>Those<SPAN style="LETTER-SPACING: -0.6pt"> </SPAN>timestamps<SPAN style="LETTER-SPACING: -0.6pt"> </SPAN>are<SPAN style="LETTER-SPACING: -0.6pt"> </SPAN>also<SPAN style="LETTER-SPACING: -0.6pt"> </SPAN>64-bit<SPAN style="LETTER-SPACING: -0.6pt"> </SPAN>integers;<SPAN style="LETTER-SPACING: -0.6pt"> </SPAN>the<SPAN style="LETTER-SPACING: -0.6pt"> </SPAN>high 32<SPAN style="LETTER-SPACING: 1.3pt"> </SPAN>bits<SPAN style="LETTER-SPACING: 1.3pt"> </SPAN>of<SPAN style="LETTER-SPACING: 1.3pt"> </SPAN>each<SPAN style="LETTER-SPACING: 1.3pt"> </SPAN>timestamp<SPAN style="LETTER-SPACING: 1.3pt"> </SPAN>contain<SPAN style="LETTER-SPACING: 1.3pt"> </SPAN>an<SPAN style="LETTER-SPACING: 1.3pt"> </SPAN>epoch<SPAN style="LETTER-SPACING: 1.3pt"> </SPAN>number,<SPAN style="LETTER-SPACING: 1.3pt"> </SPAN>which<SPAN style="LETTER-SPACING: 1.3pt"> </SPAN>equals<SPAN style="LETTER-SPACING: 1.3pt"> </SPAN>the<SPAN style="LETTER-SPACING: 1.3pt"> </SPAN>global<SPAN style="LETTER-SPACING: 1.3pt"> </SPAN>epoch<SPAN style="LETTER-SPACING: 1.3pt"> </SPAN>at the<SPAN style="LETTER-SPACING: -0.3pt"> </SPAN>corresponding<SPAN style="LETTER-SPACING: -0.3pt"> </SPAN>transaction&#8217;s<SPAN style="LETTER-SPACING: -0.3pt"> </SPAN>commit<SPAN style="LETTER-SPACING: -0.3pt"> </SPAN>time.<SPAN style="LETTER-SPACING: -0.3pt"> </SPAN>The<SPAN style="LETTER-SPACING: -0.3pt"> </SPAN>lower<SPAN style="LETTER-SPACING: -0.3pt"> </SPAN>32<SPAN style="LETTER-SPACING: -0.3pt"> </SPAN>bits<SPAN style="LETTER-SPACING: -0.3pt"> </SPAN>are<SPAN style="LETTER-SPACING: -0.3pt"> </SPAN>the<SPAN style="LETTER-SPACING: -0.3pt"> </SPAN>transaction IDs<SPAN style="LETTER-SPACING: -0.7pt"> </SPAN>increasing<SPAN style="LETTER-SPACING: -0.6pt"> </SPAN>monotonically.<SPAN style="LETTER-SPACING: -0.7pt"> </SPAN>An<SPAN style="LETTER-SPACING: -0.6pt"> </SPAN>epoch<SPAN style="LETTER-SPACING: -0.7pt"> </SPAN>is<SPAN style="LETTER-SPACING: -0.6pt"> </SPAN>allocated<SPAN style="LETTER-SPACING: -0.7pt"> </SPAN>at<SPAN style="LETTER-SPACING: -0.6pt"> </SPAN>coarse<SPAN style="LETTER-SPACING: -0.6pt"> </SPAN>time<SPAN style="LETTER-SPACING: -0.7pt"> </SPAN>granularity<SPAN style="LETTER-SPACING: -0.6pt"> </SPAN>(every 40 ms or longer). When a transaction starts, it registers itself in the current epoch by entering the epoch. This approach enables parallelism and removes the centralized timestamp allocator.</P>
<OL>
<OL start=4>
<LI>