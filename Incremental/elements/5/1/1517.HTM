<b> : </b><A name=Discussion></A><FONT face="Palatino Linotype, serif"><SPAN style="LETTER-SPACING: -0.1pt">Discussion</SPAN></FONT></H2></LI></OL></OL>
<P class=western style="MARGIN-TOP: 0.07in; MARGIN-LEFT: 0.09in; LINE-HEIGHT: 98%; MARGIN-RIGHT: 0.56in" align=right>Existing data placement designs for modern in-memory MVCC database systems use table<SPAN style="LETTER-SPACING: 0.9pt"> </SPAN>indexes<SPAN style="LETTER-SPACING: 0.9pt"> </SPAN>and<SPAN style="LETTER-SPACING: 0.9pt"> </SPAN>version<SPAN style="LETTER-SPACING: 0.9pt"> </SPAN>chains<SPAN style="LETTER-SPACING: 0.9pt"> </SPAN>to<SPAN style="LETTER-SPACING: 0.9pt"> </SPAN>store<SPAN style="LETTER-SPACING: 0.9pt"> </SPAN>tuple<SPAN style="LETTER-SPACING: 0.9pt"> </SPAN>versions.<SPAN style="LETTER-SPACING: 0.9pt"> </SPAN>However,<SPAN style="LETTER-SPACING: 0.9pt"> </SPAN>these<SPAN style="LETTER-SPACING: 0.9pt"> </SPAN><SPAN style="LETTER-SPACING: -0.1pt">approaches</SPAN></P>
<P class=western style="MARGIN-TOP: 0.08in"><BR></P>
<P class=western style="MARGIN-RIGHT: 0.34in" align=center><SPAN style="LETTER-SPACING: -0.5pt">7</SPAN></P></DIV>
<P class=western style="MARGIN-TOP: 0.03in; PAGE-BREAK-BEFORE: always; MARGIN-LEFT: 0.56in; LINE-HEIGHT: 98%; MARGIN-RIGHT: 0.22in" align=justify>are write-optimized and result in read amplification when dealing with heterogeneous workloads. Table indexes only provide tuple references, requiring additional linear traversals to fetch tuple versions from version storage. Moreover, version chain orga- nizations lack filtering information, needing visibility checks for each version until the visible version is found for the given transaction.</P>
<OL start=3>
<LI>