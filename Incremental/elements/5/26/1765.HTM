<b> : </b><SPAN class=section-number style="BOX-SIZING: border-box">2.3.<SPAN>&nbsp;</SPAN></SPAN>Memory Hierarchy<A title="Permalink to this headline" class=headerlink style="BOX-SIZING: border-box; CURSOR: pointer; TEXT-DECORATION: none; COLOR: ; FONT: 14px/1 FontAwesome; MARGIN-LEFT: 0.5em; DISPLAY: inline-block; text-rendering: auto; -webkit-font-smoothing: antialiased; opacity: 0" href="https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#memory-hierarchy">&#61633;</A></H2>
<P style="BOX-SIZING: border-box; COLOR: ; MARGIN: 15px 5px 15px 0px">CUDA threads may access data from multiple memory spaces during their execution as illustrated by<SPAN>&nbsp;</SPAN><A class="reference external" style="BOX-SIZING: border-box; CURSOR: pointer; TEXT-DECORATION: none; COLOR: " href="https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#memory-hierarchy-memory-hierarchy-figure"><FONT color=#0066cc size=3>Figure 6</FONT></A>. Each thread has private local memory. Each thread block has shared memory visible to all threads of the block and with the same lifetime as the block. Thread blocks in a thread block cluster can perform read, write, and atomics operations on each other&#8217;s shared memory. All threads have access to the same global memory.</P>
<P style="BOX-SIZING: border-box; COLOR: ; MARGIN: 15px 5px 15px 0px">There are also two additional read-only memory spaces accessible by all threads: the constant and texture memory spaces. The global, constant, and texture memory spaces are optimized for different memory usages (see<SPAN>&nbsp;</SPAN><A class="reference external" style="BOX-SIZING: border-box; CURSOR: pointer; TEXT-DECORATION: none; COLOR: " href="https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#device-memory-accesses"><FONT color=#0066cc size=3>Device Memory Accesses</FONT></A>). Texture memory also offers different addressing modes, as well as data filtering, for some specific data formats (see<SPAN>&nbsp;</SPAN><A class="reference external" style="BOX-SIZING: border-box; CURSOR: pointer; TEXT-DECORATION: none; COLOR: " href="https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#texture-and-surface-memory"><FONT color=#0066cc size=3>Texture and Surface Memory</FONT></A>).</P>
<P style="BOX-SIZING: border-box; COLOR: ; MARGIN: 15px 5px 15px 0px">The global, constant, and texture memory spaces are persistent across kernel launches by the same application.</P><FIGURE id=memory-hierarchy-memory-hierarchy-figure class=align-center style="BOX-SIZING: border-box; TEXT-ALIGN: center; MARGIN: auto; DISPLAY: block"><IMG style="BOX-SIZING: border-box; MAX-WIDTH: 100%; BORDER-TOP: 0px; HEIGHT: auto; BORDER-RIGHT: 0px; VERTICAL-ALIGN: middle; BORDER-BOTTOM: 0px; BORDER-LEFT: 0px" alt="Memory Hierarchy" src="https://docs.nvidia.com/cuda/cuda-c-programming-guide/_images/memory-hierarchy.png"><FIGCAPTION style="BOX-SIZING: border-box; DISPLAY: block">
<P style="BOX-SIZING: border-box; COLOR: ; MARGIN: 15px 5px 15px 0px"><SPAN class=caption-number style="BOX-SIZING: border-box">Figure 6<SPAN>&nbsp;</SPAN></SPAN><SPAN class=caption-text style="BOX-SIZING: border-box; FONT-STYLE: italic">Memory Hierarchy</SPAN><A title="Permalink to this image" class=headerlink style="BOX-SIZING: border-box; CURSOR: pointer; TEXT-DECORATION: none; COLOR: ; FONT: 14px/1 FontAwesome; MARGIN-LEFT: 0.5em; DISPLAY: inline-block; text-rendering: auto; -webkit-font-smoothing: antialiased; opacity: 0" href="https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#memory-hierarchy-memory-hierarchy-figure">&#61633;</A></P></FIGCAPTION></FIGURE></SECTION><SECTION id=heterogeneous-programming style="BOX-SIZING: border-box; FONT-SIZE: 16px; FONT-FAMILY: NVIDIA, Arial, Helvetica, sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(26,26,26); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; DISPLAY: block; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial">