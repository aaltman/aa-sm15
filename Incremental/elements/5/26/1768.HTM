<b> : </b><SPAN class=section-number style="BOX-SIZING: border-box">2.5.1.<SPAN>&nbsp;</SPAN></SPAN>Asynchronous Operations<A title="Permalink to this headline" class=headerlink style="BOX-SIZING: border-box; CURSOR: pointer; TEXT-DECORATION: none; COLOR: ; FONT: 14px/1 FontAwesome; MARGIN-LEFT: 0.5em; DISPLAY: inline-block; text-rendering: auto; -webkit-font-smoothing: antialiased; opacity: 0" href="https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#asynchronous-operations">&#61633;</A></H3>
<P style="BOX-SIZING: border-box; COLOR: ; MARGIN: 15px 5px 15px 0px">An asynchronous operation is defined as an operation that is initiated by a CUDA thread and is executed asynchronously as-if by another thread. In a well formed program one or more CUDA threads synchronize with the asynchronous operation. The CUDA thread that initiated the asynchronous operation is not required to be among the synchronizing threads.</P>
<P style="BOX-SIZING: border-box; COLOR: ; MARGIN: 15px 5px 15px 0px">Such an asynchronous thread (an as-if thread) is always associated with the CUDA thread that initiated the asynchronous operation. An asynchronous operation uses a synchronization object to synchronize the completion of the operation. Such a synchronization object can be explicitly managed by a user (e.g.,<SPAN>&nbsp;</SPAN><CODE class="docutils literal notranslate" style="BOX-SIZING: border-box; FONT-SIZE: 12px; MAX-WIDTH: 100%; BORDER-TOP: rgb(225,228,229) 1px solid; FONT-FAMILY: var(--nv-font-face-mono); BORDER-RIGHT: rgb(225,228,229) 1px solid; BACKGROUND: rgb(255,255,255); WHITE-SPACE: normal; OVERFLOW-X: auto; BORDER-BOTTOM: rgb(225,228,229) 1px solid; COLOR: rgb(231,76,60); PADDING-BOTTOM: 2px; PADDING-TOP: 2px; PADDING-LEFT: 5px; BORDER-LEFT: rgb(225,228,229) 1px solid; PADDING-RIGHT: 5px"><SPAN class=pre style="BOX-SIZING: border-box">cuda::memcpy_async</SPAN></CODE>) or implicitly managed within a library (e.g.,<SPAN>&nbsp;</SPAN><CODE class="docutils literal notranslate" style="BOX-SIZING: border-box; FONT-SIZE: 12px; MAX-WIDTH: 100%; BORDER-TOP: rgb(225,228,229) 1px solid; FONT-FAMILY: var(--nv-font-face-mono); BORDER-RIGHT: rgb(225,228,229) 1px solid; BACKGROUND: rgb(255,255,255); WHITE-SPACE: normal; OVERFLOW-X: auto; BORDER-BOTTOM: rgb(225,228,229) 1px solid; COLOR: rgb(231,76,60); PADDING-BOTTOM: 2px; PADDING-TOP: 2px; PADDING-LEFT: 5px; BORDER-LEFT: rgb(225,228,229) 1px solid; PADDING-RIGHT: 5px"><SPAN class=pre style="BOX-SIZING: border-box">cooperative_groups::memcpy_async</SPAN></CODE>).</P>
<P style="BOX-SIZING: border-box; COLOR: ; MARGIN: 15px 5px 15px 0px">A synchronization object could be a<SPAN>&nbsp;</SPAN><CODE class="docutils literal notranslate" style="BOX-SIZING: border-box; FONT-SIZE: 12px; MAX-WIDTH: 100%; BORDER-TOP: rgb(225,228,229) 1px solid; FONT-FAMILY: var(--nv-font-face-mono); BORDER-RIGHT: rgb(225,228,229) 1px solid; BACKGROUND: rgb(255,255,255); WHITE-SPACE: normal; OVERFLOW-X: auto; BORDER-BOTTOM: rgb(225,228,229) 1px solid; COLOR: rgb(231,76,60); PADDING-BOTTOM: 2px; PADDING-TOP: 2px; PADDING-LEFT: 5px; BORDER-LEFT: rgb(225,228,229) 1px solid; PADDING-RIGHT: 5px"><SPAN class=pre style="BOX-SIZING: border-box">cuda::barrier</SPAN></CODE><SPAN>&nbsp;</SPAN>or a<SPAN>&nbsp;</SPAN><CODE class="docutils literal notranslate" style="BOX-SIZING: border-box; FONT-SIZE: 12px; MAX-WIDTH: 100%; BORDER-TOP: rgb(225,228,229) 1px solid; FONT-FAMILY: var(--nv-font-face-mono); BORDER-RIGHT: rgb(225,228,229) 1px solid; BACKGROUND: rgb(255,255,255); WHITE-SPACE: normal; OVERFLOW-X: auto; BORDER-BOTTOM: rgb(225,228,229) 1px solid; COLOR: rgb(231,76,60); PADDING-BOTTOM: 2px; PADDING-TOP: 2px; PADDING-LEFT: 5px; BORDER-LEFT: rgb(225,228,229) 1px solid; PADDING-RIGHT: 5px"><SPAN class=pre style="BOX-SIZING: border-box">cuda::pipeline</SPAN></CODE>. These objects are explained in detail in<SPAN>&nbsp;</SPAN><A class="reference external" style="BOX-SIZING: border-box; CURSOR: pointer; TEXT-DECORATION: none; COLOR: " href="https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#aw-barrier"><FONT color=#0066cc size=3>Asynchronous Barrier</FONT></A><SPAN>&nbsp;</SPAN>and<SPAN>&nbsp;</SPAN><A class="reference external" style="BOX-SIZING: border-box; CURSOR: pointer; TEXT-DECORATION: none; COLOR: " href="https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#asynchronous-data-copies"><FONT color=#0066cc size=3>Asynchronous Data Copies using cuda::pipeline</FONT></A>. These synchronization objects can be used at different thread scopes. A scope defines the set of threads that may use the synchronization object to synchronize with the asynchronous operation. The following table defines the thread scopes available in CUDA C++ and the threads that can be synchronized with each.</P>
<DIV class=wy-table-responsive style="BOX-SIZING: border-box; OVERFLOW: auto; MARGIN-BOTTOM: 24px; MAX-WIDTH: 100%">
<TABLE class="table-no-stripes colwidths-given docutils align-default" style="BOX-SIZING: border-box; MARGIN-BOTTOM: 24px; BORDER-TOP: 1px solid; BORDER-RIGHT: 1px solid; BORDER-COLLAPSE: collapse; BORDER-BOTTOM: 1px solid; EMPTY-CELLS: show; BORDER-SPACING: 0px; BORDER-LEFT: 1px solid; border-image: initial">
<COLGROUP style="BOX-SIZING: border-box">
<COL style="BOX-SIZING: border-box; WIDTH: 600px">
<COL style="BOX-SIZING: border-box; WIDTH: 257px"></COLGROUP>
<THEAD style="BOX-SIZING: border-box; VERTICAL-ALIGN: bottom; WHITE-SPACE: nowrap; COLOR: rgb(0,0,0); TEXT-ALIGN: left">
<TR class=row-odd style="BOX-SIZING: border-box">
<TH class=head style="BOX-SIZING: border-box; FONT-SIZE: 14px; OVERFLOW: visible; BORDER-TOP: 1px solid; BORDER-RIGHT: 1px solid; WHITE-SPACE: nowrap; BORDER-BOTTOM: 1px solid; FONT-WEIGHT: 700; COLOR: ; PADDING-BOTTOM: 8px; PADDING-TOP: 8px; PADDING-LEFT: 16px; BORDER-LEFT: 1px solid; MARGIN: 0px; PADDING-RIGHT: 16px; border-image: initial">
<P style="BOX-SIZING: border-box; COLOR: ; MARGIN: 0px 5px 0px 0px">Thread Scope</P></TH>
<TH class=head style="BOX-SIZING: border-box; FONT-SIZE: 14px; OVERFLOW: visible; BORDER-TOP: 1px solid; BORDER-RIGHT: 1px solid; WHITE-SPACE: nowrap; BORDER-BOTTOM: 1px solid; FONT-WEIGHT: 700; COLOR: ; PADDING-BOTTOM: 8px; PADDING-TOP: 8px; PADDING-LEFT: 16px; BORDER-LEFT: 1px solid; MARGIN: 0px; PADDING-RIGHT: 16px; border-image: initial">
<P style="BOX-SIZING: border-box; COLOR: ; MARGIN: 0px 5px 0px 0px">Description</P></TH></TR></THEAD>
<TBODY style="BOX-SIZING: border-box">
<TR class=row-even style="BOX-SIZING: border-box">
<TD style="BOX-SIZING: border-box; OVERFLOW: visible; VERTICAL-ALIGN: top; WHITE-SPACE: normal !important; BORDER-BOTTOM: 1px solid; PADDING-BOTTOM: 8px; PADDING-TOP: 8px; PADDING-LEFT: 16px; BORDER-LEFT: 1px solid; MARGIN: 0px; PADDING-RIGHT: 16px">
<P style="BOX-SIZING: border-box; COLOR: ; MARGIN: 0px 5px 0px 0px"><CODE class="docutils literal notranslate" style="BOX-SIZING: border-box; FONT-SIZE: 12px; MAX-WIDTH: 100%; BORDER-TOP: rgb(225,228,229) 1px solid; FONT-FAMILY: var(--nv-font-face-mono); BORDER-RIGHT: rgb(225,228,229) 1px solid; BACKGROUND: rgb(255,255,255); WHITE-SPACE: normal; OVERFLOW-X: auto; BORDER-BOTTOM: rgb(225,228,229) 1px solid; COLOR: rgb(231,76,60); PADDING-BOTTOM: 2px; PADDING-TOP: 2px; PADDING-LEFT: 5px; BORDER-LEFT: rgb(225,228,229) 1px solid; PADDING-RIGHT: 5px"><SPAN class=pre style="BOX-SIZING: border-box">cuda::thread_scope::thread_scope_thread</SPAN></CODE></P></TD>
<TD style="BOX-SIZING: border-box; OVERFLOW: visible; VERTICAL-ALIGN: top; WHITE-SPACE: normal !important; BORDER-BOTTOM: 1px solid; PADDING-BOTTOM: 8px; PADDING-TOP: 8px; PADDING-LEFT: 16px; BORDER-LEFT: 1px solid; MARGIN: 0px; PADDING-RIGHT: 16px">
<P style="BOX-SIZING: border-box; COLOR: ; MARGIN: 0px 5px 0px 0px">Only the CUDA thread which initiated asynchronous operations synchronizes.</P></TD></TR>
<TR class=row-odd style="BOX-SIZING: border-box">
<TD style="BOX-SIZING: border-box; OVERFLOW: visible; VERTICAL-ALIGN: top; WHITE-SPACE: normal !important; BORDER-BOTTOM: 1px solid; PADDING-BOTTOM: 8px; PADDING-TOP: 8px; PADDING-LEFT: 16px; BORDER-LEFT: 1px solid; MARGIN: 0px; PADDING-RIGHT: 16px; BACKGROUND-COLOR: transparent">
<P style="BOX-SIZING: border-box; COLOR: ; MARGIN: 0px 5px 0px 0px"><CODE class="docutils literal notranslate" style="BOX-SIZING: border-box; FONT-SIZE: 12px; MAX-WIDTH: 100%; BORDER-TOP: rgb(225,228,229) 1px solid; FONT-FAMILY: var(--nv-font-face-mono); BORDER-RIGHT: rgb(225,228,229) 1px solid; BACKGROUND: rgb(255,255,255); WHITE-SPACE: normal; OVERFLOW-X: auto; BORDER-BOTTOM: rgb(225,228,229) 1px solid; COLOR: rgb(231,76,60); PADDING-BOTTOM: 2px; PADDING-TOP: 2px; PADDING-LEFT: 5px; BORDER-LEFT: rgb(225,228,229) 1px solid; PADDING-RIGHT: 5px"><SPAN class=pre style="BOX-SIZING: border-box">cuda::thread_scope::thread_scope_block</SPAN></CODE></P></TD>
<TD style="BOX-SIZING: border-box; OVERFLOW: visible; VERTICAL-ALIGN: top; WHITE-SPACE: normal !important; BORDER-BOTTOM: 1px solid; PADDING-BOTTOM: 8px; PADDING-TOP: 8px; PADDING-LEFT: 16px; BORDER-LEFT: 1px solid; MARGIN: 0px; PADDING-RIGHT: 16px; BACKGROUND-COLOR: transparent">
<P style="BOX-SIZING: border-box; COLOR: ; MARGIN: 0px 5px 0px 0px">All or any CUDA threads within the same thread block as the initiating thread synchronizes.</P></TD></TR>
<TR class=row-even style="BOX-SIZING: border-box">
<TD style="BOX-SIZING: border-box; OVERFLOW: visible; VERTICAL-ALIGN: top; WHITE-SPACE: normal !important; BORDER-BOTTOM: 1px solid; PADDING-BOTTOM: 8px; PADDING-TOP: 8px; PADDING-LEFT: 16px; BORDER-LEFT: 1px solid; MARGIN: 0px; PADDING-RIGHT: 16px">
<P style="BOX-SIZING: border-box; COLOR: ; MARGIN: 0px 5px 0px 0px"><CODE class="docutils literal notranslate" style="BOX-SIZING: border-box; FONT-SIZE: 12px; MAX-WIDTH: 100%; BORDER-TOP: rgb(225,228,229) 1px solid; FONT-FAMILY: var(--nv-font-face-mono); BORDER-RIGHT: rgb(225,228,229) 1px solid; BACKGROUND: rgb(255,255,255); WHITE-SPACE: normal; OVERFLOW-X: auto; BORDER-BOTTOM: rgb(225,228,229) 1px solid; COLOR: rgb(231,76,60); PADDING-BOTTOM: 2px; PADDING-TOP: 2px; PADDING-LEFT: 5px; BORDER-LEFT: rgb(225,228,229) 1px solid; PADDING-RIGHT: 5px"><SPAN class=pre style="BOX-SIZING: border-box">cuda::thread_scope::thread_scope_device</SPAN></CODE></P></TD>
<TD style="BOX-SIZING: border-box; OVERFLOW: visible; VERTICAL-ALIGN: top; WHITE-SPACE: normal !important; BORDER-BOTTOM: 1px solid; PADDING-BOTTOM: 8px; PADDING-TOP: 8px; PADDING-LEFT: 16px; BORDER-LEFT: 1px solid; MARGIN: 0px; PADDING-RIGHT: 16px">
<P style="BOX-SIZING: border-box; COLOR: ; MARGIN: 0px 5px 0px 0px">All or any CUDA threads in the same GPU device as the initiating thread synchronizes.</P></TD></TR>
<TR class=row-odd style="BOX-SIZING: border-box">
<TD style="BOX-SIZING: border-box; OVERFLOW: visible; VERTICAL-ALIGN: top; WHITE-SPACE: normal !important; BORDER-BOTTOM: 0px solid; PADDING-BOTTOM: 8px; PADDING-TOP: 8px; PADDING-LEFT: 16px; BORDER-LEFT: 1px solid; MARGIN: 0px; PADDING-RIGHT: 16px; BACKGROUND-COLOR: transparent">
<P style="BOX-SIZING: border-box; COLOR: ; MARGIN: 0px 5px 0px 0px"><CODE class="docutils literal notranslate" style="BOX-SIZING: border-box; FONT-SIZE: 12px; MAX-WIDTH: 100%; BORDER-TOP: rgb(225,228,229) 1px solid; FONT-FAMILY: var(--nv-font-face-mono); BORDER-RIGHT: rgb(225,228,229) 1px solid; BACKGROUND: rgb(255,255,255); WHITE-SPACE: normal; OVERFLOW-X: auto; BORDER-BOTTOM: rgb(225,228,229) 1px solid; COLOR: rgb(231,76,60); PADDING-BOTTOM: 2px; PADDING-TOP: 2px; PADDING-LEFT: 5px; BORDER-LEFT: rgb(225,228,229) 1px solid; PADDING-RIGHT: 5px"><SPAN class=pre style="BOX-SIZING: border-box">cuda::thread_scope::thread_scope_system</SPAN></CODE></P></TD>
<TD style="BOX-SIZING: border-box; OVERFLOW: visible; VERTICAL-ALIGN: top; WHITE-SPACE: normal !important; BORDER-BOTTOM: 0px solid; PADDING-BOTTOM: 8px; PADDING-TOP: 8px; PADDING-LEFT: 16px; BORDER-LEFT: 1px solid; MARGIN: 0px; PADDING-RIGHT: 16px; BACKGROUND-COLOR: transparent">
<P style="BOX-SIZING: border-box; COLOR: ; MARGIN: 0px 5px 0px 0px">All or any CUDA or CPU threads in the same system as the initiating thread synchronizes.</P></TD></TR></TBODY></TABLE></DIV>
<P style="BOX-SIZING: border-box; COLOR: ; MARGIN: 15px 5px 15px 0px">These thread scopes are implemented as extensions to standard C++ in the<SPAN>&nbsp;</SPAN><A class="reference external" style="BOX-SIZING: border-box; CURSOR: pointer; TEXT-DECORATION: none; COLOR: " href="https://nvidia.github.io/libcudacxx/extended_api/memory_model.html#thread-scopes"><FONT color=#0066cc size=3>CUDA Standard C++</FONT></A><SPAN>&nbsp;</SPAN>library.</P></SECTION></SECTION><SECTION id=compute-capability style="BOX-SIZING: border-box; FONT-SIZE: 16px; FONT-FAMILY: NVIDIA, Arial, Helvetica, sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(26,26,26); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; DISPLAY: block; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial">