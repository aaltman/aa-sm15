<b> : </b><A name="Experimental Evaluation"></A>Experimental<SPAN style="LETTER-SPACING: -0.3pt"> </SPAN><SPAN style="LETTER-SPACING: -0.1pt">Evaluation</SPAN></H1></LI></OL>
<P class=western style="MARGIN-TOP: 0.1in; MARGIN-LEFT: 0.56in; LINE-HEIGHT: 98%; MARGIN-RIGHT: 0.22in" align=justify>This section compares the performance of scalable version-aware data placement and existing in-memory MVCC database system designs [<A href="file:///C:/SuperMemo/systems/Incremental/temp/HTMLFile.htm#_bookmark22"><FONT color=#0000ff>1</FONT></A>, <A href="file:///C:/SuperMemo/systems/Incremental/temp/HTMLFile.htm#_bookmark23"><FONT color=#0000ff>2</FONT></A>]. Peloton supports tuple- oriented and column-oriented table storage schemes, linked list-like chains, and tuple identifier<SPAN style="LETTER-SPACING: 2pt"> </SPAN>references<SPAN style="LETTER-SPACING: 2pt"> </SPAN>[<A href="file:///C:/SuperMemo/systems/Incremental/temp/HTMLFile.htm#_bookmark34"><FONT color=#0000ff>18</FONT></A>].<SPAN style="LETTER-SPACING: 2pt"> </SPAN>DBx1000<SPAN style="LETTER-SPACING: 2pt"> </SPAN>uses<SPAN style="LETTER-SPACING: 2pt"> </SPAN>a<SPAN style="LETTER-SPACING: 2pt"> </SPAN>tuple-oriented<SPAN style="LETTER-SPACING: 2pt"> </SPAN>table<SPAN style="LETTER-SPACING: 2pt"> </SPAN>storage<SPAN style="LETTER-SPACING: 2pt"> </SPAN>scheme,<SPAN style="LETTER-SPACING: 2pt"> </SPAN>array- like chains, and tuple pointer references [<A href="file:///C:/SuperMemo/systems/Incremental/temp/HTMLFile.htm#_bookmark42"><FONT color=#0000ff>26</FONT></A>]. For a fair apples-to-apples comparison, we implement<SPAN style="LETTER-SPACING: 1.9pt"> </SPAN>version-aware<SPAN style="LETTER-SPACING: 1.9pt"> </SPAN>data<SPAN style="LETTER-SPACING: 1.9pt"> </SPAN>placement<SPAN style="LETTER-SPACING: 1.9pt"> </SPAN>and<SPAN style="LETTER-SPACING: 1.9pt"> </SPAN>Peloton&#8217;s<SPAN style="LETTER-SPACING: 1.9pt"> </SPAN>data<SPAN style="LETTER-SPACING: 1.9pt"> </SPAN>placement<SPAN style="LETTER-SPACING: 1.9pt"> </SPAN>in<SPAN style="LETTER-SPACING: 1.9pt"> </SPAN>DBx1000<SPAN style="LETTER-SPACING: 1.9pt"> </SPAN><A href="file:///C:/SuperMemo/systems/Incremental/temp/HTMLFile.htm#_bookmark3"><FONT color=#0000ff><SUP>1</SUP></FONT></A>. <SPAN style="LETTER-SPACING: -0.1pt">We</SPAN><SPAN style="LETTER-SPACING: -0.4pt"> </SPAN><SPAN style="LETTER-SPACING: -0.1pt">have</SPAN><SPAN style="LETTER-SPACING: -0.4pt"> </SPAN><SPAN style="LETTER-SPACING: -0.1pt">implemented</SPAN><SPAN style="LETTER-SPACING: -0.4pt"> </SPAN><SPAN style="LETTER-SPACING: -0.1pt">a</SPAN><SPAN style="LETTER-SPACING: -0.4pt"> </SPAN><SPAN style="LETTER-SPACING: -0.1pt">B</SPAN><SUP><SPAN style="LETTER-SPACING: -0.1pt">+</SPAN></SUP><SPAN style="LETTER-SPACING: -0.1pt">-</SPAN><SPAN style="LETTER-SPACING: -0.1pt">tree</SPAN><SPAN style="LETTER-SPACING: -0.4pt"> </SPAN><SPAN style="LETTER-SPACING: -0.1pt">index</SPAN><SPAN style="LETTER-SPACING: -0.4pt"> </SPAN><SPAN style="LETTER-SPACING: -0.1pt">for</SPAN><SPAN style="LETTER-SPACING: -0.4pt"> </SPAN><SPAN style="LETTER-SPACING: -0.1pt">all</SPAN><SPAN style="LETTER-SPACING: -0.4pt"> </SPAN><SPAN style="LETTER-SPACING: -0.1pt">compared</SPAN><SPAN style="LETTER-SPACING: -0.4pt"> </SPAN><SPAN style="LETTER-SPACING: -0.1pt">data</SPAN><SPAN style="LETTER-SPACING: -0.4pt"> </SPAN><SPAN style="LETTER-SPACING: -0.1pt">placements.</SPAN><SPAN style="LETTER-SPACING: -0.4pt"> </SPAN><SPAN style="LETTER-SPACING: -0.1pt">We</SPAN><SPAN style="LETTER-SPACING: -0.4pt"> </SPAN><SPAN style="LETTER-SPACING: -0.1pt">use</SPAN><SPAN style="LETTER-SPACING: -0.4pt"> </SPAN><SPAN style="LETTER-SPACING: -0.1pt">the </SPAN>DBx1000&#8217;s<SPAN style="LETTER-SPACING: 2pt"> </SPAN>Hekaton<SPAN style="LETTER-SPACING: 2pt"> </SPAN>transaction<SPAN style="LETTER-SPACING: 2pt"> </SPAN>scheme.<SPAN style="LETTER-SPACING: 2pt"> </SPAN>We<SPAN style="LETTER-SPACING: 2pt"> </SPAN>optimize<SPAN style="LETTER-SPACING: 2pt"> </SPAN>the<SPAN style="LETTER-SPACING: 2pt"> </SPAN>DBx1000&#8217;s<SPAN style="LETTER-SPACING: 2pt"> </SPAN>implementation of the YCSB and TPC-C benchmarks.</P>
<P class=western style="MARGIN-TOP: 0in; MARGIN-LEFT: 0.56in; LINE-HEIGHT: 98%; MARGIN-RIGHT: 0.22in; TEXT-INDENT: 0.21in" align=justify><FONT face="Georgia, serif">Experimental Setup. </FONT>We deployed DBx1000 <A href="file:///C:/SuperMemo/systems/Incremental/temp/HTMLFile.htm#_bookmark3"><FONT color=#0000ff><SUP>1</SUP></FONT></A><FONT color=#0000ff> </FONT>on an Ubuntu 20.04 LTS server with twenty cores Intel Xeon Gold 5218R CPUs, 2.10 GHz, 28 MB last level cache, and 96 GB DRAM main memory. We execute each run three times and report the average execution results.</P>
<P class=western style="MARGIN-TOP: 0in; MARGIN-LEFT: 0.56in; LINE-HEIGHT: 98%; MARGIN-RIGHT: 0.22in; TEXT-INDENT: 0.21in" align=justify><FONT face="Georgia, serif">YCSB Workloads. </FONT>We use the YCSB [<A href="file:///C:/SuperMemo/systems/Incremental/temp/HTMLFile.htm#_bookmark33"><FONT color=#0000ff>17</FONT></A>] benchmark to model different het- erogeneous<SPAN style="LETTER-SPACING: -0.3pt"> </SPAN>workload<SPAN style="LETTER-SPACING: -0.3pt"> </SPAN>settings.<SPAN style="LETTER-SPACING: -0.3pt"> </SPAN>The<SPAN style="LETTER-SPACING: -0.3pt"> </SPAN>database<SPAN style="LETTER-SPACING: -0.3pt"> </SPAN>contains<SPAN style="LETTER-SPACING: -0.3pt"> </SPAN>a<SPAN style="LETTER-SPACING: -0.3pt"> </SPAN>single<SPAN style="LETTER-SPACING: -0.3pt"> </SPAN>table<SPAN style="LETTER-SPACING: -0.3pt"> </SPAN>with<SPAN style="LETTER-SPACING: -0.3pt"> </SPAN>one<SPAN style="LETTER-SPACING: -0.3pt"> </SPAN>64-bit primary key and ten 100-byte non-primary key columns. The size of the tuple ver- <SPAN style="LETTER-SPACING: -0.1pt">sion</SPAN><SPAN style="LETTER-SPACING: -0.2pt"> </SPAN><SPAN style="LETTER-SPACING: -0.1pt">is</SPAN><SPAN style="LETTER-SPACING: -0.2pt"> </SPAN><SPAN style="LETTER-SPACING: -0.1pt">approximately</SPAN><SPAN style="LETTER-SPACING: -0.2pt"> </SPAN><SPAN style="LETTER-SPACING: -0.1pt">1KB.</SPAN><SPAN style="LETTER-SPACING: -0.2pt"> </SPAN><SPAN style="LETTER-SPACING: -0.1pt">We</SPAN><SPAN style="LETTER-SPACING: -0.2pt"> </SPAN><SPAN style="LETTER-SPACING: -0.1pt">tested</SPAN><SPAN style="LETTER-SPACING: -0.2pt"> </SPAN><SPAN style="LETTER-SPACING: -0.1pt">four</SPAN><SPAN style="LETTER-SPACING: -0.2pt"> </SPAN><SPAN style="LETTER-SPACING: -0.1pt">workloads:</SPAN><SPAN style="LETTER-SPACING: -0.2pt"> </SPAN><SPAN style="LETTER-SPACING: -0.1pt">(1)</SPAN><SPAN style="LETTER-SPACING: -0.2pt"> </SPAN><SPAN style="LETTER-SPACING: -0.1pt">Workload</SPAN><SPAN style="LETTER-SPACING: -0.2pt"> </SPAN><SPAN style="LETTER-SPACING: -0.1pt">A</SPAN><SPAN style="LETTER-SPACING: -0.2pt"> </SPAN><SPAN style="LETTER-SPACING: -0.1pt">comprises</SPAN><SPAN style="LETTER-SPACING: -0.2pt"> </SPAN><SPAN style="LETTER-SPACING: -0.1pt">50% </SPAN>read and 50% update operations, (2) Workload B comprises 95% read and 5% update operations, (3) Workload C comprises 100% read operations, and (4) Workload E com- prises 95% scan and 5% insert operations. We tested access distribution in the run phase using the DBx1000&#8217;s Zipfian distribution implementation.</P>
<P class=western style="MARGIN-TOP: 0in; MARGIN-LEFT: 0.56in; LINE-HEIGHT: 98%; MARGIN-RIGHT: 0.22in; TEXT-INDENT: 0.21in" align=justify><FONT face="Georgia, serif">TPC-C workloads. </FONT>This benchmark is the current standard for measuring the performance<SPAN style="LETTER-SPACING: -0.4pt"> </SPAN>of<SPAN style="LETTER-SPACING: -0.4pt"> </SPAN>OLTP<SPAN style="LETTER-SPACING: -0.6pt"> </SPAN>systems<SPAN style="LETTER-SPACING: -0.4pt"> </SPAN>[<A href="file:///C:/SuperMemo/systems/Incremental/temp/HTMLFile.htm#_bookmark43"><FONT color=#0000ff>27</FONT></A>].<SPAN style="LETTER-SPACING: -0.4pt"> </SPAN>It<SPAN style="LETTER-SPACING: -0.4pt"> </SPAN>models<SPAN style="LETTER-SPACING: -0.4pt"> </SPAN>a<SPAN style="LETTER-SPACING: -0.4pt"> </SPAN>warehouse-centric<SPAN style="LETTER-SPACING: -0.4pt"> </SPAN>order<SPAN style="LETTER-SPACING: -0.4pt"> </SPAN>processing application with nine tables and five transaction types. To simulate heterogeneous workloads, we adopt a Query2 transaction in TPC-CH benchmark [<A href="file:///C:/SuperMemo/systems/Incremental/temp/HTMLFile.htm#_bookmark44"><FONT color=#0000ff>28</FONT></A>]. The TPC-<SPAN style="LETTER-SPACING: 2pt"> </SPAN>CH-Q2<SPAN style="LETTER-SPACING: 0.6pt"> </SPAN>picks<SPAN style="LETTER-SPACING: 0.6pt"> </SPAN>a<SPAN style="LETTER-SPACING: 0.6pt"> </SPAN>random<SPAN style="LETTER-SPACING: 0.6pt"> </SPAN>region<SPAN style="LETTER-SPACING: 0.6pt"> </SPAN>and<SPAN style="LETTER-SPACING: 0.6pt"> </SPAN>updates<SPAN style="LETTER-SPACING: 0.6pt"> </SPAN>items<SPAN style="LETTER-SPACING: 0.7pt"> </SPAN>in<SPAN style="LETTER-SPACING: 0.6pt"> </SPAN>the<SPAN style="LETTER-SPACING: 0.6pt"> </SPAN>stock<SPAN style="LETTER-SPACING: 0.6pt"> </SPAN>table<SPAN style="LETTER-SPACING: 0.6pt"> </SPAN>having<SPAN style="LETTER-SPACING: 0.6pt"> </SPAN>a<SPAN style="LETTER-SPACING: 0.6pt"> </SPAN><SPAN style="LETTER-SPACING: -0.2pt">lower</SPAN></P>
<P class=western style="MARGIN-TOP: 0.08in"><BR></P>
<P class=western style="MARGIN-LEFT: 0.34in" align=center><SPAN style="LETTER-SPACING: -0.3pt">16</SPAN></P></DIV>
<P class=western style="MARGIN-TOP: 0.03in; PAGE-BREAK-BEFORE: always; MARGIN-LEFT: 0.22in; LINE-HEIGHT: 98%; MARGIN-RIGHT: 0.56in" align=justify>quantity than a certain threshold. Because the majority of TPC-CH-Q2 access is in the<SPAN style="LETTER-SPACING: -0.2pt"> </SPAN>Item<SPAN style="LETTER-SPACING: -0.2pt"> </SPAN>and<SPAN style="LETTER-SPACING: -0.2pt"> </SPAN>Stock<SPAN style="LETTER-SPACING: -0.2pt"> </SPAN>tables,<SPAN style="LETTER-SPACING: -0.3pt"> </SPAN>a<SPAN style="LETTER-SPACING: -0.2pt"> </SPAN>TPC-CH-Q2<SPAN style="LETTER-SPACING: -0.2pt"> </SPAN>transaction<SPAN style="LETTER-SPACING: -0.2pt"> </SPAN>will<SPAN style="LETTER-SPACING: -0.2pt"> </SPAN>frequently<SPAN style="LETTER-SPACING: -0.3pt"> </SPAN>conflict<SPAN style="LETTER-SPACING: -0.2pt"> </SPAN>with<SPAN style="LETTER-SPACING: -0.2pt"> </SPAN>the TPC-C NewOrder transaction.</P>
<P class=western style="MARGIN-TOP: 0in; MARGIN-LEFT: 0.22in; LINE-HEIGHT: 98%; MARGIN-RIGHT: 0.56in; TEXT-INDENT: 0.21in" align=justify>We now provide an analysis of the runtime performance of scalable version-aware data placement compared to the existing data placements on different workload mixtures. For each configuration, we scale up the number of worker threads.</P>
<OL>
<OL>
<LI>