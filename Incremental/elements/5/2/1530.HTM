<b> : </b><A name="Read-Intensive Workloads"></A><FONT face="Palatino Linotype, serif">Read-Intensive</FONT><FONT face="Palatino Linotype, serif"><SPAN style="LETTER-SPACING: 0.2pt"> </SPAN></FONT><FONT face="Palatino Linotype, serif"><SPAN style="LETTER-SPACING: -0.1pt">Workloads</SPAN></FONT></H2></LI></OL></OL>
<P class=western style="MARGIN-TOP: 0.1in"><SPAN class=sd-abs-pos style="WIDTH: 588px; POSITION: absolute; LEFT: 1.9in; TOP: 0.31in">&nbsp;</SPAN><BR></P>
<P class=western style="MARGIN-TOP: 0.08in; MARGIN-LEFT: 0.22in; LINE-HEIGHT: 96%; MARGIN-RIGHT: 0.56in" align=justify><A name=_bookmark14></A><FONT style="FONT-SIZE: 11pt" size=2><FONT face="Georgia, serif"><FONT style="FONT-SIZE: 8pt" size=1>Fig. 13</FONT></FONT><FONT face="Georgia, serif"><FONT style="FONT-SIZE: 8pt" size=1><SPAN style="LETTER-SPACING: 1.3pt"> </SPAN></FONT></FONT><FONT style="FONT-SIZE: 8pt" size=1>The throughput of version-aware and traditional data placements for the various YCSB workloads</FONT><FONT style="FONT-SIZE: 8pt" size=1><SPAN style="LETTER-SPACING: -0.2pt"> </SPAN></FONT><FONT style="FONT-SIZE: 8pt" size=1>(YCSB-C:1</FONT><FONT style="FONT-SIZE: 8pt" size=1><SPAN style="LETTER-SPACING: -0.2pt"> </SPAN></FONT><FONT style="FONT-SIZE: 8pt" size=1>million</FONT><FONT style="FONT-SIZE: 8pt" size=1><SPAN style="LETTER-SPACING: -0.2pt"> </SPAN></FONT><FONT style="FONT-SIZE: 8pt" size=1>transaction;</FONT><FONT style="FONT-SIZE: 8pt" size=1><SPAN style="LETTER-SPACING: -0.2pt"> </SPAN></FONT><FONT style="FONT-SIZE: 8pt" size=1>YCSB-B:1</FONT><FONT style="FONT-SIZE: 8pt" size=1><SPAN style="LETTER-SPACING: -0.2pt"> </SPAN></FONT><FONT style="FONT-SIZE: 8pt" size=1>million</FONT><FONT style="FONT-SIZE: 8pt" size=1><SPAN style="LETTER-SPACING: -0.2pt"> </SPAN></FONT><FONT style="FONT-SIZE: 8pt" size=1>transaction,</FONT><FONT style="FONT-SIZE: 8pt" size=1><SPAN style="LETTER-SPACING: -0.2pt"> </SPAN></FONT><FONT style="FONT-SIZE: 8pt" size=1>YCSB-E:0.1</FONT><FONT style="FONT-SIZE: 8pt" size=1><SPAN style="LETTER-SPACING: -0.2pt"> </SPAN></FONT><FONT style="FONT-SIZE: 8pt" size=1>million</FONT><FONT style="FONT-SIZE: 8pt" size=1><SPAN style="LETTER-SPACING: -0.2pt"> </SPAN></FONT><FONT style="FONT-SIZE: 8pt" size=1>trans- </FONT><FONT style="FONT-SIZE: 8pt" size=1>action, 10 range size; 1 million tuples,10 operations per transaction.).</FONT></FONT></P>
<P class=western><BR></P>
<P class=western style="MARGIN-TOP: 0.01in"><BR></P>
<P class=western style="MARGIN-LEFT: 0.22in; LINE-HEIGHT: 96%; MARGIN-RIGHT: 0.56in; TEXT-INDENT: 0.21in" align=justify>We first consider the results of the read-intensive workload with uniform accesses (Zipfian theta=0.0). On the read-only workload in Figure <FONT color=#0000ff><A href="file:///C:/SuperMemo/systems/Incremental/temp/HTMLFile.htm#_bookmark14"><FONT color=#000080>13</FONT></A> </FONT>(a), scalable version-aware data<SPAN style="LETTER-SPACING: -0.6pt"> </SPAN>placement&#8217;s<SPAN style="LETTER-SPACING: -0.3pt"> </SPAN>throughput is 1.67<FONT face="SimSun-ExtB, serif">&#215;</FONT><FONT face="SimSun-ExtB, serif"><SPAN style="LETTER-SPACING: -1.4pt"> </SPAN></FONT>higher than that of traditional data placement. The benefits of version-aware are more prominent on the scan workloads in Figure <FONT color=#0000ff><A href="file:///C:/SuperMemo/systems/Incremental/temp/HTMLFile.htm#_bookmark14"><FONT color=#000080>13</FONT></A> </FONT>(c),<SPAN style="LETTER-SPACING: -0.6pt"> </SPAN>where the scalable version-aware data placement&#8217;s throughput is 2<FONT face="SimSun-ExtB, serif">&#215;</FONT><FONT face="SimSun-ExtB, serif"><SPAN style="LETTER-SPACING: -1.4pt"> </SPAN></FONT>higher than that of traditional data placement. The performance improvements are mainly due to index-only visibility checks.</P>
<P class=western style="MARGIN-LEFT: 0.22in; LINE-HEIGHT: 98%; MARGIN-RIGHT: 0.56in; TEXT-INDENT: 0.21in" align=justify>On the read-mostly workload, the scalable version-aware data placement outper- forms the traditional data placement by 33%. By skipping the unnecessary version accesses and checking through the range partition and epoch partition, readers can traverse the version chain faster than the traditional data placement.</P>
<OL>
<OL start=2>
<LI>